{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4","program":"/home/hskang9/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","lock_api","/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=c1344aa432af0e4f","-C","extra-filename=-c1344aa432af0e4f","--out-dir","/home/hskang9/terra-contracts/erc721/target/rls/debug/deps","-L","dependency=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps","--extern","scopeguard=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libscopeguard-4c75061aac558492.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hskang9/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/liblock_api-c1344aa432af0e4f.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[14138915785571630305,2917700451784640056]},"crate_root":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src","external_crates":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[5788148283702136120,7382424715687902467]}}],"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":333,"byte_end":4033,"line_start":8,"line_end":109,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3907,"byte_end":3908,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3907,"byte_end":3908,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3907,"byte_end":3908,"line_start":100,"line_end":100,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":333,"byte_end":4033,"line_start":8,"line_end":109,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":878}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3551,"byte_end":3561,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3562,"byte_end":3584,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3585,"byte_end":3611,"line_start":90,"line_end":90,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":14},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3790,"byte_end":3799,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/lib.rs","byte_start":3895,"byte_end":3906,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":4979,"byte_end":4987,"line_start":29,"line_end":29,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":29},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5290,"byte_end":5294,"line_start":34,"line_end":34,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5231,"byte_end":5279,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5459,"byte_end":5470,"line_start":38,"line_end":38,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5564,"byte_end":5568,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"fn (&self) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5726,"byte_end":5734,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"fn (&self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking. Returns `true`\n if the lock was successfully acquired and `false` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":5787,"byte_end":5793,"line_start":48,"line_end":48,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"fn (&self) -> ()","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6185,"byte_end":6197,"line_start":57,"line_end":57,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6274,"byte_end":6285,"line_start":59,"line_end":59,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6578,"byte_end":6582,"line_start":66,"line_end":66,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"fn (&self) -> ()","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6880,"byte_end":6893,"line_start":76,"line_end":76,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6962,"byte_end":6970,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7030,"byte_end":7037,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7113,"byte_end":7125,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7241,"byte_end":7255,"line_start":87,"line_end":87,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7809,"byte_end":7814,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8436,"byte_end":8439,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"fn (val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8378,"byte_end":8410,"line_start":118,"line_end":118,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8415,"byte_end":8424,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8649,"byte_end":8659,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8628,"byte_end":8637,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8915,"byte_end":8924,"line_start":139,"line_end":139,"column_start":18,"column_end":27},"name":"const_new","qualname":"<Mutex<R, T>>::const_new","value":"fn (raw_mutex: R, val: T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex based on a pre-existing raw mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8888,"byte_end":8897,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9896,"byte_end":9900,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"fn (&self) -> MutexGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9875,"byte_end":9884,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10354,"byte_end":10362,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"fn (&self) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10333,"byte_end":10342,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10835,"byte_end":10842,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":10814,"byte_end":10823,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11426,"byte_end":11438,"line_start":213,"line_end":213,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11398,"byte_end":11407,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11875,"byte_end":11878,"line_start":227,"line_end":227,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11847,"byte_end":11856,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12509,"byte_end":12526,"line_start":245,"line_end":245,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12481,"byte_end":12490,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12926,"byte_end":12938,"line_start":257,"line_end":257,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12905,"byte_end":12914,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13494,"byte_end":13508,"line_start":272,"line_end":272,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<MutexGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13473,"byte_end":13482,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15716,"byte_end":15726,"line_start":351,"line_end":351,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15645,"byte_end":15704,"line_start":350,"line_end":350,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16077,"byte_end":16082,"line_start":360,"line_end":360,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"fn (s: &Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16547,"byte_end":16550,"line_start":373,"line_end":373,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":16526,"byte_end":16535,"line_start":372,"line_end":372,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17385,"byte_end":17392,"line_start":397,"line_end":397,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":17364,"byte_end":17373,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18073,"byte_end":18081,"line_start":419,"line_end":419,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18052,"byte_end":18061,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19097,"byte_end":19108,"line_start":443,"line_end":443,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19076,"byte_end":19085,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19484,"byte_end":19497,"line_start":455,"line_end":455,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19463,"byte_end":19472,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19962,"byte_end":19966,"line_start":470,"line_end":470,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":19941,"byte_end":19950,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":155},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21512,"byte_end":21528,"line_start":520,"line_end":520,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the Mutex will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21441,"byte_end":21500,"line_start":519,"line_end":519,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22356,"byte_end":22359,"line_start":545,"line_end":545,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedMutexGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":22335,"byte_end":22344,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23187,"byte_end":23194,"line_start":569,"line_end":569,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedMutexGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make a new `MappedMutexGuard` for a component of the\n locked data. The original guard is returned if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23166,"byte_end":23175,"line_start":568,"line_end":568,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24489,"byte_end":24500,"line_start":601,"line_end":601,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24468,"byte_end":24477,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":231},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":26783,"byte_end":26794,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":232},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27075,"byte_end":27079,"line_start":43,"line_end":43,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27016,"byte_end":27064,"line_start":42,"line_end":42,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27190,"byte_end":27207,"line_start":47,"line_end":47,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"fn (&self) -> NonZeroUsize","parent":{"krate":0,"index":231},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":263},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30057,"byte_end":30071,"line_start":148,"line_end":148,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31051,"byte_end":31054,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"fn (val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30993,"byte_end":31025,"line_start":179,"line_end":179,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31030,"byte_end":31039,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31469,"byte_end":31479,"line_start":195,"line_end":195,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31448,"byte_end":31457,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31820,"byte_end":31829,"line_start":207,"line_end":207,"column_start":18,"column_end":27},"name":"const_new","qualname":"<ReentrantMutex<R, G, T>>::const_new","value":"fn (raw_mutex: R, get_thread_id: G, val: T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex based on a pre-existing raw mutex and a\n helper to get the thread ID.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31793,"byte_end":31802,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33168,"byte_end":33172,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"fn (&self) -> ReentrantMutexGuard<'_, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33147,"byte_end":33156,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33638,"byte_end":33646,"line_start":257,"line_end":257,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"fn (&self) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":33617,"byte_end":33626,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34140,"byte_end":34147,"line_start":271,"line_end":271,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34119,"byte_end":34128,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34749,"byte_end":34761,"line_start":287,"line_end":287,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":34721,"byte_end":34730,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35207,"byte_end":35210,"line_start":301,"line_end":301,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35179,"byte_end":35188,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35893,"byte_end":35910,"line_start":319,"line_end":319,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35865,"byte_end":35874,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36338,"byte_end":36350,"line_start":331,"line_end":331,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"fn (&self, timeout: R::Duration) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36317,"byte_end":36326,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36918,"byte_end":36932,"line_start":346,"line_end":346,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"fn (&self, timeout: R::Instant) -> Option<ReentrantMutexGuard<'_, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36897,"byte_end":36906,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":328},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39429,"byte_end":39448,"line_start":430,"line_end":430,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39349,"byte_end":39417,"line_start":429,"line_end":429,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39909,"byte_end":39916,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"fn (s: &Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40422,"byte_end":40425,"line_start":455,"line_end":455,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":40401,"byte_end":40410,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41295,"byte_end":41302,"line_start":479,"line_end":479,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":41274,"byte_end":41283,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42031,"byte_end":42039,"line_start":504,"line_end":504,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42010,"byte_end":42019,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43105,"byte_end":43116,"line_start":530,"line_end":530,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43084,"byte_end":43093,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43488,"byte_end":43501,"line_start":542,"line_end":542,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43467,"byte_end":43476,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43970,"byte_end":43974,"line_start":557,"line_end":557,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":43949,"byte_end":43958,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":390},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45559,"byte_end":45584,"line_start":611,"line_end":611,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the ReentrantMutex will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45479,"byte_end":45547,"line_start":610,"line_end":610,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46431,"byte_end":46434,"line_start":634,"line_end":634,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedReentrantMutexGuard<'a, R, G, U>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":46410,"byte_end":46419,"line_start":633,"line_end":633,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47293,"byte_end":47300,"line_start":658,"line_end":658,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedReentrantMutexGuard<'a, R, G, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47272,"byte_end":47281,"line_start":657,"line_end":657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48673,"byte_end":48684,"line_start":695,"line_end":695,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48652,"byte_end":48661,"line_start":694,"line_end":694,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":454},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":50880,"byte_end":50889,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":455},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51195,"byte_end":51199,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51136,"byte_end":51184,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":456},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51364,"byte_end":51375,"line_start":40,"line_end":40,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51472,"byte_end":51483,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51560,"byte_end":51575,"line_start":46,"line_end":46,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"fn (&self) -> bool","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51632,"byte_end":51645,"line_start":49,"line_end":49,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51753,"byte_end":51767,"line_start":52,"line_end":52,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51848,"byte_end":51866,"line_start":55,"line_end":55,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"fn (&self) -> bool","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":51927,"byte_end":51943,"line_start":58,"line_end":58,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":454},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":463},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52335,"byte_end":52348,"line_start":67,"line_end":67,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52430,"byte_end":52448,"line_start":69,"line_end":69,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52530,"byte_end":52551,"line_start":72,"line_end":72,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52862,"byte_end":52873,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"fn (&self) -> ()","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53264,"byte_end":53278,"line_start":89,"line_end":89,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"fn (&self) -> ()","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":468},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53495,"byte_end":53513,"line_start":97,"line_end":97,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53680,"byte_end":53689,"line_start":100,"line_end":100,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":470},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53931,"byte_end":53945,"line_start":107,"line_end":107,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":471},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54015,"byte_end":54023,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":472},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54083,"byte_end":54090,"line_start":112,"line_end":112,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54170,"byte_end":54189,"line_start":115,"line_end":115,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54309,"byte_end":54330,"line_start":118,"line_end":118,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54453,"byte_end":54475,"line_start":121,"line_end":121,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":54599,"byte_end":54623,"line_start":124,"line_end":124,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":477},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55056,"byte_end":55074,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55175,"byte_end":55196,"line_start":136,"line_end":136,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"fn (&self) -> ()","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55304,"byte_end":55329,"line_start":139,"line_end":139,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"fn (&self) -> bool","parent":{"krate":0,"index":477},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55450,"byte_end":55473,"line_start":143,"line_end":143,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55647,"byte_end":55676,"line_start":146,"line_end":146,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55853,"byte_end":55884,"line_start":150,"line_end":150,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":483},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56260,"byte_end":56276,"line_start":159,"line_end":159,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56389,"byte_end":56404,"line_start":161,"line_end":161,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56486,"byte_end":56505,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"fn (&self) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56567,"byte_end":56584,"line_start":167,"line_end":167,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56659,"byte_end":56666,"line_start":170,"line_end":170,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"fn (&self) -> ()","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56777,"byte_end":56788,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"fn (&self) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":489},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56915,"byte_end":56935,"line_start":179,"line_end":179,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57045,"byte_end":57067,"line_start":181,"line_end":181,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"fn (&self) -> ()","parent":{"krate":0,"index":489},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57391,"byte_end":57406,"line_start":188,"line_end":188,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":489},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57605,"byte_end":57630,"line_start":196,"line_end":196,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57735,"byte_end":57755,"line_start":198,"line_end":198,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57832,"byte_end":57855,"line_start":201,"line_end":201,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"fn (&self) -> ()","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":495},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57981,"byte_end":58002,"line_start":206,"line_end":206,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58122,"byte_end":58145,"line_start":208,"line_end":208,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58270,"byte_end":58295,"line_start":211,"line_end":211,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58448,"byte_end":58463,"line_start":215,"line_end":215,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"fn (&self, timeout: Self::Duration) -> bool","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58617,"byte_end":58634,"line_start":219,"line_end":219,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"fn (&self, timeout: Self::Instant) -> bool","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":59386,"byte_end":59392,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60667,"byte_end":60670,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"fn (val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"cfg(not (feature = \"nightly\"))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60609,"byte_end":60641,"line_start":283,"line_end":283,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60646,"byte_end":60655,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60913,"byte_end":60923,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60864,"byte_end":60873,"line_start":293,"line_end":293,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60878,"byte_end":60901,"line_start":294,"line_end":294,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61243,"byte_end":61252,"line_start":307,"line_end":307,"column_start":18,"column_end":27},"name":"const_new","qualname":"<RwLock<R, T>>::const_new","value":"fn (raw_rwlock: R, val: T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new new instance of an `RwLock<T>` based on a pre-existing\n `RawRwLock<T>`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61216,"byte_end":61225,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62579,"byte_end":62583,"line_start":351,"line_end":351,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":62558,"byte_end":62567,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63086,"byte_end":63094,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63065,"byte_end":63074,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63713,"byte_end":63718,"line_start":383,"line_end":383,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"fn (&self) -> RwLockWriteGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":63692,"byte_end":63701,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64217,"byte_end":64226,"line_start":397,"line_end":397,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"fn (&self) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64196,"byte_end":64205,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64722,"byte_end":64729,"line_start":411,"line_end":411,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":64701,"byte_end":64710,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65336,"byte_end":65353,"line_start":427,"line_end":427,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65308,"byte_end":65317,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65944,"byte_end":65962,"line_start":443,"line_end":443,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":65916,"byte_end":65925,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66428,"byte_end":66431,"line_start":457,"line_end":457,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67087,"byte_end":67109,"line_start":475,"line_end":475,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67059,"byte_end":67068,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67734,"byte_end":67757,"line_start":491,"line_end":491,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67706,"byte_end":67715,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68209,"byte_end":68221,"line_start":504,"line_end":504,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68188,"byte_end":68197,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68834,"byte_end":68848,"line_start":520,"line_end":520,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":68813,"byte_end":68822,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69469,"byte_end":69482,"line_start":536,"line_end":536,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":69448,"byte_end":69457,"line_start":535,"line_end":535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70107,"byte_end":70122,"line_start":552,"line_end":552,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockWriteGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70086,"byte_end":70095,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71253,"byte_end":71267,"line_start":579,"line_end":579,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"fn (&self) -> RwLockReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71232,"byte_end":71241,"line_start":578,"line_end":578,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71951,"byte_end":71969,"line_start":596,"line_end":596,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"fn (&self) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":71930,"byte_end":71939,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72816,"byte_end":72838,"line_start":618,"line_end":618,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72795,"byte_end":72804,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73484,"byte_end":73508,"line_start":637,"line_end":637,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73463,"byte_end":73472,"line_start":636,"line_end":636,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74636,"byte_end":74651,"line_start":672,"line_end":672,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"fn (&self) -> RwLockUpgradableReadGuard<'_, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":74615,"byte_end":74624,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75178,"byte_end":75197,"line_start":686,"line_end":686,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"fn (&self) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75157,"byte_end":75166,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75860,"byte_end":75883,"line_start":704,"line_end":704,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"fn (&self, timeout: R::Duration) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75839,"byte_end":75848,"line_start":703,"line_end":703,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76543,"byte_end":76568,"line_start":723,"line_end":723,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"fn (&self, timeout: R::Instant) -> Option<RwLockUpgradableReadGuard<'_, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76522,"byte_end":76531,"line_start":722,"line_end":722,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":582},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78041,"byte_end":78056,"line_start":773,"line_end":773,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77969,"byte_end":78029,"line_start":772,"line_end":772,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78422,"byte_end":78428,"line_start":782,"line_end":782,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78908,"byte_end":78911,"line_start":795,"line_end":795,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78887,"byte_end":78896,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79755,"byte_end":79762,"line_start":819,"line_end":819,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":79734,"byte_end":79743,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80514,"byte_end":80522,"line_start":843,"line_end":843,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80493,"byte_end":80502,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81580,"byte_end":81591,"line_start":867,"line_end":867,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81559,"byte_end":81568,"line_start":866,"line_end":866,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81978,"byte_end":81991,"line_start":879,"line_end":879,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":81957,"byte_end":81966,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82475,"byte_end":82479,"line_start":894,"line_end":894,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82454,"byte_end":82463,"line_start":893,"line_end":893,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":636},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83613,"byte_end":83629,"line_start":934,"line_end":934,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83541,"byte_end":83601,"line_start":933,"line_end":933,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84001,"byte_end":84007,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84490,"byte_end":84493,"line_start":956,"line_end":956,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":84469,"byte_end":84478,"line_start":955,"line_end":955,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85354,"byte_end":85361,"line_start":980,"line_end":980,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":85333,"byte_end":85342,"line_start":979,"line_end":979,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86062,"byte_end":86070,"line_start":1002,"line_end":1002,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86041,"byte_end":86050,"line_start":1001,"line_end":1001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86681,"byte_end":86690,"line_start":1019,"line_end":1019,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87365,"byte_end":87388,"line_start":1037,"line_end":1037,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"fn (s: Self) -> RwLockUpgradableReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88533,"byte_end":88544,"line_start":1062,"line_end":1062,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88512,"byte_end":88521,"line_start":1061,"line_end":1061,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88934,"byte_end":88947,"line_start":1074,"line_end":1074,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":88913,"byte_end":88922,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89438,"byte_end":89442,"line_start":1089,"line_end":1089,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89417,"byte_end":89426,"line_start":1088,"line_end":1088,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":705},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90784,"byte_end":90809,"line_start":1136,"line_end":1136,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90712,"byte_end":90772,"line_start":1135,"line_end":1135,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91221,"byte_end":91227,"line_start":1148,"line_end":1148,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"fn (s: &Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91520,"byte_end":91528,"line_start":1157,"line_end":1157,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91499,"byte_end":91508,"line_start":1156,"line_end":1156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91870,"byte_end":91877,"line_start":1168,"line_end":1168,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"fn (s: Self) -> RwLockWriteGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92304,"byte_end":92315,"line_start":1181,"line_end":1181,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"fn (s: Self) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93547,"byte_end":93558,"line_start":1209,"line_end":1209,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93526,"byte_end":93535,"line_start":1208,"line_end":1208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93949,"byte_end":93962,"line_start":1221,"line_end":1221,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"fn <F, U> (s: &mut Self, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":93928,"byte_end":93937,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94465,"byte_end":94469,"line_start":1236,"line_end":1236,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"fn (s: &mut Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94444,"byte_end":94453,"line_start":1235,"line_end":1235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95010,"byte_end":95019,"line_start":1249,"line_end":1249,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"fn (s: Self) -> RwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95611,"byte_end":95626,"line_start":1266,"line_end":1266,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"fn (s: Self, timeout: R::Duration) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96277,"byte_end":96294,"line_start":1288,"line_end":1288,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"fn (s: Self, timeout: R::Instant) -> Result<RwLockWriteGuard<'a, R, T>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96256,"byte_end":96265,"line_start":1287,"line_end":1287,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98139,"byte_end":98160,"line_start":1350,"line_end":1350,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98067,"byte_end":98127,"line_start":1349,"line_end":1349,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99006,"byte_end":99009,"line_start":1372,"line_end":1372,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockReadGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98985,"byte_end":98994,"line_start":1371,"line_end":1371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99844,"byte_end":99851,"line_start":1396,"line_end":1396,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockReadGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":99823,"byte_end":99832,"line_start":1395,"line_end":1395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101176,"byte_end":101187,"line_start":1428,"line_end":1428,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101155,"byte_end":101164,"line_start":1427,"line_end":1427,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":817},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102657,"byte_end":102679,"line_start":1479,"line_end":1479,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"must_use = \"if unused the RwLock will immediately unlock\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102585,"byte_end":102645,"line_start":1478,"line_end":1478,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103538,"byte_end":103541,"line_start":1504,"line_end":1504,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"fn <U, F> (s: Self, f: F) -> MappedRwLockWriteGuard<'a, R, U>","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103517,"byte_end":103526,"line_start":1503,"line_end":1503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104393,"byte_end":104400,"line_start":1528,"line_end":1528,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"fn <U, F> (s: Self, f: F) -> Result<MappedRwLockWriteGuard<'a, R, U>, Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104372,"byte_end":104381,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105422,"byte_end":105431,"line_start":1557,"line_end":1557,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"fn (s: Self) -> MappedRwLockReadGuard<'a, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"deprecated(since = \"0.3.3\", note =\n             \"This function is unsound and will be removed in the future, see issue #198\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105273,"byte_end":105410,"line_start":1553,"line_end":1556,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106595,"byte_end":106606,"line_start":1584,"line_end":1584,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"fn (s: Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106574,"byte_end":106583,"line_start":1583,"line_end":1583,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7930,"byte_end":7935,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8004,"byte_end":8009,"line_start":104,"line_end":104,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8041,"byte_end":8046,"line_start":106,"line_end":106,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8724,"byte_end":8729,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9096,"byte_end":9101,"line_start":147,"line_end":147,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11954,"byte_end":11959,"line_start":232,"line_end":232,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12611,"byte_end":12616,"line_start":250,"line_end":250,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13817,"byte_end":13822,"line_start":282,"line_end":282,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13960,"byte_end":13965,"line_start":289,"line_end":289,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14111,"byte_end":14116,"line_start":296,"line_end":296,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14405,"byte_end":14422,"line_start":302,"line_end":302,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15915,"byte_end":15925,"line_start":356,"line_end":356,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15983,"byte_end":15993,"line_start":358,"line_end":358,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18289,"byte_end":18299,"line_start":429,"line_end":429,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20073,"byte_end":20083,"line_start":475,"line_end":475,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20267,"byte_end":20277,"line_start":483,"line_end":483,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20452,"byte_end":20462,"line_start":490,"line_end":490,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20627,"byte_end":20637,"line_start":497,"line_end":497,"column_start":72,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20833,"byte_end":20843,"line_start":503,"line_end":503,"column_start":76,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21709,"byte_end":21725,"line_start":527,"line_end":527,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21799,"byte_end":21815,"line_start":530,"line_end":530,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21905,"byte_end":21921,"line_start":535,"line_end":535,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23675,"byte_end":23691,"line_start":587,"line_end":587,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24627,"byte_end":24643,"line_start":607,"line_end":607,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24815,"byte_end":24831,"line_start":615,"line_end":615,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24994,"byte_end":25010,"line_start":622,"line_end":622,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25169,"byte_end":25185,"line_start":629,"line_end":629,"column_start":72,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25385,"byte_end":25401,"line_start":636,"line_end":636,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27394,"byte_end":27411,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":28640,"byte_end":28657,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29263,"byte_end":29280,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30239,"byte_end":30253,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30353,"byte_end":30367,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30419,"byte_end":30433,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31547,"byte_end":31561,"line_start":200,"line_end":200,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32231,"byte_end":32245,"line_start":220,"line_end":220,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35308,"byte_end":35322,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36011,"byte_end":36025,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37269,"byte_end":37283,"line_start":356,"line_end":356,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37461,"byte_end":37475,"line_start":363,"line_end":363,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37661,"byte_end":37675,"line_start":370,"line_end":370,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":38027,"byte_end":38044,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39692,"byte_end":39711,"line_start":436,"line_end":436,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39794,"byte_end":39813,"line_start":440,"line_end":440,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42276,"byte_end":42295,"line_start":515,"line_end":515,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44108,"byte_end":44127,"line_start":563,"line_end":563,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44337,"byte_end":44356,"line_start":573,"line_end":573,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44551,"byte_end":44570,"line_start":582,"line_end":582,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44794,"byte_end":44813,"line_start":590,"line_end":590,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45829,"byte_end":45854,"line_start":618,"line_end":618,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45941,"byte_end":45966,"line_start":623,"line_end":623,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47838,"byte_end":47863,"line_start":680,"line_end":680,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48836,"byte_end":48861,"line_start":702,"line_end":702,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49057,"byte_end":49082,"line_start":712,"line_end":712,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49269,"byte_end":49294,"line_start":721,"line_end":721,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49518,"byte_end":49543,"line_start":729,"line_end":729,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60139,"byte_end":60145,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60222,"byte_end":60228,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60261,"byte_end":60267,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60999,"byte_end":61005,"line_start":300,"line_end":300,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61429,"byte_end":61435,"line_start":315,"line_end":315,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66508,"byte_end":66514,"line_start":462,"line_end":462,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67853,"byte_end":67859,"line_start":496,"line_end":496,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70441,"byte_end":70447,"line_start":562,"line_end":562,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72264,"byte_end":72270,"line_start":606,"line_end":606,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73853,"byte_end":73859,"line_start":650,"line_end":650,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75500,"byte_end":75506,"line_start":696,"line_end":696,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76938,"byte_end":76944,"line_start":736,"line_end":736,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77085,"byte_end":77091,"line_start":743,"line_end":743,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77240,"byte_end":77246,"line_start":750,"line_end":750,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77536,"byte_end":77553,"line_start":756,"line_end":756,"column_start":37,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78238,"byte_end":78253,"line_start":778,"line_end":778,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78312,"byte_end":78327,"line_start":780,"line_end":780,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80747,"byte_end":80762,"line_start":853,"line_end":853,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82595,"byte_end":82610,"line_start":899,"line_end":899,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82792,"byte_end":82807,"line_start":907,"line_end":907,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82981,"byte_end":82996,"line_start":914,"line_end":914,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83197,"byte_end":83212,"line_start":921,"line_end":921,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83815,"byte_end":83831,"line_start":939,"line_end":939,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83890,"byte_end":83906,"line_start":941,"line_end":941,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86306,"byte_end":86322,"line_start":1012,"line_end":1012,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86978,"byte_end":86994,"line_start":1030,"line_end":1030,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87698,"byte_end":87714,"line_start":1048,"line_end":1048,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89561,"byte_end":89577,"line_start":1094,"line_end":1094,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89763,"byte_end":89779,"line_start":1102,"line_end":1102,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89956,"byte_end":89972,"line_start":1109,"line_end":1109,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90149,"byte_end":90165,"line_start":1116,"line_end":1116,"column_start":73,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90366,"byte_end":90382,"line_start":1123,"line_end":1123,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91009,"byte_end":91034,"line_start":1142,"line_end":1142,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91101,"byte_end":91126,"line_start":1146,"line_end":1146,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92694,"byte_end":92719,"line_start":1195,"line_end":1195,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94595,"byte_end":94620,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95314,"byte_end":95339,"line_start":1260,"line_end":1260,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96736,"byte_end":96761,"line_start":1305,"line_end":1305,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96950,"byte_end":96975,"line_start":1313,"line_end":1313,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97164,"byte_end":97189,"line_start":1321,"line_end":1321,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97397,"byte_end":97422,"line_start":1329,"line_end":1329,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98330,"byte_end":98351,"line_start":1356,"line_end":1356,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98425,"byte_end":98446,"line_start":1357,"line_end":1357,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98537,"byte_end":98558,"line_start":1362,"line_end":1362,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100331,"byte_end":100352,"line_start":1414,"line_end":1414,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101322,"byte_end":101343,"line_start":1434,"line_end":1434,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101512,"byte_end":101533,"line_start":1442,"line_end":1442,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101704,"byte_end":101725,"line_start":1450,"line_end":1450,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101926,"byte_end":101947,"line_start":1458,"line_end":1458,"column_start":9,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102855,"byte_end":102877,"line_start":1486,"line_end":1486,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102952,"byte_end":102974,"line_start":1489,"line_end":1489,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103065,"byte_end":103087,"line_start":1494,"line_end":1494,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104899,"byte_end":104921,"line_start":1546,"line_end":1546,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105748,"byte_end":105770,"line_start":1570,"line_end":1570,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106744,"byte_end":106766,"line_start":1590,"line_end":1590,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106939,"byte_end":106961,"line_start":1598,"line_end":1598,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107125,"byte_end":107147,"line_start":1605,"line_end":1605,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107321,"byte_end":107343,"line_start":1613,"line_end":1613,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107544,"byte_end":107566,"line_start":1621,"line_end":1621,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6199,"byte_end":6207,"line_start":57,"line_end":57,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":34}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":6895,"byte_end":6903,"line_start":76,"line_end":76,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":28},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":7930,"byte_end":7935,"line_start":103,"line_end":103,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8004,"byte_end":8009,"line_start":104,"line_end":104,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8041,"byte_end":8046,"line_start":106,"line_end":106,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":8724,"byte_end":8729,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":9096,"byte_end":9101,"line_start":147,"line_end":147,"column_start":30,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":11954,"byte_end":11959,"line_start":232,"line_end":232,"column_start":34,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":12611,"byte_end":12616,"line_start":250,"line_end":250,"column_start":35,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13817,"byte_end":13822,"line_start":282,"line_end":282,"column_start":52,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":13960,"byte_end":13965,"line_start":289,"line_end":289,"column_start":34,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14111,"byte_end":14116,"line_start":296,"line_end":296,"column_start":58,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":42},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":14405,"byte_end":14422,"line_start":302,"line_end":302,"column_start":37,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15915,"byte_end":15925,"line_start":356,"line_end":356,"column_start":74,"column_end":84},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":15983,"byte_end":15993,"line_start":358,"line_end":358,"column_start":44,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":18289,"byte_end":18299,"line_start":429,"line_end":429,"column_start":48,"column_end":58},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20073,"byte_end":20083,"line_start":475,"line_end":475,"column_start":54,"column_end":64},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20267,"byte_end":20277,"line_start":483,"line_end":483,"column_start":57,"column_end":67},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20452,"byte_end":20462,"line_start":490,"line_end":490,"column_start":53,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20627,"byte_end":20637,"line_start":497,"line_end":497,"column_start":72,"column_end":82},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":20833,"byte_end":20843,"line_start":503,"line_end":503,"column_start":76,"column_end":86},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":96},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21709,"byte_end":21725,"line_start":527,"line_end":527,"column_start":9,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21799,"byte_end":21815,"line_start":530,"line_end":530,"column_start":60,"column_end":76},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":21905,"byte_end":21921,"line_start":535,"line_end":535,"column_start":44,"column_end":60},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":23675,"byte_end":23691,"line_start":587,"line_end":587,"column_start":48,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24627,"byte_end":24643,"line_start":607,"line_end":607,"column_start":54,"column_end":70},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24815,"byte_end":24831,"line_start":615,"line_end":615,"column_start":57,"column_end":73},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":24994,"byte_end":25010,"line_start":622,"line_end":622,"column_start":53,"column_end":69},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25169,"byte_end":25185,"line_start":629,"line_end":629,"column_start":72,"column_end":88},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/mutex.rs","byte_start":25385,"byte_end":25401,"line_start":636,"line_end":636,"column_start":9,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":155},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":27394,"byte_end":27411,"line_start":57,"line_end":57,"column_start":35,"column_end":52},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":28640,"byte_end":28657,"line_start":103,"line_end":103,"column_start":39,"column_end":56},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":29263,"byte_end":29280,"line_start":125,"line_end":125,"column_start":40,"column_end":57},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30239,"byte_end":30253,"line_start":154,"line_end":154,"column_start":9,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":263},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30353,"byte_end":30367,"line_start":158,"line_end":158,"column_start":9,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":263},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":30419,"byte_end":30433,"line_start":162,"line_end":162,"column_start":38,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":31547,"byte_end":31561,"line_start":200,"line_end":200,"column_start":15,"column_end":29},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":32231,"byte_end":32245,"line_start":220,"line_end":220,"column_start":46,"column_end":60},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":35308,"byte_end":35322,"line_start":306,"line_end":306,"column_start":50,"column_end":64},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":36011,"byte_end":36025,"line_start":324,"line_end":324,"column_start":51,"column_end":65},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37269,"byte_end":37283,"line_start":356,"line_end":356,"column_start":68,"column_end":82},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":263},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37461,"byte_end":37475,"line_start":363,"line_end":363,"column_start":50,"column_end":64},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":263},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":37661,"byte_end":37675,"line_start":370,"line_end":370,"column_start":74,"column_end":88},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":263},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":38027,"byte_end":38044,"line_start":379,"line_end":379,"column_start":37,"column_end":54},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":324},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39692,"byte_end":39711,"line_start":436,"line_end":436,"column_start":9,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":39794,"byte_end":39813,"line_start":440,"line_end":440,"column_start":65,"column_end":84},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":42276,"byte_end":42295,"line_start":515,"line_end":515,"column_start":5,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44108,"byte_end":44127,"line_start":563,"line_end":563,"column_start":9,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44337,"byte_end":44356,"line_start":573,"line_end":573,"column_start":9,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44551,"byte_end":44570,"line_start":582,"line_end":582,"column_start":9,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":44794,"byte_end":44813,"line_start":590,"line_end":590,"column_start":9,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":328},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45829,"byte_end":45854,"line_start":618,"line_end":618,"column_start":9,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":390},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":45941,"byte_end":45966,"line_start":623,"line_end":623,"column_start":5,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":47838,"byte_end":47863,"line_start":680,"line_end":680,"column_start":5,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":48836,"byte_end":48861,"line_start":702,"line_end":702,"column_start":9,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":390},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49057,"byte_end":49082,"line_start":712,"line_end":712,"column_start":9,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":390},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49269,"byte_end":49294,"line_start":721,"line_end":721,"column_start":9,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":390},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/remutex.rs","byte_start":49518,"byte_end":49543,"line_start":729,"line_end":729,"column_start":9,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":390},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":52350,"byte_end":52359,"line_start":67,"line_end":67,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53515,"byte_end":53524,"line_start":97,"line_end":97,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":468}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":53947,"byte_end":53956,"line_start":107,"line_end":107,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":470}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55076,"byte_end":55085,"line_start":134,"line_end":134,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":477}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55475,"byte_end":55493,"line_start":143,"line_end":143,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":477},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":55496,"byte_end":55510,"line_start":143,"line_end":143,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":480}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56278,"byte_end":56287,"line_start":159,"line_end":159,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":483}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56937,"byte_end":56953,"line_start":179,"line_end":179,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":483},"to":{"krate":0,"index":489}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":56956,"byte_end":56969,"line_start":179,"line_end":179,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":463},"to":{"krate":0,"index":489}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57632,"byte_end":57648,"line_start":196,"line_end":196,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":483},"to":{"krate":0,"index":492}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":57651,"byte_end":57669,"line_start":196,"line_end":196,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":468},"to":{"krate":0,"index":492}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58004,"byte_end":58020,"line_start":206,"line_end":206,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":483},"to":{"krate":0,"index":495}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":58023,"byte_end":58037,"line_start":206,"line_end":206,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":495}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60139,"byte_end":60145,"line_start":268,"line_end":268,"column_start":61,"column_end":67},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60222,"byte_end":60228,"line_start":269,"line_end":269,"column_start":68,"column_end":74},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60261,"byte_end":60267,"line_start":271,"line_end":271,"column_start":23,"column_end":29},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":60999,"byte_end":61005,"line_start":300,"line_end":300,"column_start":12,"column_end":18},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":61429,"byte_end":61435,"line_start":315,"line_end":315,"column_start":31,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":66508,"byte_end":66514,"line_start":462,"line_end":462,"column_start":35,"column_end":41},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":67853,"byte_end":67859,"line_start":496,"line_end":496,"column_start":36,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":70441,"byte_end":70447,"line_start":562,"line_end":562,"column_start":40,"column_end":46},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":72264,"byte_end":72270,"line_start":606,"line_end":606,"column_start":45,"column_end":51},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":73853,"byte_end":73859,"line_start":650,"line_end":650,"column_start":38,"column_end":44},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":75500,"byte_end":75506,"line_start":696,"line_end":696,"column_start":43,"column_end":49},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":76938,"byte_end":76944,"line_start":736,"line_end":736,"column_start":53,"column_end":59},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77085,"byte_end":77091,"line_start":743,"line_end":743,"column_start":35,"column_end":41},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77240,"byte_end":77246,"line_start":750,"line_end":750,"column_start":59,"column_end":65},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":77536,"byte_end":77553,"line_start":756,"line_end":756,"column_start":37,"column_end":54},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":578},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78238,"byte_end":78253,"line_start":778,"line_end":778,"column_start":68,"column_end":83},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":582},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":78312,"byte_end":78327,"line_start":780,"line_end":780,"column_start":45,"column_end":60},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":80747,"byte_end":80762,"line_start":853,"line_end":853,"column_start":49,"column_end":64},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82595,"byte_end":82610,"line_start":899,"line_end":899,"column_start":55,"column_end":70},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":582},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82792,"byte_end":82807,"line_start":907,"line_end":907,"column_start":54,"column_end":69},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":582},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":82981,"byte_end":82996,"line_start":914,"line_end":914,"column_start":73,"column_end":88},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":582},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83197,"byte_end":83212,"line_start":921,"line_end":921,"column_start":9,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":582},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83815,"byte_end":83831,"line_start":939,"line_end":939,"column_start":68,"column_end":84},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":83890,"byte_end":83906,"line_start":941,"line_end":941,"column_start":45,"column_end":61},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86306,"byte_end":86322,"line_start":1012,"line_end":1012,"column_start":54,"column_end":70},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":86978,"byte_end":86994,"line_start":1030,"line_end":1030,"column_start":61,"column_end":77},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":87698,"byte_end":87714,"line_start":1048,"line_end":1048,"column_start":49,"column_end":65},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89561,"byte_end":89577,"line_start":1094,"line_end":1094,"column_start":55,"column_end":71},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89763,"byte_end":89779,"line_start":1102,"line_end":1102,"column_start":58,"column_end":74},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":89956,"byte_end":89972,"line_start":1109,"line_end":1109,"column_start":54,"column_end":70},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90149,"byte_end":90165,"line_start":1116,"line_end":1116,"column_start":73,"column_end":89},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":90366,"byte_end":90382,"line_start":1123,"line_end":1123,"column_start":9,"column_end":25},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":636},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91009,"byte_end":91034,"line_start":1142,"line_end":1142,"column_start":9,"column_end":34},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":91101,"byte_end":91126,"line_start":1146,"line_end":1146,"column_start":52,"column_end":77},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":92694,"byte_end":92719,"line_start":1195,"line_end":1195,"column_start":56,"column_end":81},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":94595,"byte_end":94620,"line_start":1241,"line_end":1241,"column_start":61,"column_end":86},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":95314,"byte_end":95339,"line_start":1260,"line_end":1260,"column_start":57,"column_end":82},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96736,"byte_end":96761,"line_start":1305,"line_end":1305,"column_start":62,"column_end":87},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":96950,"byte_end":96975,"line_start":1313,"line_end":1313,"column_start":61,"column_end":86},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97164,"byte_end":97189,"line_start":1321,"line_end":1321,"column_start":9,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":97397,"byte_end":97422,"line_start":1329,"line_end":1329,"column_start":9,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":705},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98330,"byte_end":98351,"line_start":1356,"line_end":1356,"column_start":68,"column_end":89},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":766},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98425,"byte_end":98446,"line_start":1357,"line_end":1357,"column_start":61,"column_end":82},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":766},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":98537,"byte_end":98558,"line_start":1362,"line_end":1362,"column_start":45,"column_end":66},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":100331,"byte_end":100352,"line_start":1414,"line_end":1414,"column_start":49,"column_end":70},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101322,"byte_end":101343,"line_start":1434,"line_end":1434,"column_start":55,"column_end":76},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":766},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101512,"byte_end":101533,"line_start":1442,"line_end":1442,"column_start":54,"column_end":75},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":766},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101704,"byte_end":101725,"line_start":1450,"line_end":1450,"column_start":9,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":766},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":101926,"byte_end":101947,"line_start":1458,"line_end":1458,"column_start":9,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":766},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102855,"byte_end":102877,"line_start":1486,"line_end":1486,"column_start":9,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":1544}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":102952,"byte_end":102974,"line_start":1489,"line_end":1489,"column_start":61,"column_end":83},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":1534}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":103065,"byte_end":103087,"line_start":1494,"line_end":1494,"column_start":45,"column_end":67},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":104899,"byte_end":104921,"line_start":1546,"line_end":1546,"column_start":54,"column_end":76},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":105748,"byte_end":105770,"line_start":1570,"line_end":1570,"column_start":49,"column_end":71},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106744,"byte_end":106766,"line_start":1590,"line_end":1590,"column_start":55,"column_end":77},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":106939,"byte_end":106961,"line_start":1598,"line_end":1598,"column_start":58,"column_end":80},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107125,"byte_end":107147,"line_start":1605,"line_end":1605,"column_start":54,"column_end":76},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107321,"byte_end":107343,"line_start":1613,"line_end":1613,"column_start":9,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.3.4/src/rwlock.rs","byte_start":107544,"byte_end":107566,"line_start":1621,"line_end":1621,"column_start":9,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":7484}}]}