{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0","program":"/home/hskang9/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","cranelift_codegen","/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"gimli\"","--cfg","feature=\"std\"","--cfg","feature=\"unwind\"","-C","metadata=8e436a999439e664","-C","extra-filename=-8e436a999439e664","--out-dir","/home/hskang9/terra-contracts/erc721/target/rls/debug/deps","-L","dependency=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps","--extern","byteorder=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libbyteorder-5a32b2ad0587bb56.rmeta","--extern","cranelift_bforest=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libcranelift_bforest-5358e57b1c4c883c.rmeta","--extern","cranelift_codegen_shared=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libcranelift_codegen_shared-d220393e441b551c.rmeta","--extern","cranelift_entity=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libcranelift_entity-fe1d0406170917ad.rmeta","--extern","gimli=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libgimli-ffad8ab584539aee.rmeta","--extern","log=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/liblog-83ab5daad5e3b450.rmeta","--extern","smallvec=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libsmallvec-e4c9c101ae333399.rmeta","--extern","target_lexicon=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libtarget_lexicon-5dfdea6cad8d8675.rmeta","--extern","thiserror=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libthiserror-e23f44edd0163a9e.rmeta","--cap-lints","allow","--cfg","feature=\"x86\"","--error-format=json","--sysroot","/home/hskang9/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libcranelift_codegen-8e436a999439e664.rmeta"},"prelude":{"crate_id":{"name":"cranelift_codegen","disambiguator":[1840169337593454183,2714285077174093308]},"crate_root":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src","external_crates":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[11465483288401737638,5550572350724654778]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4438720507160810541,18229149757739284107]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14956713765672054331,16711555291873599790]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11668151181258983540,17314908725283844671]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6538090605504255516,13885356363809628147]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4787848669120998683,5174148560041752949]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[7027550587003088190,15466513828826127728]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5938899731853885013,18021396312511623872]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1865682747167002125,8647521614981767847]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[1865007528563448287,2705491453355471832]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":15,"id":{"name":"cranelift_bforest","disambiguator":[13856497635522155208,18351677305291548907]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","num":16,"id":{"name":"cranelift_entity","disambiguator":[15649407093681424624,11725493798286033142]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/relaxation.rs","num":17,"id":{"name":"log","disambiguator":[3334928426747378909,12614284579594638240]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/relaxation.rs","num":18,"id":{"name":"cfg_if","disambiguator":[8192225388863340420,3173580909043468535]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","num":19,"id":{"name":"cranelift_codegen_shared","disambiguator":[11003585404555025731,7233693928327429023]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","num":20,"id":{"name":"target_lexicon","disambiguator":[7506543512126835546,2105196375576306871]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","num":21,"id":{"name":"thiserror","disambiguator":[7346906650837406466,1053315444462595808]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","num":22,"id":{"name":"thiserror_impl","disambiguator":[17721261021118503845,8704871421299299668]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","num":23,"id":{"name":"gimli","disambiguator":[10223812154897667566,17080436645826354926]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/unwind.rs","num":24,"id":{"name":"byteorder","disambiguator":[13772483050154113105,4416411086848908966]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","num":25,"id":{"name":"indexmap","disambiguator":[7264607058481689396,12845694084437745282]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","num":26,"id":{"name":"hashbrown","disambiguator":[12025763491025572525,15479303319156871661]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","num":27,"id":{"name":"serde","disambiguator":[6972129048178836725,6892762498666106127]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","num":28,"id":{"name":"serde_derive","disambiguator":[14746363068757113999,2138961080548715939]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/legalizer/split.rs","num":29,"id":{"name":"smallvec","disambiguator":[3347676757453290836,17416371363708809587]}}],"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":0,"byte_end":3089,"line_start":1,"line_end":110,"column_start":1,"column_end":53}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3124},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":1987,"byte_end":1994,"line_start":56,"line_end":56,"column_start":25,"column_end":32},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3454},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2022,"byte_end":2039,"line_start":57,"line_end":57,"column_start":27,"column_end":44},"alias_span":null,"name":"legalize_function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4950},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2070,"byte_end":2087,"line_start":58,"line_end":58,"column_start":30,"column_end":47},"alias_span":null,"name":"ValueLabelsRanges","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8790},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2089,"byte_end":2102,"line_start":58,"line_end":58,"column_start":49,"column_end":62},"alias_span":null,"name":"ValueLocRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2895},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2130,"byte_end":2145,"line_start":59,"line_end":59,"column_start":26,"column_end":41},"alias_span":null,"name":"verify_function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3001},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2169,"byte_end":2183,"line_start":60,"line_end":60,"column_start":23,"column_end":37},"alias_span":null,"name":"write_function","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2194,"byte_end":2211,"line_start":62,"line_end":62,"column_start":9,"column_end":26},"alias_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2215,"byte_end":2222,"line_start":62,"line_end":62,"column_start":30,"column_end":37},"name":"bforest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2232,"byte_end":2248,"line_start":63,"line_end":63,"column_start":9,"column_end":25},"alias_span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2252,"byte_end":2258,"line_start":63,"line_end":63,"column_start":29,"column_end":35},"name":"entity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":47},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3346,"byte_end":3360,"line_start":12,"line_end":12,"column_start":5,"column_end":19},"alias_span":null,"name":"MemoryCodeSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3362,"byte_end":3375,"line_start":12,"line_end":12,"column_start":21,"column_end":34},"alias_span":null,"name":"NullRelocSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3377,"byte_end":3393,"line_start":12,"line_end":12,"column_start":36,"column_end":52},"alias_span":null,"name":"NullStackmapSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3395,"byte_end":3407,"line_start":12,"line_end":12,"column_start":54,"column_end":66},"alias_span":null,"name":"NullTrapSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":58},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3409,"byte_end":3418,"line_start":12,"line_end":12,"column_start":68,"column_end":77},"alias_span":null,"name":"RelocSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3420,"byte_end":3432,"line_start":12,"line_end":12,"column_start":79,"column_end":91},"alias_span":null,"name":"StackmapSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":63},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3438,"byte_end":3446,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"alias_span":null,"name":"TrapSink","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":125},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3477,"byte_end":3491,"line_start":15,"line_end":15,"column_start":27,"column_end":41},"alias_span":null,"name":"relax_branches","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3515,"byte_end":3534,"line_start":16,"line_end":16,"column_start":23,"column_end":42},"alias_span":null,"name":"shrink_instructions","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":4976},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3560,"byte_end":3568,"line_start":17,"line_end":17,"column_start":25,"column_end":33},"alias_span":null,"name":"Stackmap","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":8665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":3749,"byte_end":3762,"line_start":21,"line_end":21,"column_start":26,"column_end":39},"alias_span":null,"name":"RegDiversions","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118816,"byte_end":118829,"line_start":31,"line_end":31,"column_start":5,"column_end":18},"alias_span":null,"name":"InsertBuilder","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5090},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118831,"byte_end":118842,"line_start":31,"line_end":31,"column_start":20,"column_end":31},"alias_span":null,"name":"InstBuilder","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":478},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118844,"byte_end":118859,"line_start":31,"line_end":31,"column_start":33,"column_end":48},"alias_span":null,"name":"InstBuilderBase","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118861,"byte_end":118877,"line_start":31,"line_end":31,"column_start":50,"column_end":66},"alias_span":null,"name":"InstInserterBase","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":525},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118879,"byte_end":118893,"line_start":31,"line_end":31,"column_start":68,"column_end":82},"alias_span":null,"name":"ReplaceBuilder","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5469},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118928,"byte_end":118940,"line_start":33,"line_end":33,"column_start":31,"column_end":43},"alias_span":null,"name":"ConstantData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":577},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118942,"byte_end":118956,"line_start":33,"line_end":33,"column_start":45,"column_end":59},"alias_span":null,"name":"ConstantOffset","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5491},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118958,"byte_end":118970,"line_start":33,"line_end":33,"column_start":61,"column_end":73},"alias_span":null,"name":"ConstantPool","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5496},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118998,"byte_end":119011,"line_start":34,"line_end":34,"column_start":26,"column_end":39},"alias_span":null,"name":"DataFlowGraph","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5510},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119013,"byte_end":119021,"line_start":34,"line_end":34,"column_start":41,"column_end":49},"alias_span":null,"name":"ValueDef","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5549},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119059,"byte_end":119064,"line_start":36,"line_end":36,"column_start":5,"column_end":10},"alias_span":null,"name":"Block","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5719},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119066,"byte_end":119074,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"alias_span":null,"name":"Constant","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5821},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119076,"byte_end":119083,"line_start":36,"line_end":36,"column_start":22,"column_end":29},"alias_span":null,"name":"FuncRef","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5685},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119085,"byte_end":119096,"line_start":36,"line_end":36,"column_start":31,"column_end":42},"alias_span":null,"name":"GlobalValue","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5889},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119098,"byte_end":119102,"line_start":36,"line_end":36,"column_start":44,"column_end":48},"alias_span":null,"name":"Heap","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5753},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119104,"byte_end":119113,"line_start":36,"line_end":36,"column_start":50,"column_end":59},"alias_span":null,"name":"Immediate","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5617},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119115,"byte_end":119119,"line_start":36,"line_end":36,"column_start":61,"column_end":65},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5787},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119121,"byte_end":119130,"line_start":36,"line_end":36,"column_start":67,"column_end":76},"alias_span":null,"name":"JumpTable","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5855},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119132,"byte_end":119138,"line_start":36,"line_end":36,"column_start":78,"column_end":84},"alias_span":null,"name":"SigRef","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5651},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119140,"byte_end":119149,"line_start":36,"line_end":36,"column_start":86,"column_end":95},"alias_span":null,"name":"StackSlot","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5923},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119155,"byte_end":119160,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"alias_span":null,"name":"Table","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":5583},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119162,"byte_end":119167,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6025},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119206,"byte_end":119214,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"alias_span":null,"name":"AbiParam","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6043},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119216,"byte_end":119233,"line_start":40,"line_end":40,"column_start":15,"column_end":32},"alias_span":null,"name":"ArgumentExtension","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6062},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119235,"byte_end":119250,"line_start":40,"line_end":40,"column_start":34,"column_end":49},"alias_span":null,"name":"ArgumentPurpose","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6091},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119252,"byte_end":119263,"line_start":40,"line_end":40,"column_start":51,"column_end":62},"alias_span":null,"name":"ExtFuncData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6009},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119265,"byte_end":119274,"line_start":40,"line_end":40,"column_start":64,"column_end":73},"alias_span":null,"name":"Signature","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6099},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119307,"byte_end":119319,"line_start":42,"line_end":42,"column_start":29,"column_end":41},"alias_span":null,"name":"ExternalName","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6146},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119354,"byte_end":119365,"line_start":43,"line_end":43,"column_start":34,"column_end":45},"alias_span":null,"name":"FrameLayout","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6120},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119367,"byte_end":119384,"line_start":43,"line_end":43,"column_start":47,"column_end":64},"alias_span":null,"name":"FrameLayoutChange","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":891},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119386,"byte_end":119404,"line_start":43,"line_end":43,"column_start":66,"column_end":84},"alias_span":null,"name":"FrameLayoutChanges","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6174},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119437,"byte_end":119463,"line_start":44,"line_end":44,"column_start":31,"column_end":57},"alias_span":null,"name":"DisplayFunctionAnnotations","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6153},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119465,"byte_end":119473,"line_start":44,"line_end":44,"column_start":59,"column_end":67},"alias_span":null,"name":"Function","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6181},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119508,"byte_end":119523,"line_start":45,"line_end":45,"column_start":33,"column_end":48},"alias_span":null,"name":"GlobalValueData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6199},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119551,"byte_end":119559,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"alias_span":null,"name":"HeapData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6207},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119561,"byte_end":119570,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"alias_span":null,"name":"HeapStyle","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6477},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119612,"byte_end":119627,"line_start":48,"line_end":48,"column_start":5,"column_end":20},"alias_span":null,"name":"InstructionData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":6693},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119629,"byte_end":119635,"line_start":48,"line_end":48,"column_start":22,"column_end":28},"alias_span":null,"name":"Opcode","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":1173},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119637,"byte_end":119646,"line_start":48,"line_end":48,"column_start":30,"column_end":39},"alias_span":null,"name":"ValueList","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":1174},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119648,"byte_end":119661,"line_start":48,"line_end":48,"column_start":41,"column_end":54},"alias_span":null,"name":"ValueListPool","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7151},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119663,"byte_end":119675,"line_start":48,"line_end":48,"column_start":56,"column_end":68},"alias_span":null,"name":"VariableArgs","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7198},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119710,"byte_end":119723,"line_start":50,"line_end":50,"column_start":31,"column_end":44},"alias_span":null,"name":"JumpTableData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7202},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119752,"byte_end":119758,"line_start":51,"line_end":51,"column_start":28,"column_end":34},"alias_span":null,"name":"Layout","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119789,"byte_end":119811,"line_start":52,"line_end":52,"column_start":30,"column_end":52},"alias_span":null,"name":"get_probestack_funcref","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7232},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119813,"byte_end":119820,"line_start":52,"line_end":52,"column_start":54,"column_end":61},"alias_span":null,"name":"LibCall","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7269},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119852,"byte_end":119860,"line_start":53,"line_end":53,"column_start":30,"column_end":38},"alias_span":null,"name":"MemFlags","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7295},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119893,"byte_end":119913,"line_start":54,"line_end":54,"column_start":32,"column_end":52},"alias_span":null,"name":"ExpandedProgramPoint","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":1487},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119915,"byte_end":119927,"line_start":54,"line_end":54,"column_start":54,"column_end":66},"alias_span":null,"name":"ProgramOrder","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7284},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119929,"byte_end":119941,"line_start":54,"line_end":54,"column_start":68,"column_end":80},"alias_span":null,"name":"ProgramPoint","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7310},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":119974,"byte_end":119983,"line_start":55,"line_end":55,"column_start":31,"column_end":40},"alias_span":null,"name":"SourceLoc","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7358},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120016,"byte_end":120031,"line_start":56,"line_end":56,"column_start":32,"column_end":47},"alias_span":null,"name":"StackLayoutInfo","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120033,"byte_end":120046,"line_start":56,"line_end":56,"column_start":49,"column_end":62},"alias_span":null,"name":"StackSlotData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7323},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120048,"byte_end":120061,"line_start":56,"line_end":56,"column_start":64,"column_end":77},"alias_span":null,"name":"StackSlotKind","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7371},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120063,"byte_end":120073,"line_start":56,"line_end":56,"column_start":79,"column_end":89},"alias_span":null,"name":"StackSlots","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7385},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120102,"byte_end":120111,"line_start":57,"line_end":57,"column_start":27,"column_end":36},"alias_span":null,"name":"TableData","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7393},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120142,"byte_end":120150,"line_start":58,"line_end":58,"column_start":30,"column_end":38},"alias_span":null,"name":"TrapCode","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7432},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120178,"byte_end":120182,"line_start":59,"line_end":59,"column_start":27,"column_end":31},"alias_span":null,"name":"Type","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7523},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120214,"byte_end":120225,"line_start":60,"line_end":60,"column_start":31,"column_end":42},"alias_span":null,"name":"ArgumentLoc","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7504},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120227,"byte_end":120235,"line_start":60,"line_end":60,"column_start":44,"column_end":52},"alias_span":null,"name":"ValueLoc","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":19,"index":12},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120272,"byte_end":120281,"line_start":61,"line_end":61,"column_start":35,"column_end":44},"alias_span":null,"name":"condcodes","value":"","parent":{"krate":0,"index":465}},{"kind":"Use","ref_id":{"krate":0,"index":7915},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427729,"byte_end":427737,"line_start":47,"line_end":47,"column_start":32,"column_end":40},"alias_span":null,"name":"CallConv","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":7986},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427778,"byte_end":427789,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"alias_span":null,"name":"BranchRange","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":7950},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427791,"byte_end":427805,"line_start":49,"line_end":49,"column_start":18,"column_end":32},"alias_span":null,"name":"ConstraintKind","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":7942},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427807,"byte_end":427824,"line_start":49,"line_end":49,"column_start":34,"column_end":51},"alias_span":null,"name":"OperandConstraint","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":7974},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427826,"byte_end":427843,"line_start":49,"line_end":49,"column_start":53,"column_end":70},"alias_span":null,"name":"RecipeConstraints","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":2346},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427879,"byte_end":427888,"line_start":51,"line_end":51,"column_start":32,"column_end":41},"alias_span":null,"name":"base_size","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":8007},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427890,"byte_end":427897,"line_start":51,"line_end":51,"column_start":43,"column_end":50},"alias_span":null,"name":"EncInfo","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":7994},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427899,"byte_end":427907,"line_start":51,"line_end":51,"column_start":52,"column_end":60},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":2416},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427942,"byte_end":427954,"line_start":52,"line_end":52,"column_start":33,"column_end":45},"alias_span":null,"name":"regs_overlap","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":2380},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427956,"byte_end":427964,"line_start":52,"line_end":52,"column_start":47,"column_end":55},"alias_span":null,"name":"RegClass","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":8013},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427966,"byte_end":427979,"line_start":52,"line_end":52,"column_start":57,"column_end":70},"alias_span":null,"name":"RegClassIndex","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":8026},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427981,"byte_end":427988,"line_start":52,"line_end":52,"column_start":72,"column_end":79},"alias_span":null,"name":"RegInfo","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":2361},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":427990,"byte_end":427997,"line_start":52,"line_end":52,"column_start":81,"column_end":88},"alias_span":null,"name":"RegUnit","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":8039},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":428028,"byte_end":428037,"line_start":53,"line_end":53,"column_start":29,"column_end":38},"alias_span":null,"name":"StackBase","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":8058},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":428039,"byte_end":428052,"line_start":53,"line_end":53,"column_start":40,"column_end":53},"alias_span":null,"name":"StackBaseMask","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":8031},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":428054,"byte_end":428062,"line_start":53,"line_end":53,"column_start":55,"column_end":63},"alias_span":null,"name":"StackRef","value":"","parent":{"krate":0,"index":1756}},{"kind":"Use","ref_id":{"krate":0,"index":2686},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":655839,"byte_end":655853,"line_start":7,"line_end":7,"column_start":25,"column_end":39},"alias_span":null,"name":"add_to_current","value":"","parent":{"krate":0,"index":2639}},{"kind":"Use","ref_id":{"krate":0,"index":2684},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":655855,"byte_end":655867,"line_start":7,"line_end":7,"column_start":41,"column_end":53},"alias_span":null,"name":"take_current","value":"","parent":{"krate":0,"index":2639}},{"kind":"Use","ref_id":{"krate":0,"index":2669},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":655869,"byte_end":655878,"line_start":7,"line_end":7,"column_start":55,"column_end":64},"alias_span":null,"name":"PassTimes","value":"","parent":{"krate":0,"index":2639}},{"kind":"Use","ref_id":{"krate":0,"index":2665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":655880,"byte_end":655891,"line_start":7,"line_end":7,"column_start":66,"column_end":77},"alias_span":null,"name":"TimingToken","value":"","parent":{"krate":0,"index":2639}},{"kind":"Use","ref_id":{"krate":0,"index":2760},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":667661,"byte_end":667672,"line_start":84,"line_end":84,"column_start":21,"column_end":32},"alias_span":null,"name":"verify_cssa","value":"","parent":{"krate":0,"index":2688}},{"kind":"Use","ref_id":{"krate":0,"index":2820},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":667698,"byte_end":667713,"line_start":85,"line_end":85,"column_start":25,"column_end":40},"alias_span":null,"name":"verify_liveness","value":"","parent":{"krate":0,"index":2688}},{"kind":"Use","ref_id":{"krate":0,"index":2842},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":667740,"byte_end":667756,"line_start":86,"line_end":86,"column_start":26,"column_end":42},"alias_span":null,"name":"verify_locations","value":"","parent":{"krate":0,"index":2688}},{"kind":"Use","ref_id":{"krate":16,"index":19},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2532,"byte_end":2545,"line_start":80,"line_end":80,"column_start":24,"column_end":37},"alias_span":null,"name":"packed_option","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/mod.rs","byte_start":1048834,"byte_end":1048847,"line_start":24,"line_end":24,"column_start":47,"column_end":60},"alias_span":null,"name":"RegDiversions","value":"","parent":{"krate":0,"index":3714}},{"kind":"Use","ref_id":{"krate":0,"index":8723},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2972,"byte_end":2984,"line_start":107,"line_end":107,"column_start":25,"column_end":37},"alias_span":null,"name":"CodegenError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4724},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2986,"byte_end":2999,"line_start":107,"line_end":107,"column_start":39,"column_end":52},"alias_span":null,"name":"CodegenResult","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":0,"byte_end":3089,"line_start":1,"line_end":110,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":212},{"krate":0,"index":241},{"krate":0,"index":335},{"krate":0,"index":347},{"krate":0,"index":424},{"krate":0,"index":465},{"krate":0,"index":1756},{"krate":0,"index":2491},{"krate":0,"index":2530},{"krate":0,"index":2574},{"krate":0,"index":2639},{"krate":0,"index":2688},{"krate":0,"index":2964},{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3055},{"krate":0,"index":3073},{"krate":0,"index":3082},{"krate":0,"index":3171},{"krate":0,"index":3189},{"krate":0,"index":3194},{"krate":0,"index":3229},{"krate":0,"index":3244},{"krate":0,"index":3473},{"krate":0,"index":3512},{"krate":0,"index":3536},{"krate":0,"index":3541},{"krate":0,"index":3595},{"krate":0,"index":3618},{"krate":0,"index":3714},{"krate":0,"index":4721},{"krate":0,"index":4726},{"krate":0,"index":4783},{"krate":0,"index":4820},{"krate":0,"index":4888},{"krate":0,"index":4903},{"krate":0,"index":4921},{"krate":0,"index":4931},{"krate":0,"index":4972},{"krate":0,"index":4975}],"decl_id":null,"docs":" Cranelift code generation library.\n","sig":null,"attributes":[{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":40,"byte_end":107,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":108,"byte_end":138,"line_start":4,"line_end":4,"column_start":1,"column_end":31}},{"value":"deny(unstable_features)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":168,"byte_end":191,"line_start":5,"line_end":5,"column_start":30,"column_end":53}},{"value":"no_std","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":1646,"byte_end":1656,"line_start":41,"line_end":41,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binemit","qualname":"::binemit","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":99},{"krate":0,"index":133},{"krate":0,"index":143},{"krate":0,"index":156},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":4983},{"krate":0,"index":5012},{"krate":0,"index":5010},{"krate":0,"index":5008},{"krate":0,"index":5006},{"krate":0,"index":5004},{"krate":0,"index":181},{"krate":0,"index":5013},{"krate":0,"index":5018},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":5021},{"krate":0,"index":5033},{"krate":0,"index":5032},{"krate":0,"index":5030},{"krate":0,"index":5028},{"krate":0,"index":5026},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":209}],"decl_id":null,"docs":" Binary machine code emission.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":12818,"byte_end":12832,"line_start":34,"line_end":34,"column_start":12,"column_end":26},"name":"MemoryCodeSink","qualname":"::binemit::memorysink::MemoryCodeSink","value":"MemoryCodeSink { info }","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" A `CodeSink` that writes binary machine code directly into memory.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":54},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":13189,"byte_end":13193,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"name":"info","qualname":"::binemit::memorysink::MemoryCodeSink::info","value":"binemit::CodeInfo","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Information about the generated code and read-only data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":13561,"byte_end":13564,"line_start":53,"line_end":53,"column_start":19,"column_end":22},"name":"new","qualname":"<MemoryCodeSink>::new","value":"fn (data: *mut u8, relocs: &'a mut dyn RelocSink, traps: &'a mut dyn TrapSink, stackmaps: &'a mut dyn StackmapSink) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new memory code sink that writes a function to the memory pointed to by `data`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14131,"byte_end":14140,"line_start":76,"line_end":76,"column_start":11,"column_end":20},"name":"RelocSink","qualname":"::binemit::memorysink::RelocSink","value":"RelocSink","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"decl_id":null,"docs":" A trait for receiving relocations for code that is emitted directly into memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14219,"byte_end":14230,"line_start":78,"line_end":78,"column_start":8,"column_end":19},"name":"reloc_block","qualname":"::binemit::memorysink::RelocSink::reloc_block","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: CodeOffset) -> ()","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Add a relocation referencing an block at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14370,"byte_end":14384,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"reloc_external","qualname":"::binemit::memorysink::RelocSink::reloc_external","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: &ExternalName, _: Addend) -> ()","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Add a relocation referencing an external symbol at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14508,"byte_end":14522,"line_start":84,"line_end":84,"column_start":8,"column_end":22},"name":"reloc_constant","qualname":"::binemit::memorysink::RelocSink::reloc_constant","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: ConstantOffset) -> ()","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Add a relocation referencing a constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14638,"byte_end":14646,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"reloc_jt","qualname":"::binemit::memorysink::RelocSink::reloc_jt","value":"fn (&mut self, _: CodeOffset, _: Reloc, _: JumpTable) -> ()","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" Add a relocation referencing a jump table.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":63},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14888,"byte_end":14896,"line_start":94,"line_end":94,"column_start":11,"column_end":19},"name":"TrapSink","qualname":"::binemit::memorysink::TrapSink","value":"TrapSink","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":" A trait for receiving trap codes and offsets.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":14958,"byte_end":14962,"line_start":96,"line_end":96,"column_start":8,"column_end":12},"name":"trap","qualname":"::binemit::memorysink::TrapSink::trap","value":"fn (&mut self, _: CodeOffset, _: SourceLoc, _: TrapCode) -> ()","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" Add trap information for a specific offset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17311,"byte_end":17324,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"NullRelocSink","qualname":"::binemit::memorysink::NullRelocSink","value":"NullRelocSink {  }","parent":null,"children":[],"decl_id":null,"docs":" A `RelocSink` implementation that does nothing, which is convenient when\n compiling code that does not relocate anything.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17796,"byte_end":17808,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"NullTrapSink","qualname":"::binemit::memorysink::NullTrapSink","value":"NullTrapSink {  }","parent":null,"children":[],"decl_id":null,"docs":" A `TrapSink` implementation that does nothing, which is convenient when\n compiling code that does not rely on trapping semantics.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17979,"byte_end":17991,"line_start":195,"line_end":195,"column_start":11,"column_end":23},"name":"StackmapSink","qualname":"::binemit::memorysink::StackmapSink","value":"StackmapSink","parent":null,"children":[{"krate":0,"index":95}],"decl_id":null,"docs":" A trait for emitting stackmaps.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":18101,"byte_end":18113,"line_start":197,"line_end":197,"column_start":8,"column_end":20},"name":"add_stackmap","qualname":"::binemit::memorysink::StackmapSink::add_stackmap","value":"fn (&mut self, _: CodeOffset, _: Stackmap) -> ()","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Output a bitmap of the stack representing the live reference variables at this code offset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":18216,"byte_end":18232,"line_start":201,"line_end":201,"column_start":12,"column_end":28},"name":"NullStackmapSink","qualname":"::binemit::memorysink::NullStackmapSink","value":"NullStackmapSink {  }","parent":null,"children":[],"decl_id":null,"docs":" Placeholder StackmapSink that does nothing.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/relaxation.rs","byte_start":19854,"byte_end":19868,"line_start":46,"line_end":46,"column_start":8,"column_end":22},"name":"relax_branches","qualname":"::binemit::relaxation::relax_branches","value":"fn (func: &mut Function, _cfg: &mut ControlFlowGraph, _domtree: &mut DominatorTree, isa: &dyn TargetIsa) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Relax branches and compute the final layout of block headers in `func`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/shrink.rs","byte_start":34071,"byte_end":34090,"line_start":16,"line_end":16,"column_start":8,"column_end":27},"name":"shrink_instructions","qualname":"::binemit::shrink::shrink_instructions","value":"fn (func: &mut Function, isa: &dyn TargetIsa) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pick the smallest valid encodings for instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4976},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":37348,"byte_end":37356,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"Stackmap","qualname":"::binemit::stackmap::Stackmap","value":"Stackmap {  }","parent":null,"children":[{"krate":0,"index":4977},{"krate":0,"index":4978}],"decl_id":null,"docs":" A stack map is a bitmap with one bit per machine word on the stack. Stack\n maps are created at `safepoint` instructions and record all live reference\n values that are on the stack. All slot kinds, except `OutgoingArg` are\n captured in a stack map. The `OutgoingArg`'s will be captured in the callee\n function as `IncomingArg`'s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":37529,"byte_end":37540,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"from_values","qualname":"<Stackmap>::from_values","value":"fn (args: &[ir::entities::Value], func: &ir::Function, isa: &dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a stackmap based on where references are located on a function's stack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":39517,"byte_end":39527,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Stackmap>::from_slice","value":"fn (vec: &[bool]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a vec of Bitsets from a slice of bools.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":40134,"byte_end":40141,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"get_bit","qualname":"<Stackmap>::get_bit","value":"fn (&self, bit_index: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a specified bit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":40474,"byte_end":40482,"line_start":105,"line_end":105,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Stackmap>::as_slice","value":"fn (&self) -> &[BitSet<u32>]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw bitmap that represents this stack map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":40616,"byte_end":40628,"line_start":110,"line_end":110,"column_start":12,"column_end":24},"name":"mapped_words","qualname":"<Stackmap>::mapped_words","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of words represented by this stack map.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":179},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4079,"byte_end":4089,"line_start":30,"line_end":30,"column_start":10,"column_end":20},"name":"CodeOffset","qualname":"::binemit::CodeOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset in bytes from the beginning of the function.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":180},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4146,"byte_end":4152,"line_start":33,"line_end":33,"column_start":10,"column_end":16},"name":"Addend","qualname":"::binemit::Addend","value":"i64","parent":null,"children":[],"decl_id":null,"docs":" Addend to add to the symbol value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4984},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4356,"byte_end":4360,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Abs4","qualname":"::binemit::Reloc::Abs4","value":"Reloc::Abs4","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" absolute 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4986},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4390,"byte_end":4394,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"name":"Abs8","qualname":"::binemit::Reloc::Abs8","value":"Reloc::Abs8","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" absolute 8-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4988},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4431,"byte_end":4440,"line_start":44,"line_end":44,"column_start":5,"column_end":14},"name":"X86PCRel4","qualname":"::binemit::Reloc::X86PCRel4","value":"Reloc::X86PCRel4","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" x86 PC-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4990},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4503,"byte_end":4518,"line_start":46,"line_end":46,"column_start":5,"column_end":20},"name":"X86PCRelRodata4","qualname":"::binemit::Reloc::X86PCRelRodata4","value":"Reloc::X86PCRelRodata4","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" x86 PC-relative 4-byte offset to trailing rodata\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4992},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4563,"byte_end":4576,"line_start":48,"line_end":48,"column_start":5,"column_end":18},"name":"X86CallPCRel4","qualname":"::binemit::Reloc::X86CallPCRel4","value":"Reloc::X86CallPCRel4","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" x86 call to PC-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4994},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4622,"byte_end":4636,"line_start":50,"line_end":50,"column_start":5,"column_end":19},"name":"X86CallPLTRel4","qualname":"::binemit::Reloc::X86CallPLTRel4","value":"Reloc::X86CallPLTRel4","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" x86 call to PLT-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4996},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4677,"byte_end":4689,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"X86GOTPCRel4","qualname":"::binemit::Reloc::X86GOTPCRel4","value":"Reloc::X86GOTPCRel4","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" x86 GOT PC-relative 4-byte\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4998},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4721,"byte_end":4730,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"Arm32Call","qualname":"::binemit::Reloc::Arm32Call","value":"Reloc::Arm32Call","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" Arm32 call target\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5000},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4762,"byte_end":4771,"line_start":56,"line_end":56,"column_start":5,"column_end":14},"name":"Arm64Call","qualname":"::binemit::Reloc::Arm64Call","value":"Reloc::Arm64Call","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" Arm64 call target\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5002},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4804,"byte_end":4813,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"RiscvCall","qualname":"::binemit::Reloc::RiscvCall","value":"Reloc::RiscvCall","parent":{"krate":0,"index":4983},"children":[],"decl_id":null,"docs":" RISC-V call target\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4983},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4320,"byte_end":4325,"line_start":38,"line_end":38,"column_start":10,"column_end":15},"name":"Reloc","qualname":"::binemit::Reloc","value":"Reloc::{Abs4, Abs8, X86PCRel4, X86PCRelRodata4, X86CallPCRel4, X86CallPLTRel4, X86GOTPCRel4, Arm32Call, Arm64Call, RiscvCall}","parent":null,"children":[{"krate":0,"index":4984},{"krate":0,"index":4986},{"krate":0,"index":4988},{"krate":0,"index":4990},{"krate":0,"index":4992},{"krate":0,"index":4994},{"krate":0,"index":4996},{"krate":0,"index":4998},{"krate":0,"index":5000},{"krate":0,"index":5002}],"decl_id":null,"docs":" Relocation kinds for every ISA\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5013},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":5992,"byte_end":6000,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"CodeInfo","qualname":"::binemit::CodeInfo","value":"CodeInfo { code_size, jumptables_size, rodata_size, total_size }","parent":null,"children":[{"krate":0,"index":5014},{"krate":0,"index":5015},{"krate":0,"index":5016},{"krate":0,"index":5017}],"decl_id":null,"docs":" Container for information about a vector of compiled code and its supporting read-only data.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5014},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6082,"byte_end":6091,"line_start":86,"line_end":86,"column_start":9,"column_end":18},"name":"code_size","qualname":"::binemit::CodeInfo::code_size","value":"u32","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Number of bytes of machine code (the code starts at offset 0).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5015},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6153,"byte_end":6168,"line_start":89,"line_end":89,"column_start":9,"column_end":24},"name":"jumptables_size","qualname":"::binemit::CodeInfo::jumptables_size","value":"u32","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Number of bytes of jumptables.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5016},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6226,"byte_end":6237,"line_start":92,"line_end":92,"column_start":9,"column_end":20},"name":"rodata_size","qualname":"::binemit::CodeInfo::rodata_size","value":"u32","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Number of bytes of rodata.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5017},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6294,"byte_end":6304,"line_start":95,"line_end":95,"column_start":9,"column_end":19},"name":"total_size","qualname":"::binemit::CodeInfo::total_size","value":"u32","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Number of bytes in total.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6443,"byte_end":6453,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"jumptables","qualname":"<CodeInfo>::jumptables","value":"fn (&self) -> CodeOffset","parent":null,"children":[],"decl_id":null,"docs":" Offset of any relocatable jump tables, or equal to rodata if there are no jump tables.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6612,"byte_end":6618,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"rodata","qualname":"<CodeInfo>::rodata","value":"fn (&self) -> CodeOffset","parent":null,"children":[],"decl_id":null,"docs":" Offset of any copyable read-only data, or equal to total_size if there are no rodata.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6953,"byte_end":6961,"line_start":114,"line_end":114,"column_start":11,"column_end":19},"name":"CodeSink","qualname":"::binemit::CodeSink","value":"CodeSink","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" Abstract interface for adding bytes to the code segment.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7005,"byte_end":7011,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"offset","qualname":"::binemit::CodeSink::offset","value":"fn (&self) -> CodeOffset","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Get the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7082,"byte_end":7086,"line_start":119,"line_end":119,"column_start":8,"column_end":12},"name":"put1","qualname":"::binemit::CodeSink::put1","value":"fn (&mut self, _: u8) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add 1 byte to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7155,"byte_end":7159,"line_start":122,"line_end":122,"column_start":8,"column_end":12},"name":"put2","qualname":"::binemit::CodeSink::put2","value":"fn (&mut self, _: u16) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add 2 bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7229,"byte_end":7233,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"put4","qualname":"::binemit::CodeSink::put4","value":"fn (&mut self, _: u32) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add 4 bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7303,"byte_end":7307,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"put8","qualname":"::binemit::CodeSink::put8","value":"fn (&mut self, _: u64) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add 8 bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7405,"byte_end":7416,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"reloc_block","qualname":"::binemit::CodeSink::reloc_block","value":"fn (&mut self, _: Reloc, _: CodeOffset) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add a relocation referencing an block at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7557,"byte_end":7571,"line_start":134,"line_end":134,"column_start":8,"column_end":22},"name":"reloc_external","qualname":"::binemit::CodeSink::reloc_external","value":"fn (&mut self, _: Reloc, _: &ExternalName, _: Addend) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add a relocation referencing an external symbol plus the addend at the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7680,"byte_end":7694,"line_start":137,"line_end":137,"column_start":8,"column_end":22},"name":"reloc_constant","qualname":"::binemit::CodeSink::reloc_constant","value":"fn (&mut self, _: Reloc, _: ConstantOffset) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add a relocation referencing a constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7795,"byte_end":7803,"line_start":140,"line_end":140,"column_start":8,"column_end":16},"name":"reloc_jt","qualname":"::binemit::CodeSink::reloc_jt","value":"fn (&mut self, _: Reloc, _: JumpTable) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add a relocation referencing a jump table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":7901,"byte_end":7905,"line_start":143,"line_end":143,"column_start":8,"column_end":12},"name":"trap","qualname":"::binemit::CodeSink::trap","value":"fn (&mut self, _: TrapCode, _: SourceLoc) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add trap information for the current offset.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8022,"byte_end":8038,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"begin_jumptables","qualname":"::binemit::CodeSink::begin_jumptables","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Machine code output is complete, jump table data may follow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8129,"byte_end":8141,"line_start":149,"line_end":149,"column_start":8,"column_end":20},"name":"begin_rodata","qualname":"::binemit::CodeSink::begin_rodata","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Jump table output is complete, raw read-only data may follow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8217,"byte_end":8228,"line_start":152,"line_end":152,"column_start":8,"column_end":19},"name":"end_codegen","qualname":"::binemit::CodeSink::end_codegen","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Read-only data output is complete, we're done.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8300,"byte_end":8312,"line_start":155,"line_end":155,"column_start":8,"column_end":20},"name":"add_stackmap","qualname":"::binemit::CodeSink::add_stackmap","value":"fn (&mut self, _: &[Value], _: &Function, _: &dyn TargetIsa) -> ()","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Add a stackmap at the current code offset.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5022},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8543,"byte_end":8551,"line_start":162,"line_end":162,"column_start":5,"column_end":13},"name":"Fastcall","qualname":"::binemit::FrameUnwindKind::Fastcall","value":"FrameUnwindKind::Fastcall","parent":{"krate":0,"index":5021},"children":[],"decl_id":null,"docs":" Windows fastcall unwinding (as in .pdata).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5024},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8620,"byte_end":8629,"line_start":164,"line_end":164,"column_start":5,"column_end":14},"name":"Libunwind","qualname":"::binemit::FrameUnwindKind::Libunwind","value":"FrameUnwindKind::Libunwind","parent":{"krate":0,"index":5021},"children":[],"decl_id":null,"docs":" FDE entry for libunwind (similar to .eh_frame format).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5021},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8470,"byte_end":8485,"line_start":160,"line_end":160,"column_start":10,"column_end":25},"name":"FrameUnwindKind","qualname":"::binemit::FrameUnwindKind","value":"FrameUnwindKind::{Fastcall, Libunwind}","parent":null,"children":[{"krate":0,"index":5022},{"krate":0,"index":5024}],"decl_id":null,"docs":" Type of the frame unwind information.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":201},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8690,"byte_end":8707,"line_start":168,"line_end":168,"column_start":10,"column_end":27},"name":"FrameUnwindOffset","qualname":"::binemit::FrameUnwindOffset","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Offset in frame unwind information buffer.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":202},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8767,"byte_end":8782,"line_start":171,"line_end":171,"column_start":11,"column_end":26},"name":"FrameUnwindSink","qualname":"::binemit::FrameUnwindSink","value":"FrameUnwindSink","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"decl_id":null,"docs":" Sink for frame unwind information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8826,"byte_end":8829,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"len","qualname":"::binemit::FrameUnwindSink::len","value":"fn (&self) -> FrameUnwindOffset","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Get the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8906,"byte_end":8911,"line_start":176,"line_end":176,"column_start":8,"column_end":13},"name":"bytes","qualname":"::binemit::FrameUnwindSink::bytes","value":"fn (&mut self, _: &[u8]) -> ()","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Add bytes to the code section.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":8980,"byte_end":8987,"line_start":179,"line_end":179,"column_start":8,"column_end":15},"name":"reserve","qualname":"::binemit::FrameUnwindSink::reserve","value":"fn (&mut self, _len: usize) -> ()","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Reserves bytes in the buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":9055,"byte_end":9060,"line_start":182,"line_end":182,"column_start":8,"column_end":13},"name":"reloc","qualname":"::binemit::FrameUnwindSink::reloc","value":"fn (&mut self, _: Reloc, _: FrameUnwindOffset) -> ()","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Add a relocation entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":9157,"byte_end":9173,"line_start":185,"line_end":185,"column_start":8,"column_end":24},"name":"set_entry_offset","qualname":"::binemit::FrameUnwindSink::set_entry_offset","value":"fn (&mut self, _: FrameUnwindOffset) -> ()","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Specified offset to main structure.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":208},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":9259,"byte_end":9271,"line_start":190,"line_end":190,"column_start":8,"column_end":20},"name":"bad_encoding","qualname":"::binemit::bad_encoding","value":"fn (func: &Function, inst: Inst) -> !","parent":null,"children":[],"decl_id":null,"docs":" Report a bad encoding error.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":9244,"byte_end":9251,"line_start":189,"line_end":189,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":9645,"byte_end":9658,"line_start":202,"line_end":202,"column_start":8,"column_end":21},"name":"emit_function","qualname":"::binemit::emit_function","value":"fn <CS, EI> (func: &Function, emit_inst: EI, sink: &mut CS, isa: &dyn TargetIsa) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emit a function to `sink`, given an instruction emitter function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cfg_printer","qualname":"::cfg_printer","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":231},{"krate":0,"index":238}],"decl_id":null,"docs":" The `CFGPrinter` utility.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":227},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":41897,"byte_end":41907,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"CFGPrinter","qualname":"::cfg_printer::CFGPrinter","value":"CFGPrinter {  }","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"decl_id":null,"docs":" A utility for pretty-printing the CFG of a `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":42097,"byte_end":42100,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<CFGPrinter>::new","value":"fn (func: &'a Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new CFGPrinter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":42296,"byte_end":42301,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"write","qualname":"<CFGPrinter>::write","value":"fn (&self, w: &mut dyn Write) -> Result","parent":null,"children":[],"decl_id":null,"docs":" Write the CFG for this function to `w`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":241},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor","qualname":"::cursor","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":5035},{"krate":0,"index":5055},{"krate":0,"index":5054},{"krate":0,"index":5051},{"krate":0,"index":5049},{"krate":0,"index":5047},{"krate":0,"index":244},{"krate":0,"index":283},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":301},{"krate":0,"index":307},{"krate":0,"index":314},{"krate":0,"index":321},{"krate":0,"index":329}],"decl_id":null,"docs":" Cursor library.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5036},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":44441,"byte_end":44448,"line_start":12,"line_end":12,"column_start":5,"column_end":12},"name":"Nowhere","qualname":"::cursor::CursorPosition::Nowhere","value":"CursorPosition::Nowhere","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Cursor is not pointing anywhere. No instructions can be inserted.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5038},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":44585,"byte_end":44587,"line_start":15,"line_end":15,"column_start":5,"column_end":7},"name":"At","qualname":"::cursor::CursorPosition::At","value":"CursorPosition::At(ir::Inst)","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Cursor is pointing at an existing instruction.\n New instructions will be inserted *before* the current instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5041},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":44767,"byte_end":44773,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Before","qualname":"::cursor::CursorPosition::Before","value":"CursorPosition::Before(ir::Block)","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Cursor is before the beginning of an block. No instructions can be inserted. Calling\n `next_inst()` will move to the first instruction in the block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5044},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":44900,"byte_end":44905,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"After","qualname":"::cursor::CursorPosition::After","value":"CursorPosition::After(ir::Block)","parent":{"krate":0,"index":5035},"children":[],"decl_id":null,"docs":" Cursor is pointing after the end of an block.\n New instructions will be appended to the block.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5035},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":44346,"byte_end":44360,"line_start":10,"line_end":10,"column_start":10,"column_end":24},"name":"CursorPosition","qualname":"::cursor::CursorPosition","value":"CursorPosition::{Nowhere, At, Before, After}","parent":null,"children":[{"krate":0,"index":5036},{"krate":0,"index":5038},{"krate":0,"index":5041},{"krate":0,"index":5044}],"decl_id":null,"docs":" The possible positions of a cursor.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":244},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45020,"byte_end":45026,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"Cursor","qualname":"::cursor::Cursor","value":"Cursor","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"decl_id":null,"docs":" All cursor types implement the `Cursor` which provides common navigation operations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45077,"byte_end":45085,"line_start":27,"line_end":27,"column_start":8,"column_end":16},"name":"position","qualname":"::cursor::Cursor::position","value":"fn (&self) -> CursorPosition","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Get the current cursor position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45154,"byte_end":45166,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"set_position","qualname":"::cursor::Cursor::set_position","value":"fn (&mut self, pos: CursorPosition) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Set the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45285,"byte_end":45291,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"srcloc","qualname":"::cursor::Cursor::srcloc","value":"fn (&self) -> ir::SourceLoc","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Get the source location that should be assigned to new instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45402,"byte_end":45412,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"set_srcloc","qualname":"::cursor::Cursor::set_srcloc","value":"fn (&mut self, srcloc: ir::SourceLoc) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Set the source location that should be assigned to new instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45538,"byte_end":45544,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"layout","qualname":"::cursor::Cursor::layout","value":"fn (&self) -> &ir::Layout","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Borrow a reference to the function layout that this cursor is navigating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":45666,"byte_end":45676,"line_start":42,"line_end":42,"column_start":8,"column_end":18},"name":"layout_mut","qualname":"::cursor::Cursor::layout_mut","value":"fn (&mut self) -> &mut ir::Layout","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Borrow a mutable reference to the function layout that this cursor is navigating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":46186,"byte_end":46197,"line_start":57,"line_end":57,"column_start":8,"column_end":19},"name":"with_srcloc","qualname":"::cursor::Cursor::with_srcloc","value":"fn (mut self, srcloc: ir::SourceLoc) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Exchange this cursor for one with a set source location.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":46385,"byte_end":46396,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"at_position","qualname":"::cursor::Cursor::at_position","value":"fn (mut self, pos: CursorPosition) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at `pos`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":46969,"byte_end":46976,"line_start":87,"line_end":87,"column_start":8,"column_end":15},"name":"at_inst","qualname":"::cursor::Cursor::at_inst","value":"fn (mut self, inst: ir::Inst) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":47728,"byte_end":47752,"line_start":110,"line_end":110,"column_start":8,"column_end":32},"name":"at_first_insertion_point","qualname":"::cursor::Cursor::at_first_insertion_point","value":"fn (mut self, block: ir::Block) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the first insertion point for `block`.\n This differs from `at_first_inst` in that it doesn't assume that any\n instructions have been inserted into `block` yet.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":48373,"byte_end":48386,"line_start":131,"line_end":131,"column_start":8,"column_end":21},"name":"at_first_inst","qualname":"::cursor::Cursor::at_first_inst","value":"fn (mut self, block: ir::Block) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the first instruction in `block`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":48994,"byte_end":49006,"line_start":152,"line_end":152,"column_start":8,"column_end":20},"name":"at_last_inst","qualname":"::cursor::Cursor::at_last_inst","value":"fn (mut self, block: ir::Block) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the last instruction in `block`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":49586,"byte_end":49596,"line_start":173,"line_end":173,"column_start":8,"column_end":18},"name":"after_inst","qualname":"::cursor::Cursor::after_inst","value":"fn (mut self, inst: ir::Inst) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned after `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":50182,"byte_end":50188,"line_start":194,"line_end":194,"column_start":8,"column_end":14},"name":"at_top","qualname":"::cursor::Cursor::at_top","value":"fn (mut self, block: ir::Block) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the top of `block`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":50776,"byte_end":50785,"line_start":215,"line_end":215,"column_start":8,"column_end":17},"name":"at_bottom","qualname":"::cursor::Cursor::at_bottom","value":"fn (mut self, block: ir::Block) -> Self","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Rebuild this cursor positioned at the bottom of `block`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":50980,"byte_end":50993,"line_start":224,"line_end":224,"column_start":8,"column_end":21},"name":"current_block","qualname":"::cursor::Cursor::current_block","value":"fn (&self) -> Option<ir::Block>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Get the block corresponding to the current position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":51334,"byte_end":51346,"line_start":234,"line_end":234,"column_start":8,"column_end":20},"name":"current_inst","qualname":"::cursor::Cursor::current_inst","value":"fn (&self) -> Option<ir::Inst>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Get the instruction corresponding to the current position, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":51679,"byte_end":51694,"line_start":244,"line_end":244,"column_start":8,"column_end":23},"name":"goto_after_inst","qualname":"::cursor::Cursor::goto_after_inst","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the position after a specific instruction, which must be inserted\n in the layout. New instructions will be inserted after `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":52288,"byte_end":52297,"line_start":260,"line_end":260,"column_start":8,"column_end":17},"name":"goto_inst","qualname":"::cursor::Cursor::goto_inst","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to a specific instruction which must be inserted in the layout.\n New instructions will be inserted before `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":52663,"byte_end":52689,"line_start":268,"line_end":268,"column_start":8,"column_end":34},"name":"goto_first_insertion_point","qualname":"::cursor::Cursor::goto_first_insertion_point","value":"fn (&mut self, block: ir::Block) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the position for inserting instructions at the beginning of `block`,\n which unlike `goto_first_inst` doesn't assume that any instructions have\n been inserted into `block` yet.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":52943,"byte_end":52958,"line_start":277,"line_end":277,"column_start":8,"column_end":23},"name":"goto_first_inst","qualname":"::cursor::Cursor::goto_first_inst","value":"fn (&mut self, block: ir::Block) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the first instruction in `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":53155,"byte_end":53169,"line_start":283,"line_end":283,"column_start":8,"column_end":22},"name":"goto_last_inst","qualname":"::cursor::Cursor::goto_last_inst","value":"fn (&mut self, block: ir::Block) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the last instruction in `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":53523,"byte_end":53531,"line_start":291,"line_end":291,"column_start":8,"column_end":16},"name":"goto_top","qualname":"::cursor::Cursor::goto_top","value":"fn (&mut self, block: ir::Block) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the top of `block` which must be inserted into the layout.\n At this position, instructions cannot be inserted, but `next_inst()` will move to the first\n instruction in `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":53851,"byte_end":53862,"line_start":298,"line_end":298,"column_start":8,"column_end":19},"name":"goto_bottom","qualname":"::cursor::Cursor::goto_bottom","value":"fn (&mut self, block: ir::Block) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the bottom of `block` which must be inserted into the layout.\n At this position, inserted instructions will be appended to `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":54803,"byte_end":54813,"line_start":323,"line_end":323,"column_start":8,"column_end":18},"name":"next_block","qualname":"::cursor::Cursor::next_block","value":"fn (&mut self) -> Option<ir::Block>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the top of the next block in layout order and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":55998,"byte_end":56008,"line_start":356,"line_end":356,"column_start":8,"column_end":18},"name":"prev_block","qualname":"::cursor::Cursor::prev_block","value":"fn (&mut self) -> Option<ir::Block>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Go to the bottom of the previous block in layout order and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":57989,"byte_end":57998,"line_start":409,"line_end":409,"column_start":8,"column_end":17},"name":"next_inst","qualname":"::cursor::Cursor::next_inst","value":"fn (&mut self) -> Option<ir::Inst>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Move to the next instruction in the same block and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":59996,"byte_end":60005,"line_start":463,"line_end":463,"column_start":8,"column_end":17},"name":"prev_inst","qualname":"::cursor::Cursor::prev_inst","value":"fn (&mut self) -> Option<ir::Inst>","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Move to the previous instruction in the same block and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":61475,"byte_end":61486,"line_start":502,"line_end":502,"column_start":8,"column_end":19},"name":"insert_inst","qualname":"::cursor::Cursor::insert_inst","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Insert an instruction at the current position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":62023,"byte_end":62034,"line_start":516,"line_end":516,"column_start":8,"column_end":19},"name":"remove_inst","qualname":"::cursor::Cursor::remove_inst","value":"fn (&mut self) -> ir::Inst","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Remove the instruction under the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":62434,"byte_end":62459,"line_start":528,"line_end":528,"column_start":8,"column_end":33},"name":"remove_inst_and_step_back","qualname":"::cursor::Cursor::remove_inst_and_step_back","value":"fn (&mut self) -> ir::Inst","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Remove the instruction under the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":63632,"byte_end":63644,"line_start":549,"line_end":549,"column_start":8,"column_end":20},"name":"insert_block","qualname":"::cursor::Cursor::insert_block","value":"fn (&mut self, new_block: ir::Block) -> ()","parent":{"krate":0,"index":244},"children":[],"decl_id":null,"docs":" Insert an block at the current position and switch to it.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":283},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":64673,"byte_end":64683,"line_start":573,"line_end":573,"column_start":12,"column_end":22},"name":"FuncCursor","qualname":"::cursor::FuncCursor","value":"FuncCursor { func }","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"decl_id":null,"docs":" Function cursor.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":287},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":64784,"byte_end":64788,"line_start":578,"line_end":578,"column_start":9,"column_end":13},"name":"func","qualname":"::cursor::FuncCursor::func","value":"&'f mut ir::function::Function","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" The referenced function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":64904,"byte_end":64907,"line_start":583,"line_end":583,"column_start":12,"column_end":15},"name":"new","qualname":"<FuncCursor>::new","value":"fn (func: &'f mut ir::Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FuncCursor` pointing nowhere.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":65156,"byte_end":65166,"line_start":592,"line_end":592,"column_start":12,"column_end":22},"name":"use_srcloc","qualname":"<FuncCursor>::use_srcloc","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Use the source location of `inst` for future instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":65352,"byte_end":65355,"line_start":597,"line_end":597,"column_start":12,"column_end":15},"name":"ins","qualname":"<FuncCursor>::ins","value":"fn (&mut self) -> ir::InsertBuilder<&mut FuncCursor<'f>>","parent":null,"children":[],"decl_id":null,"docs":" Create an instruction builder that inserts an instruction at the current position.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":307},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":67743,"byte_end":67752,"line_start":673,"line_end":673,"column_start":12,"column_end":21},"name":"EncCursor","qualname":"::cursor::EncCursor","value":"EncCursor { func, isa }","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313}],"decl_id":null,"docs":" Encoding cursor.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":312},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":67887,"byte_end":67891,"line_start":679,"line_end":679,"column_start":9,"column_end":13},"name":"func","qualname":"::cursor::EncCursor::func","value":"&'f mut ir::function::Function","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" The referenced function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":313},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":67989,"byte_end":67992,"line_start":682,"line_end":682,"column_start":9,"column_end":12},"name":"isa","qualname":"::cursor::EncCursor::isa","value":"&'f (dyn isa::TargetIsa + 'f)","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" The target ISA that will be used to encode instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":68103,"byte_end":68106,"line_start":687,"line_end":687,"column_start":12,"column_end":15},"name":"new","qualname":"<EncCursor>::new","value":"fn (func: &'f mut ir::Function, isa: &'f dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EncCursor` pointing nowhere.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":68426,"byte_end":68436,"line_start":698,"line_end":698,"column_start":12,"column_end":22},"name":"use_srcloc","qualname":"<EncCursor>::use_srcloc","value":"fn (&mut self, inst: ir::Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Use the source location of `inst` for future instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":68766,"byte_end":68769,"line_start":707,"line_end":707,"column_start":12,"column_end":15},"name":"ins","qualname":"<EncCursor>::ins","value":"fn (&mut self) -> ir::InsertBuilder<&mut EncCursor<'f>>","parent":null,"children":[],"decl_id":null,"docs":" Create an instruction builder that will insert an encoded instruction at the current\n position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":69069,"byte_end":69079,"line_start":715,"line_end":715,"column_start":12,"column_end":22},"name":"built_inst","qualname":"<EncCursor>::built_inst","value":"fn (&self) -> ir::Inst","parent":null,"children":[],"decl_id":null,"docs":" Get the last built instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":69301,"byte_end":69313,"line_start":722,"line_end":722,"column_start":12,"column_end":24},"name":"display_inst","qualname":"<EncCursor>::display_inst","value":"fn (&self, inst: ir::Inst) -> ir::dfg::DisplayInst","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display `inst`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":335},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dbg.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dbg","qualname":"::dbg","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dbg.rs","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":343}],"decl_id":null,"docs":" Debug tracing helpers.\n","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":337},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dbg.rs","byte_start":72182,"byte_end":72201,"line_start":5,"line_end":5,"column_start":12,"column_end":31},"name":"LOG_FILENAME_PREFIX","qualname":"::dbg::LOG_FILENAME_PREFIX","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Prefix added to the log file names, just before the thread name or id.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":338},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dbg.rs","byte_start":72271,"byte_end":72282,"line_start":8,"line_end":8,"column_start":12,"column_end":23},"name":"DisplayList","qualname":"::dbg::DisplayList","value":"","parent":null,"children":[],"decl_id":null,"docs":" Helper for printing lists.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":347},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dominator_tree","qualname":"::dominator_tree","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":5057},{"krate":0,"index":5062},{"krate":0,"index":5060},{"krate":0,"index":370},{"krate":0,"index":375},{"krate":0,"index":389},{"krate":0,"index":401},{"krate":0,"index":5064},{"krate":0,"index":5071},{"krate":0,"index":5069},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":411},{"krate":0,"index":415}],"decl_id":null,"docs":" A Dominator Tree represented as mappings of Blocks to their immediate dominator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":370},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":74304,"byte_end":74317,"line_start":40,"line_end":40,"column_start":12,"column_end":25},"name":"DominatorTree","qualname":"::dominator_tree::DominatorTree","value":"DominatorTree {  }","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" The dominator tree for a single function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":74664,"byte_end":74676,"line_start":55,"line_end":55,"column_start":12,"column_end":24},"name":"is_reachable","qualname":"<DominatorTree>::is_reachable","value":"fn (&self, block: Block) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is `block` reachable from the entry block?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":75014,"byte_end":75027,"line_start":63,"line_end":63,"column_start":12,"column_end":25},"name":"cfg_postorder","qualname":"<DominatorTree>::cfg_postorder","value":"fn (&self) -> &[Block]","parent":null,"children":[],"decl_id":null,"docs":" Get the CFG post-order of blocks that was used to compute the dominator tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":75873,"byte_end":75877,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"idom","qualname":"<DominatorTree>::idom","value":"fn (&self, block: Block) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the immediate dominator of `block`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":76461,"byte_end":76468,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"rpo_cmp","qualname":"<DominatorTree>::rpo_cmp","value":"fn <A, B> (&self, a: A, b: B, layout: &Layout) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two program points relative to a reverse post-order traversal of the control-flow\n graph.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":77232,"byte_end":77241,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"dominates","qualname":"<DominatorTree>::dominates","value":"fn <A, B> (&self, a: A, b: B, layout: &Layout) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `a` dominates `b`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":78152,"byte_end":78166,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"last_dominator","qualname":"<DominatorTree>::last_dominator","value":"fn <B> (&self, a: Block, b: B, layout: &Layout) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Find the last instruction in `a` that dominates `b`.\n If no instructions in `a` dominate `b`, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":79338,"byte_end":79354,"line_start":175,"line_end":175,"column_start":12,"column_end":28},"name":"common_dominator","qualname":"<DominatorTree>::common_dominator","value":"fn (&self, mut a: BlockPredecessor, mut b: BlockPredecessor, layout: &Layout) -> BlockPredecessor","parent":null,"children":[],"decl_id":null,"docs":" Compute the common dominator of two basic blocks.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":80912,"byte_end":80915,"line_start":220,"line_end":220,"column_start":12,"column_end":15},"name":"new","qualname":"<DominatorTree>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new blank dominator tree. Use `compute` to compute the dominator tree for a\n function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":81150,"byte_end":81163,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"with_function","qualname":"<DominatorTree>::with_function","value":"fn (func: &Function, cfg: &ControlFlowGraph) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate and compute a dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":81631,"byte_end":81638,"line_start":243,"line_end":243,"column_start":12,"column_end":19},"name":"compute","qualname":"<DominatorTree>::compute","value":"fn (&mut self, func: &Function, cfg: &ControlFlowGraph) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset and compute a CFG post-order and dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":82043,"byte_end":82048,"line_start":253,"line_end":253,"column_start":12,"column_end":17},"name":"clear","qualname":"<DominatorTree>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the data structures used to represent the dominator tree. This will leave the tree in\n a state where `is_valid()` returns false.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":82518,"byte_end":82526,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<DominatorTree>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the dominator tree is in a valid state.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":91603,"byte_end":91624,"line_start":463,"line_end":463,"column_start":12,"column_end":33},"name":"DominatorTreePreorder","qualname":"::dominator_tree::DominatorTreePreorder","value":"DominatorTreePreorder {  }","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"decl_id":null,"docs":" Optional pre-order information that can be computed for a dominator tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":92479,"byte_end":92482,"line_start":490,"line_end":490,"column_start":12,"column_end":15},"name":"new","qualname":"<DominatorTreePreorder>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank `DominatorTreePreorder`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":92667,"byte_end":92674,"line_start":498,"line_end":498,"column_start":12,"column_end":19},"name":"compute","qualname":"<DominatorTreePreorder>::compute","value":"fn (&mut self, domtree: &DominatorTree, layout: &Layout) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Recompute this data structure to match `domtree`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":407},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":94694,"byte_end":94703,"line_start":547,"line_end":547,"column_start":12,"column_end":21},"name":"ChildIter","qualname":"::dominator_tree::ChildIter","value":"ChildIter {  }","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410}],"decl_id":null,"docs":" An iterator that enumerates the direct children of an block in the dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":95367,"byte_end":95375,"line_start":570,"line_end":570,"column_start":12,"column_end":20},"name":"children","qualname":"<DominatorTreePreorder>::children","value":"fn (&self, block: Block) -> ChildIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the direct children of `block` in the dominator tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":95886,"byte_end":95895,"line_start":584,"line_end":584,"column_start":12,"column_end":21},"name":"dominates","qualname":"<DominatorTreePreorder>::dominates","value":"fn (&self, a: Block, b: Block) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Fast, constant time dominance check with block granularity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":96149,"byte_end":96162,"line_start":591,"line_end":591,"column_start":12,"column_end":25},"name":"pre_cmp_block","qualname":"<DominatorTreePreorder>::pre_cmp_block","value":"fn (&self, a: Block, b: Block) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two blocks according to the dominator pre-order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":96568,"byte_end":96575,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"name":"pre_cmp","qualname":"<DominatorTreePreorder>::pre_cmp","value":"fn <A, B> (&self, a: A, b: B, layout: &Layout) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two program points according to the dominator tree pre-order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":97171,"byte_end":97182,"line_start":616,"line_end":616,"column_start":12,"column_end":23},"name":"pre_cmp_def","qualname":"<DominatorTreePreorder>::pre_cmp_def","value":"fn (&self, a: Value, b: Value, func: &Function) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Compare two value defs according to the dominator tree pre-order.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":424},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flowgraph","qualname":"::flowgraph","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":5073},{"krate":0,"index":5081},{"krate":0,"index":5078},{"krate":0,"index":5076},{"krate":0,"index":434},{"krate":0,"index":5083},{"krate":0,"index":5088},{"krate":0,"index":5086},{"krate":0,"index":436},{"krate":0,"index":441},{"krate":0,"index":454},{"krate":0,"index":458},{"krate":0,"index":463}],"decl_id":null,"docs":" A control flow graph represented as mappings of basic blocks to their predecessors\n and successors.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5073},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":106657,"byte_end":106673,"line_start":35,"line_end":35,"column_start":12,"column_end":28},"name":"BlockPredecessor","qualname":"::flowgraph::BlockPredecessor","value":"BlockPredecessor { block, inst }","parent":null,"children":[{"krate":0,"index":5074},{"krate":0,"index":5075}],"decl_id":null,"docs":" A basic block denoted by its enclosing Block and last instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5074},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":106713,"byte_end":106718,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"block","qualname":"::flowgraph::BlockPredecessor::block","value":"ir::entities::Block","parent":{"krate":0,"index":5073},"children":[],"decl_id":null,"docs":" Enclosing Block key.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5075},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":106780,"byte_end":106784,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"inst","qualname":"::flowgraph::BlockPredecessor::inst","value":"ir::entities::Inst","parent":{"krate":0,"index":5073},"children":[],"decl_id":null,"docs":" Last instruction in the basic block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":106891,"byte_end":106894,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockPredecessor>::new","value":"fn (block: Block, inst: Inst) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenient method to construct new BlockPredecessor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":436},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":108260,"byte_end":108276,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"ControlFlowGraph","qualname":"::flowgraph::ControlFlowGraph","value":"ControlFlowGraph {  }","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" The Control Flow Graph maintains a mapping of blocks to their predecessors\n and successors where predecessors are basic blocks and successors are\n basic blocks.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":108517,"byte_end":108520,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<ControlFlowGraph>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new blank control flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":108807,"byte_end":108812,"line_start":93,"line_end":93,"column_start":12,"column_end":17},"name":"clear","qualname":"<ControlFlowGraph>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this control flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":109031,"byte_end":109044,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"with_function","qualname":"<ControlFlowGraph>::with_function","value":"fn (func: &Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate and compute the control flow graph for `func`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":109315,"byte_end":109322,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"compute","qualname":"<ControlFlowGraph>::compute","value":"fn (&mut self, func: &Function) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the control flow graph of `func`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":111412,"byte_end":111427,"line_start":160,"line_end":160,"column_start":12,"column_end":27},"name":"recompute_block","qualname":"<ControlFlowGraph>::recompute_block","value":"fn (&mut self, func: &Function, block: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Recompute the control flow graph of `block`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":111974,"byte_end":111983,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"pred_iter","qualname":"<ControlFlowGraph>::pred_iter","value":"fn (&self, block: Block) -> PredIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the CFG predecessors to `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":112169,"byte_end":112178,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"succ_iter","qualname":"<ControlFlowGraph>::succ_iter","value":"fn (&self, block: Block) -> SuccIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the CFG successors to `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":112619,"byte_end":112627,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ControlFlowGraph>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the CFG is in a valid state.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":112837,"byte_end":112845,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"PredIter","qualname":"::flowgraph::PredIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over block predecessors. The iterator type is `BlockPredecessor`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":463},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":113163,"byte_end":113171,"line_start":210,"line_end":210,"column_start":10,"column_end":18},"name":"SuccIter","qualname":"::flowgraph::SuccIter","value":"bforest::SetIter<'a, Block>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over block successors. The iterator type is `Block`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":465},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ir","qualname":"::ir","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":537},{"krate":0,"index":598},{"krate":0,"index":745},{"krate":0,"index":795},{"krate":0,"index":866},{"krate":0,"index":886},{"krate":0,"index":895},{"krate":0,"index":1002},{"krate":0,"index":1017},{"krate":0,"index":1025},{"krate":0,"index":1151},{"krate":0,"index":1279},{"krate":0,"index":1302},{"krate":0,"index":1394},{"krate":0,"index":1428},{"krate":0,"index":1454},{"krate":0,"index":1492},{"krate":0,"index":1502},{"krate":0,"index":1562},{"krate":0,"index":1570},{"krate":0,"index":1584},{"krate":0,"index":1631},{"krate":0,"index":1671},{"krate":0,"index":1677},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1697},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1708},{"krate":0,"index":1711},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":7545},{"krate":0,"index":7558},{"krate":0,"index":7556},{"krate":0,"index":7553},{"krate":0,"index":7551},{"krate":0,"index":7548},{"krate":0,"index":7563},{"krate":0,"index":7566},{"krate":0,"index":7568},{"krate":0,"index":7559},{"krate":0,"index":7561},{"krate":0,"index":7571},{"krate":0,"index":7576},{"krate":0,"index":7574},{"krate":0,"index":7578},{"krate":0,"index":7587},{"krate":0,"index":7585}],"decl_id":null,"docs":" Representation of Cranelift IR functions.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":478},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":122545,"byte_end":122560,"line_start":20,"line_end":20,"column_start":11,"column_end":26},"name":"InstBuilderBase","qualname":"::ir::builder::InstBuilderBase","value":"InstBuilderBase<'f>: Sized","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Base trait for instruction builders.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":122692,"byte_end":122707,"line_start":23,"line_end":23,"column_start":8,"column_end":23},"name":"data_flow_graph","qualname":"::ir::builder::InstBuilderBase::data_flow_graph","value":"fn (&self) -> &DataFlowGraph","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Get an immutable reference to the data flow graph that will hold the constructed\n instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":122849,"byte_end":122868,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"data_flow_graph_mut","qualname":"::ir::builder::InstBuilderBase::data_flow_graph_mut","value":"fn (&mut self) -> &mut DataFlowGraph","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Get a mutable reference to the data flow graph that will hold the constructed\n instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":123182,"byte_end":123187,"line_start":32,"line_end":32,"column_start":8,"column_end":13},"name":"build","qualname":"::ir::builder::InstBuilderBase::build","value":"fn (self, data: InstructionData, ctrl_typevar: Type) -> (Inst, &'f mut DataFlowGraph)","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Insert an instruction and return a reference to it, consuming the builder.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":5090},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10780976,"byte_end":10780987,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"InstBuilder","qualname":"::ir::builder::InstBuilder","value":"InstBuilder<'f>: InstBuilderBase<'f>","parent":null,"children":[{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5094},{"krate":0,"index":5095},{"krate":0,"index":5096},{"krate":0,"index":5098},{"krate":0,"index":5100},{"krate":0,"index":5102},{"krate":0,"index":5103},{"krate":0,"index":5105},{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5110},{"krate":0,"index":5112},{"krate":0,"index":5114},{"krate":0,"index":5116},{"krate":0,"index":5119},{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5124},{"krate":0,"index":5125},{"krate":0,"index":5126},{"krate":0,"index":5127},{"krate":0,"index":5128},{"krate":0,"index":5129},{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5135},{"krate":0,"index":5138},{"krate":0,"index":5141},{"krate":0,"index":5144},{"krate":0,"index":5147},{"krate":0,"index":5150},{"krate":0,"index":5153},{"krate":0,"index":5156},{"krate":0,"index":5159},{"krate":0,"index":5162},{"krate":0,"index":5165},{"krate":0,"index":5168},{"krate":0,"index":5171},{"krate":0,"index":5174},{"krate":0,"index":5177},{"krate":0,"index":5180},{"krate":0,"index":5183},{"krate":0,"index":5186},{"krate":0,"index":5189},{"krate":0,"index":5192},{"krate":0,"index":5195},{"krate":0,"index":5198},{"krate":0,"index":5200},{"krate":0,"index":5202},{"krate":0,"index":5204},{"krate":0,"index":5205},{"krate":0,"index":5206},{"krate":0,"index":5208},{"krate":0,"index":5209},{"krate":0,"index":5210},{"krate":0,"index":5212},{"krate":0,"index":5214},{"krate":0,"index":5216},{"krate":0,"index":5218},{"krate":0,"index":5220},{"krate":0,"index":5222},{"krate":0,"index":5224},{"krate":0,"index":5225},{"krate":0,"index":5226},{"krate":0,"index":5227},{"krate":0,"index":5229},{"krate":0,"index":5230},{"krate":0,"index":5231},{"krate":0,"index":5232},{"krate":0,"index":5233},{"krate":0,"index":5234},{"krate":0,"index":5237},{"krate":0,"index":5240},{"krate":0,"index":5242},{"krate":0,"index":5243},{"krate":0,"index":5244},{"krate":0,"index":5246},{"krate":0,"index":5248},{"krate":0,"index":5249},{"krate":0,"index":5251},{"krate":0,"index":5253},{"krate":0,"index":5254},{"krate":0,"index":5255},{"krate":0,"index":5256},{"krate":0,"index":5257},{"krate":0,"index":5258},{"krate":0,"index":5259},{"krate":0,"index":5260},{"krate":0,"index":5262},{"krate":0,"index":5264},{"krate":0,"index":5266},{"krate":0,"index":5269},{"krate":0,"index":5270},{"krate":0,"index":5272},{"krate":0,"index":5273},{"krate":0,"index":5274},{"krate":0,"index":5275},{"krate":0,"index":5276},{"krate":0,"index":5277},{"krate":0,"index":5278},{"krate":0,"index":5279},{"krate":0,"index":5280},{"krate":0,"index":5281},{"krate":0,"index":5282},{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5285},{"krate":0,"index":5286},{"krate":0,"index":5288},{"krate":0,"index":5290},{"krate":0,"index":5292},{"krate":0,"index":5294},{"krate":0,"index":5296},{"krate":0,"index":5298},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":5302},{"krate":0,"index":5303},{"krate":0,"index":5304},{"krate":0,"index":5305},{"krate":0,"index":5306},{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5309},{"krate":0,"index":5310},{"krate":0,"index":5311},{"krate":0,"index":5312},{"krate":0,"index":5313},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5316},{"krate":0,"index":5317},{"krate":0,"index":5318},{"krate":0,"index":5319},{"krate":0,"index":5321},{"krate":0,"index":5323},{"krate":0,"index":5325},{"krate":0,"index":5326},{"krate":0,"index":5327},{"krate":0,"index":5329},{"krate":0,"index":5331},{"krate":0,"index":5332},{"krate":0,"index":5333},{"krate":0,"index":5334},{"krate":0,"index":5336},{"krate":0,"index":5338},{"krate":0,"index":5340},{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343},{"krate":0,"index":5344},{"krate":0,"index":5345},{"krate":0,"index":5347},{"krate":0,"index":5348},{"krate":0,"index":5349},{"krate":0,"index":5350},{"krate":0,"index":5351},{"krate":0,"index":5352},{"krate":0,"index":5353},{"krate":0,"index":5354},{"krate":0,"index":5355},{"krate":0,"index":5356},{"krate":0,"index":5357},{"krate":0,"index":5358},{"krate":0,"index":5359},{"krate":0,"index":5360},{"krate":0,"index":5361},{"krate":0,"index":5362},{"krate":0,"index":5363},{"krate":0,"index":5364},{"krate":0,"index":5365},{"krate":0,"index":5367},{"krate":0,"index":5369},{"krate":0,"index":5370},{"krate":0,"index":5371},{"krate":0,"index":5372},{"krate":0,"index":5373},{"krate":0,"index":5374},{"krate":0,"index":5375},{"krate":0,"index":5376},{"krate":0,"index":5377},{"krate":0,"index":5378},{"krate":0,"index":5379},{"krate":0,"index":5380},{"krate":0,"index":5381},{"krate":0,"index":5382},{"krate":0,"index":5383},{"krate":0,"index":5384},{"krate":0,"index":5385},{"krate":0,"index":5386},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5394},{"krate":0,"index":5395},{"krate":0,"index":5396},{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5400},{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5405},{"krate":0,"index":5407},{"krate":0,"index":5409},{"krate":0,"index":5410},{"krate":0,"index":5411},{"krate":0,"index":5412},{"krate":0,"index":5413},{"krate":0,"index":5414},{"krate":0,"index":5415},{"krate":0,"index":5416},{"krate":0,"index":5417},{"krate":0,"index":5418},{"krate":0,"index":5419},{"krate":0,"index":5420},{"krate":0,"index":5421},{"krate":0,"index":5422},{"krate":0,"index":5423},{"krate":0,"index":5424},{"krate":0,"index":5425},{"krate":0,"index":5426},{"krate":0,"index":5427},{"krate":0,"index":5428},{"krate":0,"index":5429},{"krate":0,"index":5430},{"krate":0,"index":5431},{"krate":0,"index":5432},{"krate":0,"index":5433},{"krate":0,"index":5434},{"krate":0,"index":5435},{"krate":0,"index":5436},{"krate":0,"index":5437},{"krate":0,"index":5438},{"krate":0,"index":5439},{"krate":0,"index":5440},{"krate":0,"index":5441},{"krate":0,"index":5442},{"krate":0,"index":5443},{"krate":0,"index":5444},{"krate":0,"index":5445},{"krate":0,"index":5446},{"krate":0,"index":5447},{"krate":0,"index":5448},{"krate":0,"index":5449},{"krate":0,"index":5450},{"krate":0,"index":5451},{"krate":0,"index":5452},{"krate":0,"index":5453},{"krate":0,"index":5454},{"krate":0,"index":5455},{"krate":0,"index":5456},{"krate":0,"index":5457},{"krate":0,"index":5458},{"krate":0,"index":5459},{"krate":0,"index":5460},{"krate":0,"index":5461},{"krate":0,"index":5462},{"krate":0,"index":5463},{"krate":0,"index":5464},{"krate":0,"index":5465},{"krate":0,"index":5466},{"krate":0,"index":5467},{"krate":0,"index":5468}],"decl_id":null,"docs":" Convenience methods for building instructions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5092},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10781348,"byte_end":10781352,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"jump","qualname":"::ir::builder::InstBuilder::jump","value":"fn (mut self, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Jump.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10781316,"byte_end":10781340,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5093},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10782141,"byte_end":10782152,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"fallthrough","qualname":"::ir::builder::InstBuilder::fallthrough","value":"fn (mut self, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Fall through to the next block.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10782109,"byte_end":10782133,"line_start":48,"line_end":48,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5094},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10782832,"byte_end":10782835,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"brz","qualname":"::ir::builder::InstBuilder::brz","value":"fn (mut self, c: ir::Value, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Branch when zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10782800,"byte_end":10782824,"line_start":68,"line_end":68,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5095},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10783623,"byte_end":10783627,"line_start":91,"line_end":91,"column_start":8,"column_end":12},"name":"brnz","qualname":"::ir::builder::InstBuilder::brnz","value":"fn (mut self, c: ir::Value, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Branch when non-zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10783591,"byte_end":10783615,"line_start":90,"line_end":90,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5096},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10784984,"byte_end":10784991,"line_start":130,"line_end":130,"column_start":8,"column_end":15},"name":"br_icmp","qualname":"::ir::builder::InstBuilder::br_icmp","value":"fn <T1> (mut self, Cond: T1, x: ir::Value, y: ir::Value, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compare scalar integers and branch.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10784952,"byte_end":10784976,"line_start":129,"line_end":129,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5098},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10785954,"byte_end":10785958,"line_start":153,"line_end":153,"column_start":8,"column_end":12},"name":"brif","qualname":"::ir::builder::InstBuilder::brif","value":"fn <T1> (mut self, Cond: T1, f: ir::Value, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Branch when condition is true in integer CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10785922,"byte_end":10785946,"line_start":152,"line_end":152,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5100},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10786827,"byte_end":10786831,"line_start":174,"line_end":174,"column_start":8,"column_end":12},"name":"brff","qualname":"::ir::builder::InstBuilder::brff","value":"fn <T1> (mut self, Cond: T1, f: ir::Value, block: ir::Block, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Branch when condition is true in floating point CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10786795,"byte_end":10786819,"line_start":173,"line_end":173,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5102},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10788230,"byte_end":10788238,"line_start":206,"line_end":206,"column_start":8,"column_end":16},"name":"br_table","qualname":"::ir::builder::InstBuilder::br_table","value":"fn (self, x: ir::Value, block: ir::Block, JT: ir::JumpTable) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Indirect branch via jump table.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10788198,"byte_end":10788222,"line_start":205,"line_end":205,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5103},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10789117,"byte_end":10789133,"line_start":231,"line_end":231,"column_start":8,"column_end":24},"name":"jump_table_entry","qualname":"::ir::builder::InstBuilder::jump_table_entry","value":"fn <T1> (self, x: ir::Value, addr: ir::Value, Size: T1, JT: ir::JumpTable) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Get an entry from a jump table.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10789085,"byte_end":10789109,"line_start":230,"line_end":230,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5105},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10790070,"byte_end":10790085,"line_start":254,"line_end":254,"column_start":8,"column_end":23},"name":"jump_table_base","qualname":"::ir::builder::InstBuilder::jump_table_base","value":"fn (self, iAddr: crate::ir::Type, JT: ir::JumpTable) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Get the absolute base address of a jump table.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10790038,"byte_end":10790062,"line_start":253,"line_end":253,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5106},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10790590,"byte_end":10790612,"line_start":269,"line_end":269,"column_start":8,"column_end":30},"name":"indirect_jump_table_br","qualname":"::ir::builder::InstBuilder::indirect_jump_table_br","value":"fn (self, addr: ir::Value, JT: ir::JumpTable) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Branch indirectly via a jump table entry.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10790558,"byte_end":10790582,"line_start":268,"line_end":268,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5107},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10790897,"byte_end":10790906,"line_start":276,"line_end":276,"column_start":8,"column_end":17},"name":"debugtrap","qualname":"::ir::builder::InstBuilder::debugtrap","value":"fn (self) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Encodes an assembly debug trap.\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10790865,"byte_end":10790889,"line_start":275,"line_end":275,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5108},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10791137,"byte_end":10791141,"line_start":286,"line_end":286,"column_start":8,"column_end":12},"name":"trap","qualname":"::ir::builder::InstBuilder::trap","value":"fn <T1> (self, code: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Terminate execution unconditionally.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10791105,"byte_end":10791129,"line_start":285,"line_end":285,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5110},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10791542,"byte_end":10791547,"line_start":300,"line_end":300,"column_start":8,"column_end":13},"name":"trapz","qualname":"::ir::builder::InstBuilder::trapz","value":"fn <T1> (self, c: ir::Value, code: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Trap when zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10791510,"byte_end":10791534,"line_start":299,"line_end":299,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5112},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10792011,"byte_end":10792025,"line_start":314,"line_end":314,"column_start":8,"column_end":22},"name":"resumable_trap","qualname":"::ir::builder::InstBuilder::resumable_trap","value":"fn <T1> (self, code: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" A resumable trap.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10791979,"byte_end":10792003,"line_start":313,"line_end":313,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5114},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10792435,"byte_end":10792441,"line_start":328,"line_end":328,"column_start":8,"column_end":14},"name":"trapnz","qualname":"::ir::builder::InstBuilder::trapnz","value":"fn <T1> (self, c: ir::Value, code: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Trap when non-zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10792403,"byte_end":10792427,"line_start":327,"line_end":327,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5116},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10793034,"byte_end":10793040,"line_start":343,"line_end":343,"column_start":8,"column_end":14},"name":"trapif","qualname":"::ir::builder::InstBuilder::trapif","value":"fn <T1, T2> (self, Cond: T1, f: ir::Value, code: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Trap when condition is true in integer CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10793002,"byte_end":10793026,"line_start":342,"line_end":342,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5119},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10793672,"byte_end":10793678,"line_start":358,"line_end":358,"column_start":8,"column_end":14},"name":"trapff","qualname":"::ir::builder::InstBuilder::trapff","value":"fn <T1, T2> (self, Cond: T1, f: ir::Value, code: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Trap when condition is true in floating point CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10793640,"byte_end":10793664,"line_start":357,"line_end":357,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5122},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10794269,"byte_end":10794276,"line_start":374,"line_end":374,"column_start":8,"column_end":15},"name":"return_","qualname":"::ir::builder::InstBuilder::return_","value":"fn (mut self, rvals: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Return from the function.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10794237,"byte_end":10794261,"line_start":373,"line_end":373,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5123},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10794919,"byte_end":10794937,"line_start":393,"line_end":393,"column_start":8,"column_end":26},"name":"fallthrough_return","qualname":"::ir::builder::InstBuilder::fallthrough_return","value":"fn (mut self, rvals: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Return from the function by fallthrough.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10794887,"byte_end":10794911,"line_start":392,"line_end":392,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5124},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10795634,"byte_end":10795638,"line_start":416,"line_end":416,"column_start":8,"column_end":12},"name":"call","qualname":"::ir::builder::InstBuilder::call","value":"fn (mut self, FN: ir::FuncRef, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Direct function call.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10795602,"byte_end":10795626,"line_start":415,"line_end":415,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5125},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10796630,"byte_end":10796643,"line_start":445,"line_end":445,"column_start":8,"column_end":21},"name":"call_indirect","qualname":"::ir::builder::InstBuilder::call_indirect","value":"fn (mut self, SIG: ir::SigRef, callee: ir::Value, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Indirect function call.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10796598,"byte_end":10796622,"line_start":444,"line_end":444,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5126},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10797714,"byte_end":10797723,"line_start":473,"line_end":473,"column_start":8,"column_end":17},"name":"func_addr","qualname":"::ir::builder::InstBuilder::func_addr","value":"fn (self, iAddr: crate::ir::Type, FN: ir::FuncRef) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Get the address of a function.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10797682,"byte_end":10797706,"line_start":472,"line_end":472,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5127},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10798158,"byte_end":10798162,"line_start":489,"line_end":489,"column_start":8,"column_end":12},"name":"imin","qualname":"::ir::builder::InstBuilder::imin","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer minimum.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10798126,"byte_end":10798150,"line_start":488,"line_end":488,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5128},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10798654,"byte_end":10798658,"line_start":506,"line_end":506,"column_start":8,"column_end":12},"name":"umin","qualname":"::ir::builder::InstBuilder::umin","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer minimum.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10798622,"byte_end":10798646,"line_start":505,"line_end":505,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5129},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10799148,"byte_end":10799152,"line_start":523,"line_end":523,"column_start":8,"column_end":12},"name":"imax","qualname":"::ir::builder::InstBuilder::imax","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer maximum.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10799116,"byte_end":10799140,"line_start":522,"line_end":522,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5130},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10799644,"byte_end":10799648,"line_start":540,"line_end":540,"column_start":8,"column_end":12},"name":"umax","qualname":"::ir::builder::InstBuilder::umax","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer maximum.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10799612,"byte_end":10799636,"line_start":539,"line_end":539,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5131},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10800191,"byte_end":10800200,"line_start":557,"line_end":557,"column_start":8,"column_end":17},"name":"avg_round","qualname":"::ir::builder::InstBuilder::avg_round","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned average with rounding: `a := (x + y + 1) // 2`","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10800159,"byte_end":10800183,"line_start":556,"line_end":556,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5132},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10800928,"byte_end":10800932,"line_start":579,"line_end":579,"column_start":8,"column_end":12},"name":"load","qualname":"::ir::builder::InstBuilder::load","value":"fn <T1, T2> (self, Mem: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load from memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10800896,"byte_end":10800920,"line_start":578,"line_end":578,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5135},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10801770,"byte_end":10801782,"line_start":602,"line_end":602,"column_start":8,"column_end":20},"name":"load_complex","qualname":"::ir::builder::InstBuilder::load_complex","value":"fn <T1, T2> (mut self, Mem: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load from memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10801738,"byte_end":10801762,"line_start":601,"line_end":601,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5138},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10802724,"byte_end":10802729,"line_start":626,"line_end":626,"column_start":8,"column_end":13},"name":"store","qualname":"::ir::builder::InstBuilder::store","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10802692,"byte_end":10802716,"line_start":625,"line_end":625,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5141},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10803482,"byte_end":10803495,"line_start":645,"line_end":645,"column_start":8,"column_end":21},"name":"store_complex","qualname":"::ir::builder::InstBuilder::store_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10803450,"byte_end":10803474,"line_start":644,"line_end":644,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5144},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10804599,"byte_end":10804605,"line_start":673,"line_end":673,"column_start":8,"column_end":14},"name":"uload8","qualname":"::ir::builder::InstBuilder::uload8","value":"fn <T1, T2> (self, iExt8: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``p + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10804567,"byte_end":10804591,"line_start":672,"line_end":672,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5147},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10805452,"byte_end":10805466,"line_start":695,"line_end":695,"column_start":8,"column_end":22},"name":"uload8_complex","qualname":"::ir::builder::InstBuilder::uload8_complex","value":"fn <T1, T2> (mut self, iExt8: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``sum(args) + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10805420,"byte_end":10805444,"line_start":694,"line_end":694,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5150},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10806524,"byte_end":10806530,"line_start":722,"line_end":722,"column_start":8,"column_end":14},"name":"sload8","qualname":"::ir::builder::InstBuilder::sload8","value":"fn <T1, T2> (self, iExt8: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``p + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10806492,"byte_end":10806516,"line_start":721,"line_end":721,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5153},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10807377,"byte_end":10807391,"line_start":744,"line_end":744,"column_start":8,"column_end":22},"name":"sload8_complex","qualname":"::ir::builder::InstBuilder::sload8_complex","value":"fn <T1, T2> (mut self, iExt8: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 8 bits from memory at ``sum(args) + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10807345,"byte_end":10807369,"line_start":743,"line_end":743,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5156},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10808337,"byte_end":10808344,"line_start":767,"line_end":767,"column_start":8,"column_end":15},"name":"istore8","qualname":"::ir::builder::InstBuilder::istore8","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store the low 8 bits of ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10808305,"byte_end":10808329,"line_start":766,"line_end":766,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5159},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10809097,"byte_end":10809112,"line_start":785,"line_end":785,"column_start":8,"column_end":23},"name":"istore8_complex","qualname":"::ir::builder::InstBuilder::istore8_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store the low 8 bits of ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10809065,"byte_end":10809089,"line_start":784,"line_end":784,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5162},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10810223,"byte_end":10810230,"line_start":813,"line_end":813,"column_start":8,"column_end":15},"name":"uload16","qualname":"::ir::builder::InstBuilder::uload16","value":"fn <T1, T2> (self, iExt16: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``p + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10810191,"byte_end":10810215,"line_start":812,"line_end":812,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5165},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10811085,"byte_end":10811100,"line_start":835,"line_end":835,"column_start":8,"column_end":23},"name":"uload16_complex","qualname":"::ir::builder::InstBuilder::uload16_complex","value":"fn <T1, T2> (mut self, iExt16: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``sum(args) + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10811053,"byte_end":10811077,"line_start":834,"line_end":834,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5168},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10812166,"byte_end":10812173,"line_start":862,"line_end":862,"column_start":8,"column_end":15},"name":"sload16","qualname":"::ir::builder::InstBuilder::sload16","value":"fn <T1, T2> (self, iExt16: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``p + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10812134,"byte_end":10812158,"line_start":861,"line_end":861,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5171},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10813028,"byte_end":10813043,"line_start":884,"line_end":884,"column_start":8,"column_end":23},"name":"sload16_complex","qualname":"::ir::builder::InstBuilder::sload16_complex","value":"fn <T1, T2> (mut self, iExt16: crate::ir::Type, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 16 bits from memory at ``sum(args) + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10812996,"byte_end":10813020,"line_start":883,"line_end":883,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5174},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10813996,"byte_end":10814004,"line_start":907,"line_end":907,"column_start":8,"column_end":16},"name":"istore16","qualname":"::ir::builder::InstBuilder::istore16","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store the low 16 bits of ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10813964,"byte_end":10813988,"line_start":906,"line_end":906,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5177},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10814762,"byte_end":10814778,"line_start":925,"line_end":925,"column_start":8,"column_end":24},"name":"istore16_complex","qualname":"::ir::builder::InstBuilder::istore16_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store the low 16 bits of ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10814730,"byte_end":10814754,"line_start":924,"line_end":924,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5180},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10815805,"byte_end":10815812,"line_start":952,"line_end":952,"column_start":8,"column_end":15},"name":"uload32","qualname":"::ir::builder::InstBuilder::uload32","value":"fn <T1, T2> (self, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``p + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10815773,"byte_end":10815797,"line_start":951,"line_end":951,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5183},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10816628,"byte_end":10816643,"line_start":974,"line_end":974,"column_start":8,"column_end":23},"name":"uload32_complex","qualname":"::ir::builder::InstBuilder::uload32_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``sum(args) + Offset`` and zero-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10816596,"byte_end":10816620,"line_start":973,"line_end":973,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5186},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10817607,"byte_end":10817614,"line_start":1000,"line_end":1000,"column_start":8,"column_end":15},"name":"sload32","qualname":"::ir::builder::InstBuilder::sload32","value":"fn <T1, T2> (self, MemFlags: T1, p: ir::Value, Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``p + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10817575,"byte_end":10817599,"line_start":999,"line_end":999,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5189},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10818430,"byte_end":10818445,"line_start":1022,"line_end":1022,"column_start":8,"column_end":23},"name":"sload32_complex","qualname":"::ir::builder::InstBuilder::sload32_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, args: &[Value], Offset: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load 32 bits from memory at ``sum(args) + Offset`` and sign-extend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10818398,"byte_end":10818422,"line_start":1021,"line_end":1021,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5192},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10819381,"byte_end":10819389,"line_start":1045,"line_end":1045,"column_start":8,"column_end":16},"name":"istore32","qualname":"::ir::builder::InstBuilder::istore32","value":"fn <T1, T2> (self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store the low 32 bits of ``x`` to memory at ``p + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10819349,"byte_end":10819373,"line_start":1044,"line_end":1044,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5195},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10820147,"byte_end":10820163,"line_start":1063,"line_end":1063,"column_start":8,"column_end":24},"name":"istore32_complex","qualname":"::ir::builder::InstBuilder::istore32_complex","value":"fn <T1, T2> (mut self, MemFlags: T1, x: ir::Value, args: &[Value], Offset: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store the low 32 bits of ``x`` to memory at ``sum(args) + Offset``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10820115,"byte_end":10820139,"line_start":1062,"line_end":1062,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5198},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10821344,"byte_end":10821354,"line_start":1094,"line_end":1094,"column_start":8,"column_end":18},"name":"stack_load","qualname":"::ir::builder::InstBuilder::stack_load","value":"fn <T1> (self, Mem: crate::ir::Type, SS: ir::StackSlot, Offset: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load a value from a stack slot at the constant offset.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10821312,"byte_end":10821336,"line_start":1093,"line_end":1093,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5200},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10822140,"byte_end":10822151,"line_start":1115,"line_end":1115,"column_start":8,"column_end":19},"name":"stack_store","qualname":"::ir::builder::InstBuilder::stack_store","value":"fn <T1> (self, x: ir::Value, SS: ir::StackSlot, Offset: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store a value to a stack slot at a constant offset.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10822108,"byte_end":10822132,"line_start":1114,"line_end":1114,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5202},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10822932,"byte_end":10822942,"line_start":1137,"line_end":1137,"column_start":8,"column_end":18},"name":"stack_addr","qualname":"::ir::builder::InstBuilder::stack_addr","value":"fn <T1> (self, iAddr: crate::ir::Type, SS: ir::StackSlot, Offset: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Get the address of a stack slot.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10822900,"byte_end":10822924,"line_start":1136,"line_end":1136,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5204},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10823483,"byte_end":10823495,"line_start":1154,"line_end":1154,"column_start":8,"column_end":20},"name":"global_value","qualname":"::ir::builder::InstBuilder::global_value","value":"fn (self, Mem: crate::ir::Type, GV: ir::GlobalValue) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compute the value of global GV.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10823451,"byte_end":10823475,"line_start":1153,"line_end":1153,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5205},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10823978,"byte_end":10823990,"line_start":1170,"line_end":1170,"column_start":8,"column_end":20},"name":"symbol_value","qualname":"::ir::builder::InstBuilder::symbol_value","value":"fn (self, Mem: crate::ir::Type, GV: ir::GlobalValue) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compute the value of global GV, which is a symbolic value.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10823946,"byte_end":10823970,"line_start":1169,"line_end":1169,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5206},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10824964,"byte_end":10824973,"line_start":1196,"line_end":1196,"column_start":8,"column_end":17},"name":"heap_addr","qualname":"::ir::builder::InstBuilder::heap_addr","value":"fn <T1> (self, iAddr: crate::ir::Type, H: ir::Heap, p: ir::Value, Size: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bounds check and compute absolute address of heap memory.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10824932,"byte_end":10824956,"line_start":1195,"line_end":1195,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5208},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10825512,"byte_end":10825526,"line_start":1212,"line_end":1212,"column_start":8,"column_end":22},"name":"get_pinned_reg","qualname":"::ir::builder::InstBuilder::get_pinned_reg","value":"fn (self, iAddr: crate::ir::Type) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Gets the content of the pinned register, when it's enabled.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10825480,"byte_end":10825504,"line_start":1211,"line_end":1211,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5209},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10825851,"byte_end":10825865,"line_start":1223,"line_end":1223,"column_start":8,"column_end":22},"name":"set_pinned_reg","qualname":"::ir::builder::InstBuilder::set_pinned_reg","value":"fn (self, addr: ir::Value) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Sets the content of the pinned register, when it's enabled.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10825819,"byte_end":10825843,"line_start":1222,"line_end":1222,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5210},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10826900,"byte_end":10826910,"line_start":1251,"line_end":1251,"column_start":8,"column_end":18},"name":"table_addr","qualname":"::ir::builder::InstBuilder::table_addr","value":"fn <T1> (self, iAddr: crate::ir::Type, T: ir::Table, p: ir::Value, Offset: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bounds check and compute absolute address of a table entry.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10826868,"byte_end":10826892,"line_start":1250,"line_end":1250,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5212},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10827636,"byte_end":10827642,"line_start":1271,"line_end":1271,"column_start":8,"column_end":14},"name":"iconst","qualname":"::ir::builder::InstBuilder::iconst","value":"fn <T1> (self, Int: crate::ir::Type, N: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Integer constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10827604,"byte_end":10827628,"line_start":1270,"line_end":1270,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5214},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10828156,"byte_end":10828164,"line_start":1289,"line_end":1289,"column_start":8,"column_end":16},"name":"f32const","qualname":"::ir::builder::InstBuilder::f32const","value":"fn <T1> (self, N: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10828124,"byte_end":10828148,"line_start":1288,"line_end":1288,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5216},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10828673,"byte_end":10828681,"line_start":1307,"line_end":1307,"column_start":8,"column_end":16},"name":"f64const","qualname":"::ir::builder::InstBuilder::f64const","value":"fn <T1> (self, N: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10828641,"byte_end":10828665,"line_start":1306,"line_end":1306,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5218},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10829331,"byte_end":10829337,"line_start":1327,"line_end":1327,"column_start":8,"column_end":14},"name":"bconst","qualname":"::ir::builder::InstBuilder::bconst","value":"fn <T1> (self, Bool: crate::ir::Type, N: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Boolean constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10829299,"byte_end":10829323,"line_start":1326,"line_end":1326,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5220},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10829885,"byte_end":10829891,"line_start":1346,"line_end":1346,"column_start":8,"column_end":14},"name":"vconst","qualname":"::ir::builder::InstBuilder::vconst","value":"fn <T1> (self, TxN: crate::ir::Type, N: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" SIMD vector constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10829853,"byte_end":10829877,"line_start":1345,"line_end":1345,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5222},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10830745,"byte_end":10830752,"line_start":1369,"line_end":1369,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::ir::builder::InstBuilder::shuffle","value":"fn <T1> (self, a: ir::Value, b: ir::Value, mask: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" SIMD vector shuffle.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10830713,"byte_end":10830737,"line_start":1368,"line_end":1368,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5224},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10831393,"byte_end":10831397,"line_start":1388,"line_end":1388,"column_start":8,"column_end":12},"name":"null","qualname":"::ir::builder::InstBuilder::null","value":"fn (self, Ref: crate::ir::Type) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Null constant value for reference types.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10831361,"byte_end":10831385,"line_start":1387,"line_end":1387,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5225},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10831670,"byte_end":10831673,"line_start":1397,"line_end":1397,"column_start":8,"column_end":11},"name":"nop","qualname":"::ir::builder::InstBuilder::nop","value":"fn (self) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Just a dummy instruction.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10831638,"byte_end":10831662,"line_start":1396,"line_end":1396,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5226},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10832183,"byte_end":10832189,"line_start":1416,"line_end":1416,"column_start":8,"column_end":14},"name":"select","qualname":"::ir::builder::InstBuilder::select","value":"fn (self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Conditional select.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10832151,"byte_end":10832175,"line_start":1415,"line_end":1415,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5227},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10832955,"byte_end":10832963,"line_start":1436,"line_end":1436,"column_start":8,"column_end":16},"name":"selectif","qualname":"::ir::builder::InstBuilder::selectif","value":"fn <T1> (self, Any: crate::ir::Type, cc: T1, flags: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Conditional select, dependent on integer condition codes.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10832923,"byte_end":10832947,"line_start":1435,"line_end":1435,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5229},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10833799,"byte_end":10833808,"line_start":1458,"line_end":1458,"column_start":8,"column_end":17},"name":"bitselect","qualname":"::ir::builder::InstBuilder::bitselect","value":"fn (self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Conditional select of bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10833767,"byte_end":10833791,"line_start":1457,"line_end":1457,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5230},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10834688,"byte_end":10834692,"line_start":1481,"line_end":1481,"column_start":8,"column_end":12},"name":"copy","qualname":"::ir::builder::InstBuilder::copy","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Register-register copy.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10834656,"byte_end":10834680,"line_start":1480,"line_end":1480,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5231},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10835319,"byte_end":10835324,"line_start":1500,"line_end":1500,"column_start":8,"column_end":13},"name":"spill","qualname":"::ir::builder::InstBuilder::spill","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Spill a register value to a stack slot.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10835287,"byte_end":10835311,"line_start":1499,"line_end":1499,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5232},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10835960,"byte_end":10835964,"line_start":1519,"line_end":1519,"column_start":8,"column_end":12},"name":"fill","qualname":"::ir::builder::InstBuilder::fill","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load a register value from a stack slot.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10835928,"byte_end":10835952,"line_start":1518,"line_end":1518,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5233},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10836744,"byte_end":10836752,"line_start":1539,"line_end":1539,"column_start":8,"column_end":16},"name":"fill_nop","qualname":"::ir::builder::InstBuilder::fill_nop","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" This is identical to `fill`, except it has no encoding, since it is a no-op.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10836712,"byte_end":10836736,"line_start":1538,"line_end":1538,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5234},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10837765,"byte_end":10837772,"line_start":1562,"line_end":1562,"column_start":8,"column_end":15},"name":"regmove","qualname":"::ir::builder::InstBuilder::regmove","value":"fn <T1, T2> (self, x: ir::Value, src: T1, dst: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Temporarily divert ``x`` from ``src`` to ``dst``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10837733,"byte_end":10837757,"line_start":1561,"line_end":1561,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5237},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10838573,"byte_end":10838585,"line_start":1581,"line_end":1581,"column_start":8,"column_end":20},"name":"copy_special","qualname":"::ir::builder::InstBuilder::copy_special","value":"fn <T1, T2> (self, src: T1, dst: T2) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Copies the contents of ''src'' register to ''dst'' register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10838541,"byte_end":10838565,"line_start":1580,"line_end":1580,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5240},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10839516,"byte_end":10839527,"line_start":1603,"line_end":1603,"column_start":8,"column_end":19},"name":"copy_to_ssa","qualname":"::ir::builder::InstBuilder::copy_to_ssa","value":"fn <T1> (self, Any: crate::ir::Type, src: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Copies the contents of ''src'' register to ''a'' SSA name.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10839484,"byte_end":10839508,"line_start":1602,"line_end":1602,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5242},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10840229,"byte_end":10840237,"line_start":1622,"line_end":1622,"column_start":8,"column_end":16},"name":"copy_nop","qualname":"::ir::builder::InstBuilder::copy_nop","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Stack-slot-to-the-same-stack-slot copy, which is guaranteed to turn\n into a no-op.  This instruction is for use only within Cranelift itself.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10840197,"byte_end":10840221,"line_start":1621,"line_end":1621,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5243},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10840725,"byte_end":10840739,"line_start":1636,"line_end":1636,"column_start":8,"column_end":22},"name":"adjust_sp_down","qualname":"::ir::builder::InstBuilder::adjust_sp_down","value":"fn (self, delta: ir::Value) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtracts ``delta`` offset value from the stack pointer register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10840693,"byte_end":10840717,"line_start":1635,"line_end":1635,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5244},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10841311,"byte_end":10841327,"line_start":1651,"line_end":1651,"column_start":8,"column_end":24},"name":"adjust_sp_up_imm","qualname":"::ir::builder::InstBuilder::adjust_sp_up_imm","value":"fn <T1> (self, Offset: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Adds ``Offset`` immediate offset value to the stack pointer register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10841279,"byte_end":10841303,"line_start":1650,"line_end":1650,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5246},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10841915,"byte_end":10841933,"line_start":1667,"line_end":1667,"column_start":8,"column_end":26},"name":"adjust_sp_down_imm","qualname":"::ir::builder::InstBuilder::adjust_sp_down_imm","value":"fn <T1> (self, Offset: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtracts ``Offset`` immediate offset value from the stack pointer\n register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10841883,"byte_end":10841907,"line_start":1666,"line_end":1666,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5248},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10842581,"byte_end":10842589,"line_start":1686,"line_end":1686,"column_start":8,"column_end":16},"name":"ifcmp_sp","qualname":"::ir::builder::InstBuilder::ifcmp_sp","value":"fn (self, addr: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compare ``addr`` with the stack pointer and set the CPU flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10842549,"byte_end":10842573,"line_start":1685,"line_end":1685,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5249},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10843400,"byte_end":10843408,"line_start":1707,"line_end":1707,"column_start":8,"column_end":16},"name":"regspill","qualname":"::ir::builder::InstBuilder::regspill","value":"fn <T1> (self, x: ir::Value, src: T1, SS: ir::StackSlot) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Temporarily divert ``x`` from ``src`` to ``SS``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10843368,"byte_end":10843392,"line_start":1706,"line_end":1706,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5251},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10844256,"byte_end":10844263,"line_start":1728,"line_end":1728,"column_start":8,"column_end":15},"name":"regfill","qualname":"::ir::builder::InstBuilder::regfill","value":"fn <T1> (self, x: ir::Value, SS: ir::StackSlot, dst: T1) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Temporarily divert ``x`` from ``SS`` to ``dst``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10844224,"byte_end":10844248,"line_start":1727,"line_end":1727,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5253},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10844768,"byte_end":10844777,"line_start":1741,"line_end":1741,"column_start":8,"column_end":17},"name":"safepoint","qualname":"::ir::builder::InstBuilder::safepoint","value":"fn (mut self, args: &[Value]) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" This instruction will provide live reference values at a point in\n the function. It can only be used by the compiler.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10844736,"byte_end":10844760,"line_start":1740,"line_end":1740,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5254},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10845514,"byte_end":10845520,"line_start":1765,"line_end":1765,"column_start":8,"column_end":14},"name":"vsplit","qualname":"::ir::builder::InstBuilder::vsplit","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Split a vector into two halves.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10845482,"byte_end":10845506,"line_start":1764,"line_end":1764,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5255},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10846393,"byte_end":10846400,"line_start":1790,"line_end":1790,"column_start":8,"column_end":15},"name":"vconcat","qualname":"::ir::builder::InstBuilder::vconcat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Vector concatenation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10846361,"byte_end":10846385,"line_start":1789,"line_end":1789,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5256},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10847017,"byte_end":10847024,"line_start":1811,"line_end":1811,"column_start":8,"column_end":15},"name":"vselect","qualname":"::ir::builder::InstBuilder::vselect","value":"fn (self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Vector lane select.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10846985,"byte_end":10847009,"line_start":1810,"line_end":1810,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5257},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10847582,"byte_end":10847591,"line_start":1829,"line_end":1829,"column_start":8,"column_end":17},"name":"vany_true","qualname":"::ir::builder::InstBuilder::vany_true","value":"fn (self, a: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Reduce a vector to a scalar boolean.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10847550,"byte_end":10847574,"line_start":1828,"line_end":1828,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5258},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10848116,"byte_end":10848125,"line_start":1847,"line_end":1847,"column_start":8,"column_end":17},"name":"vall_true","qualname":"::ir::builder::InstBuilder::vall_true","value":"fn (self, a: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Reduce a vector to a scalar boolean.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10848084,"byte_end":10848108,"line_start":1846,"line_end":1846,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5259},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10848622,"byte_end":10848627,"line_start":1866,"line_end":1866,"column_start":8,"column_end":13},"name":"splat","qualname":"::ir::builder::InstBuilder::splat","value":"fn (self, TxN: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Vector splat.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10848590,"byte_end":10848614,"line_start":1865,"line_end":1865,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5260},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10849194,"byte_end":10849204,"line_start":1886,"line_end":1886,"column_start":8,"column_end":18},"name":"insertlane","qualname":"::ir::builder::InstBuilder::insertlane","value":"fn <T1> (self, x: ir::Value, Idx: T1, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Insert ``y`` as lane ``Idx`` in x.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10849162,"byte_end":10849186,"line_start":1885,"line_end":1885,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5262},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10850062,"byte_end":10850073,"line_start":1909,"line_end":1909,"column_start":8,"column_end":19},"name":"extractlane","qualname":"::ir::builder::InstBuilder::extractlane","value":"fn <T1> (self, x: ir::Value, Idx: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Extract lane ``Idx`` from ``x``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10850030,"byte_end":10850054,"line_start":1908,"line_end":1908,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5264},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10851792,"byte_end":10851796,"line_start":1950,"line_end":1950,"column_start":8,"column_end":12},"name":"icmp","qualname":"::ir::builder::InstBuilder::icmp","value":"fn <T1> (self, Cond: T1, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Integer comparison.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10851760,"byte_end":10851784,"line_start":1949,"line_end":1949,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5266},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10852645,"byte_end":10852653,"line_start":1975,"line_end":1975,"column_start":8,"column_end":16},"name":"icmp_imm","qualname":"::ir::builder::InstBuilder::icmp_imm","value":"fn <T1, T2> (self, Cond: T1, x: ir::Value, Y: T2) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compare scalar integer to a constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10852613,"byte_end":10852637,"line_start":1974,"line_end":1974,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5269},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10853495,"byte_end":10853500,"line_start":1998,"line_end":1998,"column_start":8,"column_end":13},"name":"ifcmp","qualname":"::ir::builder::InstBuilder::ifcmp","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compare scalar integers and return flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10853463,"byte_end":10853487,"line_start":1997,"line_end":1997,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5270},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10854225,"byte_end":10854234,"line_start":2019,"line_end":2019,"column_start":8,"column_end":17},"name":"ifcmp_imm","qualname":"::ir::builder::InstBuilder::ifcmp_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Compare scalar integer to a constant and return flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10854193,"byte_end":10854217,"line_start":2018,"line_end":2018,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5272},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10854923,"byte_end":10854927,"line_start":2040,"line_end":2040,"column_start":8,"column_end":12},"name":"iadd","qualname":"::ir::builder::InstBuilder::iadd","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Wrapping integer addition: `a := x + y \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10854891,"byte_end":10854915,"line_start":2039,"line_end":2039,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5273},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10855678,"byte_end":10855686,"line_start":2061,"line_end":2061,"column_start":8,"column_end":16},"name":"uadd_sat","qualname":"::ir::builder::InstBuilder::uadd_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add with unsigned saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10855646,"byte_end":10855670,"line_start":2060,"line_end":2060,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5274},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10856590,"byte_end":10856598,"line_start":2084,"line_end":2084,"column_start":8,"column_end":16},"name":"sadd_sat","qualname":"::ir::builder::InstBuilder::sadd_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add with signed saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10856558,"byte_end":10856582,"line_start":2083,"line_end":2083,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5275},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10857234,"byte_end":10857238,"line_start":2104,"line_end":2104,"column_start":8,"column_end":12},"name":"isub","qualname":"::ir::builder::InstBuilder::isub","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Wrapping integer subtraction: `a := x - y \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10857202,"byte_end":10857226,"line_start":2103,"line_end":2103,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5276},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10857990,"byte_end":10857998,"line_start":2125,"line_end":2125,"column_start":8,"column_end":16},"name":"usub_sat","qualname":"::ir::builder::InstBuilder::usub_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract with unsigned saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10857958,"byte_end":10857982,"line_start":2124,"line_end":2124,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5277},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10858768,"byte_end":10858776,"line_start":2146,"line_end":2146,"column_start":8,"column_end":16},"name":"ssub_sat","qualname":"::ir::builder::InstBuilder::ssub_sat","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract with signed saturation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10858736,"byte_end":10858760,"line_start":2145,"line_end":2145,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5278},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10859240,"byte_end":10859244,"line_start":2162,"line_end":2162,"column_start":8,"column_end":12},"name":"ineg","qualname":"::ir::builder::InstBuilder::ineg","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Integer negation: `a := -x \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10859208,"byte_end":10859232,"line_start":2161,"line_end":2161,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5279},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10859932,"byte_end":10859936,"line_start":2184,"line_end":2184,"column_start":8,"column_end":12},"name":"imul","qualname":"::ir::builder::InstBuilder::imul","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Wrapping integer multiplication: `a := x y \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10859900,"byte_end":10859924,"line_start":2183,"line_end":2183,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5280},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10860596,"byte_end":10860602,"line_start":2205,"line_end":2205,"column_start":8,"column_end":14},"name":"umulhi","qualname":"::ir::builder::InstBuilder::umulhi","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer multiplication, producing the high half of a\n double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10860564,"byte_end":10860588,"line_start":2204,"line_end":2204,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5281},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10861262,"byte_end":10861268,"line_start":2226,"line_end":2226,"column_start":8,"column_end":14},"name":"smulhi","qualname":"::ir::builder::InstBuilder::smulhi","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer multiplication, producing the high half of a\n double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10861230,"byte_end":10861254,"line_start":2225,"line_end":2225,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5282},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10861860,"byte_end":10861864,"line_start":2245,"line_end":2245,"column_start":8,"column_end":12},"name":"udiv","qualname":"::ir::builder::InstBuilder::udiv","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer division: `a := \\lfloor {x \\over y} \\rfloor`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10861828,"byte_end":10861852,"line_start":2244,"line_end":2244,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5283},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10862623,"byte_end":10862627,"line_start":2267,"line_end":2267,"column_start":8,"column_end":12},"name":"sdiv","qualname":"::ir::builder::InstBuilder::sdiv","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer division rounded toward zero: `a := sign(xy)\n \\lfloor {|x| \\over |y|}\\rfloor`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10862591,"byte_end":10862615,"line_start":2266,"line_end":2266,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5284},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10863182,"byte_end":10863186,"line_start":2286,"line_end":2286,"column_start":8,"column_end":12},"name":"urem","qualname":"::ir::builder::InstBuilder::urem","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer remainder.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10863150,"byte_end":10863174,"line_start":2285,"line_end":2285,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5285},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10863780,"byte_end":10863784,"line_start":2305,"line_end":2305,"column_start":8,"column_end":12},"name":"srem","qualname":"::ir::builder::InstBuilder::srem","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer remainder. The result has the sign of the dividend.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10863748,"byte_end":10863772,"line_start":2304,"line_end":2304,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5286},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10864425,"byte_end":10864433,"line_start":2327,"line_end":2327,"column_start":8,"column_end":16},"name":"iadd_imm","qualname":"::ir::builder::InstBuilder::iadd_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add immediate integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10864393,"byte_end":10864417,"line_start":2326,"line_end":2326,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5288},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10865081,"byte_end":10865089,"line_start":2348,"line_end":2348,"column_start":8,"column_end":16},"name":"imul_imm","qualname":"::ir::builder::InstBuilder::imul_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Integer multiplication by immediate constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10865049,"byte_end":10865073,"line_start":2347,"line_end":2347,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5290},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10865702,"byte_end":10865710,"line_start":2368,"line_end":2368,"column_start":8,"column_end":16},"name":"udiv_imm","qualname":"::ir::builder::InstBuilder::udiv_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer division by an immediate constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10865670,"byte_end":10865694,"line_start":2367,"line_end":2367,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5292},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10866452,"byte_end":10866460,"line_start":2390,"line_end":2390,"column_start":8,"column_end":16},"name":"sdiv_imm","qualname":"::ir::builder::InstBuilder::sdiv_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer division by an immediate constant.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10866420,"byte_end":10866444,"line_start":2389,"line_end":2389,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5294},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10867072,"byte_end":10867080,"line_start":2410,"line_end":2410,"column_start":8,"column_end":16},"name":"urem_imm","qualname":"::ir::builder::InstBuilder::urem_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer remainder with immediate divisor.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10867040,"byte_end":10867064,"line_start":2409,"line_end":2409,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5296},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10867690,"byte_end":10867698,"line_start":2430,"line_end":2430,"column_start":8,"column_end":16},"name":"srem_imm","qualname":"::ir::builder::InstBuilder::srem_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer remainder with immediate divisor.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10867658,"byte_end":10867682,"line_start":2429,"line_end":2429,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5298},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10868530,"byte_end":10868539,"line_start":2455,"line_end":2455,"column_start":8,"column_end":17},"name":"irsub_imm","qualname":"::ir::builder::InstBuilder::irsub_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Immediate reverse wrapping subtraction: `a := Y - x \\pmod{2^B}`.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10868498,"byte_end":10868522,"line_start":2454,"line_end":2454,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5300},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10869347,"byte_end":10869355,"line_start":2483,"line_end":2483,"column_start":8,"column_end":16},"name":"iadd_cin","qualname":"::ir::builder::InstBuilder::iadd_cin","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add integers with carry in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10869315,"byte_end":10869339,"line_start":2482,"line_end":2482,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5301},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10870251,"byte_end":10870261,"line_start":2511,"line_end":2511,"column_start":8,"column_end":18},"name":"iadd_ifcin","qualname":"::ir::builder::InstBuilder::iadd_ifcin","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add integers with carry in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10870219,"byte_end":10870243,"line_start":2510,"line_end":2510,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5302},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10871062,"byte_end":10871071,"line_start":2539,"line_end":2539,"column_start":8,"column_end":17},"name":"iadd_cout","qualname":"::ir::builder::InstBuilder::iadd_cout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add integers with carry out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10871030,"byte_end":10871054,"line_start":2538,"line_end":2538,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5303},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10872030,"byte_end":10872041,"line_start":2569,"line_end":2569,"column_start":8,"column_end":19},"name":"iadd_ifcout","qualname":"::ir::builder::InstBuilder::iadd_ifcout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add integers with carry out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10871998,"byte_end":10872022,"line_start":2568,"line_end":2568,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5304},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10872953,"byte_end":10872963,"line_start":2599,"line_end":2599,"column_start":8,"column_end":18},"name":"iadd_carry","qualname":"::ir::builder::InstBuilder::iadd_carry","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add integers with carry in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10872921,"byte_end":10872945,"line_start":2598,"line_end":2598,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5305},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10874132,"byte_end":10874144,"line_start":2631,"line_end":2631,"column_start":8,"column_end":20},"name":"iadd_ifcarry","qualname":"::ir::builder::InstBuilder::iadd_ifcarry","value":"fn (self, x: ir::Value, y: ir::Value, c_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Add integers with carry in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10874100,"byte_end":10874124,"line_start":2630,"line_end":2630,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5306},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10875003,"byte_end":10875011,"line_start":2659,"line_end":2659,"column_start":8,"column_end":16},"name":"isub_bin","qualname":"::ir::builder::InstBuilder::isub_bin","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10874971,"byte_end":10874995,"line_start":2658,"line_end":2658,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5307},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10875916,"byte_end":10875926,"line_start":2687,"line_end":2687,"column_start":8,"column_end":18},"name":"isub_ifbin","qualname":"::ir::builder::InstBuilder::isub_ifbin","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10875884,"byte_end":10875908,"line_start":2686,"line_end":2686,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5308},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10876735,"byte_end":10876744,"line_start":2715,"line_end":2715,"column_start":8,"column_end":17},"name":"isub_bout","qualname":"::ir::builder::InstBuilder::isub_bout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract integers with borrow out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10876703,"byte_end":10876727,"line_start":2714,"line_end":2714,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5309},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10877705,"byte_end":10877716,"line_start":2745,"line_end":2745,"column_start":8,"column_end":19},"name":"isub_ifbout","qualname":"::ir::builder::InstBuilder::isub_ifbout","value":"fn (self, x: ir::Value, y: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract integers with borrow out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10877673,"byte_end":10877697,"line_start":2744,"line_end":2744,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5310},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10878637,"byte_end":10878648,"line_start":2775,"line_end":2775,"column_start":8,"column_end":19},"name":"isub_borrow","qualname":"::ir::builder::InstBuilder::isub_borrow","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10878605,"byte_end":10878629,"line_start":2774,"line_end":2774,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5311},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10879820,"byte_end":10879833,"line_start":2807,"line_end":2807,"column_start":8,"column_end":21},"name":"isub_ifborrow","qualname":"::ir::builder::InstBuilder::isub_ifborrow","value":"fn (self, x: ir::Value, y: ir::Value, b_in: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Subtract integers with borrow in and out.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10879788,"byte_end":10879812,"line_start":2806,"line_end":2806,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5312},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10880471,"byte_end":10880475,"line_start":2825,"line_end":2825,"column_start":8,"column_end":12},"name":"band","qualname":"::ir::builder::InstBuilder::band","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise and.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10880439,"byte_end":10880463,"line_start":2824,"line_end":2824,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5313},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10881016,"byte_end":10881019,"line_start":2842,"line_end":2842,"column_start":8,"column_end":11},"name":"bor","qualname":"::ir::builder::InstBuilder::bor","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise or.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10880984,"byte_end":10881008,"line_start":2841,"line_end":2841,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5314},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10881560,"byte_end":10881564,"line_start":2859,"line_end":2859,"column_start":8,"column_end":12},"name":"bxor","qualname":"::ir::builder::InstBuilder::bxor","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise xor.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10881528,"byte_end":10881552,"line_start":2858,"line_end":2858,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5315},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10882040,"byte_end":10882044,"line_start":2875,"line_end":2875,"column_start":8,"column_end":12},"name":"bnot","qualname":"::ir::builder::InstBuilder::bnot","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10882008,"byte_end":10882032,"line_start":2874,"line_end":2874,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5316},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10882607,"byte_end":10882615,"line_start":2894,"line_end":2894,"column_start":8,"column_end":16},"name":"band_not","qualname":"::ir::builder::InstBuilder::band_not","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise and not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10882575,"byte_end":10882599,"line_start":2893,"line_end":2893,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5317},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10883198,"byte_end":10883205,"line_start":2913,"line_end":2913,"column_start":8,"column_end":15},"name":"bor_not","qualname":"::ir::builder::InstBuilder::bor_not","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise or not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10883166,"byte_end":10883190,"line_start":2912,"line_end":2912,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5318},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10883788,"byte_end":10883796,"line_start":2932,"line_end":2932,"column_start":8,"column_end":16},"name":"bxor_not","qualname":"::ir::builder::InstBuilder::bxor_not","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise xor not.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10883756,"byte_end":10883780,"line_start":2931,"line_end":2931,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5319},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10884445,"byte_end":10884453,"line_start":2954,"line_end":2954,"column_start":8,"column_end":16},"name":"band_imm","qualname":"::ir::builder::InstBuilder::band_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise and with immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10884413,"byte_end":10884437,"line_start":2953,"line_end":2953,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5321},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10885155,"byte_end":10885162,"line_start":2977,"line_end":2977,"column_start":8,"column_end":15},"name":"bor_imm","qualname":"::ir::builder::InstBuilder::bor_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise or with immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10885123,"byte_end":10885147,"line_start":2976,"line_end":2976,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5323},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10885865,"byte_end":10885873,"line_start":3000,"line_end":3000,"column_start":8,"column_end":16},"name":"bxor_imm","qualname":"::ir::builder::InstBuilder::bxor_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bitwise xor with immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10885833,"byte_end":10885857,"line_start":2999,"line_end":2999,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5325},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10886460,"byte_end":10886464,"line_start":3020,"line_end":3020,"column_start":8,"column_end":12},"name":"rotl","qualname":"::ir::builder::InstBuilder::rotl","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Rotate left.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10886428,"byte_end":10886452,"line_start":3019,"line_end":3019,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5326},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10886994,"byte_end":10886998,"line_start":3039,"line_end":3039,"column_start":8,"column_end":12},"name":"rotr","qualname":"::ir::builder::InstBuilder::rotr","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Rotate right.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10886962,"byte_end":10886986,"line_start":3038,"line_end":3038,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5327},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10887486,"byte_end":10887494,"line_start":3056,"line_end":3056,"column_start":8,"column_end":16},"name":"rotl_imm","qualname":"::ir::builder::InstBuilder::rotl_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Rotate left by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10887454,"byte_end":10887478,"line_start":3055,"line_end":3055,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5329},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10888041,"byte_end":10888049,"line_start":3074,"line_end":3074,"column_start":8,"column_end":16},"name":"rotr_imm","qualname":"::ir::builder::InstBuilder::rotr_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Rotate right by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10888009,"byte_end":10888033,"line_start":3073,"line_end":3073,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5331},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10888933,"byte_end":10888937,"line_start":3102,"line_end":3102,"column_start":8,"column_end":12},"name":"ishl","qualname":"::ir::builder::InstBuilder::ishl","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Integer shift left. Shift the bits in ``x`` towards the MSB by ``y``\n places. Shift in zero bits to the LSB.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10888901,"byte_end":10888925,"line_start":3101,"line_end":3101,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5332},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10889818,"byte_end":10889822,"line_start":3130,"line_end":3130,"column_start":8,"column_end":12},"name":"ushr","qualname":"::ir::builder::InstBuilder::ushr","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned shift right. Shift bits in ``x`` towards the LSB by ``y``\n places, shifting in zero bits to the MSB. Also called a *logical\n shift*.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10889786,"byte_end":10889810,"line_start":3129,"line_end":3129,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5333},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10890510,"byte_end":10890514,"line_start":3151,"line_end":3151,"column_start":8,"column_end":12},"name":"sshr","qualname":"::ir::builder::InstBuilder::sshr","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed shift right. Shift bits in ``x`` towards the LSB by ``y``\n places, shifting in sign bits to the MSB. Also called an *arithmetic\n shift*.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10890478,"byte_end":10890502,"line_start":3150,"line_end":3150,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5334},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10891074,"byte_end":10891082,"line_start":3170,"line_end":3170,"column_start":8,"column_end":16},"name":"ishl_imm","qualname":"::ir::builder::InstBuilder::ishl_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Integer shift left by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10891042,"byte_end":10891066,"line_start":3169,"line_end":3169,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5336},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10891709,"byte_end":10891717,"line_start":3190,"line_end":3190,"column_start":8,"column_end":16},"name":"ushr_imm","qualname":"::ir::builder::InstBuilder::ushr_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned shift right by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10891677,"byte_end":10891701,"line_start":3189,"line_end":3189,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5338},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10892342,"byte_end":10892350,"line_start":3210,"line_end":3210,"column_start":8,"column_end":16},"name":"sshr_imm","qualname":"::ir::builder::InstBuilder::sshr_imm","value":"fn <T1> (self, x: ir::Value, Y: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed shift right by immediate.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10892310,"byte_end":10892334,"line_start":3209,"line_end":3209,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5340},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10892884,"byte_end":10892890,"line_start":3229,"line_end":3229,"column_start":8,"column_end":14},"name":"bitrev","qualname":"::ir::builder::InstBuilder::bitrev","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Reverse the bits of a integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10892852,"byte_end":10892876,"line_start":3228,"line_end":3228,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5341},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10893480,"byte_end":10893483,"line_start":3249,"line_end":3249,"column_start":8,"column_end":11},"name":"clz","qualname":"::ir::builder::InstBuilder::clz","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Count leading zero bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10893448,"byte_end":10893472,"line_start":3248,"line_end":3248,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5342},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10894105,"byte_end":10894108,"line_start":3269,"line_end":3269,"column_start":8,"column_end":11},"name":"cls","qualname":"::ir::builder::InstBuilder::cls","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Count leading sign bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10894073,"byte_end":10894097,"line_start":3268,"line_end":3268,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5343},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10894692,"byte_end":10894695,"line_start":3289,"line_end":3289,"column_start":8,"column_end":11},"name":"ctz","qualname":"::ir::builder::InstBuilder::ctz","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Count trailing zeros.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10894660,"byte_end":10894684,"line_start":3288,"line_end":3288,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5344},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10895149,"byte_end":10895155,"line_start":3307,"line_end":3307,"column_start":8,"column_end":14},"name":"popcnt","qualname":"::ir::builder::InstBuilder::popcnt","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Population count","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10895117,"byte_end":10895141,"line_start":3306,"line_end":3306,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5345},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10898722,"byte_end":10898726,"line_start":3383,"line_end":3383,"column_start":8,"column_end":12},"name":"fcmp","qualname":"::ir::builder::InstBuilder::fcmp","value":"fn <T1> (self, Cond: T1, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point comparison.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10898690,"byte_end":10898714,"line_start":3382,"line_end":3382,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5347},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10899584,"byte_end":10899589,"line_start":3405,"line_end":3405,"column_start":8,"column_end":13},"name":"ffcmp","qualname":"::ir::builder::InstBuilder::ffcmp","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point comparison returning flags.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10899552,"byte_end":10899576,"line_start":3404,"line_end":3404,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5348},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10900108,"byte_end":10900112,"line_start":3422,"line_end":3422,"column_start":8,"column_end":12},"name":"fadd","qualname":"::ir::builder::InstBuilder::fadd","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point addition.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10900076,"byte_end":10900100,"line_start":3421,"line_end":3421,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5349},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10900633,"byte_end":10900637,"line_start":3439,"line_end":3439,"column_start":8,"column_end":12},"name":"fsub","qualname":"::ir::builder::InstBuilder::fsub","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point subtraction.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10900601,"byte_end":10900625,"line_start":3438,"line_end":3438,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5350},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10901161,"byte_end":10901165,"line_start":3456,"line_end":3456,"column_start":8,"column_end":12},"name":"fmul","qualname":"::ir::builder::InstBuilder::fmul","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point multiplication.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10901129,"byte_end":10901153,"line_start":3455,"line_end":3455,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5351},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10901851,"byte_end":10901855,"line_start":3477,"line_end":3477,"column_start":8,"column_end":12},"name":"fdiv","qualname":"::ir::builder::InstBuilder::fdiv","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point division.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10901819,"byte_end":10901843,"line_start":3476,"line_end":3476,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5352},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10902322,"byte_end":10902326,"line_start":3493,"line_end":3493,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::ir::builder::InstBuilder::sqrt","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point square root.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10902290,"byte_end":10902314,"line_start":3492,"line_end":3492,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5353},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10902989,"byte_end":10902992,"line_start":3514,"line_end":3514,"column_start":8,"column_end":11},"name":"fma","qualname":"::ir::builder::InstBuilder::fma","value":"fn (self, x: ir::Value, y: ir::Value, z: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point fused multiply-and-add.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10902957,"byte_end":10902981,"line_start":3513,"line_end":3513,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5354},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10903525,"byte_end":10903529,"line_start":3532,"line_end":3532,"column_start":8,"column_end":12},"name":"fneg","qualname":"::ir::builder::InstBuilder::fneg","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point negation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10903493,"byte_end":10903517,"line_start":3531,"line_end":3531,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5355},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10904032,"byte_end":10904036,"line_start":3550,"line_end":3550,"column_start":8,"column_end":12},"name":"fabs","qualname":"::ir::builder::InstBuilder::fabs","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point absolute value.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10904000,"byte_end":10904024,"line_start":3549,"line_end":3549,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5356},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10904673,"byte_end":10904682,"line_start":3570,"line_end":3570,"column_start":8,"column_end":17},"name":"fcopysign","qualname":"::ir::builder::InstBuilder::fcopysign","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point copy sign.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10904641,"byte_end":10904665,"line_start":3569,"line_end":3569,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5357},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10905274,"byte_end":10905278,"line_start":3589,"line_end":3589,"column_start":8,"column_end":12},"name":"fmin","qualname":"::ir::builder::InstBuilder::fmin","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point minimum, propagating NaNs.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10905242,"byte_end":10905266,"line_start":3588,"line_end":3588,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5358},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10905864,"byte_end":10905868,"line_start":3608,"line_end":3608,"column_start":8,"column_end":12},"name":"fmax","qualname":"::ir::builder::InstBuilder::fmax","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point maximum, propagating NaNs.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10905832,"byte_end":10905856,"line_start":3607,"line_end":3607,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5359},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10906365,"byte_end":10906369,"line_start":3624,"line_end":3624,"column_start":8,"column_end":12},"name":"ceil","qualname":"::ir::builder::InstBuilder::ceil","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards positive infinity.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10906333,"byte_end":10906357,"line_start":3623,"line_end":3623,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5360},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10906848,"byte_end":10906853,"line_start":3640,"line_end":3640,"column_start":8,"column_end":13},"name":"floor","qualname":"::ir::builder::InstBuilder::floor","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards negative infinity.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10906816,"byte_end":10906840,"line_start":3639,"line_end":3639,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5361},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10907320,"byte_end":10907325,"line_start":3656,"line_end":3656,"column_start":8,"column_end":13},"name":"trunc","qualname":"::ir::builder::InstBuilder::trunc","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards zero.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10907288,"byte_end":10907312,"line_start":3655,"line_end":3655,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5362},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10907821,"byte_end":10907828,"line_start":3673,"line_end":3673,"column_start":8,"column_end":15},"name":"nearest","qualname":"::ir::builder::InstBuilder::nearest","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Round floating point round to integral, towards nearest with ties to\n even.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10907789,"byte_end":10907813,"line_start":3672,"line_end":3672,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5363},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10908350,"byte_end":10908357,"line_start":3692,"line_end":3692,"column_start":8,"column_end":15},"name":"is_null","qualname":"::ir::builder::InstBuilder::is_null","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Reference verification.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10908318,"byte_end":10908342,"line_start":3691,"line_end":3691,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5364},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10908881,"byte_end":10908891,"line_start":3711,"line_end":3711,"column_start":8,"column_end":18},"name":"is_invalid","qualname":"::ir::builder::InstBuilder::is_invalid","value":"fn (self, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Reference verification.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10908849,"byte_end":10908873,"line_start":3710,"line_end":3710,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5365},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10909641,"byte_end":10909647,"line_start":3732,"line_end":3732,"column_start":8,"column_end":14},"name":"trueif","qualname":"::ir::builder::InstBuilder::trueif","value":"fn <T1> (self, Cond: T1, f: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Test integer CPU flags for a specific condition.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10909609,"byte_end":10909633,"line_start":3731,"line_end":3731,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5367},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10910432,"byte_end":10910438,"line_start":3753,"line_end":3753,"column_start":8,"column_end":14},"name":"trueff","qualname":"::ir::builder::InstBuilder::trueff","value":"fn <T1> (self, Cond: T1, f: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Test floating point CPU flags for a specific condition.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10910400,"byte_end":10910424,"line_start":3752,"line_end":3752,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5369},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10911162,"byte_end":10911169,"line_start":3774,"line_end":3774,"column_start":8,"column_end":15},"name":"bitcast","qualname":"::ir::builder::InstBuilder::bitcast","value":"fn (self, MemTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Reinterpret the bits in `x` as a different type.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10911130,"byte_end":10911154,"line_start":3773,"line_end":3773,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5370},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10912202,"byte_end":10912213,"line_start":3798,"line_end":3798,"column_start":8,"column_end":19},"name":"raw_bitcast","qualname":"::ir::builder::InstBuilder::raw_bitcast","value":"fn (self, AnyTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Cast the bits in `x` as a different type of the same bit width.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10912170,"byte_end":10912194,"line_start":3797,"line_end":3797,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5371},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10913053,"byte_end":10913069,"line_start":3818,"line_end":3818,"column_start":8,"column_end":24},"name":"scalar_to_vector","qualname":"::ir::builder::InstBuilder::scalar_to_vector","value":"fn (self, TxN: crate::ir::Type, s: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Scalar To Vector -- move a value out of a scalar register and into a vector register; the\n scalar will be moved to the lowest-order bits of the vector register. Note that this\n instruction is intended as a low-level legalization instruction and frontends should prefer\n insertlane; on certain architectures, scalar_to_vector may zero the highest-order bits for some\n types (e.g. integers) but not for others (e.g. floats).","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10913021,"byte_end":10913045,"line_start":3817,"line_end":3817,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5372},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10913842,"byte_end":10913849,"line_start":3838,"line_end":3838,"column_start":8,"column_end":15},"name":"breduce","qualname":"::ir::builder::InstBuilder::breduce","value":"fn (self, BoolTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a smaller boolean type in the platform-defined way.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10913810,"byte_end":10913834,"line_start":3837,"line_end":3837,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5373},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10914619,"byte_end":10914626,"line_start":3858,"line_end":3858,"column_start":8,"column_end":15},"name":"bextend","qualname":"::ir::builder::InstBuilder::bextend","value":"fn (self, BoolTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a larger boolean type in the platform-defined way.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10914587,"byte_end":10914611,"line_start":3857,"line_end":3857,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5374},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10915250,"byte_end":10915254,"line_start":3877,"line_end":3877,"column_start":8,"column_end":12},"name":"bint","qualname":"::ir::builder::InstBuilder::bint","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to an integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10915218,"byte_end":10915242,"line_start":3876,"line_end":3876,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5375},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10915888,"byte_end":10915893,"line_start":3896,"line_end":3896,"column_start":8,"column_end":13},"name":"bmask","qualname":"::ir::builder::InstBuilder::bmask","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to an integer mask.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10915856,"byte_end":10915880,"line_start":3895,"line_end":3895,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5376},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10916826,"byte_end":10916833,"line_start":3920,"line_end":3920,"column_start":8,"column_end":15},"name":"ireduce","qualname":"::ir::builder::InstBuilder::ireduce","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a smaller integer type by dropping high bits.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10916794,"byte_end":10916818,"line_start":3919,"line_end":3919,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5377},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10917790,"byte_end":10917797,"line_start":3944,"line_end":3944,"column_start":8,"column_end":15},"name":"uextend","qualname":"::ir::builder::InstBuilder::uextend","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a larger integer type by zero-extending.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10917758,"byte_end":10917782,"line_start":3943,"line_end":3943,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5378},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10918763,"byte_end":10918770,"line_start":3968,"line_end":3968,"column_start":8,"column_end":15},"name":"sextend","qualname":"::ir::builder::InstBuilder::sextend","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a larger integer type by sign-extending.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10918731,"byte_end":10918755,"line_start":3967,"line_end":3967,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5379},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10919773,"byte_end":10919781,"line_start":3994,"line_end":3994,"column_start":8,"column_end":16},"name":"fpromote","qualname":"::ir::builder::InstBuilder::fpromote","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a larger floating point format.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10919741,"byte_end":10919765,"line_start":3993,"line_end":3993,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5380},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10920798,"byte_end":10920805,"line_start":4020,"line_end":4020,"column_start":8,"column_end":15},"name":"fdemote","qualname":"::ir::builder::InstBuilder::fdemote","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert `x` to a smaller floating point format.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10920766,"byte_end":10920790,"line_start":4019,"line_end":4019,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5381},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10921650,"byte_end":10921662,"line_start":4042,"line_end":4042,"column_start":8,"column_end":20},"name":"fcvt_to_uint","qualname":"::ir::builder::InstBuilder::fcvt_to_uint","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert floating point to unsigned integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10921618,"byte_end":10921642,"line_start":4041,"line_end":4041,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5382},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10922319,"byte_end":10922335,"line_start":4060,"line_end":4060,"column_start":8,"column_end":24},"name":"fcvt_to_uint_sat","qualname":"::ir::builder::InstBuilder::fcvt_to_uint_sat","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert floating point to unsigned integer as fcvt_to_uint does, but\n saturates the input instead of trapping. NaN and negative values are\n converted to 0.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10922287,"byte_end":10922311,"line_start":4059,"line_end":4059,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5383},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10923175,"byte_end":10923187,"line_start":4082,"line_end":4082,"column_start":8,"column_end":20},"name":"fcvt_to_sint","qualname":"::ir::builder::InstBuilder::fcvt_to_sint","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert floating point to signed integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10923143,"byte_end":10923167,"line_start":4081,"line_end":4081,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5384},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10923821,"byte_end":10923837,"line_start":4099,"line_end":4099,"column_start":8,"column_end":24},"name":"fcvt_to_sint_sat","qualname":"::ir::builder::InstBuilder::fcvt_to_sint_sat","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert floating point to signed integer as fcvt_to_sint does, but\n saturates the input instead of trapping. NaN values are converted to 0.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10923789,"byte_end":10923813,"line_start":4098,"line_end":4098,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5385},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10924579,"byte_end":10924593,"line_start":4120,"line_end":4120,"column_start":8,"column_end":22},"name":"fcvt_from_uint","qualname":"::ir::builder::InstBuilder::fcvt_from_uint","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert unsigned integer to floating point.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10924547,"byte_end":10924571,"line_start":4119,"line_end":4119,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5386},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10925333,"byte_end":10925347,"line_start":4141,"line_end":4141,"column_start":8,"column_end":22},"name":"fcvt_from_sint","qualname":"::ir::builder::InstBuilder::fcvt_from_sint","value":"fn (self, FloatTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert signed integer to floating point.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10925301,"byte_end":10925325,"line_start":4140,"line_end":4140,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5387},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10926055,"byte_end":10926061,"line_start":4163,"line_end":4163,"column_start":8,"column_end":14},"name":"isplit","qualname":"::ir::builder::InstBuilder::isplit","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Split an integer into low and high parts.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10926023,"byte_end":10926047,"line_start":4162,"line_end":4162,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5388},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10926837,"byte_end":10926844,"line_start":4185,"line_end":4185,"column_start":8,"column_end":15},"name":"iconcat","qualname":"::ir::builder::InstBuilder::iconcat","value":"fn (self, lo: ir::Value, hi: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Concatenate low and high bits to form a larger integer type.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10926805,"byte_end":10926829,"line_start":4184,"line_end":4184,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5389},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10927677,"byte_end":10927689,"line_start":4211,"line_end":4211,"column_start":8,"column_end":20},"name":"x86_udivmodx","qualname":"::ir::builder::InstBuilder::x86_udivmodx","value":"fn (self, nlo: ir::Value, nhi: ir::Value, d: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Extended unsigned division.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10927645,"byte_end":10927669,"line_start":4210,"line_end":4210,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5390},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10928602,"byte_end":10928614,"line_start":4238,"line_end":4238,"column_start":8,"column_end":20},"name":"x86_sdivmodx","qualname":"::ir::builder::InstBuilder::x86_sdivmodx","value":"fn (self, nlo: ir::Value, nhi: ir::Value, d: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Extended signed division.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10928570,"byte_end":10928594,"line_start":4237,"line_end":4237,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5391},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10929399,"byte_end":10929408,"line_start":4260,"line_end":4260,"column_start":8,"column_end":17},"name":"x86_umulx","qualname":"::ir::builder::InstBuilder::x86_umulx","value":"fn (self, argL: ir::Value, argR: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unsigned integer multiplication, producing a double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10929367,"byte_end":10929391,"line_start":4259,"line_end":4259,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5392},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10930175,"byte_end":10930184,"line_start":4282,"line_end":4282,"column_start":8,"column_end":17},"name":"x86_smulx","qualname":"::ir::builder::InstBuilder::x86_smulx","value":"fn (self, argL: ir::Value, argR: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Signed integer multiplication, producing a double-length result.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10930143,"byte_end":10930167,"line_start":4281,"line_end":4281,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5393},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10931153,"byte_end":10931164,"line_start":4306,"line_end":4306,"column_start":8,"column_end":19},"name":"x86_cvtt2si","qualname":"::ir::builder::InstBuilder::x86_cvtt2si","value":"fn (self, IntTo: crate::ir::Type, x: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Convert with truncation floating point to signed integer.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10931121,"byte_end":10931145,"line_start":4305,"line_end":4305,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5394},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10931944,"byte_end":10931952,"line_start":4329,"line_end":4329,"column_start":8,"column_end":16},"name":"x86_fmin","qualname":"::ir::builder::InstBuilder::x86_fmin","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point minimum with x86 semantics.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10931912,"byte_end":10931936,"line_start":4328,"line_end":4328,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5395},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10932795,"byte_end":10932803,"line_start":4353,"line_end":4353,"column_start":8,"column_end":16},"name":"x86_fmax","qualname":"::ir::builder::InstBuilder::x86_fmax","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Floating point maximum with x86 semantics.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10932763,"byte_end":10932787,"line_start":4352,"line_end":4352,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5396},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10933418,"byte_end":10933426,"line_start":4370,"line_end":4370,"column_start":8,"column_end":16},"name":"x86_push","qualname":"::ir::builder::InstBuilder::x86_push","value":"fn (self, x: ir::Value) -> Inst","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Pushes a value onto the stack.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10933386,"byte_end":10933410,"line_start":4369,"line_end":4369,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5397},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10934092,"byte_end":10934099,"line_start":4391,"line_end":4391,"column_start":8,"column_end":15},"name":"x86_pop","qualname":"::ir::builder::InstBuilder::x86_pop","value":"fn (self, iWord: crate::ir::Type) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Pops a value from the stack.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10934060,"byte_end":10934084,"line_start":4390,"line_end":4390,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5398},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10934995,"byte_end":10935002,"line_start":4414,"line_end":4414,"column_start":8,"column_end":15},"name":"x86_bsr","qualname":"::ir::builder::InstBuilder::x86_bsr","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bit Scan Reverse -- returns the bit-index of the most significant 1\n in the word. Result is undefined if the argument is zero. However, it\n sets the Z flag depending on the argument, so it is at least easy to\n detect and handle that case.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10934963,"byte_end":10934987,"line_start":4413,"line_end":4413,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5399},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10935753,"byte_end":10935760,"line_start":4434,"line_end":4434,"column_start":8,"column_end":15},"name":"x86_bsf","qualname":"::ir::builder::InstBuilder::x86_bsf","value":"fn (self, x: ir::Value) -> (Value, Value)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Bit Scan Forwards -- returns the bit-index of the least significant 1\n in the word. Is otherwise identical to 'bsr', just above.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10935721,"byte_end":10935745,"line_start":4433,"line_end":4433,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5400},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10936562,"byte_end":10936572,"line_start":4453,"line_end":4453,"column_start":8,"column_end":18},"name":"x86_pshufd","qualname":"::ir::builder::InstBuilder::x86_pshufd","value":"fn <T1> (self, a: ir::Value, i: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Packed Shuffle Doublewords -- copies data from either memory or lanes in an extended\n register and re-orders the data according to the passed immediate byte.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10936530,"byte_end":10936554,"line_start":4452,"line_end":4452,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5402},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10937282,"byte_end":10937292,"line_start":4472,"line_end":4472,"column_start":8,"column_end":18},"name":"x86_pshufb","qualname":"::ir::builder::InstBuilder::x86_pshufb","value":"fn (self, a: ir::Value, b: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Packed Shuffle Bytes -- re-orders data in an extended register using a shuffle\n mask from either memory or another extended register","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10937250,"byte_end":10937274,"line_start":4471,"line_end":4471,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5403},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10937873,"byte_end":10937882,"line_start":4491,"line_end":4491,"column_start":8,"column_end":17},"name":"x86_pextr","qualname":"::ir::builder::InstBuilder::x86_pextr","value":"fn <T1> (self, x: ir::Value, Idx: T1) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Extract lane ``Idx`` from ``x``.\n The lane index, ``Idx``, is an immediate value, not an SSA value. It\n must indicate a valid lane index for the type of ``x``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10937841,"byte_end":10937865,"line_start":4490,"line_end":4490,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5405},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10938658,"byte_end":10938667,"line_start":4512,"line_end":4512,"column_start":8,"column_end":17},"name":"x86_pinsr","qualname":"::ir::builder::InstBuilder::x86_pinsr","value":"fn <T1> (self, x: ir::Value, Idx: T1, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Insert ``y`` into ``x`` at lane ``Idx``.\n The lane index, ``Idx``, is an immediate value, not an SSA value. It\n must indicate a valid lane index for the type of ``x``.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10938626,"byte_end":10938650,"line_start":4511,"line_end":4511,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5407},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10939481,"byte_end":10939493,"line_start":4533,"line_end":4533,"column_start":8,"column_end":20},"name":"x86_insertps","qualname":"::ir::builder::InstBuilder::x86_insertps","value":"fn <T1> (self, x: ir::Value, Idx: T1, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Insert a lane of ``y`` into ``x`` at using ``Idx`` to encode both which lane the value is\n extracted from and which it is inserted to. This is similar to x86_pinsr but inserts\n floats, which are already stored in an XMM register.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10939449,"byte_end":10939473,"line_start":4532,"line_end":4532,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5409},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10940150,"byte_end":10940159,"line_start":4551,"line_end":4551,"column_start":8,"column_end":17},"name":"x86_movsd","qualname":"::ir::builder::InstBuilder::x86_movsd","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Move the low 64 bits of the float vector ``y`` to the low 64 bits of float vector ``x``","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10940118,"byte_end":10940142,"line_start":4550,"line_end":4550,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5410},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10940733,"byte_end":10940744,"line_start":4568,"line_end":4568,"column_start":8,"column_end":19},"name":"x86_movlhps","qualname":"::ir::builder::InstBuilder::x86_movlhps","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Move the low 64 bits of the float vector ``y`` to the high 64 bits of float vector ``x``","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10940701,"byte_end":10940725,"line_start":4567,"line_end":4567,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5411},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10941424,"byte_end":10941432,"line_start":4587,"line_end":4587,"column_start":8,"column_end":16},"name":"x86_psll","qualname":"::ir::builder::InstBuilder::x86_psll","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Shift Packed Data Left Logical -- This implements the behavior of the shared instruction\n ``ishl`` but alters the shift operand to live in an XMM register as expected by the PSLL*\n family of instructions.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10941392,"byte_end":10941416,"line_start":4586,"line_end":4586,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5412},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10942110,"byte_end":10942118,"line_start":4606,"line_end":4606,"column_start":8,"column_end":16},"name":"x86_psrl","qualname":"::ir::builder::InstBuilder::x86_psrl","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Shift Packed Data Right Logical -- This implements the behavior of the shared instruction\n ``ushr`` but alters the shift operand to live in an XMM register as expected by the PSRL*\n family of instructions.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10942078,"byte_end":10942102,"line_start":4605,"line_end":4605,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5413},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10942799,"byte_end":10942807,"line_start":4625,"line_end":4625,"column_start":8,"column_end":16},"name":"x86_psra","qualname":"::ir::builder::InstBuilder::x86_psra","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Shift Packed Data Right Arithmetic -- This implements the behavior of the shared\n instruction ``sshr`` but alters the shift operand to live in an XMM register as expected by\n the PSRA* family of instructions.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10942767,"byte_end":10942791,"line_start":4624,"line_end":4624,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5414},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10943755,"byte_end":10943764,"line_start":4647,"line_end":4647,"column_start":8,"column_end":17},"name":"x86_ptest","qualname":"::ir::builder::InstBuilder::x86_ptest","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Logical Compare -- PTEST will set the ZF flag if all bits in the result are 0 of the\n bitwise AND of the first source operand (first operand) and the second source operand\n (second operand). PTEST sets the CF flag if all bits in the result are 0 of the bitwise\n AND of the second source operand (second operand) and the logical NOT of the destination\n operand (first operand).","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10943723,"byte_end":10943747,"line_start":4646,"line_end":4646,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5415},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10944387,"byte_end":10944396,"line_start":4665,"line_end":4665,"column_start":8,"column_end":17},"name":"x86_pmaxs","qualname":"::ir::builder::InstBuilder::x86_pmaxs","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Maximum of Packed Signed Integers -- Compare signed integers in the first and second\n operand and return the maximum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10944355,"byte_end":10944379,"line_start":4664,"line_end":4664,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5416},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10945023,"byte_end":10945032,"line_start":4683,"line_end":4683,"column_start":8,"column_end":17},"name":"x86_pmaxu","qualname":"::ir::builder::InstBuilder::x86_pmaxu","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Maximum of Packed Unsigned Integers -- Compare unsigned integers in the first and second\n operand and return the maximum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10944991,"byte_end":10945015,"line_start":4682,"line_end":4682,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5417},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10945655,"byte_end":10945664,"line_start":4701,"line_end":4701,"column_start":8,"column_end":17},"name":"x86_pmins","qualname":"::ir::builder::InstBuilder::x86_pmins","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Minimum of Packed Signed Integers -- Compare signed integers in the first and second\n operand and return the minimum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10945623,"byte_end":10945647,"line_start":4700,"line_end":4700,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5418},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10946291,"byte_end":10946300,"line_start":4719,"line_end":4719,"column_start":8,"column_end":17},"name":"x86_pminu","qualname":"::ir::builder::InstBuilder::x86_pminu","value":"fn (self, x: ir::Value, y: ir::Value) -> Value","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Minimum of Packed Unsigned Integers -- Compare unsigned integers in the first and second\n operand and return the minimum values.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10946259,"byte_end":10946283,"line_start":4718,"line_end":4718,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5419},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10946594,"byte_end":10946600,"line_start":4727,"line_end":4727,"column_start":8,"column_end":14},"name":"Binary","qualname":"::ir::builder::InstBuilder::Binary","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Binary(imms=(), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10946562,"byte_end":10946586,"line_start":4726,"line_end":4726,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5420},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10946963,"byte_end":10946972,"line_start":4737,"line_end":4737,"column_start":8,"column_end":17},"name":"BinaryImm","qualname":"::ir::builder::InstBuilder::BinaryImm","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10946931,"byte_end":10946955,"line_start":4736,"line_end":4736,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5421},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10947354,"byte_end":10947360,"line_start":4748,"line_end":4748,"column_start":8,"column_end":14},"name":"Branch","qualname":"::ir::builder::InstBuilder::Branch","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Branch(imms=(destination: ir::Block), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10947322,"byte_end":10947346,"line_start":4747,"line_end":4747,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5422},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10947781,"byte_end":10947792,"line_start":4759,"line_end":4759,"column_start":8,"column_end":19},"name":"BranchFloat","qualname":"::ir::builder::InstBuilder::BranchFloat","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BranchFloat(imms=(cond: ir::condcodes::FloatCC, destination: ir::Block), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10947749,"byte_end":10947773,"line_start":4758,"line_end":4758,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5423},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10948263,"byte_end":10948273,"line_start":4771,"line_end":4771,"column_start":8,"column_end":18},"name":"BranchIcmp","qualname":"::ir::builder::InstBuilder::BranchIcmp","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination: ir::Block), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10948231,"byte_end":10948255,"line_start":4770,"line_end":4770,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5424},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10948740,"byte_end":10948749,"line_start":4783,"line_end":4783,"column_start":8,"column_end":17},"name":"BranchInt","qualname":"::ir::builder::InstBuilder::BranchInt","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BranchInt(imms=(cond: ir::condcodes::IntCC, destination: ir::Block), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10948708,"byte_end":10948732,"line_start":4782,"line_end":4782,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5425},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10949211,"byte_end":10949222,"line_start":4795,"line_end":4795,"column_start":8,"column_end":19},"name":"BranchTable","qualname":"::ir::builder::InstBuilder::BranchTable","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, table: ir::JumpTable, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BranchTable(imms=(destination: ir::Block, table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10949179,"byte_end":10949203,"line_start":4794,"line_end":4794,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5426},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10949658,"byte_end":10949673,"line_start":4807,"line_end":4807,"column_start":8,"column_end":23},"name":"BranchTableBase","qualname":"::ir::builder::InstBuilder::BranchTableBase","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, table: ir::JumpTable) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BranchTableBase(imms=(table: ir::JumpTable), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10949626,"byte_end":10949650,"line_start":4806,"line_end":4806,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5427},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10950057,"byte_end":10950073,"line_start":4817,"line_end":4817,"column_start":8,"column_end":24},"name":"BranchTableEntry","qualname":"::ir::builder::InstBuilder::BranchTableEntry","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Uimm8, table: ir::JumpTable, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table: ir::JumpTable), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10950025,"byte_end":10950049,"line_start":4816,"line_end":4816,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5428},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10950522,"byte_end":10950526,"line_start":4829,"line_end":4829,"column_start":8,"column_end":12},"name":"Call","qualname":"::ir::builder::InstBuilder::Call","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, func_ref: ir::FuncRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Call(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10950490,"byte_end":10950514,"line_start":4828,"line_end":4828,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5429},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10950909,"byte_end":10950921,"line_start":4840,"line_end":4840,"column_start":8,"column_end":20},"name":"CallIndirect","qualname":"::ir::builder::InstBuilder::CallIndirect","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, sig_ref: ir::SigRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10950877,"byte_end":10950901,"line_start":4839,"line_end":4839,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5430},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10951304,"byte_end":10951312,"line_start":4851,"line_end":4851,"column_start":8,"column_end":16},"name":"CondTrap","qualname":"::ir::builder::InstBuilder::CondTrap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" CondTrap(imms=(code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10951272,"byte_end":10951296,"line_start":4850,"line_end":4850,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5431},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10951705,"byte_end":10951716,"line_start":4862,"line_end":4862,"column_start":8,"column_end":19},"name":"CopySpecial","qualname":"::ir::builder::InstBuilder::CopySpecial","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit, dst: isa::RegUnit) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10951673,"byte_end":10951697,"line_start":4861,"line_end":4861,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5432},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10952089,"byte_end":10952098,"line_start":4873,"line_end":4873,"column_start":8,"column_end":17},"name":"CopyToSsa","qualname":"::ir::builder::InstBuilder::CopyToSsa","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" CopyToSsa(imms=(src: isa::RegUnit), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10952057,"byte_end":10952081,"line_start":4872,"line_end":4872,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5433},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10952445,"byte_end":10952456,"line_start":4883,"line_end":4883,"column_start":8,"column_end":19},"name":"ExtractLane","qualname":"::ir::builder::InstBuilder::ExtractLane","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, lane: ir::immediates::Uimm8, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10952413,"byte_end":10952437,"line_start":4882,"line_end":4882,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5434},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10952854,"byte_end":10952866,"line_start":4894,"line_end":4894,"column_start":8,"column_end":20},"name":"FloatCompare","qualname":"::ir::builder::InstBuilder::FloatCompare","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10952822,"byte_end":10952846,"line_start":4893,"line_end":4893,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5435},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10953285,"byte_end":10953294,"line_start":4905,"line_end":4905,"column_start":8,"column_end":17},"name":"FloatCond","qualname":"::ir::builder::InstBuilder::FloatCond","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10953253,"byte_end":10953277,"line_start":4904,"line_end":4904,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5436},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10953712,"byte_end":10953725,"line_start":4916,"line_end":4916,"column_start":8,"column_end":21},"name":"FloatCondTrap","qualname":"::ir::builder::InstBuilder::FloatCondTrap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10953680,"byte_end":10953704,"line_start":4915,"line_end":4915,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5437},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10954153,"byte_end":10954161,"line_start":4928,"line_end":4928,"column_start":8,"column_end":16},"name":"FuncAddr","qualname":"::ir::builder::InstBuilder::FuncAddr","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, func_ref: ir::FuncRef) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10954121,"byte_end":10954145,"line_start":4927,"line_end":4927,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5438},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10954529,"byte_end":10954537,"line_start":4938,"line_end":4938,"column_start":8,"column_end":16},"name":"HeapAddr","qualname":"::ir::builder::InstBuilder::HeapAddr","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, heap: ir::Heap, imm: ir::immediates::Uimm32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" HeapAddr(imms=(heap: ir::Heap, imm: ir::immediates::Uimm32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10954497,"byte_end":10954521,"line_start":4937,"line_end":4937,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5439},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10954957,"byte_end":10954969,"line_start":4950,"line_end":4950,"column_start":8,"column_end":20},"name":"IndirectJump","qualname":"::ir::builder::InstBuilder::IndirectJump","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, table: ir::JumpTable, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" IndirectJump(imms=(table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10954925,"byte_end":10954949,"line_start":4949,"line_end":4949,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5440},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10955359,"byte_end":10955369,"line_start":4961,"line_end":4961,"column_start":8,"column_end":18},"name":"InsertLane","qualname":"::ir::builder::InstBuilder::InsertLane","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, lane: ir::immediates::Uimm8, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10955327,"byte_end":10955351,"line_start":4960,"line_end":4960,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5441},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10955784,"byte_end":10955794,"line_start":4972,"line_end":4972,"column_start":8,"column_end":18},"name":"IntCompare","qualname":"::ir::builder::InstBuilder::IntCompare","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10955752,"byte_end":10955776,"line_start":4971,"line_end":4971,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5442},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10956239,"byte_end":10956252,"line_start":4983,"line_end":4983,"column_start":8,"column_end":21},"name":"IntCompareImm","qualname":"::ir::builder::InstBuilder::IntCompareImm","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10956207,"byte_end":10956231,"line_start":4982,"line_end":4982,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5443},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10956689,"byte_end":10956696,"line_start":4995,"line_end":4995,"column_start":8,"column_end":15},"name":"IntCond","qualname":"::ir::builder::InstBuilder::IntCond","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10956657,"byte_end":10956681,"line_start":4994,"line_end":4994,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5444},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10957106,"byte_end":10957117,"line_start":5006,"line_end":5006,"column_start":8,"column_end":19},"name":"IntCondTrap","qualname":"::ir::builder::InstBuilder::IntCondTrap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" IntCondTrap(imms=(cond: ir::condcodes::IntCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10957074,"byte_end":10957098,"line_start":5005,"line_end":5005,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5445},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10957547,"byte_end":10957556,"line_start":5018,"line_end":5018,"column_start":8,"column_end":17},"name":"IntSelect","qualname":"::ir::builder::InstBuilder::IntSelect","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10957515,"byte_end":10957539,"line_start":5017,"line_end":5017,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5446},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10957978,"byte_end":10957982,"line_start":5029,"line_end":5029,"column_start":8,"column_end":12},"name":"Jump","qualname":"::ir::builder::InstBuilder::Jump","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Jump(imms=(destination: ir::Block), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10957946,"byte_end":10957970,"line_start":5028,"line_end":5028,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5447},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10958395,"byte_end":10958399,"line_start":5040,"line_end":5040,"column_start":8,"column_end":12},"name":"Load","qualname":"::ir::builder::InstBuilder::Load","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Load(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10958363,"byte_end":10958387,"line_start":5039,"line_end":5039,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5448},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10958861,"byte_end":10958872,"line_start":5052,"line_end":5052,"column_start":8,"column_end":19},"name":"LoadComplex","qualname":"::ir::builder::InstBuilder::LoadComplex","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" LoadComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10958829,"byte_end":10958853,"line_start":5051,"line_end":5051,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5449},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10959288,"byte_end":10959296,"line_start":5064,"line_end":5064,"column_start":8,"column_end":16},"name":"MultiAry","qualname":"::ir::builder::InstBuilder::MultiAry","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" MultiAry(imms=(), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10959256,"byte_end":10959280,"line_start":5063,"line_end":5063,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5450},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10959614,"byte_end":10959621,"line_start":5074,"line_end":5074,"column_start":8,"column_end":15},"name":"NullAry","qualname":"::ir::builder::InstBuilder::NullAry","value":"fn (self, opcode: Opcode, ctrl_typevar: Type) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" NullAry(imms=(), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10959582,"byte_end":10959606,"line_start":5073,"line_end":5073,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5451},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10959936,"byte_end":10959943,"line_start":5083,"line_end":5083,"column_start":8,"column_end":15},"name":"RegFill","qualname":"::ir::builder::InstBuilder::RegFill","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: ir::StackSlot, dst: isa::RegUnit, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10959904,"byte_end":10959928,"line_start":5082,"line_end":5082,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5452},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10960366,"byte_end":10960373,"line_start":5095,"line_end":5095,"column_start":8,"column_end":15},"name":"RegMove","qualname":"::ir::builder::InstBuilder::RegMove","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit, dst: isa::RegUnit, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10960334,"byte_end":10960358,"line_start":5094,"line_end":5094,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5453},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10960797,"byte_end":10960805,"line_start":5107,"line_end":5107,"column_start":8,"column_end":16},"name":"RegSpill","qualname":"::ir::builder::InstBuilder::RegSpill","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, src: isa::RegUnit, dst: ir::StackSlot, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10960765,"byte_end":10960789,"line_start":5106,"line_end":5106,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5454},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10961212,"byte_end":10961219,"line_start":5119,"line_end":5119,"column_start":8,"column_end":15},"name":"Shuffle","qualname":"::ir::builder::InstBuilder::Shuffle","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, mask: ir::Immediate, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Shuffle(imms=(mask: ir::Immediate), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10961180,"byte_end":10961204,"line_start":5118,"line_end":5118,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5455},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10961655,"byte_end":10961664,"line_start":5130,"line_end":5130,"column_start":8,"column_end":17},"name":"StackLoad","qualname":"::ir::builder::InstBuilder::StackLoad","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, stack_slot: ir::StackSlot, offset: ir::immediates::Offset32) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" StackLoad(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10961623,"byte_end":10961647,"line_start":5129,"line_end":5129,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5456},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10962111,"byte_end":10962121,"line_start":5141,"line_end":5141,"column_start":8,"column_end":18},"name":"StackStore","qualname":"::ir::builder::InstBuilder::StackStore","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, stack_slot: ir::StackSlot, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" StackStore(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10962079,"byte_end":10962103,"line_start":5140,"line_end":5140,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5457},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10962594,"byte_end":10962599,"line_start":5153,"line_end":5153,"column_start":8,"column_end":13},"name":"Store","qualname":"::ir::builder::InstBuilder::Store","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Store(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=2)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10962562,"byte_end":10962586,"line_start":5152,"line_end":5152,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5458},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10963085,"byte_end":10963097,"line_start":5165,"line_end":5165,"column_start":8,"column_end":20},"name":"StoreComplex","qualname":"::ir::builder::InstBuilder::StoreComplex","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" StoreComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10963053,"byte_end":10963077,"line_start":5164,"line_end":5164,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5459},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10963565,"byte_end":10963574,"line_start":5177,"line_end":5177,"column_start":8,"column_end":17},"name":"TableAddr","qualname":"::ir::builder::InstBuilder::TableAddr","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, table: ir::Table, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" TableAddr(imms=(table: ir::Table, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10963533,"byte_end":10963557,"line_start":5176,"line_end":5176,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5460},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10963981,"byte_end":10963988,"line_start":5189,"line_end":5189,"column_start":8,"column_end":15},"name":"Ternary","qualname":"::ir::builder::InstBuilder::Ternary","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Ternary(imms=(), vals=3)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10963949,"byte_end":10963973,"line_start":5188,"line_end":5188,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5461},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10964358,"byte_end":10964362,"line_start":5199,"line_end":5199,"column_start":8,"column_end":12},"name":"Trap","qualname":"::ir::builder::InstBuilder::Trap","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Trap(imms=(code: ir::TrapCode), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10964326,"byte_end":10964350,"line_start":5198,"line_end":5198,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5462},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10964673,"byte_end":10964678,"line_start":5209,"line_end":5209,"column_start":8,"column_end":13},"name":"Unary","qualname":"::ir::builder::InstBuilder::Unary","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" Unary(imms=(), vals=1)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10964641,"byte_end":10964665,"line_start":5208,"line_end":5208,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5463},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10965001,"byte_end":10965010,"line_start":5219,"line_end":5219,"column_start":8,"column_end":17},"name":"UnaryBool","qualname":"::ir::builder::InstBuilder::UnaryBool","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: bool) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" UnaryBool(imms=(imm: bool), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10964969,"byte_end":10964993,"line_start":5218,"line_end":5218,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5464},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10965350,"byte_end":10965360,"line_start":5229,"line_end":5229,"column_start":8,"column_end":18},"name":"UnaryConst","qualname":"::ir::builder::InstBuilder::UnaryConst","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, constant_handle: ir::Constant) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" UnaryConst(imms=(constant_handle: ir::Constant), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10965318,"byte_end":10965342,"line_start":5228,"line_end":5228,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5465},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10965739,"byte_end":10965755,"line_start":5239,"line_end":5239,"column_start":8,"column_end":24},"name":"UnaryGlobalValue","qualname":"::ir::builder::InstBuilder::UnaryGlobalValue","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, global_value: ir::GlobalValue) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" UnaryGlobalValue(imms=(global_value: ir::GlobalValue), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10965707,"byte_end":10965731,"line_start":5238,"line_end":5238,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5466},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10966130,"byte_end":10966141,"line_start":5249,"line_end":5249,"column_start":8,"column_end":19},"name":"UnaryIeee32","qualname":"::ir::builder::InstBuilder::UnaryIeee32","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee32) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10966098,"byte_end":10966122,"line_start":5248,"line_end":5248,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5467},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10966500,"byte_end":10966511,"line_start":5259,"line_end":5259,"column_start":8,"column_end":19},"name":"UnaryIeee64","qualname":"::ir::builder::InstBuilder::UnaryIeee64","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee64) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10966468,"byte_end":10966492,"line_start":5258,"line_end":5258,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5468},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10966866,"byte_end":10966874,"line_start":5269,"line_end":5269,"column_start":8,"column_end":16},"name":"UnaryImm","qualname":"::ir::builder::InstBuilder::UnaryImm","value":"fn (self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64) -> (Inst, &'f mut ir::DataFlowGraph)","parent":{"krate":0,"index":5090},"children":[],"decl_id":null,"docs":" UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)\n","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10966834,"byte_end":10966858,"line_start":5268,"line_end":5268,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":486},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124122,"byte_end":124138,"line_start":51,"line_end":51,"column_start":11,"column_end":27},"name":"InstInserterBase","qualname":"::ir::builder::InstInserterBase","value":"InstInserterBase<'f>: Sized","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490}],"decl_id":null,"docs":" Base trait for instruction inserters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124218,"byte_end":124233,"line_start":53,"line_end":53,"column_start":8,"column_end":23},"name":"data_flow_graph","qualname":"::ir::builder::InstInserterBase::data_flow_graph","value":"fn (&self) -> &DataFlowGraph","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Get an immutable reference to the data flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124324,"byte_end":124343,"line_start":56,"line_end":56,"column_start":8,"column_end":27},"name":"data_flow_graph_mut","qualname":"::ir::builder::InstInserterBase::data_flow_graph_mut","value":"fn (&mut self) -> &mut DataFlowGraph","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Get a mutable reference to the data flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124445,"byte_end":124462,"line_start":59,"line_end":59,"column_start":8,"column_end":25},"name":"insert_built_inst","qualname":"::ir::builder::InstInserterBase::insert_built_inst","value":"fn (self, inst: Inst, ctrl_typevar: Type) -> &'f mut DataFlowGraph","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Insert a new instruction which belongs to the DFG.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124857,"byte_end":124870,"line_start":69,"line_end":69,"column_start":12,"column_end":25},"name":"InsertBuilder","qualname":"::ir::builder::InsertBuilder","value":"InsertBuilder {  }","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"decl_id":null,"docs":" Builder that inserts an instruction at the current position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":125180,"byte_end":125183,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<InsertBuilder>::new","value":"fn (inserter: IIB) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder which inserts instructions at `pos`.\n The `dfg` and `pos.layout` references should be from the same `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":125687,"byte_end":125699,"line_start":91,"line_end":91,"column_start":12,"column_end":24},"name":"with_results","qualname":"<InsertBuilder>::with_results","value":"fn <Array> (self, reuse: Array) -> InsertReuseBuilder<'f, IIB, Array>","parent":null,"children":[],"decl_id":null,"docs":" Reuse result values in `reuse`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":126323,"byte_end":126334,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"with_result","qualname":"<InsertBuilder>::with_result","value":"fn (self, v: Value) -> InsertReuseBuilder<'f, IIB, [Option<Value>; 1]>","parent":null,"children":[],"decl_id":null,"docs":" Reuse a single result value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":511},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":127365,"byte_end":127383,"line_start":137,"line_end":137,"column_start":12,"column_end":30},"name":"InsertReuseBuilder","qualname":"::ir::builder::InsertReuseBuilder","value":"InsertReuseBuilder {  }","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517}],"decl_id":null,"docs":" Builder that inserts a new instruction like `InsertBuilder`, but reusing result values.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":525},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":128903,"byte_end":128917,"line_start":181,"line_end":181,"column_start":12,"column_end":26},"name":"ReplaceBuilder","qualname":"::ir::builder::ReplaceBuilder","value":"ReplaceBuilder {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"decl_id":null,"docs":" Instruction builder that replaces an existing instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":129078,"byte_end":129081,"line_start":188,"line_end":188,"column_start":12,"column_end":15},"name":"new","qualname":"<ReplaceBuilder>::new","value":"fn (dfg: &'f mut DataFlowGraph, inst: Inst) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `ReplaceBuilder` that will overwrite `inst`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":537},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constant","qualname":"::ir::constant","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":5469},{"krate":0,"index":5484},{"krate":0,"index":5481},{"krate":0,"index":5479},{"krate":0,"index":5476},{"krate":0,"index":5474},{"krate":0,"index":5472},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":577},{"krate":0,"index":5486},{"krate":0,"index":5489},{"krate":0,"index":578},{"krate":0,"index":5491},{"krate":0,"index":5494},{"krate":0,"index":582}],"decl_id":null,"docs":" Constants","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5469},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":132720,"byte_end":132732,"line_start":28,"line_end":28,"column_start":12,"column_end":24},"name":"ConstantData","qualname":"::ir::constant::ConstantData","value":"","parent":null,"children":[],"decl_id":null,"docs":" This type describes the actual constant data. Note that the bytes stored in this structure are\n expected to be in little-endian order; this is due to ease-of-use when interacting with\n WebAssembly values, which are [little-endian by design].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133306,"byte_end":133309,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"len","qualname":"<ConstantData>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of bytes in the constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133405,"byte_end":133413,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ConstantData>::into_vec","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Convert the data to a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133509,"byte_end":133513,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"iter","qualname":"<ConstantData>::iter","value":"fn (&self) -> Iter<u8>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the constant's bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133619,"byte_end":133625,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"append","qualname":"<ConstantData>::append","value":"fn (mut self, bytes: impl IntoBytes) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add new bytes to the constant data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133916,"byte_end":133925,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"expand_to","qualname":"<ConstantData>::expand_to","value":"fn (mut self, expected_size: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Expand the size of the constant data to `expected_size` number of bytes by adding zeroes\n in the high-order byte slots.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":577},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":136855,"byte_end":136869,"line_start":161,"line_end":161,"column_start":10,"column_end":24},"name":"ConstantOffset","qualname":"::ir::constant::ConstantOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" This type describes an offset in bytes within a constant pool.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5486},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":137394,"byte_end":137411,"line_start":170,"line_end":170,"column_start":12,"column_end":29},"name":"ConstantPoolEntry","qualname":"::ir::constant::ConstantPoolEntry","value":"ConstantPoolEntry {  }","parent":null,"children":[{"krate":0,"index":5487},{"krate":0,"index":5488}],"decl_id":null,"docs":" Inner type for storing data and offset together in the constant pool. The offset is optional\n because it must be set relative to the function code size (i.e. constants are emitted after the\n function body); because the function is not yet compiled when constants are inserted,\n [`set_offset`](crate::ir::ConstantPool::set_offset) must be called once a constant's offset\n from the beginning of the function is known (see\n [`relaxation.rs`](crate::binemit::relaxation)).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":137652,"byte_end":137655,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"len","qualname":"<ConstantPoolEntry>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the constant at this entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":137775,"byte_end":137785,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<ConstantPoolEntry>::set_offset","value":"fn (&mut self, offset: ConstantOffset) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assign a new offset to the constant at this entry.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5491},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":138066,"byte_end":138078,"line_start":194,"line_end":194,"column_start":12,"column_end":24},"name":"ConstantPool","qualname":"::ir::constant::ConstantPool","value":"ConstantPool {  }","parent":null,"children":[{"krate":0,"index":5492},{"krate":0,"index":5493}],"decl_id":null,"docs":" Maintains the mapping between a constant handle (i.e.  [`Constant`](crate::ir::Constant)) and\n its constant data (i.e.  [`ConstantData`](crate::ir::ConstantData)).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":138541,"byte_end":138544,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"new","qualname":"<ConstantPool>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new constant pool instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":138740,"byte_end":138745,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"clear","qualname":"<ConstantPool>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Empty the constant pool of all data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":139075,"byte_end":139081,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"insert","qualname":"<ConstantPool>::insert","value":"fn (&mut self, constant_value: ConstantData) -> Constant","parent":null,"children":[],"decl_id":null,"docs":" Insert constant data into the pool, returning a handle for later referencing; when constant\n data is inserted that is a duplicate of previous constant data, the existing handle will be\n returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":139672,"byte_end":139675,"line_start":236,"line_end":236,"column_start":12,"column_end":15},"name":"get","qualname":"<ConstantPool>::get","value":"fn (&self, constant_handle: Constant) -> &ConstantData","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the constant data given a handle.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":140071,"byte_end":140081,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<ConstantPool>::set_offset","value":"fn (&mut self, constant_handle: Constant, constant_offset: ConstantOffset) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assign an offset to a given constant, where the offset is the number of bytes from the\n beginning of the function to the beginning of the constant data inside the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":140736,"byte_end":140746,"line_start":256,"line_end":256,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<ConstantPool>::get_offset","value":"fn (&self, constant_handle: Constant) -> ConstantOffset","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the offset of a given constant, where the offset is the number of bytes from the\n beginning of the function to the beginning of the constant data inside the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":141316,"byte_end":141320,"line_start":271,"line_end":271,"column_start":12,"column_end":16},"name":"iter","qualname":"<ConstantPool>::iter","value":"fn (&self) -> impl Iterator<Item = (&Constant, &ConstantData)>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the constants in insertion order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":141543,"byte_end":141554,"line_start":276,"line_end":276,"column_start":12,"column_end":23},"name":"entries_mut","qualname":"<ConstantPool>::entries_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut ConstantPoolEntry>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over mutable entries in the constant pool in insertion order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":141730,"byte_end":141733,"line_start":281,"line_end":281,"column_start":12,"column_end":15},"name":"len","qualname":"<ConstantPool>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of constants in the pool.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":141883,"byte_end":141892,"line_start":286,"line_end":286,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<ConstantPool>::byte_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the combined size of all of the constant values in the pool.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":598},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dfg","qualname":"::ir::dfg","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":610},{"krate":0,"index":615},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":5496},{"krate":0,"index":5508},{"krate":0,"index":638},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":659},{"krate":0,"index":5510},{"krate":0,"index":5527},{"krate":0,"index":5526},{"krate":0,"index":5524},{"krate":0,"index":5521},{"krate":0,"index":5519},{"krate":0,"index":672},{"krate":0,"index":5529},{"krate":0,"index":5543},{"krate":0,"index":5541},{"krate":0,"index":677},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":5545},{"krate":0,"index":5547},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":732},{"krate":0,"index":735}],"decl_id":null,"docs":" Data flow graph tracking Instructions, Values, and blocks.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5496},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":149330,"byte_end":149343,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"DataFlowGraph","qualname":"::ir::dfg::DataFlowGraph","value":"DataFlowGraph { value_lists, signatures, old_signatures, ext_funcs, values_labels, constants, immediates }","parent":null,"children":[{"krate":0,"index":5497},{"krate":0,"index":5498},{"krate":0,"index":5499},{"krate":0,"index":5500},{"krate":0,"index":5501},{"krate":0,"index":5502},{"krate":0,"index":5503},{"krate":0,"index":5504},{"krate":0,"index":5505},{"krate":0,"index":5506},{"krate":0,"index":5507}],"decl_id":null,"docs":" A data flow graph defines all instructions and basic blocks in a function as well as\n the data flow dependencies between them. The DFG also tracks values which can be either\n instruction results or block parameters.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5500},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":150433,"byte_end":150444,"line_start":57,"line_end":57,"column_start":9,"column_end":20},"name":"value_lists","qualname":"::ir::dfg::DataFlowGraph::value_lists","value":"cranelift_entity::list::ListPool<ir::entities::Value>","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" Memory pool of value lists.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5502},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":150719,"byte_end":150729,"line_start":64,"line_end":64,"column_start":9,"column_end":19},"name":"signatures","qualname":"::ir::dfg::DataFlowGraph::signatures","value":"cranelift_entity::primary::PrimaryMap<ir::entities::SigRef, ir::extfunc::Signature>","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" Function signature table. These signatures are referenced by indirect call instructions as\n well as the external function references.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5503},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":150850,"byte_end":150864,"line_start":67,"line_end":67,"column_start":9,"column_end":23},"name":"old_signatures","qualname":"::ir::dfg::DataFlowGraph::old_signatures","value":"cranelift_entity::map::SecondaryMap<ir::entities::SigRef, core::option::Option<ir::extfunc::Signature>>","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" The pre-legalization signature for each entry in `signatures`, if any.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5504},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151003,"byte_end":151012,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"name":"ext_funcs","qualname":"::ir::dfg::DataFlowGraph::ext_funcs","value":"cranelift_entity::primary::PrimaryMap<ir::entities::FuncRef, ir::extfunc::ExtFuncData>","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" External function references. These are functions that can be called directly.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5505},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151085,"byte_end":151098,"line_start":73,"line_end":73,"column_start":9,"column_end":22},"name":"values_labels","qualname":"::ir::dfg::DataFlowGraph::values_labels","value":"core::option::Option<std::collections::HashMap<ir::entities::Value, ir::ValueLabelAssignments>>","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" Saves Value labels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5506},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151199,"byte_end":151208,"line_start":76,"line_end":76,"column_start":9,"column_end":18},"name":"constants","qualname":"::ir::dfg::DataFlowGraph::constants","value":"ir::constant::ConstantPool","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" Constants used within the function\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5507},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151312,"byte_end":151322,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"name":"immediates","qualname":"::ir::dfg::DataFlowGraph::immediates","value":"cranelift_entity::primary::PrimaryMap<ir::entities::Immediate, ir::constant::ConstantData>","parent":{"krate":0,"index":5496},"children":[],"decl_id":null,"docs":" Stores large immediates that otherwise will not fit on InstructionData\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151440,"byte_end":151443,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<DataFlowGraph>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `DataFlowGraph`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151984,"byte_end":151989,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"clear","qualname":"<DataFlowGraph>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear everything.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":152587,"byte_end":152596,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"num_insts","qualname":"<DataFlowGraph>::num_insts","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of instructions created in this function, whether they are currently\n inserted in the layout or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":152726,"byte_end":152739,"line_start":124,"line_end":124,"column_start":12,"column_end":25},"name":"inst_is_valid","qualname":"<DataFlowGraph>::inst_is_valid","value":"fn (&self, inst: Inst) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given instruction reference is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":153035,"byte_end":153045,"line_start":132,"line_end":132,"column_start":12,"column_end":22},"name":"num_blocks","qualname":"<DataFlowGraph>::num_blocks","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of basic blocks created in this function, whether they are\n currently inserted in the layout or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":153170,"byte_end":153184,"line_start":137,"line_end":137,"column_start":12,"column_end":26},"name":"block_is_valid","qualname":"<DataFlowGraph>::block_is_valid","value":"fn (&self, block: Block) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given block reference is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":153310,"byte_end":153320,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"num_values","qualname":"<DataFlowGraph>::num_values","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":153431,"byte_end":153449,"line_start":147,"line_end":147,"column_start":12,"column_end":30},"name":"collect_debug_info","qualname":"<DataFlowGraph>::collect_debug_info","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Starts collection of debug information.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":649},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":154434,"byte_end":154440,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"Values","qualname":"::ir::dfg::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":651}],"decl_id":null,"docs":" Iterator over all Values in a DFG\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":155296,"byte_end":155302,"line_start":224,"line_end":224,"column_start":12,"column_end":18},"name":"values","qualname":"<DataFlowGraph>::values","value":"fn <'a> (&'a self) -> Values","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":155458,"byte_end":155472,"line_start":231,"line_end":231,"column_start":12,"column_end":26},"name":"value_is_valid","qualname":"<DataFlowGraph>::value_is_valid","value":"fn (&self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a value reference is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":155583,"byte_end":155593,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"value_type","qualname":"<DataFlowGraph>::value_type","value":"fn (&self, v: Value) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the type of a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":155969,"byte_end":155978,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"value_def","qualname":"<DataFlowGraph>::value_def","value":"fn (&self, v: Value) -> ValueDef","parent":null,"children":[],"decl_id":null,"docs":" Get the definition of a value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":156877,"byte_end":156894,"line_start":266,"line_end":266,"column_start":12,"column_end":29},"name":"value_is_attached","qualname":"<DataFlowGraph>::value_is_attached","value":"fn (&self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if `v` is an attached instruction result / block parameter.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":157334,"byte_end":157349,"line_start":278,"line_end":278,"column_start":12,"column_end":27},"name":"resolve_aliases","qualname":"<DataFlowGraph>::resolve_aliases","value":"fn (&self, value: Value) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Resolve value aliases.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":157619,"byte_end":157647,"line_start":286,"line_end":286,"column_start":12,"column_end":40},"name":"resolve_aliases_in_arguments","qualname":"<DataFlowGraph>::resolve_aliases_in_arguments","value":"fn (&mut self, inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resolve all aliases among inst's arguments.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":158208,"byte_end":158223,"line_start":301,"line_end":301,"column_start":12,"column_end":27},"name":"change_to_alias","qualname":"<DataFlowGraph>::change_to_alias","value":"fn (&mut self, dest: Value, src: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Turn a value into an alias of another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":159466,"byte_end":159486,"line_start":335,"line_end":335,"column_start":12,"column_end":32},"name":"replace_with_aliases","qualname":"<DataFlowGraph>::replace_with_aliases","value":"fn (&mut self, dest_inst: Inst, src_inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the results of one instruction with aliases to the results of another.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5511},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":160844,"byte_end":160850,"line_start":378,"line_end":378,"column_start":5,"column_end":11},"name":"Result","qualname":"::ir::dfg::ValueDef::Result","value":"ValueDef::Result(Inst, usize)","parent":{"krate":0,"index":5510},"children":[],"decl_id":null,"docs":" Value is the n'th result of an instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5515},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":160918,"byte_end":160923,"line_start":380,"line_end":380,"column_start":5,"column_end":10},"name":"Param","qualname":"::ir::dfg::ValueDef::Param","value":"ValueDef::Param(Block, usize)","parent":{"krate":0,"index":5510},"children":[],"decl_id":null,"docs":" Value is the n'th parameter to an block.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5510},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":160777,"byte_end":160785,"line_start":376,"line_end":376,"column_start":10,"column_end":18},"name":"ValueDef","qualname":"::ir::dfg::ValueDef","value":"ValueDef::{Result, Param}","parent":null,"children":[{"krate":0,"index":5511},{"krate":0,"index":5515}],"decl_id":null,"docs":" Where did a value come from?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":161039,"byte_end":161050,"line_start":385,"line_end":385,"column_start":12,"column_end":23},"name":"unwrap_inst","qualname":"<ValueDef>::unwrap_inst","value":"fn (&self) -> Inst","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the instruction where the value was defined, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":161291,"byte_end":161303,"line_start":393,"line_end":393,"column_start":12,"column_end":24},"name":"unwrap_block","qualname":"<ValueDef>::unwrap_block","value":"fn (&self) -> Block","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the block there the parameter is defined, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":161535,"byte_end":161537,"line_start":401,"line_end":401,"column_start":12,"column_end":14},"name":"pp","qualname":"<ValueDef>::pp","value":"fn (self) -> ir::ExpandedProgramPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the program point where the value was defined.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":161789,"byte_end":161792,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"num","qualname":"<ValueDef>::num","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number component of this definition.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":162728,"byte_end":162737,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"make_inst","qualname":"<DataFlowGraph>::make_inst","value":"fn (&mut self, data: InstructionData) -> Inst","parent":null,"children":[],"decl_id":null,"docs":" Create a new instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":162948,"byte_end":162960,"line_start":445,"line_end":445,"column_start":12,"column_end":24},"name":"display_inst","qualname":"<DataFlowGraph>::display_inst","value":"fn <'a, I> (&'a self, inst: Inst, isa: I) -> DisplayInst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an object that displays `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":163199,"byte_end":163208,"line_start":454,"line_end":454,"column_start":12,"column_end":21},"name":"inst_args","qualname":"<DataFlowGraph>::inst_args","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get all value arguments on `inst` as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":163376,"byte_end":163389,"line_start":459,"line_end":459,"column_start":12,"column_end":25},"name":"inst_args_mut","qualname":"<DataFlowGraph>::inst_args_mut","value":"fn (&mut self, inst: Inst) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get all value arguments on `inst` as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":163571,"byte_end":163586,"line_start":464,"line_end":464,"column_start":12,"column_end":27},"name":"inst_fixed_args","qualname":"<DataFlowGraph>::inst_fixed_args","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the fixed value arguments on `inst` as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":163885,"byte_end":163904,"line_start":473,"line_end":473,"column_start":12,"column_end":31},"name":"inst_fixed_args_mut","qualname":"<DataFlowGraph>::inst_fixed_args_mut","value":"fn (&mut self, inst: Inst) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the fixed value arguments on `inst` as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":164214,"byte_end":164232,"line_start":482,"line_end":482,"column_start":12,"column_end":30},"name":"inst_variable_args","qualname":"<DataFlowGraph>::inst_variable_args","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the variable value arguments on `inst` as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":164534,"byte_end":164556,"line_start":491,"line_end":491,"column_start":12,"column_end":34},"name":"inst_variable_args_mut","qualname":"<DataFlowGraph>::inst_variable_args_mut","value":"fn (&mut self, inst: Inst) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the variable value arguments on `inst` as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":165588,"byte_end":165605,"line_start":511,"line_end":511,"column_start":12,"column_end":29},"name":"make_inst_results","qualname":"<DataFlowGraph>::make_inst_results","value":"fn (&mut self, inst: Inst, ctrl_typevar: Type) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Create result values for an instruction that produces multiple results.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":166085,"byte_end":166110,"line_start":520,"line_end":520,"column_start":12,"column_end":37},"name":"make_inst_results_reusing","qualname":"<DataFlowGraph>::make_inst_results_reusing","value":"fn <I> (&mut self, inst: Inst, ctrl_typevar: Type, reuse: I) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Create result values for `inst`, reusing the provided detached values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":168010,"byte_end":168017,"line_start":569,"line_end":569,"column_start":12,"column_end":19},"name":"replace","qualname":"<DataFlowGraph>::replace","value":"fn (&mut self, inst: Inst) -> ReplaceBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a `ReplaceBuilder` that will replace `inst` with a new instruction in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":168360,"byte_end":168374,"line_start":577,"line_end":577,"column_start":12,"column_end":26},"name":"detach_results","qualname":"<DataFlowGraph>::detach_results","value":"fn (&mut self, inst: Inst) -> ValueList","parent":null,"children":[],"decl_id":null,"docs":" Detach the list of result values from `inst` and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":168691,"byte_end":168704,"line_start":585,"line_end":585,"column_start":12,"column_end":25},"name":"clear_results","qualname":"<DataFlowGraph>::clear_results","value":"fn (&mut self, inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the list of result values from `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":169143,"byte_end":169156,"line_start":595,"line_end":595,"column_start":12,"column_end":25},"name":"attach_result","qualname":"<DataFlowGraph>::attach_result","value":"fn (&mut self, inst: Inst, res: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Attach an existing value to the result value list for `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":169857,"byte_end":169871,"line_start":614,"line_end":614,"column_start":12,"column_end":26},"name":"replace_result","qualname":"<DataFlowGraph>::replace_result","value":"fn (&mut self, old_value: Value, new_type: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Replace an instruction result with a new value of type `new_type`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":170789,"byte_end":170802,"line_start":642,"line_end":642,"column_start":12,"column_end":25},"name":"append_result","qualname":"<DataFlowGraph>::append_result","value":"fn (&mut self, inst: Inst, ty: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Append a new instruction result value to `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":171293,"byte_end":171308,"line_start":656,"line_end":656,"column_start":12,"column_end":27},"name":"append_inst_arg","qualname":"<DataFlowGraph>::append_inst_arg","value":"fn (&mut self, inst: Inst, new_arg: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append a new value argument to an instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":171761,"byte_end":171773,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"first_result","qualname":"<DataFlowGraph>::first_result","value":"fn (&self, inst: Inst) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Get the first result of an instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":171993,"byte_end":172004,"line_start":674,"line_end":674,"column_start":12,"column_end":23},"name":"has_results","qualname":"<DataFlowGraph>::has_results","value":"fn (&self, inst: Inst) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if `inst` has any result values currently.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":172141,"byte_end":172153,"line_start":679,"line_end":679,"column_start":12,"column_end":24},"name":"inst_results","qualname":"<DataFlowGraph>::inst_results","value":"fn (&self, inst: Inst) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Return all the results of an instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":172393,"byte_end":172407,"line_start":685,"line_end":685,"column_start":12,"column_end":26},"name":"call_signature","qualname":"<DataFlowGraph>::call_signature","value":"fn (&self, inst: Inst) -> Option<SigRef>","parent":null,"children":[],"decl_id":null,"docs":" Get the call signature of a direct or indirect call instruction.\n Returns `None` if `inst` is not a call instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":172739,"byte_end":172753,"line_start":694,"line_end":694,"column_start":12,"column_end":26},"name":"analyze_branch","qualname":"<DataFlowGraph>::analyze_branch","value":"fn (&self, inst: Inst) -> BranchInfo","parent":null,"children":[],"decl_id":null,"docs":" Check if `inst` is a branch.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":173265,"byte_end":173284,"line_start":705,"line_end":705,"column_start":12,"column_end":31},"name":"compute_result_type","qualname":"<DataFlowGraph>::compute_result_type","value":"fn (&self, inst: Inst, result_idx: usize, ctrl_typevar: Type) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Compute the type of an instruction result from opcode constraints and call signatures.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":174075,"byte_end":174087,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"ctrl_typevar","qualname":"<DataFlowGraph>::ctrl_typevar","value":"fn (&self, inst: Inst) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the controlling type variable, or `INVALID` if `inst` isn't polymorphic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175277,"byte_end":175287,"line_start":766,"line_end":766,"column_start":12,"column_end":22},"name":"make_block","qualname":"<DataFlowGraph>::make_block","value":"fn (&mut self) -> Block","parent":null,"children":[],"decl_id":null,"docs":" Create a new basic block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175420,"byte_end":175436,"line_start":771,"line_end":771,"column_start":12,"column_end":28},"name":"num_block_params","qualname":"<DataFlowGraph>::num_block_params","value":"fn (&self, block: Block) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of parameters on `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175583,"byte_end":175595,"line_start":776,"line_end":776,"column_start":12,"column_end":24},"name":"block_params","qualname":"<DataFlowGraph>::block_params","value":"fn (&self, block: Block) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the parameters on `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175763,"byte_end":175780,"line_start":781,"line_end":781,"column_start":12,"column_end":29},"name":"block_param_types","qualname":"<DataFlowGraph>::block_param_types","value":"fn (&self, block: Block) -> Vec<Type>","parent":null,"children":[],"decl_id":null,"docs":" Get the types of the parameters on `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":176007,"byte_end":176025,"line_start":789,"line_end":789,"column_start":12,"column_end":30},"name":"append_block_param","qualname":"<DataFlowGraph>::append_block_param","value":"fn (&mut self, block: Block, ty: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Append a parameter with type `ty` to `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":176906,"byte_end":176929,"line_start":808,"line_end":808,"column_start":12,"column_end":35},"name":"swap_remove_block_param","qualname":"<DataFlowGraph>::swap_remove_block_param","value":"fn (&mut self, val: Value) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Removes `val` from `block`'s parameters by swapping it with the last parameter on `block`.\n Returns the position of `val` before removal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":177962,"byte_end":177980,"line_start":837,"line_end":837,"column_start":12,"column_end":30},"name":"remove_block_param","qualname":"<DataFlowGraph>::remove_block_param","value":"fn (&mut self, val: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes `val` from `block`'s parameters by a standard linear time list removal which\n preserves ordering. Also updates the values' data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":179210,"byte_end":179228,"line_start":871,"line_end":871,"column_start":12,"column_end":30},"name":"attach_block_param","qualname":"<DataFlowGraph>::attach_block_param","value":"fn (&mut self, block: Block, param: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append an existing value to `block`'s parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":180153,"byte_end":180172,"line_start":892,"line_end":892,"column_start":12,"column_end":31},"name":"replace_block_param","qualname":"<DataFlowGraph>::replace_block_param","value":"fn (&mut self, old_value: Value, new_type: Type) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Replace an block parameter with a new value of type `ty`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":181131,"byte_end":181150,"line_start":916,"line_end":916,"column_start":12,"column_end":31},"name":"detach_block_params","qualname":"<DataFlowGraph>::detach_block_params","value":"fn (&mut self, block: Block) -> ValueList","parent":null,"children":[],"decl_id":null,"docs":" Detach all the parameters from `block` and return them as a `ValueList`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":726},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":181769,"byte_end":181780,"line_start":941,"line_end":941,"column_start":12,"column_end":23},"name":"DisplayInst","qualname":"::ir::dfg::DisplayInst","value":"","parent":null,"children":[],"decl_id":null,"docs":" Object that can display an instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":183500,"byte_end":183528,"line_start":989,"line_end":989,"column_start":12,"column_end":40},"name":"make_inst_results_for_parser","qualname":"<DataFlowGraph>::make_inst_results_for_parser","value":"fn (&mut self, inst: Inst, ctrl_typevar: Type, reuse: &[Value]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Create result values for `inst`, reusing the provided detached values.\n This is similar to `make_inst_results_reusing` except it's only for use\n in the parser, which needs to reuse previously invalid values.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":183481,"byte_end":183488,"line_start":988,"line_end":988,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":184885,"byte_end":184914,"line_start":1024,"line_end":1024,"column_start":12,"column_end":41},"name":"append_block_param_for_parser","qualname":"<DataFlowGraph>::append_block_param_for_parser","value":"fn (&mut self, block: Block, ty: Type, val: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Similar to `append_block_param`, append a parameter with type `ty` to\n `block`, but using value `val`. This is only for use by the parser to\n create parameters with specific values.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":184866,"byte_end":184873,"line_start":1023,"line_end":1023,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":185414,"byte_end":185448,"line_start":1037,"line_end":1037,"column_start":12,"column_end":46},"name":"make_value_alias_for_serialization","qualname":"<DataFlowGraph>::make_value_alias_for_serialization","value":"fn (&mut self, src: Value, dest: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create a new value alias. This is only for use by the parser to create\n aliases with specific values, and the printer for testing.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":185395,"byte_end":185402,"line_start":1036,"line_end":1036,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":186234,"byte_end":186268,"line_start":1056,"line_end":1056,"column_start":12,"column_end":46},"name":"value_alias_dest_for_serialization","qualname":"<DataFlowGraph>::value_alias_dest_for_serialization","value":"fn (&self, v: Value) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" If `v` is already defined as an alias, return its destination value.\n Otherwise return None. This allows the parser to coalesce identical\n alias definitions, and the printer to identify an alias's immediate target.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":186215,"byte_end":186222,"line_start":1055,"line_end":1055,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":186605,"byte_end":186630,"line_start":1067,"line_end":1067,"column_start":12,"column_end":37},"name":"set_alias_type_for_parser","qualname":"<DataFlowGraph>::set_alias_type_for_parser","value":"fn (&mut self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compute the type of an alias. This is only for use in the parser.\n Returns false if an alias cycle was encountered.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":186586,"byte_end":186593,"line_start":1066,"line_end":1066,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":187238,"byte_end":187267,"line_start":1085,"line_end":1085,"column_start":12,"column_end":41},"name":"make_invalid_value_for_parser","qualname":"<DataFlowGraph>::make_invalid_value_for_parser","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create an invalid value, to pad the index space. This is only for use by\n the parser to pad out the value index space.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":187219,"byte_end":187226,"line_start":1084,"line_end":1084,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":187591,"byte_end":187616,"line_start":1096,"line_end":1096,"column_start":12,"column_end":37},"name":"value_is_valid_for_parser","qualname":"<DataFlowGraph>::value_is_valid_for_parser","value":"fn (&self, v: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a value reference is valid, while being aware of aliases which\n may be unresolved while parsing.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":187572,"byte_end":187579,"line_start":1095,"line_end":1095,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":745},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"entities","qualname":"::ir::entities","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":5549},{"krate":0,"index":5570},{"krate":0,"index":5568},{"krate":0,"index":5565},{"krate":0,"index":5563},{"krate":0,"index":5560},{"krate":0,"index":5554},{"krate":0,"index":5552},{"krate":0,"index":5575},{"krate":0,"index":5578},{"krate":0,"index":5580},{"krate":0,"index":5571},{"krate":0,"index":5573},{"krate":0,"index":749},{"krate":0,"index":5583},{"krate":0,"index":5604},{"krate":0,"index":5602},{"krate":0,"index":5599},{"krate":0,"index":5597},{"krate":0,"index":5594},{"krate":0,"index":5588},{"krate":0,"index":5586},{"krate":0,"index":5609},{"krate":0,"index":5612},{"krate":0,"index":5614},{"krate":0,"index":5605},{"krate":0,"index":5607},{"krate":0,"index":751},{"krate":0,"index":5617},{"krate":0,"index":5638},{"krate":0,"index":5636},{"krate":0,"index":5633},{"krate":0,"index":5631},{"krate":0,"index":5628},{"krate":0,"index":5622},{"krate":0,"index":5620},{"krate":0,"index":5643},{"krate":0,"index":5646},{"krate":0,"index":5648},{"krate":0,"index":5639},{"krate":0,"index":5641},{"krate":0,"index":5651},{"krate":0,"index":5672},{"krate":0,"index":5670},{"krate":0,"index":5667},{"krate":0,"index":5665},{"krate":0,"index":5662},{"krate":0,"index":5656},{"krate":0,"index":5654},{"krate":0,"index":5677},{"krate":0,"index":5680},{"krate":0,"index":5682},{"krate":0,"index":5673},{"krate":0,"index":5675},{"krate":0,"index":753},{"krate":0,"index":5685},{"krate":0,"index":5706},{"krate":0,"index":5704},{"krate":0,"index":5701},{"krate":0,"index":5699},{"krate":0,"index":5696},{"krate":0,"index":5690},{"krate":0,"index":5688},{"krate":0,"index":5711},{"krate":0,"index":5714},{"krate":0,"index":5716},{"krate":0,"index":5707},{"krate":0,"index":5709},{"krate":0,"index":755},{"krate":0,"index":5719},{"krate":0,"index":5740},{"krate":0,"index":5738},{"krate":0,"index":5735},{"krate":0,"index":5733},{"krate":0,"index":5730},{"krate":0,"index":5728},{"krate":0,"index":5722},{"krate":0,"index":5745},{"krate":0,"index":5748},{"krate":0,"index":5750},{"krate":0,"index":5741},{"krate":0,"index":5743},{"krate":0,"index":757},{"krate":0,"index":5753},{"krate":0,"index":5774},{"krate":0,"index":5772},{"krate":0,"index":5769},{"krate":0,"index":5767},{"krate":0,"index":5764},{"krate":0,"index":5758},{"krate":0,"index":5756},{"krate":0,"index":5779},{"krate":0,"index":5782},{"krate":0,"index":5784},{"krate":0,"index":5775},{"krate":0,"index":5777},{"krate":0,"index":759},{"krate":0,"index":5787},{"krate":0,"index":5808},{"krate":0,"index":5806},{"krate":0,"index":5803},{"krate":0,"index":5801},{"krate":0,"index":5798},{"krate":0,"index":5792},{"krate":0,"index":5790},{"krate":0,"index":5813},{"krate":0,"index":5816},{"krate":0,"index":5818},{"krate":0,"index":5809},{"krate":0,"index":5811},{"krate":0,"index":761},{"krate":0,"index":5821},{"krate":0,"index":5842},{"krate":0,"index":5840},{"krate":0,"index":5837},{"krate":0,"index":5835},{"krate":0,"index":5832},{"krate":0,"index":5826},{"krate":0,"index":5824},{"krate":0,"index":5847},{"krate":0,"index":5850},{"krate":0,"index":5852},{"krate":0,"index":5843},{"krate":0,"index":5845},{"krate":0,"index":763},{"krate":0,"index":5855},{"krate":0,"index":5876},{"krate":0,"index":5874},{"krate":0,"index":5871},{"krate":0,"index":5869},{"krate":0,"index":5866},{"krate":0,"index":5860},{"krate":0,"index":5858},{"krate":0,"index":5881},{"krate":0,"index":5884},{"krate":0,"index":5886},{"krate":0,"index":5877},{"krate":0,"index":5879},{"krate":0,"index":765},{"krate":0,"index":5889},{"krate":0,"index":5910},{"krate":0,"index":5908},{"krate":0,"index":5905},{"krate":0,"index":5903},{"krate":0,"index":5900},{"krate":0,"index":5894},{"krate":0,"index":5892},{"krate":0,"index":5915},{"krate":0,"index":5918},{"krate":0,"index":5920},{"krate":0,"index":5911},{"krate":0,"index":5913},{"krate":0,"index":767},{"krate":0,"index":5923},{"krate":0,"index":5944},{"krate":0,"index":5942},{"krate":0,"index":5939},{"krate":0,"index":5937},{"krate":0,"index":5934},{"krate":0,"index":5928},{"krate":0,"index":5926},{"krate":0,"index":5949},{"krate":0,"index":5952},{"krate":0,"index":5954},{"krate":0,"index":5945},{"krate":0,"index":5947},{"krate":0,"index":769},{"krate":0,"index":5957},{"krate":0,"index":6008},{"krate":0,"index":6006},{"krate":0,"index":6003},{"krate":0,"index":6001},{"krate":0,"index":5998},{"krate":0,"index":5992},{"krate":0,"index":5990},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":793}],"decl_id":null,"docs":" Cranelift IR entity references.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5549},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":196885,"byte_end":196890,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"Block","qualname":"::ir::entities::Block","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [basic block](https://en.wikipedia.org/wiki/Basic_block) in a\n [`Function`](super::function::Function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":197110,"byte_end":197121,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Block>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new block reference from its number. This corresponds to the `blockNN` representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5583},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":198041,"byte_end":198046,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"Value","qualname":"::ir::entities::Value","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an SSA value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":198263,"byte_end":198274,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Value>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a value from its number representation.\n This is the number in the `vNN` notation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5617},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":199282,"byte_end":199286,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"Inst","qualname":"::ir::entities::Inst","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an instruction in a [`Function`](super::Function).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5651},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":200117,"byte_end":200126,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"StackSlot","qualname":"::ir::entities::StackSlot","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a stack slot.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":200306,"byte_end":200317,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"with_number","qualname":"<StackSlot>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new stack slot reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5685},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":201649,"byte_end":201660,"line_start":155,"line_end":155,"column_start":12,"column_end":23},"name":"GlobalValue","qualname":"::ir::entities::GlobalValue","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a global value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":201846,"byte_end":201857,"line_start":162,"line_end":162,"column_start":12,"column_end":23},"name":"with_number","qualname":"<GlobalValue>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new global value reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5719},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":202463,"byte_end":202471,"line_start":180,"line_end":180,"column_start":12,"column_end":20},"name":"Constant","qualname":"::ir::entities::Constant","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a constant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":202643,"byte_end":202654,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Constant>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a const reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5753},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":203271,"byte_end":203280,"line_start":205,"line_end":205,"column_start":12,"column_end":21},"name":"Immediate","qualname":"::ir::entities::Immediate","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to an immediate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":203457,"byte_end":203468,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Immediate>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create an immediate reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5787},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":204437,"byte_end":204446,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"JumpTable","qualname":"::ir::entities::JumpTable","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [jump table](https://en.wikipedia.org/wiki/Branch_table).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":204626,"byte_end":204637,"line_start":242,"line_end":242,"column_start":12,"column_end":23},"name":"with_number","qualname":"<JumpTable>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new jump table reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5821},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":206000,"byte_end":206007,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"FuncRef","qualname":"::ir::entities::FuncRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to another [`Function`](super::Function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":206190,"byte_end":206201,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"with_number","qualname":"<FuncRef>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new external function reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5855},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":207316,"byte_end":207322,"line_start":301,"line_end":301,"column_start":12,"column_end":18},"name":"SigRef","qualname":"::ir::entities::SigRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a function [`Signature`](super::Signature).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":207505,"byte_end":207516,"line_start":308,"line_end":308,"column_start":12,"column_end":23},"name":"with_number","qualname":"<SigRef>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new function signature reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5889},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":208154,"byte_end":208158,"line_start":326,"line_end":326,"column_start":12,"column_end":16},"name":"Heap","qualname":"::ir::entities::Heap","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [heap](https://en.wikipedia.org/wiki/Memory_management#DYNAMIC).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":208324,"byte_end":208335,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Heap>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new heap reference from its number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5923},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209157,"byte_end":209162,"line_start":352,"line_end":352,"column_start":12,"column_end":17},"name":"Table","qualname":"::ir::entities::Table","value":"","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference to a [WebAssembly\n table](https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format#WebAssembly_tables).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209332,"byte_end":209343,"line_start":359,"line_end":359,"column_start":12,"column_end":23},"name":"with_number","qualname":"<Table>::with_number","value":"fn (n: u32) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new table reference from its number.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5958},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209687,"byte_end":209695,"line_start":372,"line_end":372,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::entities::AnyEntity::Function","value":"AnyEntity::Function","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" The whole function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5960},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209724,"byte_end":209729,"line_start":374,"line_end":374,"column_start":5,"column_end":10},"name":"Block","qualname":"::ir::entities::AnyEntity::Block","value":"AnyEntity::Block(Block)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" a basic block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5963},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209766,"byte_end":209770,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Inst","qualname":"::ir::entities::AnyEntity::Inst","value":"AnyEntity::Inst(Inst)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" An instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5966},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209804,"byte_end":209809,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"Value","qualname":"::ir::entities::AnyEntity::Value","value":"AnyEntity::Value(Value)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" An SSA value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5969},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209844,"byte_end":209853,"line_start":380,"line_end":380,"column_start":5,"column_end":14},"name":"StackSlot","qualname":"::ir::entities::AnyEntity::StackSlot","value":"AnyEntity::StackSlot(StackSlot)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" A stack slot.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5972},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209894,"byte_end":209905,"line_start":382,"line_end":382,"column_start":5,"column_end":16},"name":"GlobalValue","qualname":"::ir::entities::AnyEntity::GlobalValue","value":"AnyEntity::GlobalValue(GlobalValue)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" A Global value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5975},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209946,"byte_end":209955,"line_start":384,"line_end":384,"column_start":5,"column_end":14},"name":"JumpTable","qualname":"::ir::entities::AnyEntity::JumpTable","value":"AnyEntity::JumpTable(JumpTable)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" A jump table.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5978},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210002,"byte_end":210009,"line_start":386,"line_end":386,"column_start":5,"column_end":12},"name":"FuncRef","qualname":"::ir::entities::AnyEntity::FuncRef","value":"AnyEntity::FuncRef(FuncRef)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" An external function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5981},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210059,"byte_end":210065,"line_start":388,"line_end":388,"column_start":5,"column_end":11},"name":"SigRef","qualname":"::ir::entities::AnyEntity::SigRef","value":"AnyEntity::SigRef(SigRef)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" A function call signature.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5984},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210095,"byte_end":210099,"line_start":390,"line_end":390,"column_start":5,"column_end":9},"name":"Heap","qualname":"::ir::entities::AnyEntity::Heap","value":"AnyEntity::Heap(Heap)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" A heap.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5987},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210128,"byte_end":210133,"line_start":392,"line_end":392,"column_start":5,"column_end":10},"name":"Table","qualname":"::ir::entities::AnyEntity::Table","value":"AnyEntity::Table(Table)","parent":{"krate":0,"index":5957},"children":[],"decl_id":null,"docs":" A table.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5957},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209643,"byte_end":209652,"line_start":370,"line_end":370,"column_start":10,"column_end":19},"name":"AnyEntity","qualname":"::ir::entities::AnyEntity","value":"AnyEntity::{Function, Block, Inst, Value, StackSlot, GlobalValue, JumpTable, FuncRef, SigRef, Heap, Table}","parent":null,"children":[{"krate":0,"index":5958},{"krate":0,"index":5960},{"krate":0,"index":5963},{"krate":0,"index":5966},{"krate":0,"index":5969},{"krate":0,"index":5972},{"krate":0,"index":5975},{"krate":0,"index":5978},{"krate":0,"index":5981},{"krate":0,"index":5984},{"krate":0,"index":5987}],"decl_id":null,"docs":" An opaque reference to any of the entities defined in this module that can appear in CLIF IR.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6009},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213661,"byte_end":213670,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Signature","qualname":"::ir::extfunc::Signature","value":"Signature { params, returns, call_conv }","parent":null,"children":[{"krate":0,"index":6010},{"krate":0,"index":6011},{"krate":0,"index":6012}],"decl_id":null,"docs":" Function signature.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6010},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213727,"byte_end":213733,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"name":"params","qualname":"::ir::extfunc::Signature::params","value":"alloc::vec::Vec<ir::extfunc::AbiParam>","parent":{"krate":0,"index":6009},"children":[],"decl_id":null,"docs":" The arguments passed to the function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6011},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213801,"byte_end":213808,"line_start":26,"line_end":26,"column_start":9,"column_end":16},"name":"returns","qualname":"::ir::extfunc::Signature::returns","value":"alloc::vec::Vec<ir::extfunc::AbiParam>","parent":{"krate":0,"index":6009},"children":[],"decl_id":null,"docs":" Values returned from the function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6012},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213862,"byte_end":213871,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"name":"call_conv","qualname":"::ir::extfunc::Signature::call_conv","value":"isa::call_conv::CallConv","parent":{"krate":0,"index":6009},"children":[],"decl_id":null,"docs":" Calling convention.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213952,"byte_end":213955,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Signature>::new","value":"fn (call_conv: CallConv) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":214201,"byte_end":214206,"line_start":43,"line_end":43,"column_start":12,"column_end":17},"name":"clear","qualname":"<Signature>::clear","value":"fn (&mut self, call_conv: CallConv) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the signature so it is identical to a fresh one returned by `new()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":214432,"byte_end":214439,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"display","qualname":"<Signature>::display","value":"fn <'a, R> (&'a self, regs: R) -> DisplaySignature<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display `self` with correct register names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":214652,"byte_end":214671,"line_start":55,"line_end":55,"column_start":12,"column_end":31},"name":"special_param_index","qualname":"<Signature>::special_param_index","value":"fn (&self, purpose: ArgumentPurpose) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the index of a presumed unique special-purpose parameter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":214880,"byte_end":214900,"line_start":60,"line_end":60,"column_start":12,"column_end":32},"name":"special_return_index","qualname":"<Signature>::special_return_index","value":"fn (&self, purpose: ArgumentPurpose) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the index of a presumed unique special-purpose parameter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":215130,"byte_end":215148,"line_start":66,"line_end":66,"column_start":12,"column_end":30},"name":"uses_special_param","qualname":"<Signature>::uses_special_param","value":"fn (&self, purpose: ArgumentPurpose) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this signature have a parameter whose `ArgumentPurpose` is\n `purpose`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":215342,"byte_end":215361,"line_start":71,"line_end":71,"column_start":12,"column_end":31},"name":"uses_special_return","qualname":"<Signature>::uses_special_return","value":"fn (&self, purpose: ArgumentPurpose) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this signature have a return whose `ArgumentPurpose` is `purpose`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":215537,"byte_end":215555,"line_start":76,"line_end":76,"column_start":12,"column_end":30},"name":"num_special_params","qualname":"<Signature>::num_special_params","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many special parameters does this function have?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":215773,"byte_end":215792,"line_start":84,"line_end":84,"column_start":12,"column_end":31},"name":"num_special_returns","qualname":"<Signature>::num_special_returns","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" How many special returns does this function have?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":216022,"byte_end":216046,"line_start":92,"line_end":92,"column_start":12,"column_end":36},"name":"uses_struct_return_param","qualname":"<Signature>::uses_struct_return_param","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this signature take an struct return pointer parameter?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":216239,"byte_end":216254,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"is_multi_return","qualname":"<Signature>::is_multi_return","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this return more than one normal value? (Pre-struct return\n legalization)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":827},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":216514,"byte_end":216530,"line_start":108,"line_end":108,"column_start":12,"column_end":28},"name":"DisplaySignature","qualname":"::ir::extfunc::DisplaySignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper type capable of displaying a `Signature` with correct register names.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6025},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":217710,"byte_end":217718,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"AbiParam","qualname":"::ir::extfunc::AbiParam","value":"AbiParam { value_type, purpose, extension, location }","parent":null,"children":[{"krate":0,"index":6026},{"krate":0,"index":6027},{"krate":0,"index":6028},{"krate":0,"index":6029}],"decl_id":null,"docs":" Function parameter or return value descriptor.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6026},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":217765,"byte_end":217775,"line_start":149,"line_end":149,"column_start":9,"column_end":19},"name":"value_type","qualname":"::ir::extfunc::AbiParam::value_type","value":"ir::types::Type","parent":{"krate":0,"index":6025},"children":[],"decl_id":null,"docs":" Type of the argument value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6027},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":217841,"byte_end":217848,"line_start":151,"line_end":151,"column_start":9,"column_end":16},"name":"purpose","qualname":"::ir::extfunc::AbiParam::purpose","value":"ir::extfunc::ArgumentPurpose","parent":{"krate":0,"index":6025},"children":[],"decl_id":null,"docs":" Special purpose of argument, or `Normal`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6028},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":217933,"byte_end":217942,"line_start":153,"line_end":153,"column_start":9,"column_end":18},"name":"extension","qualname":"::ir::extfunc::AbiParam::extension","value":"ir::extfunc::ArgumentExtension","parent":{"krate":0,"index":6025},"children":[],"decl_id":null,"docs":" Method for extending argument to a full register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6029},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":218092,"byte_end":218100,"line_start":157,"line_end":157,"column_start":9,"column_end":17},"name":"location","qualname":"::ir::extfunc::AbiParam::location","value":"ir::valueloc::ArgumentLoc","parent":{"krate":0,"index":6025},"children":[],"decl_id":null,"docs":" ABI-specific location of this argument, or `Unassigned` for arguments that have not yet\n been legalized.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":218192,"byte_end":218195,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<AbiParam>::new","value":"fn (vt: Type) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a parameter with default flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":218514,"byte_end":218521,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"name":"special","qualname":"<AbiParam>::special","value":"fn (vt: Type, purpose: ArgumentPurpose) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a special-purpose parameter that is not (yet) bound to a specific register.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":218809,"byte_end":218820,"line_start":182,"line_end":182,"column_start":12,"column_end":23},"name":"special_reg","qualname":"<AbiParam>::special_reg","value":"fn (vt: Type, purpose: ArgumentPurpose, regunit: RegUnit) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a parameter for a special-purpose register.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":219138,"byte_end":219142,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"uext","qualname":"<AbiParam>::uext","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a parameter with the `uext` flag set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":219422,"byte_end":219426,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"sext","qualname":"<AbiParam>::sext","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert `self` to a parameter type with the `sext` flag set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":219715,"byte_end":219722,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"display","qualname":"<AbiParam>::display","value":"fn <'a, R> (&'a self, regs: R) -> DisplayAbiParam<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display `self` with correct register names.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":847},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":219945,"byte_end":219960,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"DisplayAbiParam","qualname":"::ir::extfunc::DisplayAbiParam","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper type capable of displaying a `AbiParam` with correct register names.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6044},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":221052,"byte_end":221056,"line_start":251,"line_end":251,"column_start":5,"column_end":9},"name":"None","qualname":"::ir::extfunc::ArgumentExtension::None","value":"ArgumentExtension::None","parent":{"krate":0,"index":6043},"children":[],"decl_id":null,"docs":" No extension, high bits are indeterminate.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6046},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":221119,"byte_end":221123,"line_start":253,"line_end":253,"column_start":5,"column_end":9},"name":"Uext","qualname":"::ir::extfunc::ArgumentExtension::Uext","value":"ArgumentExtension::Uext","parent":{"krate":0,"index":6043},"children":[],"decl_id":null,"docs":" Unsigned extension: high bits in register are 0.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6048},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":221197,"byte_end":221201,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Sext","qualname":"::ir::extfunc::ArgumentExtension::Sext","value":"ArgumentExtension::Sext","parent":{"krate":0,"index":6043},"children":[],"decl_id":null,"docs":" Signed extension: high bits in register replicate sign bit.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6043},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":220977,"byte_end":220994,"line_start":249,"line_end":249,"column_start":10,"column_end":27},"name":"ArgumentExtension","qualname":"::ir::extfunc::ArgumentExtension","value":"ArgumentExtension::{None, Uext, Sext}","parent":null,"children":[{"krate":0,"index":6044},{"krate":0,"index":6046},{"krate":0,"index":6048}],"decl_id":null,"docs":" Function argument extension options.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6063},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":221746,"byte_end":221752,"line_start":268,"line_end":268,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::extfunc::ArgumentPurpose::Normal","value":"ArgumentPurpose::Normal","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" A normal user program value passed to or from a function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6065},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":222247,"byte_end":222259,"line_start":278,"line_end":278,"column_start":5,"column_end":17},"name":"StructReturn","qualname":"::ir::extfunc::ArgumentPurpose::StructReturn","value":"ArgumentPurpose::StructReturn","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" Struct return pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6067},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":222630,"byte_end":222634,"line_start":287,"line_end":287,"column_start":5,"column_end":9},"name":"Link","qualname":"::ir::extfunc::ArgumentPurpose::Link","value":"ArgumentPurpose::Link","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" The link register.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6069},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":222892,"byte_end":222904,"line_start":295,"line_end":295,"column_start":5,"column_end":17},"name":"FramePointer","qualname":"::ir::extfunc::ArgumentPurpose::FramePointer","value":"ArgumentPurpose::FramePointer","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" The frame pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6071},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":223120,"byte_end":223131,"line_start":301,"line_end":301,"column_start":5,"column_end":16},"name":"CalleeSaved","qualname":"::ir::extfunc::ArgumentPurpose::CalleeSaved","value":"ArgumentPurpose::CalleeSaved","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" A callee-saved register.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6073},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":223332,"byte_end":223341,"line_start":307,"line_end":307,"column_start":5,"column_end":14},"name":"VMContext","qualname":"::ir::extfunc::ArgumentPurpose::VMContext","value":"ArgumentPurpose::VMContext","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" A VM context pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6075},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":223585,"byte_end":223596,"line_start":313,"line_end":313,"column_start":5,"column_end":16},"name":"SignatureId","qualname":"::ir::extfunc::ArgumentPurpose::SignatureId","value":"ArgumentPurpose::SignatureId","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" A signature identifier.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6077},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":223786,"byte_end":223796,"line_start":319,"line_end":319,"column_start":5,"column_end":15},"name":"StackLimit","qualname":"::ir::extfunc::ArgumentPurpose::StackLimit","value":"ArgumentPurpose::StackLimit","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" A stack limit pointer.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6062},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":221658,"byte_end":221673,"line_start":266,"line_end":266,"column_start":10,"column_end":25},"name":"ArgumentPurpose","qualname":"::ir::extfunc::ArgumentPurpose","value":"ArgumentPurpose::{Normal, StructReturn, Link, FramePointer, CalleeSaved, VMContext, SignatureId, StackLimit}","parent":null,"children":[{"krate":0,"index":6063},{"krate":0,"index":6065},{"krate":0,"index":6067},{"krate":0,"index":6069},{"krate":0,"index":6071},{"krate":0,"index":6073},{"krate":0,"index":6075},{"krate":0,"index":6077}],"decl_id":null,"docs":" The special purpose of a function argument.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6091},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224840,"byte_end":224851,"line_start":361,"line_end":361,"column_start":12,"column_end":23},"name":"ExtFuncData","qualname":"::ir::extfunc::ExtFuncData","value":"ExtFuncData { name, signature, colocated }","parent":null,"children":[{"krate":0,"index":6092},{"krate":0,"index":6093},{"krate":0,"index":6094}],"decl_id":null,"docs":" An external function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6092},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224901,"byte_end":224905,"line_start":363,"line_end":363,"column_start":9,"column_end":13},"name":"name","qualname":"::ir::extfunc::ExtFuncData::name","value":"ir::extname::ExternalName","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" Name of the external function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6093},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224965,"byte_end":224974,"line_start":365,"line_end":365,"column_start":9,"column_end":18},"name":"signature","qualname":"::ir::extfunc::ExtFuncData::signature","value":"ir::entities::SigRef","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" Call signature of function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6094},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":225258,"byte_end":225267,"line_start":369,"line_end":369,"column_start":9,"column_end":18},"name":"colocated","qualname":"::ir::extfunc::ExtFuncData::colocated","value":"bool","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" Will this function be defined nearby, such that it will always be a certain distance away,\n after linking? If so, references to it can avoid going through a GOT or PLT. Note that\n symbols meant to be preemptible cannot be considered colocated.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6100},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":229003,"byte_end":229007,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"User","qualname":"::ir::extname::ExternalName::User","value":"ExternalName::User { namespace, index }","parent":{"krate":0,"index":6099},"children":[],"decl_id":null,"docs":" A name in a user-defined symbol table. Cranelift does not interpret\n these numbers in any way.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6103},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":229254,"byte_end":229262,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"TestCase","qualname":"::ir::extname::ExternalName::TestCase","value":"ExternalName::TestCase { length, ascii }","parent":{"krate":0,"index":6099},"children":[],"decl_id":null,"docs":" A test case function name of up to a hardcoded amount of ascii\n characters. This is not intended to be used outside test cases.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6107},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":229479,"byte_end":229486,"line_start":44,"line_end":44,"column_start":5,"column_end":12},"name":"LibCall","qualname":"::ir::extname::ExternalName::LibCall","value":"ExternalName::LibCall(LibCall)","parent":{"krate":0,"index":6099},"children":[],"decl_id":null,"docs":" A well-known runtime library function.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6099},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":228874,"byte_end":228886,"line_start":26,"line_end":26,"column_start":10,"column_end":22},"name":"ExternalName","qualname":"::ir::extname::ExternalName","value":"ExternalName::{User, TestCase, LibCall}","parent":null,"children":[{"krate":0,"index":6100},{"krate":0,"index":6103},{"krate":0,"index":6107}],"decl_id":null,"docs":" The name of an external is either a reference to a user-defined symbol\n table, or a short sequence of ascii bytes so that test cases do not have\n to keep track of a symbol table.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":229937,"byte_end":229945,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"testcase","qualname":"<ExternalName>::testcase","value":"fn <T> (v: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new external name from a sequence of bytes. Caller is expected\n to guarantee bytes are only ascii alphanumeric or `_`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":230616,"byte_end":230620,"line_start":80,"line_end":80,"column_start":12,"column_end":16},"name":"user","qualname":"<ExternalName>::user","value":"fn (namespace: u32, index: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new external name from user-provided integer indices.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6121},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":233297,"byte_end":233315,"line_start":13,"line_end":13,"column_start":5,"column_end":23},"name":"CallFrameAddressAt","qualname":"::ir::framelayout::FrameLayoutChange::CallFrameAddressAt","value":"FrameLayoutChange::CallFrameAddressAt { reg, offset }","parent":{"krate":0,"index":6120},"children":[],"decl_id":null,"docs":" Base CallFrameAddress (CFA) pointer moved to different register/offset.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6124},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":233451,"byte_end":233456,"line_start":20,"line_end":20,"column_start":5,"column_end":10},"name":"RegAt","qualname":"::ir::framelayout::FrameLayoutChange::RegAt","value":"FrameLayoutChange::RegAt { reg, cfa_offset }","parent":{"krate":0,"index":6120},"children":[],"decl_id":null,"docs":" Register saved at.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6127},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":233631,"byte_end":233646,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"ReturnAddressAt","qualname":"::ir::framelayout::FrameLayoutChange::ReturnAddressAt","value":"FrameLayoutChange::ReturnAddressAt { cfa_offset }","parent":{"krate":0,"index":6120},"children":[],"decl_id":null,"docs":" Return address saved at.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6129},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":233950,"byte_end":233958,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"Preserve","qualname":"::ir::framelayout::FrameLayoutChange::Preserve","value":"FrameLayoutChange::Preserve","parent":{"krate":0,"index":6120},"children":[],"decl_id":null,"docs":" The entire frame layout must be preserved somewhere to be restored at a corresponding\n `Restore` change.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6131},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234147,"byte_end":234154,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"Restore","qualname":"::ir::framelayout::FrameLayoutChange::Restore","value":"FrameLayoutChange::Restore","parent":{"krate":0,"index":6120},"children":[],"decl_id":null,"docs":" Restore the entire frame layout from a corresponding prior `Preserve` frame change.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6120},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":233193,"byte_end":233210,"line_start":11,"line_end":11,"column_start":10,"column_end":27},"name":"FrameLayoutChange","qualname":"::ir::framelayout::FrameLayoutChange","value":"FrameLayoutChange::{CallFrameAddressAt, RegAt, ReturnAddressAt, Preserve, Restore}","parent":null,"children":[{"krate":0,"index":6121},{"krate":0,"index":6124},{"krate":0,"index":6127},{"krate":0,"index":6129},{"krate":0,"index":6131}],"decl_id":null,"docs":" Change in the frame layout information.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":891},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234201,"byte_end":234219,"line_start":43,"line_end":43,"column_start":10,"column_end":28},"name":"FrameLayoutChanges","qualname":"::ir::framelayout::FrameLayoutChanges","value":"Box<[FrameLayoutChange]>","parent":null,"children":[],"decl_id":null,"docs":" Set of frame layout changes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6146},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234345,"byte_end":234356,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"FrameLayout","qualname":"::ir::framelayout::FrameLayout","value":"FrameLayout { initial, instructions }","parent":null,"children":[{"krate":0,"index":6147},{"krate":0,"index":6148}],"decl_id":null,"docs":" Frame items layout for (prologue/epilogue) instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6147},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234397,"byte_end":234404,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"name":"initial","qualname":"::ir::framelayout::FrameLayout::initial","value":"alloc::boxed::Box<[ir::framelayout::FrameLayoutChange]>","parent":{"krate":0,"index":6146},"children":[],"decl_id":null,"docs":" Initial frame layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6148},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234567,"byte_end":234579,"line_start":53,"line_end":53,"column_start":9,"column_end":21},"name":"instructions","qualname":"::ir::framelayout::FrameLayout::instructions","value":"std::collections::HashMap<ir::entities::Inst, alloc::boxed::Box<[ir::framelayout::FrameLayoutChange]>>","parent":{"krate":0,"index":6146},"children":[],"decl_id":null,"docs":" Instruction frame layout (changes). Because the map will not be dense,\n a HashMap is used instead of a SecondaryMap.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234689,"byte_end":234692,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<FrameLayout>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create instance of FrameLayout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234867,"byte_end":234872,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"clear","qualname":"<FrameLayout>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the structure.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":895},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"function","qualname":"::ir::function","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":918},{"krate":0,"index":925},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":6153},{"krate":0,"index":6172},{"krate":0,"index":945},{"krate":0,"index":6174},{"krate":0,"index":6178},{"krate":0,"index":974},{"krate":0,"index":977},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":989},{"krate":0,"index":997}],"decl_id":null,"docs":" Intermediate representation of a function.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6153},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236034,"byte_end":236042,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Function","qualname":"::ir::function::Function","value":"Function { name, signature, old_signature, stack_slots, global_values, heaps, tables, jump_tables, dfg, layout, encodings, locations, entry_diversions, offsets, jt_offsets, srclocs, prologue_end, frame_layout }","parent":null,"children":[{"krate":0,"index":6154},{"krate":0,"index":6155},{"krate":0,"index":6156},{"krate":0,"index":6157},{"krate":0,"index":6158},{"krate":0,"index":6159},{"krate":0,"index":6160},{"krate":0,"index":6161},{"krate":0,"index":6162},{"krate":0,"index":6163},{"krate":0,"index":6164},{"krate":0,"index":6165},{"krate":0,"index":6166},{"krate":0,"index":6167},{"krate":0,"index":6168},{"krate":0,"index":6169},{"krate":0,"index":6170},{"krate":0,"index":6171}],"decl_id":null,"docs":" A function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6154},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236114,"byte_end":236118,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"name":"name","qualname":"::ir::function::Function::name","value":"ir::extname::ExternalName","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Name of this function. Mostly used by `.clif` files.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6155},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236179,"byte_end":236188,"line_start":32,"line_end":32,"column_start":9,"column_end":18},"name":"signature","qualname":"::ir::function::Function::signature","value":"ir::extfunc::Signature","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Signature of this function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6156},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236307,"byte_end":236320,"line_start":36,"line_end":36,"column_start":9,"column_end":22},"name":"old_signature","qualname":"::ir::function::Function::old_signature","value":"core::option::Option<ir::extfunc::Signature>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" The old signature of this function, before the most recent legalization,\n if any.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6157},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236398,"byte_end":236409,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"name":"stack_slots","qualname":"::ir::function::Function::stack_slots","value":"ir::stackslot::StackSlots","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Stack slots allocated in this function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6158},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236466,"byte_end":236479,"line_start":42,"line_end":42,"column_start":9,"column_end":22},"name":"global_values","qualname":"::ir::function::Function::global_values","value":"cranelift_entity::primary::PrimaryMap<ir::entities::GlobalValue, ir::globalvalue::GlobalValueData>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Global values referenced.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6159},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236566,"byte_end":236571,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"name":"heaps","qualname":"::ir::function::Function::heaps","value":"cranelift_entity::primary::PrimaryMap<ir::entities::Heap, ir::heap::HeapData>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Heaps referenced.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6160},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236645,"byte_end":236651,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"name":"tables","qualname":"::ir::function::Function::tables","value":"cranelift_entity::primary::PrimaryMap<ir::entities::Table, ir::table::TableData>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Tables referenced.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6161},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236743,"byte_end":236754,"line_start":51,"line_end":51,"column_start":9,"column_end":20},"name":"jump_tables","qualname":"::ir::function::Function::jump_tables","value":"cranelift_entity::primary::PrimaryMap<ir::entities::JumpTable, ir::jumptable::JumpTableData>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Jump tables used in this function.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6162},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236875,"byte_end":236878,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"name":"dfg","qualname":"::ir::function::Function::dfg","value":"ir::dfg::DataFlowGraph","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Data flow graph containing the primary definition of all instructions, blocks and values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6163},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":236968,"byte_end":236974,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"name":"layout","qualname":"::ir::function::Function::layout","value":"ir::layout::Layout","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Layout of blocks and instructions in the function body.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6164},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":237121,"byte_end":237130,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"encodings","qualname":"::ir::function::Function::encodings","value":"cranelift_entity::map::SecondaryMap<ir::entities::Inst, isa::encoding::Encoding>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Encoding recipe and bits for the legal instructions.\n Illegal instructions have the `Encoding::default()` value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6165},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":237198,"byte_end":237207,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"locations","qualname":"::ir::function::Function::locations","value":"cranelift_entity::map::SecondaryMap<ir::entities::Value, ir::valueloc::ValueLoc>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Location assigned to every value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6166},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":237504,"byte_end":237520,"line_start":70,"line_end":70,"column_start":9,"column_end":25},"name":"entry_diversions","qualname":"::ir::function::Function::entry_diversions","value":"regalloc::diversion::EntryRegDiversions","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Non-default locations assigned to value at the entry of basic blocks.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6167},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":237834,"byte_end":237841,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"offsets","qualname":"::ir::function::Function::offsets","value":"cranelift_entity::map::SecondaryMap<ir::entities::Block, u32>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Code offsets of the block headers.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6168},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":237910,"byte_end":237920,"line_start":80,"line_end":80,"column_start":9,"column_end":19},"name":"jt_offsets","qualname":"::ir::function::Function::jt_offsets","value":"cranelift_entity::map::SecondaryMap<ir::entities::JumpTable, u32>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Code offsets of Jump Table headers.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6169},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":238127,"byte_end":238134,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"name":"srclocs","qualname":"::ir::function::Function::srclocs","value":"cranelift_entity::map::SecondaryMap<ir::entities::Inst, ir::sourceloc::SourceLoc>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Source locations.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6170},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":238334,"byte_end":238346,"line_start":91,"line_end":91,"column_start":9,"column_end":21},"name":"prologue_end","qualname":"::ir::function::Function::prologue_end","value":"core::option::Option<ir::entities::Inst>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Instruction that marks the end (inclusive) of the function's prologue.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6171},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":238625,"byte_end":238637,"line_start":98,"line_end":98,"column_start":9,"column_end":21},"name":"frame_layout","qualname":"::ir::function::Function::frame_layout","value":"core::option::Option<ir::framelayout::FrameLayout>","parent":{"krate":0,"index":6153},"children":[],"decl_id":null,"docs":" Frame layout for the instructions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":238751,"byte_end":238770,"line_start":103,"line_end":103,"column_start":12,"column_end":31},"name":"with_name_signature","qualname":"<Function>::with_name_signature","value":"fn (name: ExternalName, sig: Signature) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a function with the given name and signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":239614,"byte_end":239619,"line_start":127,"line_end":127,"column_start":12,"column_end":17},"name":"clear","qualname":"<Function>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":240256,"byte_end":240259,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<Function>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty, anonymous function with a Fast calling convention.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":240466,"byte_end":240483,"line_start":152,"line_end":152,"column_start":12,"column_end":29},"name":"create_jump_table","qualname":"<Function>::create_jump_table","value":"fn (&mut self, data: JumpTableData) -> JumpTable","parent":null,"children":[],"decl_id":null,"docs":" Creates a jump table in the function, to be used by `br_table` instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":240712,"byte_end":240729,"line_start":158,"line_end":158,"column_start":12,"column_end":29},"name":"create_stack_slot","qualname":"<Function>::create_stack_slot","value":"fn (&mut self, data: StackSlotData) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Creates a stack slot in the function, to be used by `stack_load`, `stack_store` and\n `stack_addr` instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":240920,"byte_end":240936,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"import_signature","qualname":"<Function>::import_signature","value":"fn (&mut self, signature: Signature) -> SigRef","parent":null,"children":[],"decl_id":null,"docs":" Adds a signature which can later be used to declare an external function import.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":241089,"byte_end":241104,"line_start":168,"line_end":168,"column_start":12,"column_end":27},"name":"import_function","qualname":"<Function>::import_function","value":"fn (&mut self, data: ExtFuncData) -> FuncRef","parent":null,"children":[],"decl_id":null,"docs":" Declare an external function import.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":241264,"byte_end":241283,"line_start":173,"line_end":173,"column_start":12,"column_end":31},"name":"create_global_value","qualname":"<Function>::create_global_value","value":"fn (&mut self, data: GlobalValueData) -> GlobalValue","parent":null,"children":[],"decl_id":null,"docs":" Declares a global value accessible to the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":241443,"byte_end":241454,"line_start":178,"line_end":178,"column_start":12,"column_end":23},"name":"create_heap","qualname":"<Function>::create_heap","value":"fn (&mut self, data: HeapData) -> Heap","parent":null,"children":[],"decl_id":null,"docs":" Declares a heap accessible to the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":241593,"byte_end":241605,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"create_table","qualname":"<Function>::create_table","value":"fn (&mut self, data: TableData) -> Table","parent":null,"children":[],"decl_id":null,"docs":" Declares a table accessible to the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":241789,"byte_end":241796,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"display","qualname":"<Function>::display","value":"fn <'a, I> (&'a self, isa: I) -> DisplayFunction<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this function with correct ISA-specific annotations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":242065,"byte_end":242077,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"display_with","qualname":"<Function>::display_with","value":"fn <'a> (&'a self, annotations: DisplayFunctionAnnotations<'a>) -> DisplayFunction<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this function with correct ISA-specific annotations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":242425,"byte_end":242438,"line_start":206,"line_end":206,"column_start":12,"column_end":25},"name":"special_param","qualname":"<Function>::special_param","value":"fn (&self, purpose: ir::ArgumentPurpose) -> Option<ir::Value>","parent":null,"children":[],"decl_id":null,"docs":" Find a presumed unique special-purpose function parameter value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":243228,"byte_end":243240,"line_start":222,"line_end":222,"column_start":12,"column_end":24},"name":"inst_offsets","qualname":"<Function>::inst_offsets","value":"fn <'a> (&'a self, block: Block, encinfo: &EncInfo) -> InstOffsetIter<'a>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the instructions in `block`, including offsets and encoded instruction\n sizes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":243873,"byte_end":243888,"line_start":240,"line_end":240,"column_start":12,"column_end":27},"name":"update_encoding","qualname":"<Function>::update_encoding","value":"fn (&mut self, inst: ir::Inst, isa: &dyn TargetIsa) -> Result<(), Legalize>","parent":null,"children":[],"decl_id":null,"docs":" Wrapper around `encode` which assigns `inst` the resulting encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":244153,"byte_end":244159,"line_start":246,"line_end":246,"column_start":12,"column_end":18},"name":"encode","qualname":"<Function>::encode","value":"fn (&self, inst: ir::Inst, isa: &dyn TargetIsa) -> Result<Encoding, Legalize>","parent":null,"children":[],"decl_id":null,"docs":" Wrapper around `TargetIsa::encode` for encoding an existing instruction\n in the `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":244374,"byte_end":244392,"line_start":251,"line_end":251,"column_start":12,"column_end":30},"name":"collect_debug_info","qualname":"<Function>::collect_debug_info","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Starts collection of debug information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":244560,"byte_end":244585,"line_start":257,"line_end":257,"column_start":12,"column_end":37},"name":"collect_frame_layout_info","qualname":"<Function>::collect_frame_layout_info","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Starts collection of frame layout information.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":244810,"byte_end":244835,"line_start":263,"line_end":263,"column_start":12,"column_end":37},"name":"change_branch_destination","qualname":"<Function>::change_branch_destination","value":"fn (&mut self, inst: Inst, new_dest: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Changes the destination of a jump or branch instruction.\n Does nothing if called with a non-jump or non-branch instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":245199,"byte_end":245213,"line_start":273,"line_end":273,"column_start":12,"column_end":26},"name":"is_block_basic","qualname":"<Function>::is_block_basic","value":"fn (&self, block: Block) -> Result<(), (Inst, &'static str)>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the specified block can be encoded as a basic block.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":246200,"byte_end":246207,"line_start":296,"line_end":296,"column_start":12,"column_end":19},"name":"is_leaf","qualname":"<Function>::is_leaf","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the function is function that doesn't call any other functions. This is not\n to be confused with a \"leaf function\" in Windows terminology.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6174},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":246492,"byte_end":246518,"line_start":305,"line_end":305,"column_start":12,"column_end":38},"name":"DisplayFunctionAnnotations","qualname":"::ir::function::DisplayFunctionAnnotations","value":"DisplayFunctionAnnotations { isa, value_ranges }","parent":null,"children":[{"krate":0,"index":6176},{"krate":0,"index":6177}],"decl_id":null,"docs":" Additional annotations for function display.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6176},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":246565,"byte_end":246568,"line_start":307,"line_end":307,"column_start":9,"column_end":12},"name":"isa","qualname":"::ir::function::DisplayFunctionAnnotations::isa","value":"core::option::Option<&'a (dyn isa::TargetIsa + 'a)>","parent":{"krate":0,"index":6174},"children":[],"decl_id":null,"docs":" Enable ISA annotations.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6177},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":246647,"byte_end":246659,"line_start":310,"line_end":310,"column_start":9,"column_end":21},"name":"value_ranges","qualname":"::ir::function::DisplayFunctionAnnotations::value_ranges","value":"core::option::Option<&'a std::collections::HashMap<ir::ValueLabel, alloc::vec::Vec<value_label::ValueLocRange>>>","parent":{"krate":0,"index":6174},"children":[],"decl_id":null,"docs":" Enable value labels annotations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":977},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247047,"byte_end":247062,"line_start":323,"line_end":323,"column_start":12,"column_end":27},"name":"DisplayFunction","qualname":"::ir::function::DisplayFunction","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper type capable of displaying a `Function` with correct ISA annotations.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":989},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247719,"byte_end":247733,"line_start":344,"line_end":344,"column_start":12,"column_end":26},"name":"InstOffsetIter","qualname":"::ir::function::InstOffsetIter","value":"InstOffsetIter {  }","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996}],"decl_id":null,"docs":" Iterator returning instruction offsets and sizes: `(offset, inst, size)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6182},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":248729,"byte_end":248738,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"VMContext","qualname":"::ir::globalvalue::GlobalValueData::VMContext","value":"GlobalValueData::VMContext","parent":{"krate":0,"index":6181},"children":[],"decl_id":null,"docs":" Value is the address of the VM context struct.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6184},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":249146,"byte_end":249150,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::globalvalue::GlobalValueData::Load","value":"GlobalValueData::Load { base, offset, global_type, readonly }","parent":{"krate":0,"index":6181},"children":[],"decl_id":null,"docs":" Value is pointed to by another global value.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6189},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":249610,"byte_end":249617,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"IAddImm","qualname":"::ir::globalvalue::GlobalValueData::IAddImm","value":"GlobalValueData::IAddImm { base, offset, global_type }","parent":{"krate":0,"index":6181},"children":[],"decl_id":null,"docs":" Value is an offset from another global value.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6193},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":250253,"byte_end":250259,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::ir::globalvalue::GlobalValueData::Symbol","value":"GlobalValueData::Symbol { name, offset, colocated }","parent":{"krate":0,"index":6181},"children":[],"decl_id":null,"docs":" Value is symbolic, meaning it's a name which will be resolved to an\n actual value later (eg. by linking). Cranelift itself does not interpret\n this name; it's used by embedders to link with other data structures.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6181},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":248652,"byte_end":248667,"line_start":10,"line_end":10,"column_start":10,"column_end":25},"name":"GlobalValueData","qualname":"::ir::globalvalue::GlobalValueData","value":"GlobalValueData::{VMContext, Load, IAddImm, Symbol}","parent":null,"children":[{"krate":0,"index":6182},{"krate":0,"index":6184},{"krate":0,"index":6189},{"krate":0,"index":6193}],"decl_id":null,"docs":" Information about a global value declaration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":250883,"byte_end":250894,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"symbol_name","qualname":"<GlobalValueData>::symbol_name","value":"fn (&self) -> &ExternalName","parent":null,"children":[],"decl_id":null,"docs":" Assume that `self` is an `GlobalValueData::Symbol` and return its name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":251114,"byte_end":251125,"line_start":79,"line_end":79,"column_start":12,"column_end":23},"name":"global_type","qualname":"<GlobalValueData>::global_type","value":"fn (&self, isa: &dyn TargetIsa) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this global.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6199},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":252880,"byte_end":252888,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"HeapData","qualname":"::ir::heap::HeapData","value":"HeapData { base, min_size, offset_guard_size, style, index_type }","parent":null,"children":[{"krate":0,"index":6200},{"krate":0,"index":6201},{"krate":0,"index":6202},{"krate":0,"index":6203},{"krate":0,"index":6204}],"decl_id":null,"docs":" Information about a heap declaration.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6200},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":252955,"byte_end":252959,"line_start":11,"line_end":11,"column_start":9,"column_end":13},"name":"base","qualname":"::ir::heap::HeapData::base","value":"ir::entities::GlobalValue","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" The address of the start of the heap's storage.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6201},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253098,"byte_end":253106,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"name":"min_size","qualname":"::ir::heap::HeapData::min_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" Guaranteed minimum heap size in bytes. Heap accesses before `min_size` don't need bounds\n checking.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6202},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253193,"byte_end":253210,"line_start":18,"line_end":18,"column_start":9,"column_end":26},"name":"offset_guard_size","qualname":"::ir::heap::HeapData::offset_guard_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" Size in bytes of the offset-guard pages following the heap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6203},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253286,"byte_end":253291,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"style","qualname":"::ir::heap::HeapData::style","value":"ir::heap::HeapStyle","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" Heap style, with additional style-specific info.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6204},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253350,"byte_end":253360,"line_start":24,"line_end":24,"column_start":9,"column_end":19},"name":"index_type","qualname":"::ir::heap::HeapData::index_type","value":"ir::types::Type","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" The index type for the heap.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6208},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253555,"byte_end":253562,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::ir::heap::HeapStyle::Dynamic","value":"HeapStyle::Dynamic { bound_gv }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" A dynamic heap can be relocated to a different base address when it is grown.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6210},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253809,"byte_end":253815,"line_start":38,"line_end":38,"column_start":5,"column_end":11},"name":"Static","qualname":"::ir::heap::HeapStyle::Static","value":"HeapStyle::Static { bound }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" A static heap has a fixed base address and a number of not-yet-allocated pages before the\n offset-guard pages.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6207},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253453,"byte_end":253462,"line_start":29,"line_end":29,"column_start":10,"column_end":19},"name":"HeapStyle","qualname":"::ir::heap::HeapStyle","value":"HeapStyle::{Dynamic, Static}","parent":null,"children":[{"krate":0,"index":6208},{"krate":0,"index":6210}],"decl_id":null,"docs":" Style of heap including style-specific information.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1025},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"immediates","qualname":"::ir::immediates","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":6214},{"krate":0,"index":6229},{"krate":0,"index":6227},{"krate":0,"index":6224},{"krate":0,"index":6222},{"krate":0,"index":6220},{"krate":0,"index":6217},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":6230},{"krate":0,"index":6245},{"krate":0,"index":6243},{"krate":0,"index":6240},{"krate":0,"index":6238},{"krate":0,"index":6236},{"krate":0,"index":6233},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":6246},{"krate":0,"index":6261},{"krate":0,"index":6259},{"krate":0,"index":6256},{"krate":0,"index":6254},{"krate":0,"index":6252},{"krate":0,"index":6249},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":6262},{"krate":0,"index":6280},{"krate":0,"index":6277},{"krate":0,"index":6274},{"krate":0,"index":6271},{"krate":0,"index":6269},{"krate":0,"index":6266},{"krate":0,"index":1087},{"krate":0,"index":1092},{"krate":0,"index":6281},{"krate":0,"index":6296},{"krate":0,"index":6294},{"krate":0,"index":6291},{"krate":0,"index":6289},{"krate":0,"index":6287},{"krate":0,"index":6284},{"krate":0,"index":1095},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":6297},{"krate":0,"index":6312},{"krate":0,"index":6310},{"krate":0,"index":6308},{"krate":0,"index":6306},{"krate":0,"index":6303},{"krate":0,"index":6300},{"krate":0,"index":6313},{"krate":0,"index":6328},{"krate":0,"index":6326},{"krate":0,"index":6324},{"krate":0,"index":6322},{"krate":0,"index":6319},{"krate":0,"index":6316},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1149}],"decl_id":null,"docs":" Immediate operands for Cranelift instructions","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1035},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255172,"byte_end":255181,"line_start":14,"line_end":14,"column_start":11,"column_end":20},"name":"IntoBytes","qualname":"::ir::immediates::IntoBytes","value":"IntoBytes","parent":null,"children":[{"krate":0,"index":1036}],"decl_id":null,"docs":" Convert a type into a vector of bytes; all implementors in this file must use little-endian\n orderings of bytes to match WebAssembly's little-endianness.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255270,"byte_end":255280,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"into_bytes","qualname":"::ir::immediates::IntoBytes::into_bytes","value":"fn (self) -> Vec<u8>","parent":{"krate":0,"index":1035},"children":[],"decl_id":null,"docs":" Return the little-endian byte representation of the implementing type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6214},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255931,"byte_end":255936,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"Imm64","qualname":"::ir::immediates::Imm64","value":"","parent":null,"children":[],"decl_id":null,"docs":" 64-bit immediate signed integer operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256033,"byte_end":256036,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Imm64>::new","value":"fn (x: i64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Imm64` representing the signed number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256118,"byte_end":256130,"line_start":57,"line_end":57,"column_start":12,"column_end":24},"name":"wrapping_neg","qualname":"<Imm64>::wrapping_neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6230},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257797,"byte_end":257803,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"Uimm64","qualname":"::ir::immediates::Uimm64","value":"","parent":null,"children":[],"decl_id":null,"docs":" 64-bit immediate unsigned integer operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257904,"byte_end":257907,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Uimm64>::new","value":"fn (x: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uimm64` representing the unsigned number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257989,"byte_end":258001,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"wrapping_neg","qualname":"<Uimm64>::wrapping_neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1074},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261198,"byte_end":261203,"line_start":253,"line_end":253,"column_start":10,"column_end":15},"name":"Uimm8","qualname":"::ir::immediates::Uimm8","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" 8-bit unsigned integer immediate operand.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6246},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261381,"byte_end":261387,"line_start":259,"line_end":259,"column_start":12,"column_end":18},"name":"Uimm32","qualname":"::ir::immediates::Uimm32","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 32-bit unsigned integer immediate operand.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6262},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262434,"byte_end":262441,"line_start":308,"line_end":308,"column_start":12,"column_end":19},"name":"V128Imm","qualname":"::ir::immediates::V128Imm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 128-bit immediate operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262532,"byte_end":262537,"line_start":312,"line_end":312,"column_start":12,"column_end":17},"name":"bytes","qualname":"<V128Imm>::bytes","value":"fn (&self) -> impl Iterator<Item = &u8>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the bytes in the constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262661,"byte_end":262667,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<V128Imm>::to_vec","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Convert the immediate into a vector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262773,"byte_end":262781,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<V128Imm>::as_slice","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Convert the immediate into a slice.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6281},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":263293,"byte_end":263301,"line_start":341,"line_end":341,"column_start":12,"column_end":20},"name":"Offset32","qualname":"::ir::immediates::Offset32","value":"","parent":null,"children":[],"decl_id":null,"docs":" 32-bit signed immediate offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":263404,"byte_end":263407,"line_start":345,"line_end":345,"column_start":12,"column_end":15},"name":"new","qualname":"<Offset32>::new","value":"fn (x: i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Offset32` representing the signed number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":263540,"byte_end":263552,"line_start":350,"line_end":350,"column_start":12,"column_end":24},"name":"try_from_i64","qualname":"<Offset32>::try_from_i64","value":"fn (x: i64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Offset32` representing the signed number `x` if possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":263790,"byte_end":263801,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"name":"try_add_i64","qualname":"<Offset32>::try_add_i64","value":"fn (self, x: i64) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Add in the signed number `x` if possible.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6297},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":265478,"byte_end":265484,"line_start":430,"line_end":430,"column_start":12,"column_end":18},"name":"Ieee32","qualname":"::ir::immediates::Ieee32","value":"","parent":null,"children":[],"decl_id":null,"docs":" An IEEE binary32 immediate floating point value, represented as a u32\n containing the bit pattern.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6313},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":265698,"byte_end":265704,"line_start":437,"line_end":437,"column_start":12,"column_end":18},"name":"Ieee64","qualname":"::ir::immediates::Ieee64","value":"","parent":null,"children":[],"decl_id":null,"docs":" An IEEE binary64 immediate floating point value, represented as a u64\n containing the bit pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":273596,"byte_end":273605,"line_start":678,"line_end":678,"column_start":12,"column_end":21},"name":"with_bits","qualname":"<Ieee32>::with_bits","value":"fn (x: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee32` containing the bits of `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":273714,"byte_end":273718,"line_start":683,"line_end":683,"column_start":12,"column_end":16},"name":"pow2","qualname":"<Ieee32>::pow2","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee32` number representing `2.0^n`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274197,"byte_end":274227,"line_start":696,"line_end":696,"column_start":12,"column_end":42},"name":"fcvt_to_sint_negative_overflow","qualname":"<Ieee32>::fcvt_to_sint_negative_overflow","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee32` number representing the greatest negative value\n not convertable from f32 to a signed integer with width n.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274493,"byte_end":274496,"line_start":704,"line_end":704,"column_start":12,"column_end":15},"name":"neg","qualname":"<Ieee32>::neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274623,"byte_end":274633,"line_start":709,"line_end":709,"column_start":12,"column_end":22},"name":"with_float","qualname":"<Ieee32>::with_float","value":"fn (x: f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee32` representing the number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274736,"byte_end":274740,"line_start":714,"line_end":714,"column_start":12,"column_end":16},"name":"bits","qualname":"<Ieee32>::bits","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the bitwise representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275480,"byte_end":275489,"line_start":751,"line_end":751,"column_start":12,"column_end":21},"name":"with_bits","qualname":"<Ieee64>::with_bits","value":"fn (x: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee64` containing the bits of `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275598,"byte_end":275602,"line_start":756,"line_end":756,"column_start":12,"column_end":16},"name":"pow2","qualname":"<Ieee64>::pow2","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee64` number representing `2.0^n`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276082,"byte_end":276112,"line_start":769,"line_end":769,"column_start":12,"column_end":42},"name":"fcvt_to_sint_negative_overflow","qualname":"<Ieee64>::fcvt_to_sint_negative_overflow","value":"fn <I> (n: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Ieee64` number representing the greatest negative value\n not convertable from f64 to a signed integer with width n.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276378,"byte_end":276381,"line_start":777,"line_end":777,"column_start":12,"column_end":15},"name":"neg","qualname":"<Ieee64>::neg","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return self negated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276508,"byte_end":276518,"line_start":782,"line_end":782,"column_start":12,"column_end":22},"name":"with_float","qualname":"<Ieee64>::with_float","value":"fn (x: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Ieee64` representing the number `x`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276621,"byte_end":276625,"line_start":787,"line_end":787,"column_start":12,"column_end":16},"name":"bits","qualname":"<Ieee64>::bits","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the bitwise representation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1151},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"instructions","qualname":"::ir::instructions","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":6367},{"krate":0,"index":6476},{"krate":0,"index":6474},{"krate":0,"index":6472},{"krate":0,"index":6470},{"krate":0,"index":6468},{"krate":0,"index":6329},{"krate":0,"index":6477},{"krate":0,"index":6691},{"krate":0,"index":6689},{"krate":0,"index":6332},{"krate":0,"index":6693},{"krate":0,"index":7150},{"krate":0,"index":7148},{"krate":0,"index":7146},{"krate":0,"index":7144},{"krate":0,"index":7142},{"krate":0,"index":7139},{"krate":0,"index":6344},{"krate":0,"index":6356},{"krate":0,"index":6358},{"krate":0,"index":6359},{"krate":0,"index":6361},{"krate":0,"index":6363},{"krate":0,"index":6365},{"krate":0,"index":1175},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":7151},{"krate":0,"index":7156},{"krate":0,"index":7154},{"krate":0,"index":1191},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1212},{"krate":0,"index":1224},{"krate":0,"index":7158},{"krate":0,"index":7163},{"krate":0,"index":7162},{"krate":0,"index":1236},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":7165},{"krate":0,"index":7179},{"krate":0,"index":7178},{"krate":0,"index":7176},{"krate":0,"index":7173},{"krate":0,"index":7171},{"krate":0,"index":1250},{"krate":0,"index":1254},{"krate":0,"index":1275},{"krate":0,"index":7181},{"krate":0,"index":7197},{"krate":0,"index":7195},{"krate":0,"index":7193},{"krate":0,"index":7190},{"krate":0,"index":7188}],"decl_id":null,"docs":" Instruction formats and opcodes.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1173},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":297630,"byte_end":297639,"line_start":25,"line_end":25,"column_start":10,"column_end":19},"name":"ValueList","qualname":"::ir::instructions::ValueList","value":"entity::EntityList<Value>","parent":null,"children":[],"decl_id":null,"docs":" Some instructions use an external list of argument values because there is not enough space in\n the 16-byte `InstructionData` struct. These value lists are stored in a memory pool in\n `dfg.value_lists`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1174},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":297737,"byte_end":297750,"line_start":28,"line_end":28,"column_start":10,"column_end":23},"name":"ValueListPool","qualname":"::ir::instructions::ValueListPool","value":"entity::ListPool<Value>","parent":null,"children":[],"decl_id":null,"docs":" Memory pool for holding value lists. See `ValueList`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6368},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970196,"byte_end":10970202,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"Binary","qualname":"::ir::instructions::InstructionFormat::Binary","value":"InstructionFormat::Binary","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Binary(imms=(), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6370},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970269,"byte_end":10970278,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"name":"BinaryImm","qualname":"::ir::instructions::InstructionFormat::BinaryImm","value":"InstructionFormat::BinaryImm","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BinaryImm(imms=(imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6372},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970338,"byte_end":10970344,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Branch","qualname":"::ir::instructions::InstructionFormat::Branch","value":"InstructionFormat::Branch","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Branch(imms=(destination: ir::Block), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6374},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970439,"byte_end":10970450,"line_start":15,"line_end":15,"column_start":5,"column_end":16},"name":"BranchFloat","qualname":"::ir::instructions::InstructionFormat::BranchFloat","value":"InstructionFormat::BranchFloat","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BranchFloat(imms=(cond: ir::condcodes::FloatCC, destination: ir::Block), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6376},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970542,"byte_end":10970552,"line_start":17,"line_end":17,"column_start":5,"column_end":15},"name":"BranchIcmp","qualname":"::ir::instructions::InstructionFormat::BranchIcmp","value":"InstructionFormat::BranchIcmp","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BranchIcmp(imms=(cond: ir::condcodes::IntCC, destination: ir::Block), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6378},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970643,"byte_end":10970652,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"BranchInt","qualname":"::ir::instructions::InstructionFormat::BranchInt","value":"InstructionFormat::BranchInt","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BranchInt(imms=(cond: ir::condcodes::IntCC, destination: ir::Block), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6380},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970739,"byte_end":10970750,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"name":"BranchTable","qualname":"::ir::instructions::InstructionFormat::BranchTable","value":"InstructionFormat::BranchTable","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BranchTable(imms=(destination: ir::Block, table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6382},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970817,"byte_end":10970832,"line_start":23,"line_end":23,"column_start":5,"column_end":20},"name":"BranchTableBase","qualname":"::ir::instructions::InstructionFormat::BranchTableBase","value":"InstructionFormat::BranchTableBase","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BranchTableBase(imms=(table: ir::JumpTable), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6384},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970928,"byte_end":10970944,"line_start":25,"line_end":25,"column_start":5,"column_end":21},"name":"BranchTableEntry","qualname":"::ir::instructions::InstructionFormat::BranchTableEntry","value":"InstructionFormat::BranchTableEntry","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" BranchTableEntry(imms=(imm: ir::immediates::Uimm8, table: ir::JumpTable), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6386},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971001,"byte_end":10971005,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Call","qualname":"::ir::instructions::InstructionFormat::Call","value":"InstructionFormat::Call","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Call(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6388},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971068,"byte_end":10971080,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"CallIndirect","qualname":"::ir::instructions::InstructionFormat::CallIndirect","value":"InstructionFormat::CallIndirect","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" CallIndirect(imms=(sig_ref: ir::SigRef), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6390},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971138,"byte_end":10971146,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"CondTrap","qualname":"::ir::instructions::InstructionFormat::CondTrap","value":"InstructionFormat::CondTrap","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" CondTrap(imms=(code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6392},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971225,"byte_end":10971236,"line_start":33,"line_end":33,"column_start":5,"column_end":16},"name":"CopySpecial","qualname":"::ir::instructions::InstructionFormat::CopySpecial","value":"InstructionFormat::CopySpecial","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" CopySpecial(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6394},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971294,"byte_end":10971303,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"CopyToSsa","qualname":"::ir::instructions::InstructionFormat::CopyToSsa","value":"InstructionFormat::CopyToSsa","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" CopyToSsa(imms=(src: isa::RegUnit), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6396},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971373,"byte_end":10971384,"line_start":37,"line_end":37,"column_start":5,"column_end":16},"name":"ExtractLane","qualname":"::ir::instructions::InstructionFormat::ExtractLane","value":"InstructionFormat::ExtractLane","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" ExtractLane(imms=(lane: ir::immediates::Uimm8), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6398},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971456,"byte_end":10971468,"line_start":39,"line_end":39,"column_start":5,"column_end":17},"name":"FloatCompare","qualname":"::ir::instructions::InstructionFormat::FloatCompare","value":"InstructionFormat::FloatCompare","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" FloatCompare(imms=(cond: ir::condcodes::FloatCC), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6400},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971537,"byte_end":10971546,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"name":"FloatCond","qualname":"::ir::instructions::InstructionFormat::FloatCond","value":"InstructionFormat::FloatCond","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" FloatCond(imms=(cond: ir::condcodes::FloatCC), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6402},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971639,"byte_end":10971652,"line_start":43,"line_end":43,"column_start":5,"column_end":18},"name":"FloatCondTrap","qualname":"::ir::instructions::InstructionFormat::FloatCondTrap","value":"InstructionFormat::FloatCondTrap","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" FloatCondTrap(imms=(cond: ir::condcodes::FloatCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6404},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971713,"byte_end":10971721,"line_start":45,"line_end":45,"column_start":5,"column_end":13},"name":"FuncAddr","qualname":"::ir::instructions::InstructionFormat::FuncAddr","value":"InstructionFormat::FuncAddr","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" FuncAddr(imms=(func_ref: ir::FuncRef), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6406},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971804,"byte_end":10971812,"line_start":47,"line_end":47,"column_start":5,"column_end":13},"name":"HeapAddr","qualname":"::ir::instructions::InstructionFormat::HeapAddr","value":"InstructionFormat::HeapAddr","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" HeapAddr(imms=(heap: ir::Heap, imm: ir::immediates::Uimm32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6408},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971876,"byte_end":10971888,"line_start":49,"line_end":49,"column_start":5,"column_end":17},"name":"IndirectJump","qualname":"::ir::instructions::InstructionFormat::IndirectJump","value":"InstructionFormat::IndirectJump","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" IndirectJump(imms=(table: ir::JumpTable), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6410},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10971957,"byte_end":10971967,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"InsertLane","qualname":"::ir::instructions::InstructionFormat::InsertLane","value":"InstructionFormat::InsertLane","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" InsertLane(imms=(lane: ir::immediates::Uimm8), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6412},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972035,"byte_end":10972045,"line_start":53,"line_end":53,"column_start":5,"column_end":15},"name":"IntCompare","qualname":"::ir::instructions::InstructionFormat::IntCompare","value":"InstructionFormat::IntCompare","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" IntCompare(imms=(cond: ir::condcodes::IntCC), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6414},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972144,"byte_end":10972157,"line_start":55,"line_end":55,"column_start":5,"column_end":18},"name":"IntCompareImm","qualname":"::ir::instructions::InstructionFormat::IntCompareImm","value":"InstructionFormat::IntCompareImm","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" IntCompareImm(imms=(cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6416},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972222,"byte_end":10972229,"line_start":57,"line_end":57,"column_start":5,"column_end":12},"name":"IntCond","qualname":"::ir::instructions::InstructionFormat::IntCond","value":"InstructionFormat::IntCond","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" IntCond(imms=(cond: ir::condcodes::IntCC), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6418},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972318,"byte_end":10972329,"line_start":59,"line_end":59,"column_start":5,"column_end":16},"name":"IntCondTrap","qualname":"::ir::instructions::InstructionFormat::IntCondTrap","value":"InstructionFormat::IntCondTrap","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" IntCondTrap(imms=(cond: ir::condcodes::IntCC, code: ir::TrapCode), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6420},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972396,"byte_end":10972405,"line_start":61,"line_end":61,"column_start":5,"column_end":14},"name":"IntSelect","qualname":"::ir::instructions::InstructionFormat::IntSelect","value":"InstructionFormat::IntSelect","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" IntSelect(imms=(cond: ir::condcodes::IntCC), vals=3)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6422},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972463,"byte_end":10972467,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Jump","qualname":"::ir::instructions::InstructionFormat::Jump","value":"InstructionFormat::Jump","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Jump(imms=(destination: ir::Block), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6424},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972556,"byte_end":10972560,"line_start":65,"line_end":65,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::instructions::InstructionFormat::Load","value":"InstructionFormat::Load","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Load(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6426},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972656,"byte_end":10972667,"line_start":67,"line_end":67,"column_start":5,"column_end":16},"name":"LoadComplex","qualname":"::ir::instructions::InstructionFormat::LoadComplex","value":"InstructionFormat::LoadComplex","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" LoadComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6428},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972707,"byte_end":10972715,"line_start":69,"line_end":69,"column_start":5,"column_end":13},"name":"MultiAry","qualname":"::ir::instructions::InstructionFormat::MultiAry","value":"InstructionFormat::MultiAry","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" MultiAry(imms=(), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6430},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972754,"byte_end":10972761,"line_start":71,"line_end":71,"column_start":5,"column_end":12},"name":"NullAry","qualname":"::ir::instructions::InstructionFormat::NullAry","value":"InstructionFormat::NullAry","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" NullAry(imms=(), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6432},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972837,"byte_end":10972844,"line_start":73,"line_end":73,"column_start":5,"column_end":12},"name":"RegFill","qualname":"::ir::instructions::InstructionFormat::RegFill","value":"InstructionFormat::RegFill","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" RegFill(imms=(src: ir::StackSlot, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6434},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10972919,"byte_end":10972926,"line_start":75,"line_end":75,"column_start":5,"column_end":12},"name":"RegMove","qualname":"::ir::instructions::InstructionFormat::RegMove","value":"InstructionFormat::RegMove","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" RegMove(imms=(src: isa::RegUnit, dst: isa::RegUnit), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6436},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973003,"byte_end":10973011,"line_start":77,"line_end":77,"column_start":5,"column_end":13},"name":"RegSpill","qualname":"::ir::instructions::InstructionFormat::RegSpill","value":"InstructionFormat::RegSpill","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" RegSpill(imms=(src: isa::RegUnit, dst: ir::StackSlot), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6438},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973069,"byte_end":10973076,"line_start":79,"line_end":79,"column_start":5,"column_end":12},"name":"Shuffle","qualname":"::ir::instructions::InstructionFormat::Shuffle","value":"InstructionFormat::Shuffle","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Shuffle(imms=(mask: ir::Immediate), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6440},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973176,"byte_end":10973185,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"StackLoad","qualname":"::ir::instructions::InstructionFormat::StackLoad","value":"InstructionFormat::StackLoad","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" StackLoad(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6442},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973286,"byte_end":10973296,"line_start":83,"line_end":83,"column_start":5,"column_end":15},"name":"StackStore","qualname":"::ir::instructions::InstructionFormat::StackStore","value":"InstructionFormat::StackStore","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" StackStore(imms=(stack_slot: ir::StackSlot, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6444},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973386,"byte_end":10973391,"line_start":85,"line_end":85,"column_start":5,"column_end":10},"name":"Store","qualname":"::ir::instructions::InstructionFormat::Store","value":"InstructionFormat::Store","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Store(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=2)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6446},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973488,"byte_end":10973500,"line_start":87,"line_end":87,"column_start":5,"column_end":17},"name":"StoreComplex","qualname":"::ir::instructions::InstructionFormat::StoreComplex","value":"InstructionFormat::StoreComplex","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" StoreComplex(imms=(flags: ir::MemFlags, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6448},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973591,"byte_end":10973600,"line_start":89,"line_end":89,"column_start":5,"column_end":14},"name":"TableAddr","qualname":"::ir::instructions::InstructionFormat::TableAddr","value":"InstructionFormat::TableAddr","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" TableAddr(imms=(table: ir::Table, offset: ir::immediates::Offset32), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6450},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973639,"byte_end":10973646,"line_start":91,"line_end":91,"column_start":5,"column_end":12},"name":"Ternary","qualname":"::ir::instructions::InstructionFormat::Ternary","value":"InstructionFormat::Ternary","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Ternary(imms=(), vals=3)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6452},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973700,"byte_end":10973704,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"Trap","qualname":"::ir::instructions::InstructionFormat::Trap","value":"InstructionFormat::Trap","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Trap(imms=(code: ir::TrapCode), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6454},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973741,"byte_end":10973746,"line_start":95,"line_end":95,"column_start":5,"column_end":10},"name":"Unary","qualname":"::ir::instructions::InstructionFormat::Unary","value":"InstructionFormat::Unary","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" Unary(imms=(), vals=1)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6456},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973796,"byte_end":10973805,"line_start":97,"line_end":97,"column_start":5,"column_end":14},"name":"UnaryBool","qualname":"::ir::instructions::InstructionFormat::UnaryBool","value":"InstructionFormat::UnaryBool","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" UnaryBool(imms=(imm: bool), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6458},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973876,"byte_end":10973886,"line_start":99,"line_end":99,"column_start":5,"column_end":15},"name":"UnaryConst","qualname":"::ir::instructions::InstructionFormat::UnaryConst","value":"InstructionFormat::UnaryConst","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" UnaryConst(imms=(constant_handle: ir::Constant), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6460},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10973963,"byte_end":10973979,"line_start":101,"line_end":101,"column_start":5,"column_end":21},"name":"UnaryGlobalValue","qualname":"::ir::instructions::InstructionFormat::UnaryGlobalValue","value":"InstructionFormat::UnaryGlobalValue","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" UnaryGlobalValue(imms=(global_value: ir::GlobalValue), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6462},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10974049,"byte_end":10974060,"line_start":103,"line_end":103,"column_start":5,"column_end":16},"name":"UnaryIeee32","qualname":"::ir::instructions::InstructionFormat::UnaryIeee32","value":"InstructionFormat::UnaryIeee32","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" UnaryIeee32(imms=(imm: ir::immediates::Ieee32), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6464},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10974130,"byte_end":10974141,"line_start":105,"line_end":105,"column_start":5,"column_end":16},"name":"UnaryIeee64","qualname":"::ir::instructions::InstructionFormat::UnaryIeee64","value":"InstructionFormat::UnaryIeee64","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" UnaryIeee64(imms=(imm: ir::immediates::Ieee64), vals=0)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6466},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10974207,"byte_end":10974215,"line_start":107,"line_end":107,"column_start":5,"column_end":13},"name":"UnaryImm","qualname":"::ir::instructions::InstructionFormat::UnaryImm","value":"InstructionFormat::UnaryImm","parent":{"krate":0,"index":6367},"children":[],"decl_id":null,"docs":" UnaryImm(imms=(imm: ir::immediates::Imm64), vals=0)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6367},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10970140,"byte_end":10970157,"line_start":7,"line_end":7,"column_start":10,"column_end":27},"name":"InstructionFormat","qualname":"::ir::instructions::InstructionFormat","value":"InstructionFormat::{Binary, BinaryImm, Branch, BranchFloat, BranchIcmp, BranchInt, BranchTable, BranchTableBase, BranchTableEntry, Call, CallIndirect, CondTrap, CopySpecial, CopyToSsa, ExtractLane, FloatCompare, FloatCond, FloatCondTrap, FuncAddr, HeapAddr, IndirectJump, InsertLane, IntCompare, IntCompareImm, IntCond, IntCondTrap, IntSelect, Jump, Load, LoadComplex, MultiAry, NullAry, RegFill, RegMove, RegSpill, Shuffle, StackLoad, StackStore, Store, StoreComplex, TableAddr, Ternary, Trap, Unary, UnaryBool, UnaryConst, UnaryGlobalValue, UnaryIeee32, UnaryIeee64, UnaryImm}","parent":null,"children":[{"krate":0,"index":6368},{"krate":0,"index":6370},{"krate":0,"index":6372},{"krate":0,"index":6374},{"krate":0,"index":6376},{"krate":0,"index":6378},{"krate":0,"index":6380},{"krate":0,"index":6382},{"krate":0,"index":6384},{"krate":0,"index":6386},{"krate":0,"index":6388},{"krate":0,"index":6390},{"krate":0,"index":6392},{"krate":0,"index":6394},{"krate":0,"index":6396},{"krate":0,"index":6398},{"krate":0,"index":6400},{"krate":0,"index":6402},{"krate":0,"index":6404},{"krate":0,"index":6406},{"krate":0,"index":6408},{"krate":0,"index":6410},{"krate":0,"index":6412},{"krate":0,"index":6414},{"krate":0,"index":6416},{"krate":0,"index":6418},{"krate":0,"index":6420},{"krate":0,"index":6422},{"krate":0,"index":6424},{"krate":0,"index":6426},{"krate":0,"index":6428},{"krate":0,"index":6430},{"krate":0,"index":6432},{"krate":0,"index":6434},{"krate":0,"index":6436},{"krate":0,"index":6438},{"krate":0,"index":6440},{"krate":0,"index":6442},{"krate":0,"index":6444},{"krate":0,"index":6446},{"krate":0,"index":6448},{"krate":0,"index":6450},{"krate":0,"index":6452},{"krate":0,"index":6454},{"krate":0,"index":6456},{"krate":0,"index":6458},{"krate":0,"index":6460},{"krate":0,"index":6462},{"krate":0,"index":6464},{"krate":0,"index":6466}],"decl_id":null,"docs":" An instruction format","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6478},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979315,"byte_end":10979321,"line_start":270,"line_end":270,"column_start":5,"column_end":11},"name":"Binary","qualname":"::ir::instructions::InstructionData::Binary","value":"InstructionData::Binary { opcode, args }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6482},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979385,"byte_end":10979394,"line_start":274,"line_end":274,"column_start":5,"column_end":14},"name":"BinaryImm","qualname":"::ir::instructions::InstructionData::BinaryImm","value":"InstructionData::BinaryImm { opcode, arg, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6486},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979488,"byte_end":10979494,"line_start":279,"line_end":279,"column_start":5,"column_end":11},"name":"Branch","qualname":"::ir::instructions::InstructionData::Branch","value":"InstructionData::Branch { opcode, args, destination }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6490},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979589,"byte_end":10979600,"line_start":284,"line_end":284,"column_start":5,"column_end":16},"name":"BranchFloat","qualname":"::ir::instructions::InstructionData::BranchFloat","value":"InstructionData::BranchFloat { opcode, args, cond, destination }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6495},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979733,"byte_end":10979743,"line_start":290,"line_end":290,"column_start":5,"column_end":15},"name":"BranchIcmp","qualname":"::ir::instructions::InstructionData::BranchIcmp","value":"InstructionData::BranchIcmp { opcode, args, cond, destination }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6500},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979874,"byte_end":10979883,"line_start":296,"line_end":296,"column_start":5,"column_end":14},"name":"BranchInt","qualname":"::ir::instructions::InstructionData::BranchInt","value":"InstructionData::BranchInt { opcode, args, cond, destination }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6505},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980014,"byte_end":10980025,"line_start":302,"line_end":302,"column_start":5,"column_end":16},"name":"BranchTable","qualname":"::ir::instructions::InstructionData::BranchTable","value":"InstructionData::BranchTable { opcode, arg, destination, table }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6510},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980145,"byte_end":10980160,"line_start":308,"line_end":308,"column_start":5,"column_end":20},"name":"BranchTableBase","qualname":"::ir::instructions::InstructionData::BranchTableBase","value":"InstructionData::BranchTableBase { opcode, table }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6513},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980228,"byte_end":10980244,"line_start":312,"line_end":312,"column_start":5,"column_end":21},"name":"BranchTableEntry","qualname":"::ir::instructions::InstructionData::BranchTableEntry","value":"InstructionData::BranchTableEntry { opcode, args, imm, table }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6519},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980374,"byte_end":10980378,"line_start":318,"line_end":318,"column_start":5,"column_end":9},"name":"Call","qualname":"::ir::instructions::InstructionData::Call","value":"InstructionData::Call { opcode, args, func_ref }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6523},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980472,"byte_end":10980484,"line_start":323,"line_end":323,"column_start":5,"column_end":17},"name":"CallIndirect","qualname":"::ir::instructions::InstructionData::CallIndirect","value":"InstructionData::CallIndirect { opcode, args, sig_ref }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6527},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980576,"byte_end":10980584,"line_start":328,"line_end":328,"column_start":5,"column_end":13},"name":"CondTrap","qualname":"::ir::instructions::InstructionData::CondTrap","value":"InstructionData::CondTrap { opcode, arg, code }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6531},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980670,"byte_end":10980681,"line_start":333,"line_end":333,"column_start":5,"column_end":16},"name":"CopySpecial","qualname":"::ir::instructions::InstructionData::CopySpecial","value":"InstructionData::CopySpecial { opcode, src, dst }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6535},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980773,"byte_end":10980782,"line_start":338,"line_end":338,"column_start":5,"column_end":14},"name":"CopyToSsa","qualname":"::ir::instructions::InstructionData::CopyToSsa","value":"InstructionData::CopyToSsa { opcode, src }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6538},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980847,"byte_end":10980858,"line_start":342,"line_end":342,"column_start":5,"column_end":16},"name":"ExtractLane","qualname":"::ir::instructions::InstructionData::ExtractLane","value":"InstructionData::ExtractLane { opcode, arg, lane }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6542},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10980953,"byte_end":10980965,"line_start":347,"line_end":347,"column_start":5,"column_end":17},"name":"FloatCompare","qualname":"::ir::instructions::InstructionData::FloatCompare","value":"InstructionData::FloatCompare { opcode, args, cond }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6547},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981067,"byte_end":10981076,"line_start":352,"line_end":352,"column_start":5,"column_end":14},"name":"FloatCond","qualname":"::ir::instructions::InstructionData::FloatCond","value":"InstructionData::FloatCond { opcode, arg, cond }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6551},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981172,"byte_end":10981185,"line_start":357,"line_end":357,"column_start":5,"column_end":18},"name":"FloatCondTrap","qualname":"::ir::instructions::InstructionData::FloatCondTrap","value":"InstructionData::FloatCondTrap { opcode, arg, cond, code }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6556},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981309,"byte_end":10981317,"line_start":363,"line_end":363,"column_start":5,"column_end":13},"name":"FuncAddr","qualname":"::ir::instructions::InstructionData::FuncAddr","value":"InstructionData::FuncAddr { opcode, func_ref }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6559},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981386,"byte_end":10981394,"line_start":367,"line_end":367,"column_start":5,"column_end":13},"name":"HeapAddr","qualname":"::ir::instructions::InstructionData::HeapAddr","value":"InstructionData::HeapAddr { opcode, arg, heap, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6564},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981513,"byte_end":10981525,"line_start":373,"line_end":373,"column_start":5,"column_end":17},"name":"IndirectJump","qualname":"::ir::instructions::InstructionData::IndirectJump","value":"InstructionData::IndirectJump { opcode, arg, table }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6568},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981613,"byte_end":10981623,"line_start":378,"line_end":378,"column_start":5,"column_end":15},"name":"InsertLane","qualname":"::ir::instructions::InstructionData::InsertLane","value":"InstructionData::InsertLane { opcode, args, lane }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6573},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981724,"byte_end":10981734,"line_start":383,"line_end":383,"column_start":5,"column_end":15},"name":"IntCompare","qualname":"::ir::instructions::InstructionData::IntCompare","value":"InstructionData::IntCompare { opcode, args, cond }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6578},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981834,"byte_end":10981847,"line_start":388,"line_end":388,"column_start":5,"column_end":18},"name":"IntCompareImm","qualname":"::ir::instructions::InstructionData::IntCompareImm","value":"InstructionData::IntCompareImm { opcode, arg, cond, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6583},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10981977,"byte_end":10981984,"line_start":394,"line_end":394,"column_start":5,"column_end":12},"name":"IntCond","qualname":"::ir::instructions::InstructionData::IntCond","value":"InstructionData::IntCond { opcode, arg, cond }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6587},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982078,"byte_end":10982089,"line_start":399,"line_end":399,"column_start":5,"column_end":16},"name":"IntCondTrap","qualname":"::ir::instructions::InstructionData::IntCondTrap","value":"InstructionData::IntCondTrap { opcode, arg, cond, code }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6592},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982211,"byte_end":10982220,"line_start":405,"line_end":405,"column_start":5,"column_end":14},"name":"IntSelect","qualname":"::ir::instructions::InstructionData::IntSelect","value":"InstructionData::IntSelect { opcode, args, cond }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6597},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982320,"byte_end":10982324,"line_start":410,"line_end":410,"column_start":5,"column_end":9},"name":"Jump","qualname":"::ir::instructions::InstructionData::Jump","value":"InstructionData::Jump { opcode, args, destination }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6601},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982419,"byte_end":10982423,"line_start":415,"line_end":415,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::instructions::InstructionData::Load","value":"InstructionData::Load { opcode, arg, flags, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6606},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982552,"byte_end":10982563,"line_start":421,"line_end":421,"column_start":5,"column_end":16},"name":"LoadComplex","qualname":"::ir::instructions::InstructionData::LoadComplex","value":"InstructionData::LoadComplex { opcode, args, flags, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6611},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982697,"byte_end":10982705,"line_start":427,"line_end":427,"column_start":5,"column_end":13},"name":"MultiAry","qualname":"::ir::instructions::InstructionData::MultiAry","value":"InstructionData::MultiAry { opcode, args }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6614},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982768,"byte_end":10982775,"line_start":431,"line_end":431,"column_start":5,"column_end":12},"name":"NullAry","qualname":"::ir::instructions::InstructionData::NullAry","value":"InstructionData::NullAry { opcode }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6616},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982813,"byte_end":10982820,"line_start":434,"line_end":434,"column_start":5,"column_end":12},"name":"RegFill","qualname":"::ir::instructions::InstructionData::RegFill","value":"InstructionData::RegFill { opcode, arg, src, dst }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6621},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10982933,"byte_end":10982940,"line_start":440,"line_end":440,"column_start":5,"column_end":12},"name":"RegMove","qualname":"::ir::instructions::InstructionData::RegMove","value":"InstructionData::RegMove { opcode, arg, src, dst }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6626},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983052,"byte_end":10983060,"line_start":446,"line_end":446,"column_start":5,"column_end":13},"name":"RegSpill","qualname":"::ir::instructions::InstructionData::RegSpill","value":"InstructionData::RegSpill { opcode, arg, src, dst }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6631},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983173,"byte_end":10983180,"line_start":452,"line_end":452,"column_start":5,"column_end":12},"name":"Shuffle","qualname":"::ir::instructions::InstructionData::Shuffle","value":"InstructionData::Shuffle { opcode, args, mask }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6636},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983273,"byte_end":10983282,"line_start":457,"line_end":457,"column_start":5,"column_end":14},"name":"StackLoad","qualname":"::ir::instructions::InstructionData::StackLoad","value":"InstructionData::StackLoad { opcode, stack_slot, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6640},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983397,"byte_end":10983407,"line_start":462,"line_end":462,"column_start":5,"column_end":15},"name":"StackStore","qualname":"::ir::instructions::InstructionData::StackStore","value":"InstructionData::StackStore { opcode, arg, stack_slot, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6645},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983542,"byte_end":10983547,"line_start":468,"line_end":468,"column_start":5,"column_end":10},"name":"Store","qualname":"::ir::instructions::InstructionData::Store","value":"InstructionData::Store { opcode, args, flags, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6651},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983682,"byte_end":10983694,"line_start":474,"line_end":474,"column_start":5,"column_end":17},"name":"StoreComplex","qualname":"::ir::instructions::InstructionData::StoreComplex","value":"InstructionData::StoreComplex { opcode, args, flags, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6656},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983828,"byte_end":10983837,"line_start":480,"line_end":480,"column_start":5,"column_end":14},"name":"TableAddr","qualname":"::ir::instructions::InstructionData::TableAddr","value":"InstructionData::TableAddr { opcode, arg, table, offset }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6661},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10983963,"byte_end":10983970,"line_start":486,"line_end":486,"column_start":5,"column_end":12},"name":"Ternary","qualname":"::ir::instructions::InstructionData::Ternary","value":"InstructionData::Ternary { opcode, args }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6665},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984034,"byte_end":10984038,"line_start":490,"line_end":490,"column_start":5,"column_end":9},"name":"Trap","qualname":"::ir::instructions::InstructionData::Trap","value":"InstructionData::Trap { opcode, code }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6668},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984104,"byte_end":10984109,"line_start":494,"line_end":494,"column_start":5,"column_end":10},"name":"Unary","qualname":"::ir::instructions::InstructionData::Unary","value":"InstructionData::Unary { opcode, arg }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6671},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984167,"byte_end":10984176,"line_start":498,"line_end":498,"column_start":5,"column_end":14},"name":"UnaryBool","qualname":"::ir::instructions::InstructionData::UnaryBool","value":"InstructionData::UnaryBool { opcode, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6674},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984233,"byte_end":10984243,"line_start":502,"line_end":502,"column_start":5,"column_end":15},"name":"UnaryConst","qualname":"::ir::instructions::InstructionData::UnaryConst","value":"InstructionData::UnaryConst { opcode, constant_handle }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6677},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984320,"byte_end":10984336,"line_start":506,"line_end":506,"column_start":5,"column_end":21},"name":"UnaryGlobalValue","qualname":"::ir::instructions::InstructionData::UnaryGlobalValue","value":"InstructionData::UnaryGlobalValue { opcode, global_value }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6680},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984413,"byte_end":10984424,"line_start":510,"line_end":510,"column_start":5,"column_end":16},"name":"UnaryIeee32","qualname":"::ir::instructions::InstructionData::UnaryIeee32","value":"InstructionData::UnaryIeee32 { opcode, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6683},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984499,"byte_end":10984510,"line_start":514,"line_end":514,"column_start":5,"column_end":16},"name":"UnaryIeee64","qualname":"::ir::instructions::InstructionData::UnaryIeee64","value":"InstructionData::UnaryIeee64 { opcode, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":6686},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984585,"byte_end":10984593,"line_start":518,"line_end":518,"column_start":5,"column_end":13},"name":"UnaryImm","qualname":"::ir::instructions::InstructionData::UnaryImm","value":"InstructionData::UnaryImm { opcode, imm }","parent":{"krate":0,"index":6477},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6477},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979293,"byte_end":10979308,"line_start":269,"line_end":269,"column_start":10,"column_end":25},"name":"InstructionData","qualname":"::ir::instructions::InstructionData","value":"InstructionData::{Binary, BinaryImm, Branch, BranchFloat, BranchIcmp, BranchInt, BranchTable, BranchTableBase, BranchTableEntry, Call, CallIndirect, CondTrap, CopySpecial, CopyToSsa, ExtractLane, FloatCompare, FloatCond, FloatCondTrap, FuncAddr, HeapAddr, IndirectJump, InsertLane, IntCompare, IntCompareImm, IntCond, IntCondTrap, IntSelect, Jump, Load, LoadComplex, MultiAry, NullAry, RegFill, RegMove, RegSpill, Shuffle, StackLoad, StackStore, Store, StoreComplex, TableAddr, Ternary, Trap, Unary, UnaryBool, UnaryConst, UnaryGlobalValue, UnaryIeee32, UnaryIeee64, UnaryImm}","parent":null,"children":[{"krate":0,"index":6478},{"krate":0,"index":6482},{"krate":0,"index":6486},{"krate":0,"index":6490},{"krate":0,"index":6495},{"krate":0,"index":6500},{"krate":0,"index":6505},{"krate":0,"index":6510},{"krate":0,"index":6513},{"krate":0,"index":6519},{"krate":0,"index":6523},{"krate":0,"index":6527},{"krate":0,"index":6531},{"krate":0,"index":6535},{"krate":0,"index":6538},{"krate":0,"index":6542},{"krate":0,"index":6547},{"krate":0,"index":6551},{"krate":0,"index":6556},{"krate":0,"index":6559},{"krate":0,"index":6564},{"krate":0,"index":6568},{"krate":0,"index":6573},{"krate":0,"index":6578},{"krate":0,"index":6583},{"krate":0,"index":6587},{"krate":0,"index":6592},{"krate":0,"index":6597},{"krate":0,"index":6601},{"krate":0,"index":6606},{"krate":0,"index":6611},{"krate":0,"index":6614},{"krate":0,"index":6616},{"krate":0,"index":6621},{"krate":0,"index":6626},{"krate":0,"index":6631},{"krate":0,"index":6636},{"krate":0,"index":6640},{"krate":0,"index":6645},{"krate":0,"index":6651},{"krate":0,"index":6656},{"krate":0,"index":6661},{"krate":0,"index":6665},{"krate":0,"index":6668},{"krate":0,"index":6671},{"krate":0,"index":6674},{"krate":0,"index":6677},{"krate":0,"index":6680},{"krate":0,"index":6683},{"krate":0,"index":6686}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10979261,"byte_end":10979283,"line_start":268,"line_end":268,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":6333},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984744,"byte_end":10984750,"line_start":526,"line_end":526,"column_start":12,"column_end":18},"name":"opcode","qualname":"<InstructionData>::opcode","value":"fn (&self) -> Opcode","parent":null,"children":[],"decl_id":null,"docs":" Get the opcode of this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6334},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10987170,"byte_end":10987185,"line_start":584,"line_end":584,"column_start":12,"column_end":27},"name":"typevar_operand","qualname":"<InstructionData>::typevar_operand","value":"fn (&self, pool: &ir::ValueListPool) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Get the controlling type variable operand.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6335},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10989891,"byte_end":10989900,"line_start":652,"line_end":652,"column_start":12,"column_end":21},"name":"arguments","qualname":"<InstructionData>::arguments","value":"fn <'a> (&'a self, pool: &'a ir::ValueListPool) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the value arguments to this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6337},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10992659,"byte_end":10992672,"line_start":719,"line_end":719,"column_start":12,"column_end":25},"name":"arguments_mut","qualname":"<InstructionData>::arguments_mut","value":"fn <'a> (&'a mut self, pool: &'a mut ir::ValueListPool) -> &mut [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get mutable references to the value arguments to this\n instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6339},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10995726,"byte_end":10995741,"line_start":789,"line_end":789,"column_start":12,"column_end":27},"name":"take_value_list","qualname":"<InstructionData>::take_value_list","value":"fn (&mut self) -> Option<ir::ValueList>","parent":null,"children":[],"decl_id":null,"docs":" Take out the value list with all the value arguments and return\n it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6340},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10996757,"byte_end":10996771,"line_start":815,"line_end":815,"column_start":12,"column_end":26},"name":"put_value_list","qualname":"<InstructionData>::put_value_list","value":"fn (&mut self, vlist: ir::ValueList) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a value list.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6341},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10997785,"byte_end":10997787,"line_start":837,"line_end":837,"column_start":12,"column_end":14},"name":"eq","qualname":"<InstructionData>::eq","value":"fn (&self, other: &Self, pool: &ir::ValueListPool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare two `InstructionData` for equality.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6342},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11013446,"byte_end":11013450,"line_start":1102,"line_end":1102,"column_start":12,"column_end":16},"name":"hash","qualname":"<InstructionData>::hash","value":"fn <H> (&self, state: &mut H, pool: &ir::ValueListPool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Hash an `InstructionData`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6694},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031054,"byte_end":11031058,"line_start":1429,"line_end":1429,"column_start":5,"column_end":9},"name":"Jump","qualname":"::ir::instructions::Opcode::Jump","value":"Opcode::Jump","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `jump block, args`. (Jump)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6697},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031110,"byte_end":11031121,"line_start":1431,"line_end":1431,"column_start":5,"column_end":16},"name":"Fallthrough","qualname":"::ir::instructions::Opcode::Fallthrough","value":"Opcode::Fallthrough","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `fallthrough block, args`. (Jump)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6699},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031198,"byte_end":11031201,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8},"name":"Brz","qualname":"::ir::instructions::Opcode::Brz","value":"Opcode::Brz","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `brz c, block, args`. (Branch)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6701},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031279,"byte_end":11031283,"line_start":1437,"line_end":1437,"column_start":5,"column_end":9},"name":"Brnz","qualname":"::ir::instructions::Opcode::Brnz","value":"Opcode::Brnz","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `brnz c, block, args`. (Branch)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6703},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031377,"byte_end":11031383,"line_start":1440,"line_end":1440,"column_start":5,"column_end":11},"name":"BrIcmp","qualname":"::ir::instructions::Opcode::BrIcmp","value":"Opcode::BrIcmp","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `br_icmp Cond, x, y, block, args`. (BranchIcmp)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6705},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031438,"byte_end":11031442,"line_start":1442,"line_end":1442,"column_start":5,"column_end":9},"name":"Brif","qualname":"::ir::instructions::Opcode::Brif","value":"Opcode::Brif","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `brif Cond, f, block, args`. (BranchInt)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6707},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031499,"byte_end":11031503,"line_start":1444,"line_end":1444,"column_start":5,"column_end":9},"name":"Brff","qualname":"::ir::instructions::Opcode::Brff","value":"Opcode::Brff","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `brff Cond, f, block, args`. (BranchFloat)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6709},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031588,"byte_end":11031595,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12},"name":"BrTable","qualname":"::ir::instructions::Opcode::BrTable","value":"Opcode::BrTable","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `br_table x, block, JT`. (BranchTable)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6711},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031706,"byte_end":11031720,"line_start":1450,"line_end":1450,"column_start":5,"column_end":19},"name":"JumpTableEntry","qualname":"::ir::instructions::Opcode::JumpTableEntry","value":"Opcode::JumpTableEntry","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `entry = jump_table_entry x, addr, Size, JT`. (BranchTableEntry)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6713},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031781,"byte_end":11031794,"line_start":1452,"line_end":1452,"column_start":5,"column_end":18},"name":"JumpTableBase","qualname":"::ir::instructions::Opcode::JumpTableBase","value":"Opcode::JumpTableBase","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `addr = jump_table_base JT`. (BranchTableBase)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6715},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031893,"byte_end":11031912,"line_start":1455,"line_end":1455,"column_start":5,"column_end":24},"name":"IndirectJumpTableBr","qualname":"::ir::instructions::Opcode::IndirectJumpTableBr","value":"Opcode::IndirectJumpTableBr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `indirect_jump_table_br addr, JT`. (IndirectJump)\n Type inferred from `addr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6717},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031949,"byte_end":11031958,"line_start":1457,"line_end":1457,"column_start":5,"column_end":14},"name":"Debugtrap","qualname":"::ir::instructions::Opcode::Debugtrap","value":"Opcode::Debugtrap","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `debugtrap`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6719},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031992,"byte_end":11031996,"line_start":1459,"line_end":1459,"column_start":5,"column_end":9},"name":"Trap","qualname":"::ir::instructions::Opcode::Trap","value":"Opcode::Trap","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `trap code`. (Trap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6721},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032070,"byte_end":11032075,"line_start":1462,"line_end":1462,"column_start":5,"column_end":10},"name":"Trapz","qualname":"::ir::instructions::Opcode::Trapz","value":"Opcode::Trapz","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `trapz c, code`. (CondTrap)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6723},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032119,"byte_end":11032132,"line_start":1464,"line_end":1464,"column_start":5,"column_end":18},"name":"ResumableTrap","qualname":"::ir::instructions::Opcode::ResumableTrap","value":"Opcode::ResumableTrap","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `resumable_trap code`. (Trap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6725},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032207,"byte_end":11032213,"line_start":1467,"line_end":1467,"column_start":5,"column_end":11},"name":"Trapnz","qualname":"::ir::instructions::Opcode::Trapnz","value":"Opcode::Trapnz","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `trapnz c, code`. (CondTrap)\n Type inferred from `c`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6727},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032265,"byte_end":11032271,"line_start":1469,"line_end":1469,"column_start":5,"column_end":11},"name":"Trapif","qualname":"::ir::instructions::Opcode::Trapif","value":"Opcode::Trapif","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `trapif Cond, f, code`. (IntCondTrap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6729},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032325,"byte_end":11032331,"line_start":1471,"line_end":1471,"column_start":5,"column_end":11},"name":"Trapff","qualname":"::ir::instructions::Opcode::Trapff","value":"Opcode::Trapff","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `trapff Cond, f, code`. (FloatCondTrap)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6731},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032372,"byte_end":11032378,"line_start":1473,"line_end":1473,"column_start":5,"column_end":11},"name":"Return","qualname":"::ir::instructions::Opcode::Return","value":"Opcode::Return","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `return rvals`. (MultiAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6733},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032431,"byte_end":11032448,"line_start":1475,"line_end":1475,"column_start":5,"column_end":22},"name":"FallthroughReturn","qualname":"::ir::instructions::Opcode::FallthroughReturn","value":"Opcode::FallthroughReturn","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `fallthrough_return rvals`. (MultiAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6735},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032494,"byte_end":11032498,"line_start":1477,"line_end":1477,"column_start":5,"column_end":9},"name":"Call","qualname":"::ir::instructions::Opcode::Call","value":"Opcode::Call","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `rvals = call FN, args`. (Call)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6737},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032607,"byte_end":11032619,"line_start":1480,"line_end":1480,"column_start":5,"column_end":17},"name":"CallIndirect","qualname":"::ir::instructions::Opcode::CallIndirect","value":"Opcode::CallIndirect","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `rvals = call_indirect SIG, callee, args`. (CallIndirect)\n Type inferred from `callee`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6739},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032667,"byte_end":11032675,"line_start":1482,"line_end":1482,"column_start":5,"column_end":13},"name":"FuncAddr","qualname":"::ir::instructions::Opcode::FuncAddr","value":"Opcode::FuncAddr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `addr = func_addr FN`. (FuncAddr)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6741},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032747,"byte_end":11032751,"line_start":1485,"line_end":1485,"column_start":5,"column_end":9},"name":"Imin","qualname":"::ir::instructions::Opcode::Imin","value":"Opcode::Imin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = imin x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6743},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032823,"byte_end":11032827,"line_start":1488,"line_end":1488,"column_start":5,"column_end":9},"name":"Umin","qualname":"::ir::instructions::Opcode::Umin","value":"Opcode::Umin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = umin x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6745},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032899,"byte_end":11032903,"line_start":1491,"line_end":1491,"column_start":5,"column_end":9},"name":"Imax","qualname":"::ir::instructions::Opcode::Imax","value":"Opcode::Imax","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = imax x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6747},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11032975,"byte_end":11032979,"line_start":1494,"line_end":1494,"column_start":5,"column_end":9},"name":"Umax","qualname":"::ir::instructions::Opcode::Umax","value":"Opcode::Umax","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = umax x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6749},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033056,"byte_end":11033064,"line_start":1497,"line_end":1497,"column_start":5,"column_end":13},"name":"AvgRound","qualname":"::ir::instructions::Opcode::AvgRound","value":"Opcode::AvgRound","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = avg_round x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6751},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033117,"byte_end":11033121,"line_start":1499,"line_end":1499,"column_start":5,"column_end":9},"name":"Load","qualname":"::ir::instructions::Opcode::Load","value":"Opcode::Load","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = load MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6753},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033192,"byte_end":11033203,"line_start":1501,"line_end":1501,"column_start":5,"column_end":16},"name":"LoadComplex","qualname":"::ir::instructions::Opcode::LoadComplex","value":"Opcode::LoadComplex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = load_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6755},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033289,"byte_end":11033294,"line_start":1504,"line_end":1504,"column_start":5,"column_end":10},"name":"Store","qualname":"::ir::instructions::Opcode::Store","value":"Opcode::Store","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `store MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6757},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033398,"byte_end":11033410,"line_start":1507,"line_end":1507,"column_start":5,"column_end":17},"name":"StoreComplex","qualname":"::ir::instructions::Opcode::StoreComplex","value":"Opcode::StoreComplex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `store_complex MemFlags, x, args, Offset`. (StoreComplex)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6759},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033465,"byte_end":11033471,"line_start":1509,"line_end":1509,"column_start":5,"column_end":11},"name":"Uload8","qualname":"::ir::instructions::Opcode::Uload8","value":"Opcode::Uload8","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uload8 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6761},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033544,"byte_end":11033557,"line_start":1511,"line_end":1511,"column_start":5,"column_end":18},"name":"Uload8Complex","qualname":"::ir::instructions::Opcode::Uload8Complex","value":"Opcode::Uload8Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uload8_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6763},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033612,"byte_end":11033618,"line_start":1513,"line_end":1513,"column_start":5,"column_end":11},"name":"Sload8","qualname":"::ir::instructions::Opcode::Sload8","value":"Opcode::Sload8","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sload8 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6765},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033691,"byte_end":11033704,"line_start":1515,"line_end":1515,"column_start":5,"column_end":18},"name":"Sload8Complex","qualname":"::ir::instructions::Opcode::Sload8Complex","value":"Opcode::Sload8Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sload8_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6767},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033792,"byte_end":11033799,"line_start":1518,"line_end":1518,"column_start":5,"column_end":12},"name":"Istore8","qualname":"::ir::instructions::Opcode::Istore8","value":"Opcode::Istore8","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `istore8 MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6769},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033905,"byte_end":11033919,"line_start":1521,"line_end":1521,"column_start":5,"column_end":19},"name":"Istore8Complex","qualname":"::ir::instructions::Opcode::Istore8Complex","value":"Opcode::Istore8Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `istore8_complex MemFlags, x, args, Offset`. (StoreComplex)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6771},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11033975,"byte_end":11033982,"line_start":1523,"line_end":1523,"column_start":5,"column_end":12},"name":"Uload16","qualname":"::ir::instructions::Opcode::Uload16","value":"Opcode::Uload16","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uload16 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6773},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034056,"byte_end":11034070,"line_start":1525,"line_end":1525,"column_start":5,"column_end":19},"name":"Uload16Complex","qualname":"::ir::instructions::Opcode::Uload16Complex","value":"Opcode::Uload16Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uload16_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6775},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034126,"byte_end":11034133,"line_start":1527,"line_end":1527,"column_start":5,"column_end":12},"name":"Sload16","qualname":"::ir::instructions::Opcode::Sload16","value":"Opcode::Sload16","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sload16 MemFlags, p, Offset`. (Load)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6777},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034207,"byte_end":11034221,"line_start":1529,"line_end":1529,"column_start":5,"column_end":19},"name":"Sload16Complex","qualname":"::ir::instructions::Opcode::Sload16Complex","value":"Opcode::Sload16Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sload16_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6779},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034310,"byte_end":11034318,"line_start":1532,"line_end":1532,"column_start":5,"column_end":13},"name":"Istore16","qualname":"::ir::instructions::Opcode::Istore16","value":"Opcode::Istore16","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `istore16 MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6781},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034425,"byte_end":11034440,"line_start":1535,"line_end":1535,"column_start":5,"column_end":20},"name":"Istore16Complex","qualname":"::ir::instructions::Opcode::Istore16Complex","value":"Opcode::Istore16Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `istore16_complex MemFlags, x, args, Offset`. (StoreComplex)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6783},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034528,"byte_end":11034535,"line_start":1538,"line_end":1538,"column_start":5,"column_end":12},"name":"Uload32","qualname":"::ir::instructions::Opcode::Uload32","value":"Opcode::Uload32","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uload32 MemFlags, p, Offset`. (Load)\n Type inferred from `p`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6785},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034609,"byte_end":11034623,"line_start":1540,"line_end":1540,"column_start":5,"column_end":19},"name":"Uload32Complex","qualname":"::ir::instructions::Opcode::Uload32Complex","value":"Opcode::Uload32Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uload32_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6787},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034711,"byte_end":11034718,"line_start":1543,"line_end":1543,"column_start":5,"column_end":12},"name":"Sload32","qualname":"::ir::instructions::Opcode::Sload32","value":"Opcode::Sload32","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sload32 MemFlags, p, Offset`. (Load)\n Type inferred from `p`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6789},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034792,"byte_end":11034806,"line_start":1545,"line_end":1545,"column_start":5,"column_end":19},"name":"Sload32Complex","qualname":"::ir::instructions::Opcode::Sload32Complex","value":"Opcode::Sload32Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sload32_complex MemFlags, args, Offset`. (LoadComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6791},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034895,"byte_end":11034903,"line_start":1548,"line_end":1548,"column_start":5,"column_end":13},"name":"Istore32","qualname":"::ir::instructions::Opcode::Istore32","value":"Opcode::Istore32","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `istore32 MemFlags, x, p, Offset`. (Store)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6793},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11034978,"byte_end":11034993,"line_start":1550,"line_end":1550,"column_start":5,"column_end":20},"name":"Istore32Complex","qualname":"::ir::instructions::Opcode::Istore32Complex","value":"Opcode::Istore32Complex","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `istore32_complex MemFlags, x, args, Offset`. (StoreComplex)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6795},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035048,"byte_end":11035057,"line_start":1552,"line_end":1552,"column_start":5,"column_end":14},"name":"StackLoad","qualname":"::ir::instructions::Opcode::StackLoad","value":"Opcode::StackLoad","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = stack_load SS, Offset`. (StackLoad)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6797},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035145,"byte_end":11035155,"line_start":1555,"line_end":1555,"column_start":5,"column_end":15},"name":"StackStore","qualname":"::ir::instructions::Opcode::StackStore","value":"Opcode::StackStore","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `stack_store x, SS, Offset`. (StackStore)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6799},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035213,"byte_end":11035222,"line_start":1557,"line_end":1557,"column_start":5,"column_end":14},"name":"StackAddr","qualname":"::ir::instructions::Opcode::StackAddr","value":"Opcode::StackAddr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `addr = stack_addr SS, Offset`. (StackLoad)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6801},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035278,"byte_end":11035289,"line_start":1559,"line_end":1559,"column_start":5,"column_end":16},"name":"GlobalValue","qualname":"::ir::instructions::Opcode::GlobalValue","value":"Opcode::GlobalValue","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = global_value GV`. (UnaryGlobalValue)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6803},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035345,"byte_end":11035356,"line_start":1561,"line_end":1561,"column_start":5,"column_end":16},"name":"SymbolValue","qualname":"::ir::instructions::Opcode::SymbolValue","value":"Opcode::SymbolValue","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = symbol_value GV`. (UnaryGlobalValue)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6805},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035412,"byte_end":11035420,"line_start":1563,"line_end":1563,"column_start":5,"column_end":13},"name":"HeapAddr","qualname":"::ir::instructions::Opcode::HeapAddr","value":"Opcode::HeapAddr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `addr = heap_addr H, p, Size`. (HeapAddr)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6807},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035469,"byte_end":11035481,"line_start":1565,"line_end":1565,"column_start":5,"column_end":17},"name":"GetPinnedReg","qualname":"::ir::instructions::Opcode::GetPinnedReg","value":"Opcode::GetPinnedReg","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `addr = get_pinned_reg`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6809},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035561,"byte_end":11035573,"line_start":1568,"line_end":1568,"column_start":5,"column_end":17},"name":"SetPinnedReg","qualname":"::ir::instructions::Opcode::SetPinnedReg","value":"Opcode::SetPinnedReg","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `set_pinned_reg addr`. (Unary)\n Type inferred from `addr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6811},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035633,"byte_end":11035642,"line_start":1570,"line_end":1570,"column_start":5,"column_end":14},"name":"TableAddr","qualname":"::ir::instructions::Opcode::TableAddr","value":"Opcode::TableAddr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `addr = table_addr T, p, Offset`. (TableAddr)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6813},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035683,"byte_end":11035689,"line_start":1572,"line_end":1572,"column_start":5,"column_end":11},"name":"Iconst","qualname":"::ir::instructions::Opcode::Iconst","value":"Opcode::Iconst","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = iconst N`. (UnaryImm)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6815},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035735,"byte_end":11035743,"line_start":1574,"line_end":1574,"column_start":5,"column_end":13},"name":"F32const","qualname":"::ir::instructions::Opcode::F32const","value":"Opcode::F32const","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = f32const N`. (UnaryIeee32)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6817},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035789,"byte_end":11035797,"line_start":1576,"line_end":1576,"column_start":5,"column_end":13},"name":"F64const","qualname":"::ir::instructions::Opcode::F64const","value":"Opcode::F64const","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = f64const N`. (UnaryIeee64)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6819},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035839,"byte_end":11035845,"line_start":1578,"line_end":1578,"column_start":5,"column_end":11},"name":"Bconst","qualname":"::ir::instructions::Opcode::Bconst","value":"Opcode::Bconst","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bconst N`. (UnaryBool)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6821},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035888,"byte_end":11035894,"line_start":1580,"line_end":1580,"column_start":5,"column_end":11},"name":"Vconst","qualname":"::ir::instructions::Opcode::Vconst","value":"Opcode::Vconst","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = vconst N`. (UnaryConst)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6823},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11035976,"byte_end":11035983,"line_start":1583,"line_end":1583,"column_start":5,"column_end":12},"name":"Shuffle","qualname":"::ir::instructions::Opcode::Shuffle","value":"Opcode::Shuffle","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = shuffle a, b, mask`. (Shuffle)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6825},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036019,"byte_end":11036023,"line_start":1585,"line_end":1585,"column_start":5,"column_end":9},"name":"Null","qualname":"::ir::instructions::Opcode::Null","value":"Opcode::Null","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = null`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6827},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036054,"byte_end":11036057,"line_start":1587,"line_end":1587,"column_start":5,"column_end":8},"name":"Nop","qualname":"::ir::instructions::Opcode::Nop","value":"Opcode::Nop","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `nop`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6829},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036135,"byte_end":11036141,"line_start":1590,"line_end":1590,"column_start":5,"column_end":11},"name":"Select","qualname":"::ir::instructions::Opcode::Select","value":"Opcode::Select","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = select c, x, y`. (Ternary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6831},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036199,"byte_end":11036207,"line_start":1592,"line_end":1592,"column_start":5,"column_end":13},"name":"Selectif","qualname":"::ir::instructions::Opcode::Selectif","value":"Opcode::Selectif","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = selectif cc, flags, x, y`. (IntSelect)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6833},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036288,"byte_end":11036297,"line_start":1595,"line_end":1595,"column_start":5,"column_end":14},"name":"Bitselect","qualname":"::ir::instructions::Opcode::Bitselect","value":"Opcode::Bitselect","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bitselect c, x, y`. (Ternary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6835},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036365,"byte_end":11036369,"line_start":1598,"line_end":1598,"column_start":5,"column_end":9},"name":"Copy","qualname":"::ir::instructions::Opcode::Copy","value":"Opcode::Copy","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = copy x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6837},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036438,"byte_end":11036443,"line_start":1601,"line_end":1601,"column_start":5,"column_end":10},"name":"Spill","qualname":"::ir::instructions::Opcode::Spill","value":"Opcode::Spill","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = spill x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6839},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036511,"byte_end":11036515,"line_start":1604,"line_end":1604,"column_start":5,"column_end":9},"name":"Fill","qualname":"::ir::instructions::Opcode::Fill","value":"Opcode::Fill","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fill x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6841},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036587,"byte_end":11036594,"line_start":1607,"line_end":1607,"column_start":5,"column_end":12},"name":"FillNop","qualname":"::ir::instructions::Opcode::FillNop","value":"Opcode::FillNop","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fill_nop x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6843},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036673,"byte_end":11036680,"line_start":1610,"line_end":1610,"column_start":5,"column_end":12},"name":"Regmove","qualname":"::ir::instructions::Opcode::Regmove","value":"Opcode::Regmove","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `regmove x, src, dst`. (RegMove)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6845},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036733,"byte_end":11036744,"line_start":1612,"line_end":1612,"column_start":5,"column_end":16},"name":"CopySpecial","qualname":"::ir::instructions::Opcode::CopySpecial","value":"Opcode::CopySpecial","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `copy_special src, dst`. (CopySpecial)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6847},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036793,"byte_end":11036802,"line_start":1614,"line_end":1614,"column_start":5,"column_end":14},"name":"CopyToSsa","qualname":"::ir::instructions::Opcode::CopyToSsa","value":"Opcode::CopyToSsa","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = copy_to_ssa src`. (CopyToSsa)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6849},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036874,"byte_end":11036881,"line_start":1617,"line_end":1617,"column_start":5,"column_end":12},"name":"CopyNop","qualname":"::ir::instructions::Opcode::CopyNop","value":"Opcode::CopyNop","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = copy_nop x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6851},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11036963,"byte_end":11036975,"line_start":1620,"line_end":1620,"column_start":5,"column_end":17},"name":"AdjustSpDown","qualname":"::ir::instructions::Opcode::AdjustSpDown","value":"Opcode::AdjustSpDown","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `adjust_sp_down delta`. (Unary)\n Type inferred from `delta`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6853},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037027,"byte_end":11037040,"line_start":1622,"line_end":1622,"column_start":5,"column_end":18},"name":"AdjustSpUpImm","qualname":"::ir::instructions::Opcode::AdjustSpUpImm","value":"Opcode::AdjustSpUpImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `adjust_sp_up_imm Offset`. (UnaryImm)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6855},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037094,"byte_end":11037109,"line_start":1624,"line_end":1624,"column_start":5,"column_end":20},"name":"AdjustSpDownImm","qualname":"::ir::instructions::Opcode::AdjustSpDownImm","value":"Opcode::AdjustSpDownImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `adjust_sp_down_imm Offset`. (UnaryImm)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6857},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037187,"byte_end":11037194,"line_start":1627,"line_end":1627,"column_start":5,"column_end":12},"name":"IfcmpSp","qualname":"::ir::instructions::Opcode::IfcmpSp","value":"Opcode::IfcmpSp","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `f = ifcmp_sp addr`. (Unary)\n Type inferred from `addr`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6859},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037274,"byte_end":11037282,"line_start":1630,"line_end":1630,"column_start":5,"column_end":13},"name":"Regspill","qualname":"::ir::instructions::Opcode::Regspill","value":"Opcode::Regspill","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `regspill x, src, SS`. (RegSpill)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6861},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037360,"byte_end":11037367,"line_start":1633,"line_end":1633,"column_start":5,"column_end":12},"name":"Regfill","qualname":"::ir::instructions::Opcode::Regfill","value":"Opcode::Regfill","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `regfill x, SS, dst`. (RegFill)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6863},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037410,"byte_end":11037419,"line_start":1635,"line_end":1635,"column_start":5,"column_end":14},"name":"Safepoint","qualname":"::ir::instructions::Opcode::Safepoint","value":"Opcode::Safepoint","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `safepoint args`. (MultiAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6865},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037494,"byte_end":11037500,"line_start":1638,"line_end":1638,"column_start":5,"column_end":11},"name":"Vsplit","qualname":"::ir::instructions::Opcode::Vsplit","value":"Opcode::Vsplit","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `lo, hi = vsplit x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6867},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037575,"byte_end":11037582,"line_start":1641,"line_end":1641,"column_start":5,"column_end":12},"name":"Vconcat","qualname":"::ir::instructions::Opcode::Vconcat","value":"Opcode::Vconcat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = vconcat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6869},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037661,"byte_end":11037668,"line_start":1644,"line_end":1644,"column_start":5,"column_end":12},"name":"Vselect","qualname":"::ir::instructions::Opcode::Vselect","value":"Opcode::Vselect","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = vselect c, x, y`. (Ternary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6871},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037741,"byte_end":11037749,"line_start":1647,"line_end":1647,"column_start":5,"column_end":13},"name":"VanyTrue","qualname":"::ir::instructions::Opcode::VanyTrue","value":"Opcode::VanyTrue","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `s = vany_true a`. (Unary)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6873},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037822,"byte_end":11037830,"line_start":1650,"line_end":1650,"column_start":5,"column_end":13},"name":"VallTrue","qualname":"::ir::instructions::Opcode::VallTrue","value":"Opcode::VallTrue","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `s = vall_true a`. (Unary)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6875},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037867,"byte_end":11037872,"line_start":1652,"line_end":1652,"column_start":5,"column_end":10},"name":"Splat","qualname":"::ir::instructions::Opcode::Splat","value":"Opcode::Splat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = splat x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6877},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11037959,"byte_end":11037969,"line_start":1655,"line_end":1655,"column_start":5,"column_end":15},"name":"Insertlane","qualname":"::ir::instructions::Opcode::Insertlane","value":"Opcode::Insertlane","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = insertlane x, Idx, y`. (InsertLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6879},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038055,"byte_end":11038066,"line_start":1658,"line_end":1658,"column_start":5,"column_end":16},"name":"Extractlane","qualname":"::ir::instructions::Opcode::Extractlane","value":"Opcode::Extractlane","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = extractlane x, Idx`. (ExtractLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6881},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038148,"byte_end":11038152,"line_start":1661,"line_end":1661,"column_start":5,"column_end":9},"name":"Icmp","qualname":"::ir::instructions::Opcode::Icmp","value":"Opcode::Icmp","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = icmp Cond, x, y`. (IntCompare)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6883},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038241,"byte_end":11038248,"line_start":1664,"line_end":1664,"column_start":5,"column_end":12},"name":"IcmpImm","qualname":"::ir::instructions::Opcode::IcmpImm","value":"Opcode::IcmpImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = icmp_imm Cond, x, Y`. (IntCompareImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6885},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038321,"byte_end":11038326,"line_start":1667,"line_end":1667,"column_start":5,"column_end":10},"name":"Ifcmp","qualname":"::ir::instructions::Opcode::Ifcmp","value":"Opcode::Ifcmp","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `f = ifcmp x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6887},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038406,"byte_end":11038414,"line_start":1670,"line_end":1670,"column_start":5,"column_end":13},"name":"IfcmpImm","qualname":"::ir::instructions::Opcode::IfcmpImm","value":"Opcode::IfcmpImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `f = ifcmp_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6889},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038486,"byte_end":11038490,"line_start":1673,"line_end":1673,"column_start":5,"column_end":9},"name":"Iadd","qualname":"::ir::instructions::Opcode::Iadd","value":"Opcode::Iadd","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = iadd x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6891},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038566,"byte_end":11038573,"line_start":1676,"line_end":1676,"column_start":5,"column_end":12},"name":"UaddSat","qualname":"::ir::instructions::Opcode::UaddSat","value":"Opcode::UaddSat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uadd_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6893},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038649,"byte_end":11038656,"line_start":1679,"line_end":1679,"column_start":5,"column_end":12},"name":"SaddSat","qualname":"::ir::instructions::Opcode::SaddSat","value":"Opcode::SaddSat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sadd_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6895},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038728,"byte_end":11038732,"line_start":1682,"line_end":1682,"column_start":5,"column_end":9},"name":"Isub","qualname":"::ir::instructions::Opcode::Isub","value":"Opcode::Isub","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = isub x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6897},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038808,"byte_end":11038815,"line_start":1685,"line_end":1685,"column_start":5,"column_end":12},"name":"UsubSat","qualname":"::ir::instructions::Opcode::UsubSat","value":"Opcode::UsubSat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = usub_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6899},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038891,"byte_end":11038898,"line_start":1688,"line_end":1688,"column_start":5,"column_end":12},"name":"SsubSat","qualname":"::ir::instructions::Opcode::SsubSat","value":"Opcode::SsubSat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ssub_sat x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6901},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11038966,"byte_end":11038970,"line_start":1691,"line_end":1691,"column_start":5,"column_end":9},"name":"Ineg","qualname":"::ir::instructions::Opcode::Ineg","value":"Opcode::Ineg","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ineg x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6903},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039042,"byte_end":11039046,"line_start":1694,"line_end":1694,"column_start":5,"column_end":9},"name":"Imul","qualname":"::ir::instructions::Opcode::Imul","value":"Opcode::Imul","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = imul x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6905},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039120,"byte_end":11039126,"line_start":1697,"line_end":1697,"column_start":5,"column_end":11},"name":"Umulhi","qualname":"::ir::instructions::Opcode::Umulhi","value":"Opcode::Umulhi","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = umulhi x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6907},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039200,"byte_end":11039206,"line_start":1700,"line_end":1700,"column_start":5,"column_end":11},"name":"Smulhi","qualname":"::ir::instructions::Opcode::Smulhi","value":"Opcode::Smulhi","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = smulhi x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6909},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039278,"byte_end":11039282,"line_start":1703,"line_end":1703,"column_start":5,"column_end":9},"name":"Udiv","qualname":"::ir::instructions::Opcode::Udiv","value":"Opcode::Udiv","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = udiv x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6911},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039354,"byte_end":11039358,"line_start":1706,"line_end":1706,"column_start":5,"column_end":9},"name":"Sdiv","qualname":"::ir::instructions::Opcode::Sdiv","value":"Opcode::Sdiv","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sdiv x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6913},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039430,"byte_end":11039434,"line_start":1709,"line_end":1709,"column_start":5,"column_end":9},"name":"Urem","qualname":"::ir::instructions::Opcode::Urem","value":"Opcode::Urem","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = urem x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6915},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039506,"byte_end":11039510,"line_start":1712,"line_end":1712,"column_start":5,"column_end":9},"name":"Srem","qualname":"::ir::instructions::Opcode::Srem","value":"Opcode::Srem","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = srem x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6917},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039589,"byte_end":11039596,"line_start":1715,"line_end":1715,"column_start":5,"column_end":12},"name":"IaddImm","qualname":"::ir::instructions::Opcode::IaddImm","value":"Opcode::IaddImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = iadd_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6919},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039675,"byte_end":11039682,"line_start":1718,"line_end":1718,"column_start":5,"column_end":12},"name":"ImulImm","qualname":"::ir::instructions::Opcode::ImulImm","value":"Opcode::ImulImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = imul_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6921},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039761,"byte_end":11039768,"line_start":1721,"line_end":1721,"column_start":5,"column_end":12},"name":"UdivImm","qualname":"::ir::instructions::Opcode::UdivImm","value":"Opcode::UdivImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = udiv_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6923},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039847,"byte_end":11039854,"line_start":1724,"line_end":1724,"column_start":5,"column_end":12},"name":"SdivImm","qualname":"::ir::instructions::Opcode::SdivImm","value":"Opcode::SdivImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sdiv_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6925},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11039933,"byte_end":11039940,"line_start":1727,"line_end":1727,"column_start":5,"column_end":12},"name":"UremImm","qualname":"::ir::instructions::Opcode::UremImm","value":"Opcode::UremImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = urem_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6927},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040019,"byte_end":11040026,"line_start":1730,"line_end":1730,"column_start":5,"column_end":12},"name":"SremImm","qualname":"::ir::instructions::Opcode::SremImm","value":"Opcode::SremImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = srem_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6929},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040106,"byte_end":11040114,"line_start":1733,"line_end":1733,"column_start":5,"column_end":13},"name":"IrsubImm","qualname":"::ir::instructions::Opcode::IrsubImm","value":"Opcode::IrsubImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = irsub_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6931},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040197,"byte_end":11040204,"line_start":1736,"line_end":1736,"column_start":5,"column_end":12},"name":"IaddCin","qualname":"::ir::instructions::Opcode::IaddCin","value":"Opcode::IaddCin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = iadd_cin x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6933},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040289,"byte_end":11040298,"line_start":1739,"line_end":1739,"column_start":5,"column_end":14},"name":"IaddIfcin","qualname":"::ir::instructions::Opcode::IaddIfcin","value":"Opcode::IaddIfcin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = iadd_ifcin x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6935},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040382,"byte_end":11040390,"line_start":1742,"line_end":1742,"column_start":5,"column_end":13},"name":"IaddCout","qualname":"::ir::instructions::Opcode::IaddCout","value":"Opcode::IaddCout","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_cout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6937},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040476,"byte_end":11040486,"line_start":1745,"line_end":1745,"column_start":5,"column_end":15},"name":"IaddIfcout","qualname":"::ir::instructions::Opcode::IaddIfcout","value":"Opcode::IaddIfcout","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_ifcout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6939},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040578,"byte_end":11040587,"line_start":1748,"line_end":1748,"column_start":5,"column_end":14},"name":"IaddCarry","qualname":"::ir::instructions::Opcode::IaddCarry","value":"Opcode::IaddCarry","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_carry x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6941},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040681,"byte_end":11040692,"line_start":1751,"line_end":1751,"column_start":5,"column_end":16},"name":"IaddIfcarry","qualname":"::ir::instructions::Opcode::IaddIfcarry","value":"Opcode::IaddIfcarry","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, c_out = iadd_ifcarry x, y, c_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6943},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040775,"byte_end":11040782,"line_start":1754,"line_end":1754,"column_start":5,"column_end":12},"name":"IsubBin","qualname":"::ir::instructions::Opcode::IsubBin","value":"Opcode::IsubBin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = isub_bin x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6945},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040867,"byte_end":11040876,"line_start":1757,"line_end":1757,"column_start":5,"column_end":14},"name":"IsubIfbin","qualname":"::ir::instructions::Opcode::IsubIfbin","value":"Opcode::IsubIfbin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = isub_ifbin x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6947},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11040960,"byte_end":11040968,"line_start":1760,"line_end":1760,"column_start":5,"column_end":13},"name":"IsubBout","qualname":"::ir::instructions::Opcode::IsubBout","value":"Opcode::IsubBout","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, b_out = isub_bout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6949},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041054,"byte_end":11041064,"line_start":1763,"line_end":1763,"column_start":5,"column_end":15},"name":"IsubIfbout","qualname":"::ir::instructions::Opcode::IsubIfbout","value":"Opcode::IsubIfbout","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, b_out = isub_ifbout x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6951},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041157,"byte_end":11041167,"line_start":1766,"line_end":1766,"column_start":5,"column_end":15},"name":"IsubBorrow","qualname":"::ir::instructions::Opcode::IsubBorrow","value":"Opcode::IsubBorrow","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, b_out = isub_borrow x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6953},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041262,"byte_end":11041274,"line_start":1769,"line_end":1769,"column_start":5,"column_end":17},"name":"IsubIfborrow","qualname":"::ir::instructions::Opcode::IsubIfborrow","value":"Opcode::IsubIfborrow","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a, b_out = isub_ifborrow x, y, b_in`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6955},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041346,"byte_end":11041350,"line_start":1772,"line_end":1772,"column_start":5,"column_end":9},"name":"Band","qualname":"::ir::instructions::Opcode::Band","value":"Opcode::Band","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = band x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6957},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041421,"byte_end":11041424,"line_start":1775,"line_end":1775,"column_start":5,"column_end":8},"name":"Bor","qualname":"::ir::instructions::Opcode::Bor","value":"Opcode::Bor","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bor x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6959},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041496,"byte_end":11041500,"line_start":1778,"line_end":1778,"column_start":5,"column_end":9},"name":"Bxor","qualname":"::ir::instructions::Opcode::Bxor","value":"Opcode::Bxor","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bxor x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6961},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041568,"byte_end":11041572,"line_start":1781,"line_end":1781,"column_start":5,"column_end":9},"name":"Bnot","qualname":"::ir::instructions::Opcode::Bnot","value":"Opcode::Bnot","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bnot x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6963},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041648,"byte_end":11041655,"line_start":1784,"line_end":1784,"column_start":5,"column_end":12},"name":"BandNot","qualname":"::ir::instructions::Opcode::BandNot","value":"Opcode::BandNot","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = band_not x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6965},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041730,"byte_end":11041736,"line_start":1787,"line_end":1787,"column_start":5,"column_end":11},"name":"BorNot","qualname":"::ir::instructions::Opcode::BorNot","value":"Opcode::BorNot","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bor_not x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6967},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041812,"byte_end":11041819,"line_start":1790,"line_end":1790,"column_start":5,"column_end":12},"name":"BxorNot","qualname":"::ir::instructions::Opcode::BxorNot","value":"Opcode::BxorNot","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bxor_not x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6969},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041898,"byte_end":11041905,"line_start":1793,"line_end":1793,"column_start":5,"column_end":12},"name":"BandImm","qualname":"::ir::instructions::Opcode::BandImm","value":"Opcode::BandImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = band_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6971},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11041983,"byte_end":11041989,"line_start":1796,"line_end":1796,"column_start":5,"column_end":11},"name":"BorImm","qualname":"::ir::instructions::Opcode::BorImm","value":"Opcode::BorImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bor_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6973},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042068,"byte_end":11042075,"line_start":1799,"line_end":1799,"column_start":5,"column_end":12},"name":"BxorImm","qualname":"::ir::instructions::Opcode::BxorImm","value":"Opcode::BxorImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bxor_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6975},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042147,"byte_end":11042151,"line_start":1802,"line_end":1802,"column_start":5,"column_end":9},"name":"Rotl","qualname":"::ir::instructions::Opcode::Rotl","value":"Opcode::Rotl","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = rotl x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6977},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042223,"byte_end":11042227,"line_start":1805,"line_end":1805,"column_start":5,"column_end":9},"name":"Rotr","qualname":"::ir::instructions::Opcode::Rotr","value":"Opcode::Rotr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = rotr x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6979},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042306,"byte_end":11042313,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12},"name":"RotlImm","qualname":"::ir::instructions::Opcode::RotlImm","value":"Opcode::RotlImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = rotl_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6981},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042392,"byte_end":11042399,"line_start":1811,"line_end":1811,"column_start":5,"column_end":12},"name":"RotrImm","qualname":"::ir::instructions::Opcode::RotrImm","value":"Opcode::RotrImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = rotr_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6983},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042471,"byte_end":11042475,"line_start":1814,"line_end":1814,"column_start":5,"column_end":9},"name":"Ishl","qualname":"::ir::instructions::Opcode::Ishl","value":"Opcode::Ishl","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ishl x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6985},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042547,"byte_end":11042551,"line_start":1817,"line_end":1817,"column_start":5,"column_end":9},"name":"Ushr","qualname":"::ir::instructions::Opcode::Ushr","value":"Opcode::Ushr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ushr x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6987},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042623,"byte_end":11042627,"line_start":1820,"line_end":1820,"column_start":5,"column_end":9},"name":"Sshr","qualname":"::ir::instructions::Opcode::Sshr","value":"Opcode::Sshr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sshr x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6989},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042706,"byte_end":11042713,"line_start":1823,"line_end":1823,"column_start":5,"column_end":12},"name":"IshlImm","qualname":"::ir::instructions::Opcode::IshlImm","value":"Opcode::IshlImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ishl_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6991},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042792,"byte_end":11042799,"line_start":1826,"line_end":1826,"column_start":5,"column_end":12},"name":"UshrImm","qualname":"::ir::instructions::Opcode::UshrImm","value":"Opcode::UshrImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ushr_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6993},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042878,"byte_end":11042885,"line_start":1829,"line_end":1829,"column_start":5,"column_end":12},"name":"SshrImm","qualname":"::ir::instructions::Opcode::SshrImm","value":"Opcode::SshrImm","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sshr_imm x, Y`. (BinaryImm)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6995},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11042955,"byte_end":11042961,"line_start":1832,"line_end":1832,"column_start":5,"column_end":11},"name":"Bitrev","qualname":"::ir::instructions::Opcode::Bitrev","value":"Opcode::Bitrev","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bitrev x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6997},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043028,"byte_end":11043031,"line_start":1835,"line_end":1835,"column_start":5,"column_end":8},"name":"Clz","qualname":"::ir::instructions::Opcode::Clz","value":"Opcode::Clz","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = clz x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6999},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043098,"byte_end":11043101,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8},"name":"Cls","qualname":"::ir::instructions::Opcode::Cls","value":"Opcode::Cls","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = cls x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7001},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043168,"byte_end":11043171,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8},"name":"Ctz","qualname":"::ir::instructions::Opcode::Ctz","value":"Opcode::Ctz","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ctz x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7003},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043241,"byte_end":11043247,"line_start":1844,"line_end":1844,"column_start":5,"column_end":11},"name":"Popcnt","qualname":"::ir::instructions::Opcode::Popcnt","value":"Opcode::Popcnt","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = popcnt x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7005},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043331,"byte_end":11043335,"line_start":1847,"line_end":1847,"column_start":5,"column_end":9},"name":"Fcmp","qualname":"::ir::instructions::Opcode::Fcmp","value":"Opcode::Fcmp","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcmp Cond, x, y`. (FloatCompare)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7007},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043408,"byte_end":11043413,"line_start":1850,"line_end":1850,"column_start":5,"column_end":10},"name":"Ffcmp","qualname":"::ir::instructions::Opcode::Ffcmp","value":"Opcode::Ffcmp","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `f = ffcmp x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7009},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043485,"byte_end":11043489,"line_start":1853,"line_end":1853,"column_start":5,"column_end":9},"name":"Fadd","qualname":"::ir::instructions::Opcode::Fadd","value":"Opcode::Fadd","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fadd x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7011},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043561,"byte_end":11043565,"line_start":1856,"line_end":1856,"column_start":5,"column_end":9},"name":"Fsub","qualname":"::ir::instructions::Opcode::Fsub","value":"Opcode::Fsub","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fsub x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7013},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043637,"byte_end":11043641,"line_start":1859,"line_end":1859,"column_start":5,"column_end":9},"name":"Fmul","qualname":"::ir::instructions::Opcode::Fmul","value":"Opcode::Fmul","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fmul x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7015},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043713,"byte_end":11043717,"line_start":1862,"line_end":1862,"column_start":5,"column_end":9},"name":"Fdiv","qualname":"::ir::instructions::Opcode::Fdiv","value":"Opcode::Fdiv","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fdiv x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7017},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043785,"byte_end":11043789,"line_start":1865,"line_end":1865,"column_start":5,"column_end":9},"name":"Sqrt","qualname":"::ir::instructions::Opcode::Sqrt","value":"Opcode::Sqrt","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sqrt x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7019},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043864,"byte_end":11043867,"line_start":1868,"line_end":1868,"column_start":5,"column_end":8},"name":"Fma","qualname":"::ir::instructions::Opcode::Fma","value":"Opcode::Fma","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fma x, y, z`. (Ternary)\n Type inferred from `y`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7021},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11043935,"byte_end":11043939,"line_start":1871,"line_end":1871,"column_start":5,"column_end":9},"name":"Fneg","qualname":"::ir::instructions::Opcode::Fneg","value":"Opcode::Fneg","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fneg x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7023},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044007,"byte_end":11044011,"line_start":1874,"line_end":1874,"column_start":5,"column_end":9},"name":"Fabs","qualname":"::ir::instructions::Opcode::Fabs","value":"Opcode::Fabs","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fabs x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7025},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044088,"byte_end":11044097,"line_start":1877,"line_end":1877,"column_start":5,"column_end":14},"name":"Fcopysign","qualname":"::ir::instructions::Opcode::Fcopysign","value":"Opcode::Fcopysign","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcopysign x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7027},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044169,"byte_end":11044173,"line_start":1880,"line_end":1880,"column_start":5,"column_end":9},"name":"Fmin","qualname":"::ir::instructions::Opcode::Fmin","value":"Opcode::Fmin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fmin x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7029},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044245,"byte_end":11044249,"line_start":1883,"line_end":1883,"column_start":5,"column_end":9},"name":"Fmax","qualname":"::ir::instructions::Opcode::Fmax","value":"Opcode::Fmax","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fmax x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7031},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044317,"byte_end":11044321,"line_start":1886,"line_end":1886,"column_start":5,"column_end":9},"name":"Ceil","qualname":"::ir::instructions::Opcode::Ceil","value":"Opcode::Ceil","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ceil x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7033},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044390,"byte_end":11044395,"line_start":1889,"line_end":1889,"column_start":5,"column_end":10},"name":"Floor","qualname":"::ir::instructions::Opcode::Floor","value":"Opcode::Floor","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = floor x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7035},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044464,"byte_end":11044469,"line_start":1892,"line_end":1892,"column_start":5,"column_end":10},"name":"Trunc","qualname":"::ir::instructions::Opcode::Trunc","value":"Opcode::Trunc","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = trunc x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7037},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044540,"byte_end":11044547,"line_start":1895,"line_end":1895,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::ir::instructions::Opcode::Nearest","value":"Opcode::Nearest","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = nearest x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7039},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044618,"byte_end":11044624,"line_start":1898,"line_end":1898,"column_start":5,"column_end":11},"name":"IsNull","qualname":"::ir::instructions::Opcode::IsNull","value":"Opcode::IsNull","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = is_null x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7041},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044698,"byte_end":11044707,"line_start":1901,"line_end":1901,"column_start":5,"column_end":14},"name":"IsInvalid","qualname":"::ir::instructions::Opcode::IsInvalid","value":"Opcode::IsInvalid","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = is_invalid x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7043},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044753,"byte_end":11044759,"line_start":1903,"line_end":1903,"column_start":5,"column_end":11},"name":"Trueif","qualname":"::ir::instructions::Opcode::Trueif","value":"Opcode::Trueif","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = trueif Cond, f`. (IntCond)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7045},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044807,"byte_end":11044813,"line_start":1905,"line_end":1905,"column_start":5,"column_end":11},"name":"Trueff","qualname":"::ir::instructions::Opcode::Trueff","value":"Opcode::Trueff","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = trueff Cond, f`. (FloatCond)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7047},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044852,"byte_end":11044859,"line_start":1907,"line_end":1907,"column_start":5,"column_end":12},"name":"Bitcast","qualname":"::ir::instructions::Opcode::Bitcast","value":"Opcode::Bitcast","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bitcast x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7049},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044902,"byte_end":11044912,"line_start":1909,"line_end":1909,"column_start":5,"column_end":15},"name":"RawBitcast","qualname":"::ir::instructions::Opcode::RawBitcast","value":"Opcode::RawBitcast","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = raw_bitcast x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7051},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11044960,"byte_end":11044974,"line_start":1911,"line_end":1911,"column_start":5,"column_end":19},"name":"ScalarToVector","qualname":"::ir::instructions::Opcode::ScalarToVector","value":"Opcode::ScalarToVector","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = scalar_to_vector s`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7053},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045013,"byte_end":11045020,"line_start":1913,"line_end":1913,"column_start":5,"column_end":12},"name":"Breduce","qualname":"::ir::instructions::Opcode::Breduce","value":"Opcode::Breduce","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = breduce x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7055},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045059,"byte_end":11045066,"line_start":1915,"line_end":1915,"column_start":5,"column_end":12},"name":"Bextend","qualname":"::ir::instructions::Opcode::Bextend","value":"Opcode::Bextend","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bextend x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7057},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045102,"byte_end":11045106,"line_start":1917,"line_end":1917,"column_start":5,"column_end":9},"name":"Bint","qualname":"::ir::instructions::Opcode::Bint","value":"Opcode::Bint","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7059},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045143,"byte_end":11045148,"line_start":1919,"line_end":1919,"column_start":5,"column_end":10},"name":"Bmask","qualname":"::ir::instructions::Opcode::Bmask","value":"Opcode::Bmask","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = bmask x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7061},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045187,"byte_end":11045194,"line_start":1921,"line_end":1921,"column_start":5,"column_end":12},"name":"Ireduce","qualname":"::ir::instructions::Opcode::Ireduce","value":"Opcode::Ireduce","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = ireduce x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7063},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045233,"byte_end":11045240,"line_start":1923,"line_end":1923,"column_start":5,"column_end":12},"name":"Uextend","qualname":"::ir::instructions::Opcode::Uextend","value":"Opcode::Uextend","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = uextend x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7065},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045279,"byte_end":11045286,"line_start":1925,"line_end":1925,"column_start":5,"column_end":12},"name":"Sextend","qualname":"::ir::instructions::Opcode::Sextend","value":"Opcode::Sextend","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = sextend x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7067},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045326,"byte_end":11045334,"line_start":1927,"line_end":1927,"column_start":5,"column_end":13},"name":"Fpromote","qualname":"::ir::instructions::Opcode::Fpromote","value":"Opcode::Fpromote","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fpromote x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7069},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045373,"byte_end":11045380,"line_start":1929,"line_end":1929,"column_start":5,"column_end":12},"name":"Fdemote","qualname":"::ir::instructions::Opcode::Fdemote","value":"Opcode::Fdemote","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fdemote x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7071},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045424,"byte_end":11045434,"line_start":1931,"line_end":1931,"column_start":5,"column_end":15},"name":"FcvtToUint","qualname":"::ir::instructions::Opcode::FcvtToUint","value":"Opcode::FcvtToUint","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcvt_to_uint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7073},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045482,"byte_end":11045495,"line_start":1933,"line_end":1933,"column_start":5,"column_end":18},"name":"FcvtToUintSat","qualname":"::ir::instructions::Opcode::FcvtToUintSat","value":"Opcode::FcvtToUintSat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcvt_to_uint_sat x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7075},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045539,"byte_end":11045549,"line_start":1935,"line_end":1935,"column_start":5,"column_end":15},"name":"FcvtToSint","qualname":"::ir::instructions::Opcode::FcvtToSint","value":"Opcode::FcvtToSint","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcvt_to_sint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7077},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045597,"byte_end":11045610,"line_start":1937,"line_end":1937,"column_start":5,"column_end":18},"name":"FcvtToSintSat","qualname":"::ir::instructions::Opcode::FcvtToSintSat","value":"Opcode::FcvtToSintSat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcvt_to_sint_sat x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7079},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045656,"byte_end":11045668,"line_start":1939,"line_end":1939,"column_start":5,"column_end":17},"name":"FcvtFromUint","qualname":"::ir::instructions::Opcode::FcvtFromUint","value":"Opcode::FcvtFromUint","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcvt_from_uint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7081},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045714,"byte_end":11045726,"line_start":1941,"line_end":1941,"column_start":5,"column_end":17},"name":"FcvtFromSint","qualname":"::ir::instructions::Opcode::FcvtFromSint","value":"Opcode::FcvtFromSint","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = fcvt_from_sint x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7083},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045801,"byte_end":11045807,"line_start":1944,"line_end":1944,"column_start":5,"column_end":11},"name":"Isplit","qualname":"::ir::instructions::Opcode::Isplit","value":"Opcode::Isplit","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `lo, hi = isplit x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7085},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045885,"byte_end":11045892,"line_start":1947,"line_end":1947,"column_start":5,"column_end":12},"name":"Iconcat","qualname":"::ir::instructions::Opcode::Iconcat","value":"Opcode::Iconcat","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = iconcat lo, hi`. (Binary)\n Type inferred from `lo`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7087},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11045985,"byte_end":11045996,"line_start":1950,"line_end":1950,"column_start":5,"column_end":16},"name":"X86Udivmodx","qualname":"::ir::instructions::Opcode::X86Udivmodx","value":"Opcode::X86Udivmodx","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `q, r = x86_udivmodx nlo, nhi, d`. (Ternary)\n Type inferred from `nhi`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7089},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046089,"byte_end":11046100,"line_start":1953,"line_end":1953,"column_start":5,"column_end":16},"name":"X86Sdivmodx","qualname":"::ir::instructions::Opcode::X86Sdivmodx","value":"Opcode::X86Sdivmodx","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `q, r = x86_sdivmodx nlo, nhi, d`. (Ternary)\n Type inferred from `nhi`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7091},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046197,"byte_end":11046205,"line_start":1956,"line_end":1956,"column_start":5,"column_end":13},"name":"X86Umulx","qualname":"::ir::instructions::Opcode::X86Umulx","value":"Opcode::X86Umulx","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `resLo, resHi = x86_umulx argL, argR`. (Binary)\n Type inferred from `argL`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7093},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046302,"byte_end":11046310,"line_start":1959,"line_end":1959,"column_start":5,"column_end":13},"name":"X86Smulx","qualname":"::ir::instructions::Opcode::X86Smulx","value":"Opcode::X86Smulx","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `resLo, resHi = x86_smulx argL, argR`. (Binary)\n Type inferred from `argL`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7095},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046353,"byte_end":11046363,"line_start":1961,"line_end":1961,"column_start":5,"column_end":15},"name":"X86Cvtt2si","qualname":"::ir::instructions::Opcode::X86Cvtt2si","value":"Opcode::X86Cvtt2si","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_cvtt2si x`. (Unary)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7097},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046439,"byte_end":11046446,"line_start":1964,"line_end":1964,"column_start":5,"column_end":12},"name":"X86Fmin","qualname":"::ir::instructions::Opcode::X86Fmin","value":"Opcode::X86Fmin","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_fmin x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7099},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046522,"byte_end":11046529,"line_start":1967,"line_end":1967,"column_start":5,"column_end":12},"name":"X86Fmax","qualname":"::ir::instructions::Opcode::X86Fmax","value":"Opcode::X86Fmax","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_fmax x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7101},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046597,"byte_end":11046604,"line_start":1970,"line_end":1970,"column_start":5,"column_end":12},"name":"X86Push","qualname":"::ir::instructions::Opcode::X86Push","value":"Opcode::X86Push","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `x86_push x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7103},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046643,"byte_end":11046649,"line_start":1972,"line_end":1972,"column_start":5,"column_end":11},"name":"X86Pop","qualname":"::ir::instructions::Opcode::X86Pop","value":"Opcode::X86Pop","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `x = x86_pop`. (NullAry)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7105},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046728,"byte_end":11046734,"line_start":1975,"line_end":1975,"column_start":5,"column_end":11},"name":"X86Bsr","qualname":"::ir::instructions::Opcode::X86Bsr","value":"Opcode::X86Bsr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `y, rflags = x86_bsr x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7107},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046813,"byte_end":11046819,"line_start":1978,"line_end":1978,"column_start":5,"column_end":11},"name":"X86Bsf","qualname":"::ir::instructions::Opcode::X86Bsf","value":"Opcode::X86Bsf","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `y, rflags = x86_bsf x`. (Unary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7109},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046902,"byte_end":11046911,"line_start":1981,"line_end":1981,"column_start":5,"column_end":14},"name":"X86Pshufd","qualname":"::ir::instructions::Opcode::X86Pshufd","value":"Opcode::X86Pshufd","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pshufd a, i`. (ExtractLane)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7111},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11046989,"byte_end":11046998,"line_start":1984,"line_end":1984,"column_start":5,"column_end":14},"name":"X86Pshufb","qualname":"::ir::instructions::Opcode::X86Pshufb","value":"Opcode::X86Pshufb","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pshufb a, b`. (Binary)\n Type inferred from `a`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7113},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047082,"byte_end":11047090,"line_start":1987,"line_end":1987,"column_start":5,"column_end":13},"name":"X86Pextr","qualname":"::ir::instructions::Opcode::X86Pextr","value":"Opcode::X86Pextr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pextr x, Idx`. (ExtractLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7115},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047176,"byte_end":11047184,"line_start":1990,"line_end":1990,"column_start":5,"column_end":13},"name":"X86Pinsr","qualname":"::ir::instructions::Opcode::X86Pinsr","value":"Opcode::X86Pinsr","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pinsr x, Idx, y`. (InsertLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7117},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047273,"byte_end":11047284,"line_start":1993,"line_end":1993,"column_start":5,"column_end":16},"name":"X86Insertps","qualname":"::ir::instructions::Opcode::X86Insertps","value":"Opcode::X86Insertps","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_insertps x, Idx, y`. (InsertLane)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7119},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047361,"byte_end":11047369,"line_start":1996,"line_end":1996,"column_start":5,"column_end":13},"name":"X86Movsd","qualname":"::ir::instructions::Opcode::X86Movsd","value":"Opcode::X86Movsd","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_movsd x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7121},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047448,"byte_end":11047458,"line_start":1999,"line_end":1999,"column_start":5,"column_end":15},"name":"X86Movlhps","qualname":"::ir::instructions::Opcode::X86Movlhps","value":"Opcode::X86Movlhps","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_movlhps x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7123},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047534,"byte_end":11047541,"line_start":2002,"line_end":2002,"column_start":5,"column_end":12},"name":"X86Psll","qualname":"::ir::instructions::Opcode::X86Psll","value":"Opcode::X86Psll","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_psll x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7125},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047617,"byte_end":11047624,"line_start":2005,"line_end":2005,"column_start":5,"column_end":12},"name":"X86Psrl","qualname":"::ir::instructions::Opcode::X86Psrl","value":"Opcode::X86Psrl","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_psrl x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7127},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047700,"byte_end":11047707,"line_start":2008,"line_end":2008,"column_start":5,"column_end":12},"name":"X86Psra","qualname":"::ir::instructions::Opcode::X86Psra","value":"Opcode::X86Psra","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_psra x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7129},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047784,"byte_end":11047792,"line_start":2011,"line_end":2011,"column_start":5,"column_end":13},"name":"X86Ptest","qualname":"::ir::instructions::Opcode::X86Ptest","value":"Opcode::X86Ptest","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `f = x86_ptest x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7131},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047869,"byte_end":11047877,"line_start":2014,"line_end":2014,"column_start":5,"column_end":13},"name":"X86Pmaxs","qualname":"::ir::instructions::Opcode::X86Pmaxs","value":"Opcode::X86Pmaxs","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pmaxs x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7133},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11047954,"byte_end":11047962,"line_start":2017,"line_end":2017,"column_start":5,"column_end":13},"name":"X86Pmaxu","qualname":"::ir::instructions::Opcode::X86Pmaxu","value":"Opcode::X86Pmaxu","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pmaxu x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7135},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11048039,"byte_end":11048047,"line_start":2020,"line_end":2020,"column_start":5,"column_end":13},"name":"X86Pmins","qualname":"::ir::instructions::Opcode::X86Pmins","value":"Opcode::X86Pmins","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pmins x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7137},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11048124,"byte_end":11048132,"line_start":2023,"line_end":2023,"column_start":5,"column_end":13},"name":"X86Pminu","qualname":"::ir::instructions::Opcode::X86Pminu","value":"Opcode::X86Pminu","parent":{"krate":0,"index":6693},"children":[],"decl_id":null,"docs":" `a = x86_pminu x, y`. (Binary)\n Type inferred from `x`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6693},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11031006,"byte_end":11031012,"line_start":1427,"line_end":1427,"column_start":10,"column_end":16},"name":"Opcode","qualname":"::ir::instructions::Opcode","value":"Opcode::{Jump, Fallthrough, Brz, Brnz, BrIcmp, Brif, Brff, BrTable, JumpTableEntry, JumpTableBase, IndirectJumpTableBr, Debugtrap, Trap, Trapz, ResumableTrap, Trapnz, Trapif, Trapff, Return, FallthroughReturn, Call, CallIndirect, FuncAddr, Imin, Umin, Imax, Umax, AvgRound, Load, LoadComplex, Store, StoreComplex, Uload8, Uload8Complex, Sload8, Sload8Complex, Istore8, Istore8Complex, Uload16, Uload16Complex, Sload16, Sload16Complex, Istore16, Istore16Complex, Uload32, Uload32Complex, Sload32, Sload32Complex, Istore32, Istore32Complex, StackLoad, StackStore, StackAddr, GlobalValue, SymbolValue, HeapAddr, GetPinnedReg, SetPinnedReg, TableAddr, Iconst, F32const, F64const, Bconst, Vconst, Shuffle, Null, Nop, Select, Selectif, Bitselect, Copy, Spill, Fill, FillNop, Regmove, CopySpecial, CopyToSsa, CopyNop, AdjustSpDown, AdjustSpUpImm, AdjustSpDownImm, IfcmpSp, Regspill, Regfill, Safepoint, Vsplit, Vconcat, Vselect, VanyTrue, VallTrue, Splat, Insertlane, Extractlane, Icmp, IcmpImm, Ifcmp, IfcmpImm, Iadd, UaddSat, SaddSat, Isub, UsubSat, SsubSat, Ineg, Imul, Umulhi, Smulhi, Udiv, Sdiv, Urem, Srem, IaddImm, ImulImm, UdivImm, SdivImm, UremImm, SremImm, IrsubImm, IaddCin, IaddIfcin, IaddCout, IaddIfcout, IaddCarry, IaddIfcarry, IsubBin, IsubIfbin, IsubBout, IsubIfbout, IsubBorrow, IsubIfborrow, Band, Bor, Bxor, Bnot, BandNot, BorNot, BxorNot, BandImm, BorImm, BxorImm, Rotl, Rotr, RotlImm, RotrImm, Ishl, Ushr, Sshr, IshlImm, UshrImm, SshrImm, Bitrev, Clz, Cls, Ctz, Popcnt, Fcmp, Ffcmp, Fadd, Fsub, Fmul, Fdiv, Sqrt, Fma, Fneg, Fabs, Fcopysign, Fmin, Fmax, Ceil, Floor, Trunc, Nearest, IsNull, IsInvalid, Trueif, Trueff, Bitcast, RawBitcast, ScalarToVector, Breduce, Bextend, Bint, Bmask, Ireduce, Uextend, Sextend, Fpromote, Fdemote, FcvtToUint, FcvtToUintSat, FcvtToSint, FcvtToSintSat, FcvtFromUint, FcvtFromSint, Isplit, Iconcat, X86Udivmodx, X86Sdivmodx, X86Umulx, X86Smulx, X86Cvtt2si, X86Fmin, X86Fmax, X86Push, X86Pop, X86Bsr, X86Bsf, X86Pshufd, X86Pshufb, X86Pextr, X86Pinsr, X86Insertps, X86Movsd, X86Movlhps, X86Psll, X86Psrl, X86Psra, X86Ptest, X86Pmaxs, X86Pmaxu, X86Pmins, X86Pminu}","parent":null,"children":[{"krate":0,"index":6694},{"krate":0,"index":6697},{"krate":0,"index":6699},{"krate":0,"index":6701},{"krate":0,"index":6703},{"krate":0,"index":6705},{"krate":0,"index":6707},{"krate":0,"index":6709},{"krate":0,"index":6711},{"krate":0,"index":6713},{"krate":0,"index":6715},{"krate":0,"index":6717},{"krate":0,"index":6719},{"krate":0,"index":6721},{"krate":0,"index":6723},{"krate":0,"index":6725},{"krate":0,"index":6727},{"krate":0,"index":6729},{"krate":0,"index":6731},{"krate":0,"index":6733},{"krate":0,"index":6735},{"krate":0,"index":6737},{"krate":0,"index":6739},{"krate":0,"index":6741},{"krate":0,"index":6743},{"krate":0,"index":6745},{"krate":0,"index":6747},{"krate":0,"index":6749},{"krate":0,"index":6751},{"krate":0,"index":6753},{"krate":0,"index":6755},{"krate":0,"index":6757},{"krate":0,"index":6759},{"krate":0,"index":6761},{"krate":0,"index":6763},{"krate":0,"index":6765},{"krate":0,"index":6767},{"krate":0,"index":6769},{"krate":0,"index":6771},{"krate":0,"index":6773},{"krate":0,"index":6775},{"krate":0,"index":6777},{"krate":0,"index":6779},{"krate":0,"index":6781},{"krate":0,"index":6783},{"krate":0,"index":6785},{"krate":0,"index":6787},{"krate":0,"index":6789},{"krate":0,"index":6791},{"krate":0,"index":6793},{"krate":0,"index":6795},{"krate":0,"index":6797},{"krate":0,"index":6799},{"krate":0,"index":6801},{"krate":0,"index":6803},{"krate":0,"index":6805},{"krate":0,"index":6807},{"krate":0,"index":6809},{"krate":0,"index":6811},{"krate":0,"index":6813},{"krate":0,"index":6815},{"krate":0,"index":6817},{"krate":0,"index":6819},{"krate":0,"index":6821},{"krate":0,"index":6823},{"krate":0,"index":6825},{"krate":0,"index":6827},{"krate":0,"index":6829},{"krate":0,"index":6831},{"krate":0,"index":6833},{"krate":0,"index":6835},{"krate":0,"index":6837},{"krate":0,"index":6839},{"krate":0,"index":6841},{"krate":0,"index":6843},{"krate":0,"index":6845},{"krate":0,"index":6847},{"krate":0,"index":6849},{"krate":0,"index":6851},{"krate":0,"index":6853},{"krate":0,"index":6855},{"krate":0,"index":6857},{"krate":0,"index":6859},{"krate":0,"index":6861},{"krate":0,"index":6863},{"krate":0,"index":6865},{"krate":0,"index":6867},{"krate":0,"index":6869},{"krate":0,"index":6871},{"krate":0,"index":6873},{"krate":0,"index":6875},{"krate":0,"index":6877},{"krate":0,"index":6879},{"krate":0,"index":6881},{"krate":0,"index":6883},{"krate":0,"index":6885},{"krate":0,"index":6887},{"krate":0,"index":6889},{"krate":0,"index":6891},{"krate":0,"index":6893},{"krate":0,"index":6895},{"krate":0,"index":6897},{"krate":0,"index":6899},{"krate":0,"index":6901},{"krate":0,"index":6903},{"krate":0,"index":6905},{"krate":0,"index":6907},{"krate":0,"index":6909},{"krate":0,"index":6911},{"krate":0,"index":6913},{"krate":0,"index":6915},{"krate":0,"index":6917},{"krate":0,"index":6919},{"krate":0,"index":6921},{"krate":0,"index":6923},{"krate":0,"index":6925},{"krate":0,"index":6927},{"krate":0,"index":6929},{"krate":0,"index":6931},{"krate":0,"index":6933},{"krate":0,"index":6935},{"krate":0,"index":6937},{"krate":0,"index":6939},{"krate":0,"index":6941},{"krate":0,"index":6943},{"krate":0,"index":6945},{"krate":0,"index":6947},{"krate":0,"index":6949},{"krate":0,"index":6951},{"krate":0,"index":6953},{"krate":0,"index":6955},{"krate":0,"index":6957},{"krate":0,"index":6959},{"krate":0,"index":6961},{"krate":0,"index":6963},{"krate":0,"index":6965},{"krate":0,"index":6967},{"krate":0,"index":6969},{"krate":0,"index":6971},{"krate":0,"index":6973},{"krate":0,"index":6975},{"krate":0,"index":6977},{"krate":0,"index":6979},{"krate":0,"index":6981},{"krate":0,"index":6983},{"krate":0,"index":6985},{"krate":0,"index":6987},{"krate":0,"index":6989},{"krate":0,"index":6991},{"krate":0,"index":6993},{"krate":0,"index":6995},{"krate":0,"index":6997},{"krate":0,"index":6999},{"krate":0,"index":7001},{"krate":0,"index":7003},{"krate":0,"index":7005},{"krate":0,"index":7007},{"krate":0,"index":7009},{"krate":0,"index":7011},{"krate":0,"index":7013},{"krate":0,"index":7015},{"krate":0,"index":7017},{"krate":0,"index":7019},{"krate":0,"index":7021},{"krate":0,"index":7023},{"krate":0,"index":7025},{"krate":0,"index":7027},{"krate":0,"index":7029},{"krate":0,"index":7031},{"krate":0,"index":7033},{"krate":0,"index":7035},{"krate":0,"index":7037},{"krate":0,"index":7039},{"krate":0,"index":7041},{"krate":0,"index":7043},{"krate":0,"index":7045},{"krate":0,"index":7047},{"krate":0,"index":7049},{"krate":0,"index":7051},{"krate":0,"index":7053},{"krate":0,"index":7055},{"krate":0,"index":7057},{"krate":0,"index":7059},{"krate":0,"index":7061},{"krate":0,"index":7063},{"krate":0,"index":7065},{"krate":0,"index":7067},{"krate":0,"index":7069},{"krate":0,"index":7071},{"krate":0,"index":7073},{"krate":0,"index":7075},{"krate":0,"index":7077},{"krate":0,"index":7079},{"krate":0,"index":7081},{"krate":0,"index":7083},{"krate":0,"index":7085},{"krate":0,"index":7087},{"krate":0,"index":7089},{"krate":0,"index":7091},{"krate":0,"index":7093},{"krate":0,"index":7095},{"krate":0,"index":7097},{"krate":0,"index":7099},{"krate":0,"index":7101},{"krate":0,"index":7103},{"krate":0,"index":7105},{"krate":0,"index":7107},{"krate":0,"index":7109},{"krate":0,"index":7111},{"krate":0,"index":7113},{"krate":0,"index":7115},{"krate":0,"index":7117},{"krate":0,"index":7119},{"krate":0,"index":7121},{"krate":0,"index":7123},{"krate":0,"index":7125},{"krate":0,"index":7127},{"krate":0,"index":7129},{"krate":0,"index":7131},{"krate":0,"index":7133},{"krate":0,"index":7135},{"krate":0,"index":7137}],"decl_id":null,"docs":" An instruction opcode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6345},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11048217,"byte_end":11048230,"line_start":2028,"line_end":2028,"column_start":12,"column_end":25},"name":"is_terminator","qualname":"<Opcode>::is_terminator","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True for instructions that terminate the block\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6346},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11048654,"byte_end":11048663,"line_start":2046,"line_end":2046,"column_start":12,"column_end":21},"name":"is_branch","qualname":"<Opcode>::is_branch","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True for all branch or jump instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6347},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11049132,"byte_end":11049150,"line_start":2066,"line_end":2066,"column_start":12,"column_end":30},"name":"is_indirect_branch","qualname":"<Opcode>::is_indirect_branch","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True for all indirect branch or jump instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6348},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11049385,"byte_end":11049392,"line_start":2078,"line_end":2078,"column_start":12,"column_end":19},"name":"is_call","qualname":"<Opcode>::is_call","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a call instruction?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6349},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11049647,"byte_end":11049656,"line_start":2091,"line_end":2091,"column_start":12,"column_end":21},"name":"is_return","qualname":"<Opcode>::is_return","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a return instruction?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6350},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11049917,"byte_end":11049925,"line_start":2104,"line_end":2104,"column_start":12,"column_end":20},"name":"is_ghost","qualname":"<Opcode>::is_ghost","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a ghost instruction?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6351},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11050241,"byte_end":11050249,"line_start":2119,"line_end":2119,"column_start":12,"column_end":20},"name":"can_load","qualname":"<Opcode>::can_load","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can this instruction read from memory?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6352},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11051060,"byte_end":11051069,"line_start":2150,"line_end":2150,"column_start":12,"column_end":21},"name":"can_store","qualname":"<Opcode>::can_store","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can this instruction write to memory?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6353},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11051638,"byte_end":11051646,"line_start":2173,"line_end":2173,"column_start":12,"column_end":20},"name":"can_trap","qualname":"<Opcode>::can_trap","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can this instruction cause a trap?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6354},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11052272,"byte_end":11052290,"line_start":2198,"line_end":2198,"column_start":12,"column_end":30},"name":"other_side_effects","qualname":"<Opcode>::other_side_effects","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this instruction have other side effects besides can_* flags?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6355},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11052930,"byte_end":11052946,"line_start":2223,"line_end":2223,"column_start":12,"column_end":28},"name":"writes_cpu_flags","qualname":"<Opcode>::writes_cpu_flags","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this instruction write to CPU flags?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":298778,"byte_end":298784,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"format","qualname":"<Opcode>::format","value":"fn (self) -> InstructionFormat","parent":null,"children":[],"decl_id":null,"docs":" Get the instruction format for this opcode.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":298978,"byte_end":298989,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"constraints","qualname":"<Opcode>::constraints","value":"fn (self) -> OpcodeConstraints","parent":null,"children":[],"decl_id":null,"docs":" Get the constraint descriptor for this opcode.\n Panic if this is called on `NotAnOpcode`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7151},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300357,"byte_end":300369,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"VariableArgs","qualname":"::ir::instructions::VariableArgs","value":"","parent":null,"children":[],"decl_id":null,"docs":" A variable list of `Value` operands used for function call arguments and passing arguments to\n basic blocks.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300454,"byte_end":300457,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<VariableArgs>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty argument list.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300549,"byte_end":300553,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"push","qualname":"<VariableArgs>::push","value":"fn (&mut self, v: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add an argument to the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300654,"byte_end":300662,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VariableArgs>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the list is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300795,"byte_end":300810,"line_start":118,"line_end":118,"column_start":12,"column_end":27},"name":"into_value_list","qualname":"<VariableArgs>::into_value_list","value":"fn (self, fixed: &[Value], pool: &mut ValueListPool) -> ValueList","parent":null,"children":[],"decl_id":null,"docs":" Convert this to a value list in `pool` with `fixed` prepended.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":302094,"byte_end":302108,"line_start":169,"line_end":169,"column_start":12,"column_end":26},"name":"analyze_branch","qualname":"<InstructionData>::analyze_branch","value":"fn <'a> (&'a self, pool: &'a ValueListPool) -> BranchInfo<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return information about the destination of a branch or jump instruction.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":303537,"byte_end":303555,"line_start":211,"line_end":211,"column_start":12,"column_end":30},"name":"branch_destination","qualname":"<InstructionData>::branch_destination","value":"fn (&self) -> Option<Block>","parent":null,"children":[],"decl_id":null,"docs":" Get the single destination of this branch instruction, if it is a single destination\n branch or jump.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":304298,"byte_end":304320,"line_start":230,"line_end":230,"column_start":12,"column_end":34},"name":"branch_destination_mut","qualname":"<InstructionData>::branch_destination_mut","value":"fn (&mut self) -> Option<&mut Block>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the single destination of this branch instruction, if it is a\n single destination branch or jump.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":305239,"byte_end":305251,"line_start":263,"line_end":263,"column_start":12,"column_end":24},"name":"analyze_call","qualname":"<InstructionData>::analyze_call","value":"fn <'a> (&'a self, pool: &'a ValueListPool) -> CallInfo<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return information about a call instruction.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1214},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306037,"byte_end":306047,"line_start":284,"line_end":284,"column_start":5,"column_end":15},"name":"NotABranch","qualname":"::ir::instructions::BranchInfo::NotABranch","value":"BranchInfo::NotABranch","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":" This is not a branch or jump instruction.\n This instruction will not transfer control to another block in the function, but it may still\n affect control flow by returning or trapping.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1216},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306151,"byte_end":306161,"line_start":287,"line_end":287,"column_start":5,"column_end":15},"name":"SingleDest","qualname":"::ir::instructions::BranchInfo::SingleDest","value":"BranchInfo::SingleDest(Block, &'a [Value])","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":" This is a branch or jump to a single destination block, possibly taking value arguments.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1220},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306292,"byte_end":306297,"line_start":290,"line_end":290,"column_start":5,"column_end":10},"name":"Table","qualname":"::ir::instructions::BranchInfo::Table","value":"BranchInfo::Table(JumpTable, Option<Block>)","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":" This is a jump table branch which can have many destination blocks and maybe one default block.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1212},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":305810,"byte_end":305820,"line_start":280,"line_end":280,"column_start":10,"column_end":20},"name":"BranchInfo","qualname":"::ir::instructions::BranchInfo","value":"BranchInfo::{NotABranch, SingleDest, Table}","parent":null,"children":[{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1220}],"decl_id":null,"docs":" Information about branch and jump instructions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1226},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306437,"byte_end":306445,"line_start":296,"line_end":296,"column_start":5,"column_end":13},"name":"NotACall","qualname":"::ir::instructions::CallInfo::NotACall","value":"CallInfo::NotACall","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" This is not a call instruction.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1228},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306571,"byte_end":306577,"line_start":300,"line_end":300,"column_start":5,"column_end":11},"name":"Direct","qualname":"::ir::instructions::CallInfo::Direct","value":"CallInfo::Direct(FuncRef, &'a [Value])","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" This is a direct call to an external function declared in the preamble. See\n `DataFlowGraph.ext_funcs`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1232},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306701,"byte_end":306709,"line_start":303,"line_end":303,"column_start":5,"column_end":13},"name":"Indirect","qualname":"::ir::instructions::CallInfo::Indirect","value":"CallInfo::Indirect(SigRef, &'a [Value])","parent":{"krate":0,"index":1224},"children":[],"decl_id":null,"docs":" This is an indirect call with the specified signature. See `DataFlowGraph.signatures`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1224},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":306378,"byte_end":306386,"line_start":294,"line_end":294,"column_start":10,"column_end":18},"name":"CallInfo","qualname":"::ir::instructions::CallInfo","value":"CallInfo::{NotACall, Direct, Indirect}","parent":null,"children":[{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1232}],"decl_id":null,"docs":" Information about call instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7158},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":307063,"byte_end":307080,"line_start":312,"line_end":312,"column_start":12,"column_end":29},"name":"OpcodeConstraints","qualname":"::ir::instructions::OpcodeConstraints","value":"OpcodeConstraints {  }","parent":null,"children":[{"krate":0,"index":7159},{"krate":0,"index":7160},{"krate":0,"index":7161}],"decl_id":null,"docs":" Value type constraints for a given opcode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":308599,"byte_end":308618,"line_start":346,"line_end":346,"column_start":12,"column_end":31},"name":"use_typevar_operand","qualname":"<OpcodeConstraints>::use_typevar_operand","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Can the controlling type variable for this opcode be inferred from the designated value\n input operand?\n This also implies that this opcode is polymorphic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":309138,"byte_end":309162,"line_start":356,"line_end":356,"column_start":12,"column_end":36},"name":"requires_typevar_operand","qualname":"<OpcodeConstraints>::requires_typevar_operand","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is it necessary to look at the designated value input operand in order to determine the\n controlling type variable, or is it good enough to use the first return type?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":309368,"byte_end":309385,"line_start":362,"line_end":362,"column_start":12,"column_end":29},"name":"num_fixed_results","qualname":"<OpcodeConstraints>::num_fixed_results","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of *fixed* result values produced by this opcode.\n This does not include `variable_args` produced by calls.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":309914,"byte_end":309939,"line_start":373,"line_end":373,"column_start":12,"column_end":37},"name":"num_fixed_value_arguments","qualname":"<OpcodeConstraints>::num_fixed_value_arguments","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of *fixed* input values required by this opcode.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":310672,"byte_end":310683,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"result_type","qualname":"<OpcodeConstraints>::result_type","value":"fn (self, n: usize, ctrl_type: Type) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the value type of result number `n`, having resolved the controlling type variable to\n `ctrl_type`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":311371,"byte_end":311396,"line_start":411,"line_end":411,"column_start":12,"column_end":37},"name":"value_argument_constraint","qualname":"<OpcodeConstraints>::value_argument_constraint","value":"fn (self, n: usize, ctrl_type: Type) -> ResolvedConstraint","parent":null,"children":[],"decl_id":null,"docs":" Get the value type of input value number `n`, having resolved the controlling type variable\n to `ctrl_type`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":311845,"byte_end":311857,"line_start":422,"line_end":422,"column_start":12,"column_end":24},"name":"ctrl_typeset","qualname":"<OpcodeConstraints>::ctrl_typeset","value":"fn (self) -> Option<ValueTypeSet>","parent":null,"children":[],"decl_id":null,"docs":" Get the typeset of allowed types for the controlling type variable in a polymorphic\n instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312011,"byte_end":312025,"line_start":427,"line_end":427,"column_start":12,"column_end":26},"name":"is_polymorphic","qualname":"<OpcodeConstraints>::is_polymorphic","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this instruction polymorphic?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7165},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312281,"byte_end":312293,"line_start":437,"line_end":437,"column_start":12,"column_end":24},"name":"ValueTypeSet","qualname":"::ir::instructions::ValueTypeSet","value":"ValueTypeSet { lanes, ints, floats, bools, refs }","parent":null,"children":[{"krate":0,"index":7166},{"krate":0,"index":7167},{"krate":0,"index":7168},{"krate":0,"index":7169},{"krate":0,"index":7170}],"decl_id":null,"docs":" A value type set describes the permitted set of types for a type variable.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7166},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312331,"byte_end":312336,"line_start":439,"line_end":439,"column_start":9,"column_end":14},"name":"lanes","qualname":"::ir::instructions::ValueTypeSet::lanes","value":"bitset::BitSet<u16>","parent":{"krate":0,"index":7165},"children":[],"decl_id":null,"docs":" Allowed lane sizes\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7167},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312383,"byte_end":312387,"line_start":441,"line_end":441,"column_start":9,"column_end":13},"name":"ints","qualname":"::ir::instructions::ValueTypeSet::ints","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7165},"children":[],"decl_id":null,"docs":" Allowed int widths\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7168},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312435,"byte_end":312441,"line_start":443,"line_end":443,"column_start":9,"column_end":15},"name":"floats","qualname":"::ir::instructions::ValueTypeSet::floats","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7165},"children":[],"decl_id":null,"docs":" Allowed float widths\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7169},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312488,"byte_end":312493,"line_start":445,"line_end":445,"column_start":9,"column_end":14},"name":"bools","qualname":"::ir::instructions::ValueTypeSet::bools","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7165},"children":[],"decl_id":null,"docs":" Allowed bool widths\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7170},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312539,"byte_end":312543,"line_start":447,"line_end":447,"column_start":9,"column_end":13},"name":"refs","qualname":"::ir::instructions::ValueTypeSet::refs","value":"bitset::BitSet<u8>","parent":{"krate":0,"index":7165},"children":[],"decl_id":null,"docs":" Allowed ref widths\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":313203,"byte_end":313211,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"contains","qualname":"<ValueTypeSet>::contains","value":"fn (self, typ: Type) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does `typ` belong to this set?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":313500,"byte_end":313507,"line_start":478,"line_end":478,"column_start":12,"column_end":19},"name":"example","qualname":"<ValueTypeSet>::example","value":"fn (self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get an example member of this type set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7182},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":316035,"byte_end":316040,"line_start":555,"line_end":555,"column_start":5,"column_end":10},"name":"Bound","qualname":"::ir::instructions::ResolvedConstraint::Bound","value":"ResolvedConstraint::Bound(Type)","parent":{"krate":0,"index":7181},"children":[],"decl_id":null,"docs":" The operand is bound to a known type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7185},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":316115,"byte_end":316119,"line_start":557,"line_end":557,"column_start":5,"column_end":9},"name":"Free","qualname":"::ir::instructions::ResolvedConstraint::Free","value":"ResolvedConstraint::Free(ValueTypeSet)","parent":{"krate":0,"index":7181},"children":[],"decl_id":null,"docs":" The operand type can vary freely within the given set.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7181},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":315964,"byte_end":315982,"line_start":553,"line_end":553,"column_start":10,"column_end":28},"name":"ResolvedConstraint","qualname":"::ir::instructions::ResolvedConstraint","value":"ResolvedConstraint::{Bound, Free}","parent":null,"children":[{"krate":0,"index":7182},{"krate":0,"index":7185}],"decl_id":null,"docs":" The type constraint on a value argument once the controlling type variable is known.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1279},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jumptable","qualname":"::ir::jumptable","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1286},{"krate":0,"index":7198},{"krate":0,"index":7200},{"krate":0,"index":1289},{"krate":0,"index":1300}],"decl_id":null,"docs":" Jump table representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7198},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":322523,"byte_end":322536,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"JumpTableData","qualname":"::ir::jumptable::JumpTableData","value":"JumpTableData {  }","parent":null,"children":[{"krate":0,"index":7199}],"decl_id":null,"docs":" Contents of a jump table.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":322658,"byte_end":322661,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<JumpTableData>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty jump table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":322794,"byte_end":322807,"line_start":27,"line_end":27,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<JumpTableData>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty jump table with the specified capacity.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":322968,"byte_end":322971,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<JumpTableData>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of table entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323063,"byte_end":323073,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"push_entry","qualname":"<JumpTableData>::push_entry","value":"fn (&mut self, dest: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append a table entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323204,"byte_end":323215,"line_start":44,"line_end":44,"column_start":12,"column_end":23},"name":"branches_to","qualname":"<JumpTableData>::branches_to","value":"fn (&self, block: Block) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if any of the entries branch to `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323377,"byte_end":323385,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<JumpTableData>::as_slice","value":"fn (&self) -> &[Block]","parent":null,"children":[],"decl_id":null,"docs":" Access the whole table as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323506,"byte_end":323518,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<JumpTableData>::as_mut_slice","value":"fn (&mut self) -> &mut [Block]","parent":null,"children":[],"decl_id":null,"docs":" Access the whole table as a mutable slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323644,"byte_end":323648,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"iter","qualname":"<JumpTableData>::iter","value":"fn (&self) -> Iter<Block>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323779,"byte_end":323787,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<JumpTableData>::iter_mut","value":"fn (&mut self) -> IterMut<Block>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1302},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"layout","qualname":"::ir::layout","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1317},{"krate":0,"index":7202},{"krate":0,"index":7207},{"krate":0,"index":1318},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1332},{"krate":0,"index":1344},{"krate":0,"index":7209},{"krate":0,"index":7219},{"krate":0,"index":7217},{"krate":0,"index":7215},{"krate":0,"index":1355},{"krate":0,"index":1359},{"krate":0,"index":1363},{"krate":0,"index":1368},{"krate":0,"index":7221},{"krate":0,"index":7230},{"krate":0,"index":7228},{"krate":0,"index":7226},{"krate":0,"index":1382},{"krate":0,"index":1387},{"krate":0,"index":1391}],"decl_id":null,"docs":" Function layout.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7202},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":326156,"byte_end":326162,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Layout","qualname":"::ir::layout::Layout","value":"Layout {  }","parent":null,"children":[{"krate":0,"index":7203},{"krate":0,"index":7204},{"krate":0,"index":7205},{"krate":0,"index":7206}],"decl_id":null,"docs":" The `Layout` struct determines the layout of blocks and instructions in a function. It does not\n contain definitions of instructions or blocks, but depends on `Inst` and `Block` entity references\n being defined elsewhere.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":326825,"byte_end":326828,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Layout>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `Layout`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":327052,"byte_end":327057,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<Layout>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":327264,"byte_end":327278,"line_start":66,"line_end":66,"column_start":12,"column_end":26},"name":"block_capacity","qualname":"<Layout>::block_capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the `BlockData` map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":337551,"byte_end":337568,"line_start":346,"line_end":346,"column_start":12,"column_end":29},"name":"is_block_inserted","qualname":"<Layout>::is_block_inserted","value":"fn (&self, block: Block) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is `block` currently part of the layout?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":337751,"byte_end":337763,"line_start":351,"line_end":351,"column_start":12,"column_end":24},"name":"append_block","qualname":"<Layout>::append_block","value":"fn (&mut self, block: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `block` as the last block in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":338504,"byte_end":338516,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"name":"insert_block","qualname":"<Layout>::insert_block","value":"fn (&mut self, block: Block, before: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `block` in the layout before the existing block `before`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":339347,"byte_end":339365,"line_start":396,"line_end":396,"column_start":12,"column_end":30},"name":"insert_block_after","qualname":"<Layout>::insert_block_after","value":"fn (&mut self, block: Block, after: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `block` in the layout *after* the existing block `after`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":340160,"byte_end":340172,"line_start":420,"line_end":420,"column_start":12,"column_end":24},"name":"remove_block","qualname":"<Layout>::remove_block","value":"fn (&mut self, block: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove `block` from the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":341042,"byte_end":341048,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"blocks","qualname":"<Layout>::blocks","value":"fn (&self) -> Blocks","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all blocks in layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":341275,"byte_end":341286,"line_start":455,"line_end":455,"column_start":12,"column_end":23},"name":"entry_block","qualname":"<Layout>::entry_block","value":"fn (&self) -> Option<Block>","parent":null,"children":[],"decl_id":null,"docs":" Get the function's entry block.\n This is simply the first block in the layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":341398,"byte_end":341408,"line_start":460,"line_end":460,"column_start":12,"column_end":22},"name":"last_block","qualname":"<Layout>::last_block","value":"fn (&self) -> Option<Block>","parent":null,"children":[],"decl_id":null,"docs":" Get the last block in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":341538,"byte_end":341548,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"prev_block","qualname":"<Layout>::prev_block","value":"fn (&self, block: Block) -> Option<Block>","parent":null,"children":[],"decl_id":null,"docs":" Get the block preceding `block` in the layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":341709,"byte_end":341719,"line_start":470,"line_end":470,"column_start":12,"column_end":22},"name":"next_block","qualname":"<Layout>::next_block","value":"fn (&self, block: Block) -> Option<Block>","parent":null,"children":[],"decl_id":null,"docs":" Get the block following `block` in the layout order.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1355},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":342099,"byte_end":342105,"line_start":485,"line_end":485,"column_start":12,"column_end":18},"name":"Blocks","qualname":"::ir::layout::Blocks","value":"Blocks {  }","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358}],"decl_id":null,"docs":" Iterate over blocks in layout order. See `Layout::blocks()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":342967,"byte_end":342977,"line_start":520,"line_end":520,"column_start":12,"column_end":22},"name":"inst_block","qualname":"<Layout>::inst_block","value":"fn (&self, inst: Inst) -> Option<Block>","parent":null,"children":[],"decl_id":null,"docs":" Get the block containing `inst`, or `None` if `inst` is not inserted in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":343165,"byte_end":343173,"line_start":525,"line_end":525,"column_start":12,"column_end":20},"name":"pp_block","qualname":"<Layout>::pp_block","value":"fn <PP> (&self, pp: PP) -> Block","parent":null,"children":[],"decl_id":null,"docs":" Get the block containing the program point `pp`. Panic if `pp` is not in the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":343554,"byte_end":343565,"line_start":538,"line_end":538,"column_start":12,"column_end":23},"name":"append_inst","qualname":"<Layout>::append_inst","value":"fn (&mut self, inst: Inst, block: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Append `inst` to the end of `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":344479,"byte_end":344489,"line_start":563,"line_end":563,"column_start":12,"column_end":22},"name":"first_inst","qualname":"<Layout>::first_inst","value":"fn (&self, block: Block) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch an block's first instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":344635,"byte_end":344644,"line_start":568,"line_end":568,"column_start":12,"column_end":21},"name":"last_inst","qualname":"<Layout>::last_inst","value":"fn (&self, block: Block) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch an block's last instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":344794,"byte_end":344803,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"next_inst","qualname":"<Layout>::next_inst","value":"fn (&self, inst: Inst) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the instruction following `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":344946,"byte_end":344955,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"prev_inst","qualname":"<Layout>::prev_inst","value":"fn (&self, inst: Inst) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the instruction preceding `inst`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":345123,"byte_end":345144,"line_start":583,"line_end":583,"column_start":12,"column_end":33},"name":"canonical_branch_inst","qualname":"<Layout>::canonical_branch_inst","value":"fn (&self, dfg: &DataFlowGraph, block: Block) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Fetch the first instruction in an block's terminal branch group.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":345667,"byte_end":345678,"line_start":596,"line_end":596,"column_start":12,"column_end":23},"name":"insert_inst","qualname":"<Layout>::insert_inst","value":"fn (&mut self, inst: Inst, before: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert `inst` before the instruction `before` in the same block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":346450,"byte_end":346461,"line_start":617,"line_end":617,"column_start":12,"column_end":23},"name":"remove_inst","qualname":"<Layout>::remove_inst","value":"fn (&mut self, inst: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove `inst` from the layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":347291,"byte_end":347302,"line_start":642,"line_end":642,"column_start":12,"column_end":23},"name":"block_insts","qualname":"<Layout>::block_insts","value":"fn (&self, block: Block) -> Insts","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the instructions in `block` in layout order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":347982,"byte_end":347993,"line_start":672,"line_end":672,"column_start":12,"column_end":23},"name":"split_block","qualname":"<Layout>::split_block","value":"fn (&mut self, new_block: Block, before: Inst) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Split the block containing `before` in two.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1382},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":350002,"byte_end":350007,"line_start":728,"line_end":728,"column_start":12,"column_end":17},"name":"Insts","qualname":"::ir::layout::Insts","value":"Insts {  }","parent":null,"children":[{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386}],"decl_id":null,"docs":" Iterate over instructions in an block in layout order. See `Layout::block_insts()`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7233},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367216,"byte_end":367226,"line_start":26,"line_end":26,"column_start":5,"column_end":15},"name":"Probestack","qualname":"::ir::libcall::LibCall::Probestack","value":"LibCall::Probestack","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" probe for stack overflow. These are emitted for functions which need\n when the `enable_probestack` setting is true.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7235},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367249,"byte_end":367256,"line_start":28,"line_end":28,"column_start":5,"column_end":12},"name":"CeilF32","qualname":"::ir::libcall::LibCall::CeilF32","value":"LibCall::CeilF32","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" ceil.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7237},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367279,"byte_end":367286,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"CeilF64","qualname":"::ir::libcall::LibCall::CeilF64","value":"LibCall::CeilF64","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" ceil.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7239},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367310,"byte_end":367318,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"FloorF32","qualname":"::ir::libcall::LibCall::FloorF32","value":"LibCall::FloorF32","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" floor.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7241},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367342,"byte_end":367350,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"FloorF64","qualname":"::ir::libcall::LibCall::FloorF64","value":"LibCall::FloorF64","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" floor.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7243},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367374,"byte_end":367382,"line_start":36,"line_end":36,"column_start":5,"column_end":13},"name":"TruncF32","qualname":"::ir::libcall::LibCall::TruncF32","value":"LibCall::TruncF32","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" trunc.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7245},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367406,"byte_end":367414,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"TruncF64","qualname":"::ir::libcall::LibCall::TruncF64","value":"LibCall::TruncF64","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" frunc.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7247},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367440,"byte_end":367450,"line_start":40,"line_end":40,"column_start":5,"column_end":15},"name":"NearestF32","qualname":"::ir::libcall::LibCall::NearestF32","value":"LibCall::NearestF32","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" nearest.f32\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7249},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367476,"byte_end":367486,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"NearestF64","qualname":"::ir::libcall::LibCall::NearestF64","value":"LibCall::NearestF64","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" nearest.f64\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7251},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367512,"byte_end":367518,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Memcpy","qualname":"::ir::libcall::LibCall::Memcpy","value":"LibCall::Memcpy","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" libc.memcpy\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7253},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367544,"byte_end":367550,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Memset","qualname":"::ir::libcall::LibCall::Memset","value":"LibCall::Memset","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" libc.memset\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7255},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367577,"byte_end":367584,"line_start":48,"line_end":48,"column_start":5,"column_end":12},"name":"Memmove","qualname":"::ir::libcall::LibCall::Memmove","value":"LibCall::Memmove","parent":{"krate":0,"index":7232},"children":[],"decl_id":null,"docs":" libc.memmove\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7232},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367071,"byte_end":367078,"line_start":23,"line_end":23,"column_start":10,"column_end":17},"name":"LibCall","qualname":"::ir::libcall::LibCall","value":"LibCall::{Probestack, CeilF32, CeilF64, FloorF32, FloorF64, TruncF32, TruncF64, NearestF32, NearestF64, Memcpy, Memset, Memmove}","parent":null,"children":[{"krate":0,"index":7233},{"krate":0,"index":7235},{"krate":0,"index":7237},{"krate":0,"index":7239},{"krate":0,"index":7241},{"krate":0,"index":7243},{"krate":0,"index":7245},{"krate":0,"index":7247},{"krate":0,"index":7249},{"krate":0,"index":7251},{"krate":0,"index":7253},{"krate":0,"index":7255}],"decl_id":null,"docs":" The name of a runtime library routine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":368709,"byte_end":368717,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"for_inst","qualname":"<LibCall>::for_inst","value":"fn (opcode: Opcode, ctrl_type: Type) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get the well-known library call name to use as a replacement for an instruction with the\n given opcode and controlling type variable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1422},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":370034,"byte_end":370056,"line_start":123,"line_end":123,"column_start":8,"column_end":30},"name":"get_probestack_funcref","qualname":"::ir::libcall::get_probestack_funcref","value":"fn (func: &mut Function, reg_type: Type, arg_reg: RegUnit, isa: &dyn TargetIsa) -> FuncRef","parent":null,"children":[],"decl_id":null,"docs":" Get a function reference for the probestack function in `func`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7269},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":373458,"byte_end":373466,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"MemFlags","qualname":"::ir::memflags::MemFlags","value":"MemFlags {  }","parent":null,"children":[{"krate":0,"index":7270}],"decl_id":null,"docs":" Flags for memory operations like load/store.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":373554,"byte_end":373557,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<MemFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty set of flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":373751,"byte_end":373758,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"trusted","qualname":"<MemFlags>::trusted","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a set of flags representing an access from a \"trusted\" address, meaning it's\n known to be aligned and non-trapping.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":374252,"byte_end":374263,"line_start":51,"line_end":51,"column_start":12,"column_end":23},"name":"set_by_name","qualname":"<MemFlags>::set_by_name","value":"fn (&mut self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Set a flag bit by name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":374999,"byte_end":375005,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"notrap","qualname":"<MemFlags>::notrap","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the `notrap` flag is set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":375106,"byte_end":375116,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"name":"set_notrap","qualname":"<MemFlags>::set_notrap","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `notrap` flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":375474,"byte_end":375481,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"aligned","qualname":"<MemFlags>::aligned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the `aligned` flag is set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":375584,"byte_end":375595,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"set_aligned","qualname":"<MemFlags>::set_aligned","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `aligned` flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":375932,"byte_end":375940,"line_start":98,"line_end":98,"column_start":12,"column_end":20},"name":"readonly","qualname":"<MemFlags>::readonly","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the `readonly` flag is set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":376045,"byte_end":376057,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"set_readonly","qualname":"<MemFlags>::set_readonly","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `readonly` flag.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7284},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":376847,"byte_end":376859,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"ProgramPoint","qualname":"::ir::progpoint::ProgramPoint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `ProgramPoint` represents a position in a function where the live range of an SSA value can\n begin or end. It can be either:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7296},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377708,"byte_end":377712,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Inst","qualname":"::ir::progpoint::ExpandedProgramPoint::Inst","value":"ExpandedProgramPoint::Inst(Inst)","parent":{"krate":0,"index":7295},"children":[],"decl_id":null,"docs":" An instruction in the function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7299},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377749,"byte_end":377754,"line_start":51,"line_end":51,"column_start":5,"column_end":10},"name":"Block","qualname":"::ir::progpoint::ExpandedProgramPoint::Block","value":"ExpandedProgramPoint::Block(Block)","parent":{"krate":0,"index":7295},"children":[],"decl_id":null,"docs":" An block header.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7295},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377641,"byte_end":377661,"line_start":47,"line_end":47,"column_start":10,"column_end":30},"name":"ExpandedProgramPoint","qualname":"::ir::progpoint::ExpandedProgramPoint","value":"ExpandedProgramPoint::{Inst, Block}","parent":null,"children":[{"krate":0,"index":7296},{"krate":0,"index":7299}],"decl_id":null,"docs":" An expanded program point directly exposes the variants, but takes twice the space to\n represent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377852,"byte_end":377863,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"unwrap_inst","qualname":"<ExpandedProgramPoint>::unwrap_inst","value":"fn (self) -> Inst","parent":null,"children":[],"decl_id":null,"docs":" Get the instruction we know is inside.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1487},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":379656,"byte_end":379668,"line_start":127,"line_end":127,"column_start":11,"column_end":23},"name":"ProgramOrder","qualname":"::ir::progpoint::ProgramOrder","value":"ProgramOrder","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1491}],"decl_id":null,"docs":" Context for ordering program points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":380118,"byte_end":380121,"line_start":135,"line_end":135,"column_start":8,"column_end":11},"name":"cmp","qualname":"::ir::progpoint::ProgramOrder::cmp","value":"fn <A, B> (&self, a: A, b: B) -> cmp::Ordering","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Compare the program points `a` and `b` relative to this program order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":380448,"byte_end":380460,"line_start":143,"line_end":143,"column_start":8,"column_end":20},"name":"is_block_gap","qualname":"::ir::progpoint::ProgramOrder::is_block_gap","value":"fn (&self, inst: Inst, block: Block) -> bool","parent":{"krate":0,"index":1487},"children":[],"decl_id":null,"docs":" Is the range from `inst` to `block` just the gap between consecutive blocks?","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7310},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":381690,"byte_end":381699,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"SourceLoc","qualname":"::ir::sourceloc::SourceLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":" A source location.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":381793,"byte_end":381796,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<SourceLoc>::new","value":"fn (bits: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new source location with the given bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":381900,"byte_end":381910,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"is_default","qualname":"<SourceLoc>::is_default","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the default source location?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":382027,"byte_end":382031,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"bits","qualname":"<SourceLoc>::bits","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Read the bits of this source location.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1502},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stackslot","qualname":"::ir::stackslot","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1508},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":7323},{"krate":0,"index":7343},{"krate":0,"index":7342},{"krate":0,"index":7340},{"krate":0,"index":7338},{"krate":0,"index":7336},{"krate":0,"index":1524},{"krate":0,"index":1528},{"krate":0,"index":7345},{"krate":0,"index":7356},{"krate":0,"index":7354},{"krate":0,"index":7351},{"krate":0,"index":7349},{"krate":0,"index":1531},{"krate":0,"index":1534},{"krate":0,"index":7358},{"krate":0,"index":7369},{"krate":0,"index":7368},{"krate":0,"index":7366},{"krate":0,"index":7363},{"krate":0,"index":7361},{"krate":0,"index":7371},{"krate":0,"index":7383},{"krate":0,"index":7381},{"krate":0,"index":7378},{"krate":0,"index":7376},{"krate":0,"index":1536},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1552}],"decl_id":null,"docs":" Stack slots.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1520},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":383487,"byte_end":383496,"line_start":24,"line_end":24,"column_start":10,"column_end":19},"name":"StackSize","qualname":"::ir::stackslot::StackSize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The size of an object on the stack, or the size of a stack frame.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1521},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":383619,"byte_end":383630,"line_start":29,"line_end":29,"column_start":10,"column_end":21},"name":"StackOffset","qualname":"::ir::stackslot::StackOffset","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" A stack offset.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7324},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":384234,"byte_end":384243,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"SpillSlot","qualname":"::ir::stackslot::StackSlotKind::SpillSlot","value":"StackSlotKind::SpillSlot","parent":{"krate":0,"index":7323},"children":[],"decl_id":null,"docs":" A spill slot. This is a stack slot created by the register allocator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7326},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":384382,"byte_end":384394,"line_start":51,"line_end":51,"column_start":5,"column_end":17},"name":"ExplicitSlot","qualname":"::ir::stackslot::StackSlotKind::ExplicitSlot","value":"StackSlotKind::ExplicitSlot","parent":{"krate":0,"index":7323},"children":[],"decl_id":null,"docs":" An explicit stack slot. This is a chunk of stack memory for use by the `stack_load`\n and `stack_store` instructions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7328},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":384691,"byte_end":384702,"line_start":58,"line_end":58,"column_start":5,"column_end":16},"name":"IncomingArg","qualname":"::ir::stackslot::StackSlotKind::IncomingArg","value":"StackSlotKind::IncomingArg","parent":{"krate":0,"index":7323},"children":[],"decl_id":null,"docs":" An incoming function argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7330},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":385013,"byte_end":385024,"line_start":65,"line_end":65,"column_start":5,"column_end":16},"name":"OutgoingArg","qualname":"::ir::stackslot::StackSlotKind::OutgoingArg","value":"StackSlotKind::OutgoingArg","parent":{"krate":0,"index":7323},"children":[],"decl_id":null,"docs":" An outgoing function argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7332},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":385487,"byte_end":385503,"line_start":74,"line_end":74,"column_start":5,"column_end":21},"name":"StructReturnSlot","qualname":"::ir::stackslot::StackSlotKind::StructReturnSlot","value":"StackSlotKind::StructReturnSlot","parent":{"krate":0,"index":7323},"children":[],"decl_id":null,"docs":" Space allocated in the caller's frame for the callee's return values\n that are passed out via return pointer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7334},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":385734,"byte_end":385747,"line_start":80,"line_end":80,"column_start":5,"column_end":18},"name":"EmergencySlot","qualname":"::ir::stackslot::StackSlotKind::EmergencySlot","value":"StackSlotKind::EmergencySlot","parent":{"krate":0,"index":7323},"children":[],"decl_id":null,"docs":" An emergency spill slot.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7323},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":384136,"byte_end":384149,"line_start":45,"line_end":45,"column_start":10,"column_end":23},"name":"StackSlotKind","qualname":"::ir::stackslot::StackSlotKind","value":"StackSlotKind::{SpillSlot, ExplicitSlot, IncomingArg, OutgoingArg, StructReturnSlot, EmergencySlot}","parent":null,"children":[{"krate":0,"index":7324},{"krate":0,"index":7326},{"krate":0,"index":7328},{"krate":0,"index":7330},{"krate":0,"index":7332},{"krate":0,"index":7334}],"decl_id":null,"docs":" The kind of a stack slot.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":386836,"byte_end":386849,"line_start":117,"line_end":117,"column_start":12,"column_end":25},"name":"StackSlotData","qualname":"::ir::stackslot::StackSlotData","value":"StackSlotData { kind, size, offset }","parent":null,"children":[{"krate":0,"index":7346},{"krate":0,"index":7347},{"krate":0,"index":7348}],"decl_id":null,"docs":" Contents of a stack slot.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7346},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":386892,"byte_end":386896,"line_start":119,"line_end":119,"column_start":9,"column_end":13},"name":"kind","qualname":"::ir::stackslot::StackSlotData::kind","value":"ir::stackslot::StackSlotKind","parent":{"krate":0,"index":7345},"children":[],"decl_id":null,"docs":" The kind of stack slot.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7347},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":386959,"byte_end":386963,"line_start":122,"line_end":122,"column_start":9,"column_end":13},"name":"size","qualname":"::ir::stackslot::StackSlotData::size","value":"u32","parent":{"krate":0,"index":7345},"children":[],"decl_id":null,"docs":" Size of stack slot in bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7348},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":387407,"byte_end":387413,"line_start":131,"line_end":131,"column_start":9,"column_end":15},"name":"offset","qualname":"::ir::stackslot::StackSlotData::offset","value":"core::option::Option<i32>","parent":{"krate":0,"index":7345},"children":[],"decl_id":null,"docs":" Offset of stack slot relative to the stack pointer in the caller.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":387529,"byte_end":387532,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<StackSlotData>::new","value":"fn (kind: StackSlotKind, size: StackSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a stack slot with the specified byte size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":387775,"byte_end":387784,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"alignment","qualname":"<StackSlotData>::alignment","value":"fn (&self, max_align: StackSize) -> StackSize","parent":null,"children":[],"decl_id":null,"docs":" Get the alignment in bytes of this stack slot given the stack pointer alignment.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7358},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":388650,"byte_end":388665,"line_start":170,"line_end":170,"column_start":12,"column_end":27},"name":"StackLayoutInfo","qualname":"::ir::stackslot::StackLayoutInfo","value":"StackLayoutInfo { frame_size, inbound_args_size }","parent":null,"children":[{"krate":0,"index":7359},{"krate":0,"index":7360}],"decl_id":null,"docs":" Stack frame layout information.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7359},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":388950,"byte_end":388960,"line_start":176,"line_end":176,"column_start":9,"column_end":19},"name":"frame_size","qualname":"::ir::stackslot::StackLayoutInfo::frame_size","value":"u32","parent":{"krate":0,"index":7358},"children":[],"decl_id":null,"docs":" The total size of the stack frame.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7360},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":389068,"byte_end":389085,"line_start":179,"line_end":179,"column_start":9,"column_end":26},"name":"inbound_args_size","qualname":"::ir::stackslot::StackLayoutInfo::inbound_args_size","value":"u32","parent":{"krate":0,"index":7358},"children":[],"decl_id":null,"docs":" The total size of the stack frame for inbound arguments pushed by the caller.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7371},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":389308,"byte_end":389318,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"StackSlots","qualname":"::ir::stackslot::StackSlots","value":"StackSlots { layout_info }","parent":null,"children":[{"krate":0,"index":7372},{"krate":0,"index":7373},{"krate":0,"index":7374},{"krate":0,"index":7375}],"decl_id":null,"docs":" Stack frame manager.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7375},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":389624,"byte_end":389635,"line_start":198,"line_end":198,"column_start":9,"column_end":20},"name":"layout_info","qualname":"::ir::stackslot::StackSlots::layout_info","value":"core::option::Option<ir::stackslot::StackLayoutInfo>","parent":{"krate":0,"index":7371},"children":[],"decl_id":null,"docs":" Layout information computed from `layout_stack`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":389810,"byte_end":389813,"line_start":204,"line_end":204,"column_start":12,"column_end":15},"name":"new","qualname":"<StackSlots>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty stack slot manager.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":390037,"byte_end":390042,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"clear","qualname":"<StackSlots>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear out everything.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":390409,"byte_end":390413,"line_start":225,"line_end":225,"column_start":12,"column_end":16},"name":"push","qualname":"<StackSlots>::push","value":"fn (&mut self, data: StackSlotData) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new stack slot.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":390564,"byte_end":390572,"line_start":230,"line_end":230,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<StackSlots>::is_valid","value":"fn (&self, ss: StackSlot) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `ss` is a valid stack slot reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":390709,"byte_end":390713,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"iter","qualname":"<StackSlots>::iter","value":"fn (&self) -> Iter<StackSlot, StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot keys.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":390872,"byte_end":390880,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<StackSlots>::iter_mut","value":"fn (&mut self) -> IterMut<StackSlot, StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot keys, mutable edition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391036,"byte_end":391042,"line_start":245,"line_end":245,"column_start":12,"column_end":18},"name":"values","qualname":"<StackSlots>::values","value":"fn (&self) -> slice::Iter<StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot records.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391202,"byte_end":391212,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<StackSlots>::values_mut","value":"fn (&mut self) -> slice::IterMut<StackSlotData>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot records, mutable edition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391363,"byte_end":391367,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"keys","qualname":"<StackSlots>::keys","value":"fn (&self) -> Keys<StackSlot>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all the stack slot keys.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391578,"byte_end":391586,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"next_key","qualname":"<StackSlots>::next_key","value":"fn (&self) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the next stack slot that would be created by `push()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1553},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":392103,"byte_end":392118,"line_start":284,"line_end":284,"column_start":12,"column_end":27},"name":"make_spill_slot","qualname":"<StackSlots>::make_spill_slot","value":"fn (&mut self, ty: Type) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Create a new spill slot for spilling values of type `ty`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":392325,"byte_end":392342,"line_start":289,"line_end":289,"column_start":12,"column_end":29},"name":"make_incoming_arg","qualname":"<StackSlots>::make_incoming_arg","value":"fn (&mut self, ty: Type, offset: StackOffset) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Create a stack slot representing an incoming function argument.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":392968,"byte_end":392984,"line_start":303,"line_end":303,"column_start":12,"column_end":28},"name":"get_outgoing_arg","qualname":"<StackSlots>::get_outgoing_arg","value":"fn (&mut self, ty: Type, offset: StackOffset) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get a stack slot representing an outgoing argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1557},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":394004,"byte_end":394022,"line_start":327,"line_end":327,"column_start":12,"column_end":30},"name":"get_emergency_slot","qualname":"<StackSlots>::get_emergency_slot","value":"fn (&mut self, ty: Type, in_use: &[PackedOption<StackSlot>]) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get an emergency spill slot that can be used to store a `ty` value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7385},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398202,"byte_end":398211,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"TableData","qualname":"::ir::table::TableData","value":"TableData { base_gv, min_size, bound_gv, element_size, index_type }","parent":null,"children":[{"krate":0,"index":7386},{"krate":0,"index":7387},{"krate":0,"index":7388},{"krate":0,"index":7389},{"krate":0,"index":7390}],"decl_id":null,"docs":" Information about a table declaration.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7386},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398289,"byte_end":398296,"line_start":11,"line_end":11,"column_start":9,"column_end":16},"name":"base_gv","qualname":"::ir::table::TableData::base_gv","value":"ir::entities::GlobalValue","parent":{"krate":0,"index":7385},"children":[],"decl_id":null,"docs":" Global value giving the address of the start of the table.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7387},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398440,"byte_end":398448,"line_start":15,"line_end":15,"column_start":9,"column_end":17},"name":"min_size","qualname":"::ir::table::TableData::min_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":7385},"children":[],"decl_id":null,"docs":" Guaranteed minimum table size in elements. Table accesses before `min_size` don't need\n bounds checking.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7388},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398540,"byte_end":398548,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"bound_gv","qualname":"::ir::table::TableData::bound_gv","value":"ir::entities::GlobalValue","parent":{"krate":0,"index":7385},"children":[],"decl_id":null,"docs":" Global value giving the current bound of the table, in elements.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7389},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398619,"byte_end":398631,"line_start":21,"line_end":21,"column_start":9,"column_end":21},"name":"element_size","qualname":"::ir::table::TableData::element_size","value":"ir::immediates::Uimm64","parent":{"krate":0,"index":7385},"children":[],"decl_id":null,"docs":" The size of a table element, in bytes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7390},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398688,"byte_end":398698,"line_start":24,"line_end":24,"column_start":9,"column_end":19},"name":"index_type","qualname":"::ir::table::TableData::index_type","value":"ir::types::Type","parent":{"krate":0,"index":7385},"children":[],"decl_id":null,"docs":" The index type for the table.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7394},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":399666,"byte_end":399679,"line_start":18,"line_end":18,"column_start":5,"column_end":18},"name":"StackOverflow","qualname":"::ir::trapcode::TrapCode::StackOverflow","value":"TrapCode::StackOverflow","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" The current stack space was exhausted.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7396},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":399940,"byte_end":399955,"line_start":25,"line_end":25,"column_start":5,"column_end":20},"name":"HeapOutOfBounds","qualname":"::ir::trapcode::TrapCode::HeapOutOfBounds","value":"TrapCode::HeapOutOfBounds","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" A `heap_addr` instruction detected an out-of-bounds error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7398},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400030,"byte_end":400046,"line_start":28,"line_end":28,"column_start":5,"column_end":21},"name":"TableOutOfBounds","qualname":"::ir::trapcode::TrapCode::TableOutOfBounds","value":"TrapCode::TableOutOfBounds","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" A `table_addr` instruction detected an out-of-bounds error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7400},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400090,"byte_end":400101,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::ir::trapcode::TrapCode::OutOfBounds","value":"TrapCode::OutOfBounds","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" Other bounds checking error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7402},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400153,"byte_end":400171,"line_start":34,"line_end":34,"column_start":5,"column_end":23},"name":"IndirectCallToNull","qualname":"::ir::trapcode::TrapCode::IndirectCallToNull","value":"TrapCode::IndirectCallToNull","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" Indirect call to a null table entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7404},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400223,"byte_end":400235,"line_start":37,"line_end":37,"column_start":5,"column_end":17},"name":"BadSignature","qualname":"::ir::trapcode::TrapCode::BadSignature","value":"TrapCode::BadSignature","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" Signature mismatch on indirect call.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7406},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400302,"byte_end":400317,"line_start":40,"line_end":40,"column_start":5,"column_end":20},"name":"IntegerOverflow","qualname":"::ir::trapcode::TrapCode::IntegerOverflow","value":"TrapCode::IntegerOverflow","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" An integer arithmetic operation caused an overflow.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7408},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400361,"byte_end":400382,"line_start":43,"line_end":43,"column_start":5,"column_end":26},"name":"IntegerDivisionByZero","qualname":"::ir::trapcode::TrapCode::IntegerDivisionByZero","value":"TrapCode::IntegerDivisionByZero","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" An integer division by zero.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7410},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400429,"byte_end":400451,"line_start":46,"line_end":46,"column_start":5,"column_end":27},"name":"BadConversionToInteger","qualname":"::ir::trapcode::TrapCode::BadConversionToInteger","value":"TrapCode::BadConversionToInteger","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" Failed float-to-int conversion.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7412},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400527,"byte_end":400549,"line_start":49,"line_end":49,"column_start":5,"column_end":27},"name":"UnreachableCodeReached","qualname":"::ir::trapcode::TrapCode::UnreachableCodeReached","value":"TrapCode::UnreachableCodeReached","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" Code that was supposed to have been unreachable was reached.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7414},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400659,"byte_end":400668,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"name":"Interrupt","qualname":"::ir::trapcode::TrapCode::Interrupt","value":"TrapCode::Interrupt","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" Execution has potentially run too long and may be interrupted.\n This trap is resumable.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7416},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400709,"byte_end":400713,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"User","qualname":"::ir::trapcode::TrapCode::User","value":"TrapCode::User(u16)","parent":{"krate":0,"index":7393},"children":[],"decl_id":null,"docs":" A user-defined trap code.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7393},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":399471,"byte_end":399479,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"TrapCode","qualname":"::ir::trapcode::TrapCode","value":"TrapCode::{StackOverflow, HeapOutOfBounds, TableOutOfBounds, OutOfBounds, IndirectCallToNull, BadSignature, IntegerOverflow, IntegerDivisionByZero, BadConversionToInteger, UnreachableCodeReached, Interrupt, User}","parent":null,"children":[{"krate":0,"index":7394},{"krate":0,"index":7396},{"krate":0,"index":7398},{"krate":0,"index":7400},{"krate":0,"index":7402},{"krate":0,"index":7404},{"krate":0,"index":7406},{"krate":0,"index":7408},{"krate":0,"index":7410},{"krate":0,"index":7412},{"krate":0,"index":7414},{"krate":0,"index":7416}],"decl_id":null,"docs":" A trap code describing the reason for a trap.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1584},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"types","qualname":"::ir::types","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":7432},{"krate":0,"index":7445},{"krate":0,"index":7443},{"krate":0,"index":7440},{"krate":0,"index":7438},{"krate":0,"index":7435},{"krate":0,"index":1595},{"krate":0,"index":7446},{"krate":0,"index":7447},{"krate":0,"index":7448},{"krate":0,"index":7449},{"krate":0,"index":7450},{"krate":0,"index":7451},{"krate":0,"index":7452},{"krate":0,"index":7453},{"krate":0,"index":7454},{"krate":0,"index":7455},{"krate":0,"index":7456},{"krate":0,"index":7457},{"krate":0,"index":7458},{"krate":0,"index":7459},{"krate":0,"index":7460},{"krate":0,"index":7461},{"krate":0,"index":7462},{"krate":0,"index":7463},{"krate":0,"index":7464},{"krate":0,"index":7465},{"krate":0,"index":7466},{"krate":0,"index":7467},{"krate":0,"index":7468},{"krate":0,"index":7469},{"krate":0,"index":7470},{"krate":0,"index":7471},{"krate":0,"index":7472},{"krate":0,"index":7473},{"krate":0,"index":7474},{"krate":0,"index":7475},{"krate":0,"index":7476},{"krate":0,"index":7477},{"krate":0,"index":7478},{"krate":0,"index":7479},{"krate":0,"index":7480},{"krate":0,"index":7481},{"krate":0,"index":7482},{"krate":0,"index":7483},{"krate":0,"index":7484},{"krate":0,"index":7485},{"krate":0,"index":7486},{"krate":0,"index":7487},{"krate":0,"index":7488},{"krate":0,"index":7489},{"krate":0,"index":7490},{"krate":0,"index":7491},{"krate":0,"index":7492},{"krate":0,"index":7493},{"krate":0,"index":7494},{"krate":0,"index":7495},{"krate":0,"index":7496},{"krate":0,"index":7497},{"krate":0,"index":7498},{"krate":0,"index":7499},{"krate":0,"index":7500},{"krate":0,"index":7501},{"krate":0,"index":7502},{"krate":0,"index":7503},{"krate":0,"index":1596},{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1629}],"decl_id":null,"docs":" Common types for the Cranelift code generator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7432},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":404295,"byte_end":404299,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"Type","qualname":"::ir::types::Type","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type of an SSA value.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1595},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":404397,"byte_end":404404,"line_start":27,"line_end":27,"column_start":11,"column_end":18},"name":"INVALID","qualname":"::ir::types::INVALID","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" Not a valid type. Can't be loaded or stored. Can't be part of a SIMD vector.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7446},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172425,"byte_end":11172431,"line_start":3,"line_end":3,"column_start":11,"column_end":17},"name":"IFLAGS","qualname":"::ir::types::IFLAGS","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" CPU flags representing the result of an integer comparison. These flags\n can be tested with an :type:`intcc` condition code.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7447},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172601,"byte_end":11172607,"line_start":7,"line_end":7,"column_start":11,"column_end":17},"name":"FFLAGS","qualname":"::ir::types::FFLAGS","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" CPU flags representing the result of a floating point comparison. These\n flags can be tested with a :type:`floatcc` condition code.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7448},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172670,"byte_end":11172672,"line_start":10,"line_end":10,"column_start":11,"column_end":13},"name":"B1","qualname":"::ir::types::B1","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 1 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7449},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172736,"byte_end":11172738,"line_start":13,"line_end":13,"column_start":11,"column_end":13},"name":"B8","qualname":"::ir::types::B8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 8 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7450},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172803,"byte_end":11172806,"line_start":16,"line_end":16,"column_start":11,"column_end":14},"name":"B16","qualname":"::ir::types::B16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 16 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7451},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172871,"byte_end":11172874,"line_start":19,"line_end":19,"column_start":11,"column_end":14},"name":"B32","qualname":"::ir::types::B32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 32 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7452},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11172939,"byte_end":11172942,"line_start":22,"line_end":22,"column_start":11,"column_end":14},"name":"B64","qualname":"::ir::types::B64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 64 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7453},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173008,"byte_end":11173012,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"B128","qualname":"::ir::types::B128","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A boolean type with 128 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7454},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173132,"byte_end":11173134,"line_start":29,"line_end":29,"column_start":11,"column_end":13},"name":"I8","qualname":"::ir::types::I8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 8 bits.\n WARNING: arithmetic on 8bit integers is incomplete\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7455},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173256,"byte_end":11173259,"line_start":33,"line_end":33,"column_start":11,"column_end":14},"name":"I16","qualname":"::ir::types::I16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 16 bits.\n WARNING: arithmetic on 16bit integers is incomplete\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7456},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173325,"byte_end":11173328,"line_start":36,"line_end":36,"column_start":11,"column_end":14},"name":"I32","qualname":"::ir::types::I32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 32 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7457},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173394,"byte_end":11173397,"line_start":39,"line_end":39,"column_start":11,"column_end":14},"name":"I64","qualname":"::ir::types::I64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 64 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7458},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173464,"byte_end":11173468,"line_start":42,"line_end":42,"column_start":11,"column_end":15},"name":"I128","qualname":"::ir::types::I128","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An integer type with 128 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7459},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173677,"byte_end":11173680,"line_start":47,"line_end":47,"column_start":11,"column_end":14},"name":"F32","qualname":"::ir::types::F32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A 32-bit floating point type represented in the IEEE 754-2008\n *binary32* interchange format. This corresponds to the :c:type:`float`\n type in most C implementations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7460},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173890,"byte_end":11173893,"line_start":52,"line_end":52,"column_start":11,"column_end":14},"name":"F64","qualname":"::ir::types::F64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A 64-bit floating point type represented in the IEEE 754-2008\n *binary64* interchange format. This corresponds to the :c:type:`double`\n type in most C implementations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7461},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11173968,"byte_end":11173971,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"R32","qualname":"::ir::types::R32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference type with 32 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7462},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174046,"byte_end":11174049,"line_start":58,"line_end":58,"column_start":11,"column_end":14},"name":"R64","qualname":"::ir::types::R64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" An opaque reference type with 64 bits.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7463},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174136,"byte_end":11174140,"line_start":61,"line_end":61,"column_start":11,"column_end":15},"name":"B8X8","qualname":"::ir::types::B8X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7464},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174228,"byte_end":11174233,"line_start":64,"line_end":64,"column_start":11,"column_end":16},"name":"B16X4","qualname":"::ir::types::B16X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7465},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174321,"byte_end":11174326,"line_start":67,"line_end":67,"column_start":11,"column_end":16},"name":"B32X2","qualname":"::ir::types::B32X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7466},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174413,"byte_end":11174417,"line_start":70,"line_end":70,"column_start":11,"column_end":15},"name":"I8X8","qualname":"::ir::types::I8X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7467},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174505,"byte_end":11174510,"line_start":73,"line_end":73,"column_start":11,"column_end":16},"name":"I16X4","qualname":"::ir::types::I16X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7468},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174598,"byte_end":11174603,"line_start":76,"line_end":76,"column_start":11,"column_end":16},"name":"I32X2","qualname":"::ir::types::I32X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7469},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174691,"byte_end":11174696,"line_start":79,"line_end":79,"column_start":11,"column_end":16},"name":"F32X2","qualname":"::ir::types::F32X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7470},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174784,"byte_end":11174789,"line_start":82,"line_end":82,"column_start":11,"column_end":16},"name":"B8X16","qualname":"::ir::types::B8X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7471},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174877,"byte_end":11174882,"line_start":85,"line_end":85,"column_start":11,"column_end":16},"name":"B16X8","qualname":"::ir::types::B16X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7472},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11174970,"byte_end":11174975,"line_start":88,"line_end":88,"column_start":11,"column_end":16},"name":"B32X4","qualname":"::ir::types::B32X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7473},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175063,"byte_end":11175068,"line_start":91,"line_end":91,"column_start":11,"column_end":16},"name":"B64X2","qualname":"::ir::types::B64X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `b64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7474},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175156,"byte_end":11175161,"line_start":94,"line_end":94,"column_start":11,"column_end":16},"name":"I8X16","qualname":"::ir::types::I8X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7475},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175249,"byte_end":11175254,"line_start":97,"line_end":97,"column_start":11,"column_end":16},"name":"I16X8","qualname":"::ir::types::I16X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7476},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175342,"byte_end":11175347,"line_start":100,"line_end":100,"column_start":11,"column_end":16},"name":"I32X4","qualname":"::ir::types::I32X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7477},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175435,"byte_end":11175440,"line_start":103,"line_end":103,"column_start":11,"column_end":16},"name":"I64X2","qualname":"::ir::types::I64X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `i64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7478},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175528,"byte_end":11175533,"line_start":106,"line_end":106,"column_start":11,"column_end":16},"name":"F32X4","qualname":"::ir::types::F32X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7479},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175621,"byte_end":11175626,"line_start":109,"line_end":109,"column_start":11,"column_end":16},"name":"F64X2","qualname":"::ir::types::F64X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `f64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7480},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175714,"byte_end":11175719,"line_start":112,"line_end":112,"column_start":11,"column_end":16},"name":"B8X32","qualname":"::ir::types::B8X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7481},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175808,"byte_end":11175814,"line_start":115,"line_end":115,"column_start":11,"column_end":17},"name":"B16X16","qualname":"::ir::types::B16X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7482},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175902,"byte_end":11175907,"line_start":118,"line_end":118,"column_start":11,"column_end":16},"name":"B32X8","qualname":"::ir::types::B32X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7483},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11175995,"byte_end":11176000,"line_start":121,"line_end":121,"column_start":11,"column_end":16},"name":"B64X4","qualname":"::ir::types::B64X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7484},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176089,"byte_end":11176095,"line_start":124,"line_end":124,"column_start":11,"column_end":17},"name":"B128X2","qualname":"::ir::types::B128X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `b128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7485},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176183,"byte_end":11176188,"line_start":127,"line_end":127,"column_start":11,"column_end":16},"name":"I8X32","qualname":"::ir::types::I8X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7486},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176277,"byte_end":11176283,"line_start":130,"line_end":130,"column_start":11,"column_end":17},"name":"I16X16","qualname":"::ir::types::I16X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7487},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176371,"byte_end":11176376,"line_start":133,"line_end":133,"column_start":11,"column_end":16},"name":"I32X8","qualname":"::ir::types::I32X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7488},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176464,"byte_end":11176469,"line_start":136,"line_end":136,"column_start":11,"column_end":16},"name":"I64X4","qualname":"::ir::types::I64X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7489},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176558,"byte_end":11176564,"line_start":139,"line_end":139,"column_start":11,"column_end":17},"name":"I128X2","qualname":"::ir::types::I128X2","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 2 lanes containing a `i128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7490},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176652,"byte_end":11176657,"line_start":142,"line_end":142,"column_start":11,"column_end":16},"name":"F32X8","qualname":"::ir::types::F32X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7491},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176745,"byte_end":11176750,"line_start":145,"line_end":145,"column_start":11,"column_end":16},"name":"F64X4","qualname":"::ir::types::F64X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `f64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7492},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176838,"byte_end":11176843,"line_start":148,"line_end":148,"column_start":11,"column_end":16},"name":"B8X64","qualname":"::ir::types::B8X64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 64 lanes containing a `b8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7493},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11176932,"byte_end":11176938,"line_start":151,"line_end":151,"column_start":11,"column_end":17},"name":"B16X32","qualname":"::ir::types::B16X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `b16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7494},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177027,"byte_end":11177033,"line_start":154,"line_end":154,"column_start":11,"column_end":17},"name":"B32X16","qualname":"::ir::types::B32X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `b32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7495},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177121,"byte_end":11177126,"line_start":157,"line_end":157,"column_start":11,"column_end":16},"name":"B64X8","qualname":"::ir::types::B64X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `b64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7496},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177215,"byte_end":11177221,"line_start":160,"line_end":160,"column_start":11,"column_end":17},"name":"B128X4","qualname":"::ir::types::B128X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `b128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7497},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177309,"byte_end":11177314,"line_start":163,"line_end":163,"column_start":11,"column_end":16},"name":"I8X64","qualname":"::ir::types::I8X64","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 64 lanes containing a `i8` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7498},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177403,"byte_end":11177409,"line_start":166,"line_end":166,"column_start":11,"column_end":17},"name":"I16X32","qualname":"::ir::types::I16X32","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 32 lanes containing a `i16` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7499},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177498,"byte_end":11177504,"line_start":169,"line_end":169,"column_start":11,"column_end":17},"name":"I32X16","qualname":"::ir::types::I32X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `i32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7500},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177592,"byte_end":11177597,"line_start":172,"line_end":172,"column_start":11,"column_end":16},"name":"I64X8","qualname":"::ir::types::I64X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `i64` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7501},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177686,"byte_end":11177692,"line_start":175,"line_end":175,"column_start":11,"column_end":17},"name":"I128X4","qualname":"::ir::types::I128X4","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 4 lanes containing a `i128` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7502},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177781,"byte_end":11177787,"line_start":178,"line_end":178,"column_start":11,"column_end":17},"name":"F32X16","qualname":"::ir::types::F32X16","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 16 lanes containing a `f32` each.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7503},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/types.rs","byte_start":11177875,"byte_end":11177880,"line_start":181,"line_end":181,"column_start":11,"column_end":16},"name":"F64X8","qualname":"::ir::types::F64X8","value":"Type","parent":null,"children":[],"decl_id":null,"docs":" A SIMD vector with 8 lanes containing a `f64` each.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":404861,"byte_end":404870,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"lane_type","qualname":"<Type>::lane_type","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the lane type of this SIMD vector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":405263,"byte_end":405270,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"lane_of","qualname":"<Type>::lane_of","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The type transformation that returns the lane type of a type variable; it is just a\n renaming of lane_type() to be used in context where we think in terms of type variable\n transformations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":405381,"byte_end":405395,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"log2_lane_bits","qualname":"<Type>::log2_lane_bits","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get log_2 of the number of bits in a lane.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":405718,"byte_end":405727,"line_start":67,"line_end":67,"column_start":12,"column_end":21},"name":"lane_bits","qualname":"<Type>::lane_bits","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of bits in a lane.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":406076,"byte_end":406079,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"int","qualname":"<Type>::int","value":"fn (bits: u16) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get an integer type with the requested number of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":406842,"byte_end":406858,"line_start":102,"line_end":102,"column_start":12,"column_end":28},"name":"as_bool_pedantic","qualname":"<Type>::as_bool_pedantic","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with the lanes replaced by\n booleans of the same size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":407520,"byte_end":407527,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"as_bool","qualname":"<Type>::as_bool","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with the lanes replaced by\n booleans of the same size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":407791,"byte_end":407801,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"half_width","qualname":"<Type>::half_width","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with lanes that are half the\n number of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":408280,"byte_end":408292,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"double_width","qualname":"<Type>::double_width","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a type with the same number of lanes as this type, but with lanes that are twice the\n number of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1607},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":408684,"byte_end":408694,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"is_invalid","qualname":"<Type>::is_invalid","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the INVALID type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1608},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":408785,"byte_end":408795,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"is_special","qualname":"<Type>::is_special","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a special type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":408991,"byte_end":408998,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"is_lane","qualname":"<Type>::is_lane","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a lane type?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":409194,"byte_end":409203,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"is_vector","qualname":"<Type>::is_vector","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a SIMD vector type?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":409318,"byte_end":409325,"line_start":186,"line_end":186,"column_start":12,"column_end":19},"name":"is_bool","qualname":"<Type>::is_bool","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a scalar boolean type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1612},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":409508,"byte_end":409514,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"is_int","qualname":"<Type>::is_int","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a scalar integer type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":409699,"byte_end":409707,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"is_float","qualname":"<Type>::is_float","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a scalar floating point type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":409862,"byte_end":409870,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"is_flags","qualname":"<Type>::is_flags","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a CPU flags type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1615},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":410025,"byte_end":410031,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"is_ref","qualname":"<Type>::is_ref","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a ref type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1616},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":410462,"byte_end":410477,"line_start":231,"line_end":231,"column_start":12,"column_end":27},"name":"log2_lane_count","qualname":"<Type>::log2_lane_count","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get log_2 of the number of lanes in this SIMD vector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1617},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":410721,"byte_end":410731,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"lane_count","qualname":"<Type>::lane_count","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the number of lanes in this SIMD vector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":410867,"byte_end":410871,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"bits","qualname":"<Type>::bits","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of bits used to represent this type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":411028,"byte_end":411033,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Type>::bytes","value":"fn (self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the number of bytes used to store this type in memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":411420,"byte_end":411422,"line_start":258,"line_end":258,"column_start":12,"column_end":14},"name":"by","qualname":"<Type>::by","value":"fn (self, n: u16) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a SIMD vector type with `n` times more lanes than this one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":411926,"byte_end":411937,"line_start":274,"line_end":274,"column_start":12,"column_end":23},"name":"half_vector","qualname":"<Type>::half_vector","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a SIMD vector with half the number of lanes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":412150,"byte_end":412155,"line_start":283,"line_end":283,"column_start":12,"column_end":17},"name":"index","qualname":"<Type>::index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Index of this type, for use with hash tables etc.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":412353,"byte_end":412367,"line_start":291,"line_end":291,"column_start":12,"column_end":26},"name":"wider_or_equal","qualname":"<Type>::wider_or_equal","value":"fn (self, other: Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True iff:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":412565,"byte_end":412584,"line_start":296,"line_end":296,"column_start":12,"column_end":31},"name":"triple_pointer_type","qualname":"<Type>::triple_pointer_type","value":"fn (triple: &Triple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the pointer type for the given target triple.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7505},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":420954,"byte_end":420964,"line_start":18,"line_end":18,"column_start":5,"column_end":15},"name":"Unassigned","qualname":"::ir::valueloc::ValueLoc::Unassigned","value":"ValueLoc::Unassigned","parent":{"krate":0,"index":7504},"children":[],"decl_id":null,"docs":" This value has not been assigned to a location yet.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7507},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421011,"byte_end":421014,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Reg","qualname":"::ir::valueloc::ValueLoc::Reg","value":"ValueLoc::Reg(RegUnit)","parent":{"krate":0,"index":7504},"children":[],"decl_id":null,"docs":" Value is assigned to a register.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7510},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421072,"byte_end":421077,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"name":"Stack","qualname":"::ir::valueloc::ValueLoc::Stack","value":"ValueLoc::Stack(StackSlot)","parent":{"krate":0,"index":7504},"children":[],"decl_id":null,"docs":" Value is assigned to a stack slot.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7504},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":420879,"byte_end":420887,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"ValueLoc","qualname":"::ir::valueloc::ValueLoc","value":"ValueLoc::{Unassigned, Reg, Stack}","parent":null,"children":[{"krate":0,"index":7505},{"krate":0,"index":7507},{"krate":0,"index":7510}],"decl_id":null,"docs":" Value location.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421276,"byte_end":421287,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"is_assigned","qualname":"<ValueLoc>::is_assigned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an assigned location? (That is, not `Unassigned`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421473,"byte_end":421483,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"unwrap_reg","qualname":"<ValueLoc>::unwrap_reg","value":"fn (self) -> RegUnit","parent":null,"children":[],"decl_id":null,"docs":" Get the register unit of this location, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421698,"byte_end":421710,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"unwrap_stack","qualname":"<ValueLoc>::unwrap_stack","value":"fn (self) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get the stack slot of this location, or panic.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421992,"byte_end":421999,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"display","qualname":"<ValueLoc>::display","value":"fn <'a, R> (self, regs: R) -> DisplayValueLoc<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this value location, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1646},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":422377,"byte_end":422392,"line_start":67,"line_end":67,"column_start":12,"column_end":27},"name":"DisplayValueLoc","qualname":"::ir::valueloc::DisplayValueLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying a `ValueLoc` correctly requires the associated `RegInfo` from the target ISA.\n Without the register info, register units are simply show as numbers.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7524},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424021,"byte_end":424031,"line_start":103,"line_end":103,"column_start":5,"column_end":15},"name":"Unassigned","qualname":"::ir::valueloc::ArgumentLoc::Unassigned","value":"ArgumentLoc::Unassigned","parent":{"krate":0,"index":7523},"children":[],"decl_id":null,"docs":" This argument has not been assigned to a location yet.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7526},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424079,"byte_end":424082,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"Reg","qualname":"::ir::valueloc::ArgumentLoc::Reg","value":"ArgumentLoc::Reg(RegUnit)","parent":{"krate":0,"index":7523},"children":[],"decl_id":null,"docs":" Argument is passed in a register.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7529},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424188,"byte_end":424193,"line_start":107,"line_end":107,"column_start":5,"column_end":10},"name":"Stack","qualname":"::ir::valueloc::ArgumentLoc::Stack","value":"ArgumentLoc::Stack(i32)","parent":{"krate":0,"index":7523},"children":[],"decl_id":null,"docs":" Argument is passed on the stack, at the given byte offset into the argument array.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7523},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":423940,"byte_end":423951,"line_start":101,"line_end":101,"column_start":10,"column_end":21},"name":"ArgumentLoc","qualname":"::ir::valueloc::ArgumentLoc","value":"ArgumentLoc::{Unassigned, Reg, Stack}","parent":null,"children":[{"krate":0,"index":7524},{"krate":0,"index":7526},{"krate":0,"index":7529}],"decl_id":null,"docs":" Function argument location.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424392,"byte_end":424403,"line_start":118,"line_end":118,"column_start":12,"column_end":23},"name":"is_assigned","qualname":"<ArgumentLoc>::is_assigned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an assigned location? (That is, not `Unassigned`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424568,"byte_end":424574,"line_start":126,"line_end":126,"column_start":12,"column_end":18},"name":"is_reg","qualname":"<ArgumentLoc>::is_reg","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a register location?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424732,"byte_end":424740,"line_start":134,"line_end":134,"column_start":12,"column_end":20},"name":"is_stack","qualname":"<ArgumentLoc>::is_stack","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a stack location?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424985,"byte_end":424992,"line_start":143,"line_end":143,"column_start":12,"column_end":19},"name":"display","qualname":"<ArgumentLoc>::display","value":"fn <'a, R> (self, regs: R) -> DisplayArgumentLoc<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this argument location, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1663},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":425385,"byte_end":425403,"line_start":152,"line_end":152,"column_start":12,"column_end":30},"name":"DisplayArgumentLoc","qualname":"::ir::valueloc::DisplayArgumentLoc","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying a `ArgumentLoc` correctly requires the associated `RegInfo` from the target ISA.\n Without the register info, register units are simply show as numbers.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1750},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120418,"byte_end":120432,"line_start":68,"line_end":68,"column_start":10,"column_end":24},"name":"ValueLocations","qualname":"::ir::ValueLocations","value":"SecondaryMap<Value, ValueLoc>","parent":null,"children":[],"decl_id":null,"docs":" Map of value locations.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1751},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120500,"byte_end":120510,"line_start":71,"line_end":71,"column_start":10,"column_end":20},"name":"JumpTables","qualname":"::ir::JumpTables","value":"PrimaryMap<JumpTable, JumpTableData>","parent":null,"children":[],"decl_id":null,"docs":" Map of jump tables.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1752},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120595,"byte_end":120608,"line_start":74,"line_end":74,"column_start":10,"column_end":23},"name":"InstEncodings","qualname":"::ir::InstEncodings","value":"SecondaryMap<Inst, isa::Encoding>","parent":null,"children":[],"decl_id":null,"docs":" Map of instruction encodings.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1753},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120685,"byte_end":120697,"line_start":77,"line_end":77,"column_start":10,"column_end":22},"name":"BlockOffsets","qualname":"::ir::BlockOffsets","value":"SecondaryMap<Block, binemit::CodeOffset>","parent":null,"children":[],"decl_id":null,"docs":" Code offsets for blocks.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1754},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120786,"byte_end":120802,"line_start":80,"line_end":80,"column_start":10,"column_end":26},"name":"JumpTableOffsets","qualname":"::ir::JumpTableOffsets","value":"SecondaryMap<JumpTable, binemit::CodeOffset>","parent":null,"children":[],"decl_id":null,"docs":" Code offsets for Jump Tables.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1755},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":120900,"byte_end":120910,"line_start":83,"line_end":83,"column_start":10,"column_end":20},"name":"SourceLocs","qualname":"::ir::SourceLocs","value":"SecondaryMap<Inst, SourceLoc>","parent":null,"children":[],"decl_id":null,"docs":" Source locations for instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7545},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121101,"byte_end":121111,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"ValueLabel","qualname":"::ir::ValueLabel","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marked with a label value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7571},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121211,"byte_end":121226,"line_start":93,"line_end":93,"column_start":12,"column_end":27},"name":"ValueLabelStart","qualname":"::ir::ValueLabelStart","value":"ValueLabelStart { from, label }","parent":null,"children":[{"krate":0,"index":7572},{"krate":0,"index":7573}],"decl_id":null,"docs":" A label of a Value.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7572},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121282,"byte_end":121286,"line_start":95,"line_end":95,"column_start":9,"column_end":13},"name":"from","qualname":"::ir::ValueLabelStart::from","value":"ir::sourceloc::SourceLoc","parent":{"krate":0,"index":7571},"children":[],"decl_id":null,"docs":" Source location when it is in effect\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7573},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121333,"byte_end":121338,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"name":"label","qualname":"::ir::ValueLabelStart::label","value":"ir::ValueLabel","parent":{"krate":0,"index":7571},"children":[],"decl_id":null,"docs":" The label index.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7579},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121530,"byte_end":121536,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Starts","qualname":"::ir::ValueLabelAssignments::Starts","value":"ValueLabelAssignments::Starts(alloc::vec::Vec<ValueLabelStart>)","parent":{"krate":0,"index":7578},"children":[],"decl_id":null,"docs":" Original value labels assigned at transform.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":7582},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121618,"byte_end":121623,"line_start":108,"line_end":108,"column_start":5,"column_end":10},"name":"Alias","qualname":"::ir::ValueLabelAssignments::Alias","value":"ValueLabelAssignments::Alias { from, value }","parent":{"krate":0,"index":7578},"children":[],"decl_id":null,"docs":" A value alias to original value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7578},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":121449,"byte_end":121470,"line_start":103,"line_end":103,"column_start":10,"column_end":31},"name":"ValueLabelAssignments","qualname":"::ir::ValueLabelAssignments","value":"ValueLabelAssignments::{Starts, Alias}","parent":null,"children":[{"krate":0,"index":7579},{"krate":0,"index":7582}],"decl_id":null,"docs":" Value label assignements: label starts or value aliases.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1756},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isa","qualname":"::isa","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","parent":null,"children":[{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1763},{"krate":0,"index":1767},{"krate":0,"index":1773},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":2220},{"krate":0,"index":2238},{"krate":0,"index":2254},{"krate":0,"index":2321},{"krate":0,"index":2358},{"krate":0,"index":2432},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":8071},{"krate":0,"index":8085},{"krate":0,"index":8086},{"krate":0,"index":8083},{"krate":0,"index":8081},{"krate":0,"index":8080},{"krate":0,"index":8078},{"krate":0,"index":8076},{"krate":0,"index":2447},{"krate":0,"index":2451},{"krate":0,"index":2453},{"krate":0,"index":2456},{"krate":0,"index":8088},{"krate":0,"index":8092},{"krate":0,"index":8091},{"krate":0,"index":2457},{"krate":0,"index":2461}],"decl_id":null,"docs":" Instruction Set Architectures.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7916},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580187,"byte_end":580191,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Fast","qualname":"::isa::call_conv::CallConv::Fast","value":"CallConv::Fast","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" Best performance, not ABI-stable\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7918},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580247,"byte_end":580251,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Cold","qualname":"::isa::call_conv::CallConv::Cold","value":"CallConv::Cold","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" Smallest caller code size, not ABI-stable\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7920},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580314,"byte_end":580321,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"SystemV","qualname":"::isa::call_conv::CallConv::SystemV","value":"CallConv::SystemV","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" System V-style convention used on many platforms\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7922},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580392,"byte_end":580407,"line_start":17,"line_end":17,"column_start":5,"column_end":20},"name":"WindowsFastcall","qualname":"::isa::call_conv::CallConv::WindowsFastcall","value":"CallConv::WindowsFastcall","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" Windows \"fastcall\" convention, also used for x64 and ARM\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7924},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580491,"byte_end":580507,"line_start":19,"line_end":19,"column_start":5,"column_end":21},"name":"BaldrdashSystemV","qualname":"::isa::call_conv::CallConv::BaldrdashSystemV","value":"CallConv::BaldrdashSystemV","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" SpiderMonkey WebAssembly convention on systems using natively SystemV\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7926},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580568,"byte_end":580584,"line_start":21,"line_end":21,"column_start":5,"column_end":21},"name":"BaldrdashWindows","qualname":"::isa::call_conv::CallConv::BaldrdashWindows","value":"CallConv::BaldrdashWindows","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" SpiderMonkey WebAssembly convention on Windows\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7928},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580649,"byte_end":580659,"line_start":23,"line_end":23,"column_start":5,"column_end":15},"name":"Probestack","qualname":"::isa::call_conv::CallConv::Probestack","value":"CallConv::Probestack","parent":{"krate":0,"index":7915},"children":[],"decl_id":null,"docs":" Specialized convention for the probestack function\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7915},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580131,"byte_end":580139,"line_start":9,"line_end":9,"column_start":10,"column_end":18},"name":"CallConv","qualname":"::isa::call_conv::CallConv","value":"CallConv::{Fast, Cold, SystemV, WindowsFastcall, BaldrdashSystemV, BaldrdashWindows, Probestack}","parent":null,"children":[{"krate":0,"index":7916},{"krate":0,"index":7918},{"krate":0,"index":7920},{"krate":0,"index":7922},{"krate":0,"index":7924},{"krate":0,"index":7926},{"krate":0,"index":7928}],"decl_id":null,"docs":" Calling convention identifiers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2229},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580766,"byte_end":580780,"line_start":28,"line_end":28,"column_start":12,"column_end":26},"name":"triple_default","qualname":"<CallConv>::triple_default","value":"fn (triple: &Triple) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the default calling convention for the given target triple.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":581297,"byte_end":581308,"line_start":39,"line_end":39,"column_start":12,"column_end":23},"name":"for_libcall","qualname":"<CallConv>::for_libcall","value":"fn (isa: &dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the calling convention used for libcalls for the given ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2231},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":581985,"byte_end":582009,"line_start":53,"line_end":53,"column_start":12,"column_end":36},"name":"extends_windows_fastcall","qualname":"<CallConv>::extends_windows_fastcall","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the calling convention extending the Windows Fastcall ABI?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":582230,"byte_end":582247,"line_start":61,"line_end":61,"column_start":12,"column_end":29},"name":"extends_baldrdash","qualname":"<CallConv>::extends_baldrdash","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the calling convention extending the Baldrdash ABI?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7942},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":584112,"byte_end":584129,"line_start":17,"line_end":17,"column_start":12,"column_end":29},"name":"OperandConstraint","qualname":"::isa::constraints::OperandConstraint","value":"OperandConstraint { kind, regclass }","parent":null,"children":[{"krate":0,"index":7943},{"krate":0,"index":7944}],"decl_id":null,"docs":" Register constraint for a single value operand or instruction result.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7943},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":584172,"byte_end":584176,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"name":"kind","qualname":"::isa::constraints::OperandConstraint::kind","value":"isa::constraints::ConstraintKind","parent":{"krate":0,"index":7942},"children":[],"decl_id":null,"docs":" The kind of constraint.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7944},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":584341,"byte_end":584349,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"regclass","qualname":"::isa::constraints::OperandConstraint::regclass","value":"&'static isa::registers::RegClassData","parent":{"krate":0,"index":7942},"children":[],"decl_id":null,"docs":" The register class of the operand.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2249},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":584620,"byte_end":584629,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"satisfied","qualname":"<OperandConstraint>::satisfied","value":"fn (&self, loc: ValueLoc) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this operand constraint is satisfied by the given value location.\n For tied constraints, this only checks the register class, not that the\n counterpart operand has the same value location.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7951},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":585519,"byte_end":585522,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"Reg","qualname":"::isa::constraints::ConstraintKind::Reg","value":"ConstraintKind::Reg","parent":{"krate":0,"index":7950},"children":[],"decl_id":null,"docs":" This operand or result must be a register from the given register class.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7953},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":585707,"byte_end":585715,"line_start":64,"line_end":64,"column_start":5,"column_end":13},"name":"FixedReg","qualname":"::isa::constraints::ConstraintKind::FixedReg","value":"ConstraintKind::FixedReg(RegUnit)","parent":{"krate":0,"index":7950},"children":[],"decl_id":null,"docs":" This operand or result must be a fixed register.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7956},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":586251,"byte_end":586255,"line_start":74,"line_end":74,"column_start":5,"column_end":9},"name":"Tied","qualname":"::isa::constraints::ConstraintKind::Tied","value":"ConstraintKind::Tied(u8)","parent":{"krate":0,"index":7950},"children":[],"decl_id":null,"docs":" This result value must use the same register as an input value operand.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7959},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":586593,"byte_end":586602,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"FixedTied","qualname":"::isa::constraints::ConstraintKind::FixedTied","value":"ConstraintKind::FixedTied(RegUnit)","parent":{"krate":0,"index":7950},"children":[],"decl_id":null,"docs":" This operand must be a fixed register, and it has a tied counterpart.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7962},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":586819,"byte_end":586824,"line_start":87,"line_end":87,"column_start":5,"column_end":10},"name":"Stack","qualname":"::isa::constraints::ConstraintKind::Stack","value":"ConstraintKind::Stack","parent":{"krate":0,"index":7950},"children":[],"decl_id":null,"docs":" This operand must be a value in a stack slot.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7950},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":585417,"byte_end":585431,"line_start":56,"line_end":56,"column_start":10,"column_end":24},"name":"ConstraintKind","qualname":"::isa::constraints::ConstraintKind","value":"ConstraintKind::{Reg, FixedReg, Tied, FixedTied, Stack}","parent":null,"children":[{"krate":0,"index":7951},{"krate":0,"index":7953},{"krate":0,"index":7956},{"krate":0,"index":7959},{"krate":0,"index":7962}],"decl_id":null,"docs":" The different kinds of operand constraints.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7974},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":586922,"byte_end":586939,"line_start":92,"line_end":92,"column_start":12,"column_end":29},"name":"RecipeConstraints","qualname":"::isa::constraints::RecipeConstraints","value":"RecipeConstraints { ins, outs, fixed_ins, fixed_outs, tied_ops, clobbers_flags }","parent":null,"children":[{"krate":0,"index":7975},{"krate":0,"index":7976},{"krate":0,"index":7977},{"krate":0,"index":7978},{"krate":0,"index":7979},{"krate":0,"index":7980}],"decl_id":null,"docs":" Value operand constraints for an encoding recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7975},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":587363,"byte_end":587366,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"name":"ins","qualname":"::isa::constraints::RecipeConstraints::ins","value":"&'static [isa::constraints::OperandConstraint]","parent":{"krate":0,"index":7974},"children":[],"decl_id":null,"docs":" Constraints for the instruction's fixed value operands.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7976},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":587636,"byte_end":587640,"line_start":106,"line_end":106,"column_start":9,"column_end":13},"name":"outs","qualname":"::isa::constraints::RecipeConstraints::outs","value":"&'static [isa::constraints::OperandConstraint]","parent":{"krate":0,"index":7974},"children":[],"decl_id":null,"docs":" Constraints for the instruction's fixed results.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7977},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":587749,"byte_end":587758,"line_start":109,"line_end":109,"column_start":9,"column_end":18},"name":"fixed_ins","qualname":"::isa::constraints::RecipeConstraints::fixed_ins","value":"bool","parent":{"krate":0,"index":7974},"children":[],"decl_id":null,"docs":" Are any of the input constraints `FixedReg` or `FixedTied`?\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7978},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":587844,"byte_end":587854,"line_start":112,"line_end":112,"column_start":9,"column_end":19},"name":"fixed_outs","qualname":"::isa::constraints::RecipeConstraints::fixed_outs","value":"bool","parent":{"krate":0,"index":7974},"children":[],"decl_id":null,"docs":" Are any of the output constraints `FixedReg` or `FixedTied`?\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7979},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":587949,"byte_end":587957,"line_start":115,"line_end":115,"column_start":9,"column_end":17},"name":"tied_ops","qualname":"::isa::constraints::RecipeConstraints::tied_ops","value":"bool","parent":{"krate":0,"index":7974},"children":[],"decl_id":null,"docs":" Are any of the input/output constraints `Tied` (but not `FixedTied`)?\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7980},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":588134,"byte_end":588148,"line_start":120,"line_end":120,"column_start":9,"column_end":23},"name":"clobbers_flags","qualname":"::isa::constraints::RecipeConstraints::clobbers_flags","value":"bool","parent":{"krate":0,"index":7974},"children":[],"decl_id":null,"docs":" Does this instruction clobber the CPU flags?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2251},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":588273,"byte_end":588282,"line_start":125,"line_end":125,"column_start":12,"column_end":21},"name":"satisfied","qualname":"<RecipeConstraints>::satisfied","value":"fn (&self, inst: Inst, divert: &RegDiversions, func: &Function) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that these constraints are satisfied by the operands on `inst`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7986},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":589726,"byte_end":589737,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"BranchRange","qualname":"::isa::constraints::BranchRange","value":"BranchRange { origin, bits }","parent":null,"children":[{"krate":0,"index":7987},{"krate":0,"index":7988}],"decl_id":null,"docs":" Constraints on the range of a branch instruction.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7987},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":589948,"byte_end":589954,"line_start":166,"line_end":166,"column_start":9,"column_end":15},"name":"origin","qualname":"::isa::constraints::BranchRange::origin","value":"u8","parent":{"krate":0,"index":7986},"children":[],"decl_id":null,"docs":" Offset in bytes from the address of the branch instruction to the origin used for computing\n the branch displacement. This is the destination of a branch that encodes a 0 displacement.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":7988},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":590135,"byte_end":590139,"line_start":170,"line_end":170,"column_start":9,"column_end":13},"name":"bits","qualname":"::isa::constraints::BranchRange::bits","value":"u8","parent":{"krate":0,"index":7986},"children":[],"decl_id":null,"docs":" Number of bits in the signed byte displacement encoded in the instruction. This does not\n account for branches that can only target aligned addresses.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2253},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":590490,"byte_end":590498,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"contains","qualname":"<BranchRange>::contains","value":"fn (self, branch: CodeOffset, dest: CodeOffset) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if this branch range can represent the range from `branch` to `dest`, where\n `branch` is the code offset of the branch instruction itself and `dest` is the code offset\n of the destination block header.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2300},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":597270,"byte_end":597279,"line_start":174,"line_end":174,"column_start":12,"column_end":21},"name":"Encodings","qualname":"::isa::enc_tables::Encodings","value":"Encodings {  }","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310}],"decl_id":null,"docs":" An iterator over legal encodings for the instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2313},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":598039,"byte_end":598042,"line_start":194,"line_end":194,"column_start":12,"column_end":15},"name":"new","qualname":"<Encodings>::new","value":"fn (offset: usize, legalize: LegalizeCode, inst: &'a InstructionData, func: &'a Function, enclist: &'static [EncListEntry], legalize_actions: &'static [Legalize], recipe_preds: &'static [RecipePredicate], inst_preds: &'static [InstPredicate], isa_preds: PredicateView<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `Encodings`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":598931,"byte_end":598939,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"legalize","qualname":"<Encodings>::legalize","value":"fn (&self) -> Legalize","parent":null,"children":[],"decl_id":null,"docs":" Get the legalization action that caused the enumeration of encodings to stop.\n This can be the default legalization action for the type or a custom code for the\n instruction.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7994},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":601825,"byte_end":601833,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::isa::encoding::Encoding","value":"Encoding {  }","parent":null,"children":[{"krate":0,"index":7995},{"krate":0,"index":7996}],"decl_id":null,"docs":" Bits needed to encode an instruction as binary machine code.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2332},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":601959,"byte_end":601962,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoding>::new","value":"fn (recipe: u16, bits: u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Encoding` containing `(recipe, bits)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602093,"byte_end":602099,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"recipe","qualname":"<Encoding>::recipe","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the recipe number in this encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2334},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602211,"byte_end":602215,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"bits","qualname":"<Encoding>::bits","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the recipe-specific encoding bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2335},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602329,"byte_end":602337,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_legal","qualname":"<Encoding>::is_legal","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a legal encoding, or the default placeholder?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2340},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602973,"byte_end":602988,"line_start":63,"line_end":63,"column_start":12,"column_end":27},"name":"DisplayEncoding","qualname":"::isa::encoding::DisplayEncoding","value":"DisplayEncoding { encoding, recipe_names }","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2342}],"decl_id":null,"docs":" Temporary object that holds enough context to properly display an encoding.\n This is meant to be created by `EncInfo::display()`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2341},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602999,"byte_end":603007,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::isa::encoding::DisplayEncoding::encoding","value":"isa::encoding::Encoding","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2342},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":603027,"byte_end":603039,"line_start":65,"line_end":65,"column_start":9,"column_end":21},"name":"recipe_names","qualname":"::isa::encoding::DisplayEncoding::recipe_names","value":"&'static [&'static str]","parent":{"krate":0,"index":2340},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2346},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":603804,"byte_end":603813,"line_start":88,"line_end":88,"column_start":8,"column_end":17},"name":"base_size","qualname":"::isa::encoding::base_size","value":"fn (sizing: &RecipeSizing, _: Encoding, _: Inst, _: &RegDiversions, _: &Function) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the base size of the Recipe, assuming it's fixed. This is the default for most\n encodings; others can be variable and longer than this base size, depending on the registers\n they're using and use a different function, specific per platform.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2347},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604079,"byte_end":604091,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"RecipeSizing","qualname":"::isa::encoding::RecipeSizing","value":"RecipeSizing { base_size, compute_size, branch_range }","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" Code size information for an encoding recipe.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2348},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604174,"byte_end":604183,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"base_size","qualname":"::isa::encoding::RecipeSizing::base_size","value":"u8","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":" Minimum size in bytes of instructions encoded with this recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2349},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604278,"byte_end":604290,"line_start":106,"line_end":106,"column_start":9,"column_end":21},"name":"compute_size","qualname":"::isa::encoding::RecipeSizing::compute_size","value":"for<'r, 's, 't0> fn(&'r isa::encoding::RecipeSizing, isa::encoding::Encoding, ir::entities::Inst, &'s regalloc::diversion::RegDiversions, &'t0 ir::function::Function) -> u8","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":" Method computing the instruction's real size, given inputs and outputs.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2350},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604459,"byte_end":604471,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"branch_range","qualname":"::isa::encoding::RecipeSizing::branch_range","value":"core::option::Option<isa::constraints::BranchRange>","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":" Allowed branch range in this recipe, if any.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8007},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604578,"byte_end":604585,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"EncInfo","qualname":"::isa::encoding::EncInfo","value":"EncInfo { constraints, sizing, names }","parent":null,"children":[{"krate":0,"index":8008},{"krate":0,"index":8009},{"krate":0,"index":8010}],"decl_id":null,"docs":" Information about all the encodings in this ISA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8008},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604646,"byte_end":604657,"line_start":118,"line_end":118,"column_start":9,"column_end":20},"name":"constraints","qualname":"::isa::encoding::EncInfo::constraints","value":"&'static [isa::constraints::RecipeConstraints]","parent":{"krate":0,"index":8007},"children":[],"decl_id":null,"docs":" Constraints on value operands per recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8009},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604740,"byte_end":604746,"line_start":121,"line_end":121,"column_start":9,"column_end":15},"name":"sizing","qualname":"::isa::encoding::EncInfo::sizing","value":"&'static [isa::encoding::RecipeSizing]","parent":{"krate":0,"index":8007},"children":[],"decl_id":null,"docs":" Code size information per recipe.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8010},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604817,"byte_end":604822,"line_start":124,"line_end":124,"column_start":9,"column_end":14},"name":"names","qualname":"::isa::encoding::EncInfo::names","value":"&'static [&'static str]","parent":{"krate":0,"index":8007},"children":[],"decl_id":null,"docs":" Names of encoding recipes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604957,"byte_end":604976,"line_start":129,"line_end":129,"column_start":12,"column_end":31},"name":"operand_constraints","qualname":"<EncInfo>::operand_constraints","value":"fn (&self, enc: Encoding) -> Option<&'static RecipeConstraints>","parent":null,"children":[],"decl_id":null,"docs":" Get the value operand constraints for `enc` if it is a legal encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":605178,"byte_end":605185,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"display","qualname":"<EncInfo>::display","value":"fn (&self, enc: Encoding) -> DisplayEncoding","parent":null,"children":[],"decl_id":null,"docs":" Create an object that can display an ISA-dependent encoding properly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":605469,"byte_end":605478,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"byte_size","qualname":"<EncInfo>::byte_size","value":"fn (&self, enc: Encoding, inst: Inst, divert: &RegDiversions, func: &Function) -> CodeOffset","parent":null,"children":[],"decl_id":null,"docs":" Get the size in bytes of `inst`, if it were encoded with `enc`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":605959,"byte_end":605971,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"branch_range","qualname":"<EncInfo>::branch_range","value":"fn (&self, enc: Encoding) -> Option<BranchRange>","parent":null,"children":[],"decl_id":null,"docs":" Get the branch range that is supported by `enc`, if any.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2358},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"registers","qualname":"::isa::registers","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","parent":null,"children":[{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2365},{"krate":0,"index":2374},{"krate":0,"index":2380},{"krate":0,"index":2381},{"krate":0,"index":2392},{"krate":0,"index":2403},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":8013},{"krate":0,"index":8024},{"krate":0,"index":8023},{"krate":0,"index":8021},{"krate":0,"index":8018},{"krate":0,"index":8016},{"krate":0,"index":2409},{"krate":0,"index":2412},{"krate":0,"index":2414},{"krate":0,"index":2416},{"krate":0,"index":8026},{"krate":0,"index":8029},{"krate":0,"index":2417},{"krate":0,"index":2425},{"krate":0,"index":2429}],"decl_id":null,"docs":" Data structures describing the registers in an ISA.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2361},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":606583,"byte_end":606590,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"RegUnit","qualname":"::isa::registers::RegUnit","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Register units are the smallest units of register allocation.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2362},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":606739,"byte_end":606751,"line_start":18,"line_end":18,"column_start":10,"column_end":22},"name":"RegClassMask","qualname":"::isa::registers::RegClassMask","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A bit mask indexed by register classes.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2363},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":606966,"byte_end":606977,"line_start":24,"line_end":24,"column_start":10,"column_end":21},"name":"RegUnitMask","qualname":"::isa::registers::RegUnitMask","value":"[RegClassMask; 3]","parent":null,"children":[],"decl_id":null,"docs":" A bit mask indexed by register units.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2365},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":607230,"byte_end":607237,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"RegBank","qualname":"::isa::registers::RegBank","value":"RegBank { name, first_unit, units, names, prefix, first_toprc, num_toprcs, pressure_tracking }","parent":null,"children":[{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2373}],"decl_id":null,"docs":" The register units in a target ISA are divided into disjoint register banks. Each bank covers a\n contiguous range of register units.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2366},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":607327,"byte_end":607331,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"name","qualname":"::isa::registers::RegBank::name","value":"&'static str","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" The name of this register bank as defined in the ISA's DSL definition.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2367},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":607402,"byte_end":607412,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"name":"first_unit","qualname":"::isa::registers::RegBank::first_unit","value":"u16","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" The first register unit in this bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2368},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":607489,"byte_end":607494,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"units","qualname":"::isa::registers::RegBank::units","value":"u16","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" The total number of register units in this bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2369},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":607635,"byte_end":607640,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"names","qualname":"::isa::registers::RegBank::names","value":"&'static [&'static str]","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" Array of specially named register units. This array can be shorter than the number of units\n in the bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2370},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":607953,"byte_end":607959,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"prefix","qualname":"::isa::registers::RegBank::prefix","value":"&'static str","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" Name prefix to use for those register units in the bank not covered by the `names` array.\n The remaining register units will be named this prefix followed by their decimal offset in\n the bank. So with a prefix `r`, registers will be named `r8`, `r9`, ...\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2371},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":608050,"byte_end":608061,"line_start":50,"line_end":50,"column_start":9,"column_end":20},"name":"first_toprc","qualname":"::isa::registers::RegBank::first_toprc","value":"usize","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" Index of the first top-level register class in this bank.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2372},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":608343,"byte_end":608353,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"name":"num_toprcs","qualname":"::isa::registers::RegBank::num_toprcs","value":"usize","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" Number of top-level register classes in this bank.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2373},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":608432,"byte_end":608449,"line_start":59,"line_end":59,"column_start":9,"column_end":26},"name":"pressure_tracking","qualname":"::isa::registers::RegBank::pressure_tracking","value":"bool","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" Is register pressure tracking enabled for this bank?\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2380},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610088,"byte_end":610096,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"RegClass","qualname":"::isa::registers::RegClass","value":"&'static RegClassData","parent":null,"children":[],"decl_id":null,"docs":" A register class reference.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2381},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610467,"byte_end":610479,"line_start":118,"line_end":118,"column_start":12,"column_end":24},"name":"RegClassData","qualname":"::isa::registers::RegClassData","value":"RegClassData { name, index, width, bank, toprc, first, subclasses, mask, info, pinned_reg }","parent":null,"children":[{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391}],"decl_id":null,"docs":" Data about a register class.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2382},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610530,"byte_end":610534,"line_start":120,"line_end":120,"column_start":9,"column_end":13},"name":"name","qualname":"::isa::registers::RegClassData::name","value":"&'static str","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" The name of the register class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2383},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610625,"byte_end":610630,"line_start":123,"line_end":123,"column_start":9,"column_end":14},"name":"index","qualname":"::isa::registers::RegClassData::index","value":"u8","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" The index of this class in the ISA's RegInfo description.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2384},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610703,"byte_end":610708,"line_start":126,"line_end":126,"column_start":9,"column_end":14},"name":"width","qualname":"::isa::registers::RegClassData::width","value":"u8","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" How many register units to allocate per register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2385},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610781,"byte_end":610785,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"bank","qualname":"::isa::registers::RegClassData::bank","value":"u8","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" Index of the register bank this class belongs to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2386},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610865,"byte_end":610870,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"name":"toprc","qualname":"::isa::registers::RegClassData::toprc","value":"u8","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" Index of the top-level register class contains this one.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2387},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":610932,"byte_end":610937,"line_start":135,"line_end":135,"column_start":9,"column_end":14},"name":"first","qualname":"::isa::registers::RegClassData::first","value":"u16","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" The first register unit in this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2388},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611078,"byte_end":611088,"line_start":140,"line_end":140,"column_start":9,"column_end":19},"name":"subclasses","qualname":"::isa::registers::RegClassData::subclasses","value":"u32","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" Bit-mask of sub-classes of this register class, including itself.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2389},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611268,"byte_end":611272,"line_start":144,"line_end":144,"column_start":9,"column_end":13},"name":"mask","qualname":"::isa::registers::RegClassData::mask","value":"[u32; _]","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" Mask of register units in the class. If `width > 1`, the mask only has a bit set for the\n first register unit in each allocatable register.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2390},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611366,"byte_end":611370,"line_start":147,"line_end":147,"column_start":9,"column_end":13},"name":"info","qualname":"::isa::registers::RegClassData::info","value":"&'static isa::registers::RegInfo","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" The global `RegInfo` instance containing this register class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2391},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611602,"byte_end":611612,"line_start":153,"line_end":153,"column_start":9,"column_end":19},"name":"pinned_reg","qualname":"::isa::registers::RegClassData::pinned_reg","value":"core::option::Option<u16>","parent":{"krate":0,"index":2381},"children":[],"decl_id":null,"docs":" The \"pinned\" register of the associated register bank.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611914,"byte_end":611929,"line_start":161,"line_end":161,"column_start":12,"column_end":27},"name":"intersect_index","qualname":"<RegClassData>::intersect_index","value":"fn (&self, other: RegClass) -> Option<RegClassIndex>","parent":null,"children":[],"decl_id":null,"docs":" Get the register class index corresponding to the intersection of `self` and `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":612446,"byte_end":612455,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"intersect","qualname":"<RegClassData>::intersect","value":"fn (&self, other: RegClass) -> Option<RegClass>","parent":null,"children":[],"decl_id":null,"docs":" Get the intersection of `self` and `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":612722,"byte_end":612734,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"has_subclass","qualname":"<RegClassData>::has_subclass","value":"fn <RCI> (&self, other: RCI) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `other` is a subclass of this register class.\n A register class is considered to be a subclass of itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":612925,"byte_end":612930,"line_start":187,"line_end":187,"column_start":12,"column_end":17},"name":"toprc","qualname":"<RegClassData>::toprc","value":"fn (&self) -> RegClass","parent":null,"children":[],"decl_id":null,"docs":" Get the top-level register class containing this class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613070,"byte_end":613074,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"unit","qualname":"<RegClassData>::unit","value":"fn (&self, offset: usize) -> RegUnit","parent":null,"children":[],"decl_id":null,"docs":" Get a specific register unit in this class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613276,"byte_end":613284,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"contains","qualname":"<RegClassData>::contains","value":"fn (&self, regunit: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this register class contain `regunit`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613523,"byte_end":613536,"line_start":204,"line_end":204,"column_start":12,"column_end":25},"name":"is_pinned_reg","qualname":"<RegClassData>::is_pinned_reg","value":"fn (&self, enabled: bool, regunit: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If the pinned register is used, is the given regunit the pinned register of this class?\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613502,"byte_end":613511,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":8013},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614455,"byte_end":614468,"line_start":236,"line_end":236,"column_start":12,"column_end":25},"name":"RegClassIndex","qualname":"::isa::registers::RegClassIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A small reference to a register class.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2416},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615085,"byte_end":615097,"line_start":264,"line_end":264,"column_start":8,"column_end":20},"name":"regs_overlap","qualname":"::isa::registers::regs_overlap","value":"fn (rc1: RegClass, reg1: RegUnit, rc2: RegClass, reg2: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test of two registers overlap.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8026},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615491,"byte_end":615498,"line_start":275,"line_end":275,"column_start":12,"column_end":19},"name":"RegInfo","qualname":"::isa::registers::RegInfo","value":"RegInfo { banks, classes }","parent":null,"children":[{"krate":0,"index":8027},{"krate":0,"index":8028}],"decl_id":null,"docs":" Information about the registers in an ISA.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8027},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615696,"byte_end":615701,"line_start":278,"line_end":278,"column_start":9,"column_end":14},"name":"banks","qualname":"::isa::registers::RegInfo::banks","value":"&'static [isa::registers::RegBank]","parent":{"krate":0,"index":8026},"children":[],"decl_id":null,"docs":" All register banks, ordered by their `first_unit`. The register banks are disjoint, but\n there may be holes of unused register unit numbers between banks due to alignment.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8028},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615825,"byte_end":615832,"line_start":281,"line_end":281,"column_start":9,"column_end":16},"name":"classes","qualname":"::isa::registers::RegInfo::classes","value":"&'static [&'static isa::registers::RegClassData]","parent":{"krate":0,"index":8026},"children":[],"decl_id":null,"docs":" All register classes ordered topologically so a sub-class always follows its parent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2418},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615933,"byte_end":615956,"line_start":286,"line_end":286,"column_start":12,"column_end":35},"name":"bank_containing_regunit","qualname":"<RegInfo>::bank_containing_regunit","value":"fn (&self, regunit: RegUnit) -> Option<&RegBank>","parent":null,"children":[],"decl_id":null,"docs":" Get the register bank holding `regunit`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":616245,"byte_end":616258,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"parse_regunit","qualname":"<RegInfo>::parse_regunit","value":"fn (&self, name: &str) -> Option<RegUnit>","parent":null,"children":[],"decl_id":null,"docs":" Try to parse a regunit name. The name is not expected to begin with `%`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":616493,"byte_end":616508,"line_start":300,"line_end":300,"column_start":12,"column_end":27},"name":"display_regunit","qualname":"<RegInfo>::display_regunit","value":"fn (&self, regunit: RegUnit) -> DisplayRegUnit","parent":null,"children":[],"decl_id":null,"docs":" Make a temporary object that can display a register unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2423},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":616710,"byte_end":616712,"line_start":308,"line_end":308,"column_start":12,"column_end":14},"name":"rc","qualname":"<RegInfo>::rc","value":"fn (&self, idx: RegClassIndex) -> RegClass","parent":null,"children":[],"decl_id":null,"docs":" Get the register class corresponding to `idx`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":616875,"byte_end":616880,"line_start":313,"line_end":313,"column_start":12,"column_end":17},"name":"toprc","qualname":"<RegInfo>::toprc","value":"fn (&self, idx: RegClassIndex) -> RegClass","parent":null,"children":[],"decl_id":null,"docs":" Get the top-level register class containing the `idx` class.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2425},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":617069,"byte_end":617083,"line_start":319,"line_end":319,"column_start":12,"column_end":26},"name":"DisplayRegUnit","qualname":"::isa::registers::DisplayRegUnit","value":"DisplayRegUnit {  }","parent":null,"children":[{"krate":0,"index":2427},{"krate":0,"index":2428}],"decl_id":null,"docs":" Temporary object that holds enough information to print a register unit.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8031},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":618701,"byte_end":618709,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"StackRef","qualname":"::isa::stack::StackRef","value":"StackRef { base, offset }","parent":null,"children":[{"krate":0,"index":8032},{"krate":0,"index":8033}],"decl_id":null,"docs":" A method for referencing a stack slot in the current stack frame.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8032},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":618769,"byte_end":618773,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"name":"base","qualname":"::isa::stack::StackRef::base","value":"isa::stack::StackBase","parent":{"krate":0,"index":8031},"children":[],"decl_id":null,"docs":" The base register to use for addressing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8033},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":618880,"byte_end":618886,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"offset","qualname":"::isa::stack::StackRef::offset","value":"i32","parent":{"krate":0,"index":8031},"children":[],"decl_id":null,"docs":" Immediate offset from the base register to the first byte of the stack slot.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2439},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":619020,"byte_end":619026,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"masked","qualname":"<StackRef>::masked","value":"fn (ss: StackSlot, mask: StackBaseMask, frame: &StackSlots) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the stack slot `ss` using one of the base pointers in `mask`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":619388,"byte_end":619390,"line_start":37,"line_end":37,"column_start":12,"column_end":14},"name":"sp","qualname":"<StackRef>::sp","value":"fn (ss: StackSlot, frame: &StackSlots) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to `ss` using the stack pointer as a base.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8040},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":620472,"byte_end":620474,"line_start":66,"line_end":66,"column_start":5,"column_end":7},"name":"SP","qualname":"::isa::stack::StackBase::SP","value":"StackBase::SP","parent":{"krate":0,"index":8039},"children":[],"decl_id":null,"docs":" Use the stack pointer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8043},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":620536,"byte_end":620538,"line_start":69,"line_end":69,"column_start":5,"column_end":7},"name":"FP","qualname":"::isa::stack::StackBase::FP","value":"StackBase::FP","parent":{"krate":0,"index":8039},"children":[],"decl_id":null,"docs":" Use the frame pointer (if one is present).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8046},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":620670,"byte_end":620674,"line_start":74,"line_end":74,"column_start":5,"column_end":9},"name":"Zone","qualname":"::isa::stack::StackBase::Zone","value":"StackBase::Zone","parent":{"krate":0,"index":8039},"children":[],"decl_id":null,"docs":" Use an explicit zone pointer in a general-purpose register.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8039},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":620425,"byte_end":620434,"line_start":64,"line_end":64,"column_start":10,"column_end":19},"name":"StackBase","qualname":"::isa::stack::StackBase","value":"StackBase::{SP, FP, Zone}","parent":null,"children":[{"krate":0,"index":8040},{"krate":0,"index":8043},{"krate":0,"index":8046}],"decl_id":null,"docs":" Generic base register for referencing stack slots.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8058},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":621222,"byte_end":621235,"line_start":88,"line_end":88,"column_start":12,"column_end":25},"name":"StackBaseMask","qualname":"::isa::stack::StackBaseMask","value":"","parent":null,"children":[],"decl_id":null,"docs":" Bit mask of supported stack bases.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2442},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":621334,"byte_end":621342,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"contains","qualname":"<StackBaseMask>::contains","value":"fn (self, base: StackBase) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this mask contains the `base` variant.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2444},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":429221,"byte_end":429227,"line_start":106,"line_end":106,"column_start":8,"column_end":14},"name":"lookup","qualname":"::isa::lookup","value":"fn (triple: Triple) -> Result<Builder, LookupError>","parent":null,"children":[],"decl_id":null,"docs":" Look for an ISA for the given `triple`.\n Return a builder that can create a corresponding `TargetIsa`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2445},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":429887,"byte_end":429901,"line_start":120,"line_end":120,"column_start":8,"column_end":22},"name":"lookup_by_name","qualname":"::isa::lookup_by_name","value":"fn (name: &str) -> Result<Builder, LookupError>","parent":null,"children":[],"decl_id":null,"docs":" Look for a supported ISA with the given `name`.\n Return a builder that can create a corresponding `TargetIsa`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8072},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430251,"byte_end":430266,"line_start":130,"line_end":130,"column_start":5,"column_end":20},"name":"SupportDisabled","qualname":"::isa::LookupError::SupportDisabled","value":"LookupError::SupportDisabled","parent":{"krate":0,"index":8071},"children":[],"decl_id":null,"docs":" Support for this target was disabled in the current build.\n","sig":null,"attributes":[{"value":"error(\"Support for this target is disabled\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430199,"byte_end":430246,"line_start":129,"line_end":129,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8074},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430404,"byte_end":430415,"line_start":134,"line_end":134,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::isa::LookupError::Unsupported","value":"LookupError::Unsupported","parent":{"krate":0,"index":8071},"children":[],"decl_id":null,"docs":" Support for this target has not yet been implemented.\n","sig":null,"attributes":[{"value":"error(\"Support for this target has not been implemented yet\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430335,"byte_end":430399,"line_start":133,"line_end":133,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":8071},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430114,"byte_end":430125,"line_start":127,"line_end":127,"column_start":10,"column_end":21},"name":"LookupError","qualname":"::isa::LookupError","value":"LookupError::{SupportDisabled, Unsupported}","parent":null,"children":[{"krate":0,"index":8072},{"krate":0,"index":8074}],"decl_id":null,"docs":" Describes reason for target lookup failure\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2447},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430559,"byte_end":430566,"line_start":139,"line_end":139,"column_start":12,"column_end":19},"name":"Builder","qualname":"::isa::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450}],"decl_id":null,"docs":" Builder for a `TargetIsa`.\n Modify the ISA-specific settings before creating the `TargetIsa` trait object with `finish`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430886,"byte_end":430892,"line_start":148,"line_end":148,"column_start":12,"column_end":18},"name":"finish","qualname":"<Builder>::finish","value":"fn (self, shared_flags: settings::Flags) -> Box<dyn TargetIsa>","parent":null,"children":[],"decl_id":null,"docs":" Combine the ISA-specific settings with the provided ISA-independent settings and allocate a\n fully configured `TargetIsa` trait object.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2456},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431470,"byte_end":431478,"line_start":167,"line_end":167,"column_start":10,"column_end":18},"name":"Legalize","qualname":"::isa::Legalize","value":"fn(ir::Inst, &mut ir::Function, &mut flowgraph::ControlFlowGraph,\n   &dyn TargetIsa) -> bool","parent":null,"children":[],"decl_id":null,"docs":" After determining that an instruction doesn't have an encoding, how should we proceed to\n legalize it?","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8088},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431740,"byte_end":431760,"line_start":173,"line_end":173,"column_start":12,"column_end":32},"name":"TargetFrontendConfig","qualname":"::isa::TargetFrontendConfig","value":"TargetFrontendConfig { default_call_conv, pointer_width }","parent":null,"children":[{"krate":0,"index":8089},{"krate":0,"index":8090}],"decl_id":null,"docs":" This struct provides information that a frontend may need to know about a target to\n produce Cranelift IR for the target.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8089},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431825,"byte_end":431842,"line_start":175,"line_end":175,"column_start":9,"column_end":26},"name":"default_call_conv","qualname":"::isa::TargetFrontendConfig::default_call_conv","value":"isa::call_conv::CallConv","parent":{"krate":0,"index":8088},"children":[],"decl_id":null,"docs":" The default calling convention of the target.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8090},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431904,"byte_end":431917,"line_start":178,"line_end":178,"column_start":9,"column_end":22},"name":"pointer_width","qualname":"::isa::TargetFrontendConfig::pointer_width","value":"target_lexicon::triple::PointerWidth","parent":{"krate":0,"index":8088},"children":[],"decl_id":null,"docs":" The pointer width of the target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432020,"byte_end":432032,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"pointer_type","qualname":"<TargetFrontendConfig>::pointer_type","value":"fn (self) -> ir::Type","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer type of this target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432202,"byte_end":432214,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"pointer_bits","qualname":"<TargetFrontendConfig>::pointer_bits","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the width of pointers on this target, in units of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2460},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432350,"byte_end":432363,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"pointer_bytes","qualname":"<TargetFrontendConfig>::pointer_bytes","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the width of pointers on this target, in units of bytes.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2461},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432574,"byte_end":432583,"line_start":200,"line_end":200,"column_start":11,"column_end":20},"name":"TargetIsa","qualname":"::isa::TargetIsa","value":"TargetIsa: fmt::Display + Send + Sync","parent":null,"children":[{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2489},{"krate":0,"index":2490}],"decl_id":null,"docs":" Methods that are specialized to a target ISA. Implies a Display trait that shows the\n shared flags, as well as any isa-specific flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432655,"byte_end":432659,"line_start":202,"line_end":202,"column_start":8,"column_end":12},"name":"name","qualname":"::isa::TargetIsa::name","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the name of this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432763,"byte_end":432769,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"triple","qualname":"::isa::TargetIsa::triple","value":"fn (&self) -> &Triple","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the target triple that was used to make this trait object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432877,"byte_end":432882,"line_start":208,"line_end":208,"column_start":8,"column_end":13},"name":"flags","qualname":"::isa::TargetIsa::flags","value":"fn (&self) -> &settings::Flags","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the ISA-independent flags that were used to make this trait object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2465},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432978,"byte_end":432995,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"default_call_conv","qualname":"::isa::TargetIsa::default_call_conv","value":"fn (&self) -> CallConv","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the default calling convention of this target.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":433121,"byte_end":433133,"line_start":216,"line_end":216,"column_start":8,"column_end":20},"name":"pointer_type","qualname":"::isa::TargetIsa::pointer_type","value":"fn (&self) -> ir::Type","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the pointer type of this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":433279,"byte_end":433292,"line_start":221,"line_end":221,"column_start":8,"column_end":21},"name":"pointer_width","qualname":"::isa::TargetIsa::pointer_width","value":"fn (&self) -> PointerWidth","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the width of pointers on this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":433444,"byte_end":433456,"line_start":226,"line_end":226,"column_start":8,"column_end":20},"name":"pointer_bits","qualname":"::isa::TargetIsa::pointer_bits","value":"fn (&self) -> u8","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the width of pointers on this ISA, in units of bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":433588,"byte_end":433601,"line_start":231,"line_end":231,"column_start":8,"column_end":21},"name":"pointer_bytes","qualname":"::isa::TargetIsa::pointer_bytes","value":"fn (&self) -> u8","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the width of pointers on this ISA, in units of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":433740,"byte_end":433755,"line_start":236,"line_end":236,"column_start":8,"column_end":23},"name":"frontend_config","qualname":"::isa::TargetIsa::frontend_config","value":"fn (&self) -> TargetFrontendConfig","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the information needed by frontends producing Cranelift IR.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":434028,"byte_end":434042,"line_start":244,"line_end":244,"column_start":8,"column_end":22},"name":"uses_cpu_flags","qualname":"::isa::TargetIsa::uses_cpu_flags","value":"fn (&self) -> bool","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Does the CPU implement scalar comparisons using a CPU flags register?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":434146,"byte_end":434168,"line_start":249,"line_end":249,"column_start":8,"column_end":30},"name":"uses_complex_addresses","qualname":"::isa::TargetIsa::uses_complex_addresses","value":"fn (&self) -> bool","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Does the CPU implement multi-register addressing?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":434281,"byte_end":434294,"line_start":254,"line_end":254,"column_start":8,"column_end":21},"name":"register_info","qualname":"::isa::TargetIsa::register_info","value":"fn (&self) -> RegInfo","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get a data structure describing the registers in this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":434392,"byte_end":434407,"line_start":257,"line_end":257,"column_start":8,"column_end":23},"name":"legal_encodings","qualname":"::isa::TargetIsa::legal_encodings","value":"fn <'a> (&'a self, func: &'a ir::Function, inst: &'a ir::InstructionData, ctrl_typevar: ir::Type) -> Encodings<'a>","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Returns an iterator over legal encodings for the instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":434873,"byte_end":434879,"line_start":270,"line_end":270,"column_start":8,"column_end":14},"name":"encode","qualname":"::isa::TargetIsa::encode","value":"fn (&self, func: &ir::Function, inst: &ir::InstructionData, ctrl_typevar: ir::Type) -> Result<Encoding, Legalize>","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Encode an instruction after determining it is legal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":435246,"byte_end":435259,"line_start":281,"line_end":281,"column_start":8,"column_end":21},"name":"encoding_info","qualname":"::isa::TargetIsa::encoding_info","value":"fn (&self) -> EncInfo","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get a data structure describing the instruction encodings in this ISA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2479},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":437218,"byte_end":437236,"line_start":316,"line_end":316,"column_start":8,"column_end":26},"name":"legalize_signature","qualname":"::isa::TargetIsa::legalize_signature","value":"fn (&self, sig: &mut Cow<ir::Signature>, current: bool) -> ()","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Legalize a function signature.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":437688,"byte_end":437709,"line_start":324,"line_end":324,"column_start":8,"column_end":29},"name":"regclass_for_abi_type","qualname":"::isa::TargetIsa::regclass_for_abi_type","value":"fn (&self, ty: ir::Type) -> RegClass","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the register class that should be used to represent an ABI argument or return value of\n type `ty`. This should be the top-level register class that contains the argument\n registers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2481},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":437958,"byte_end":437979,"line_start":330,"line_end":330,"column_start":8,"column_end":29},"name":"allocatable_registers","qualname":"::isa::TargetIsa::allocatable_registers","value":"fn (&self, func: &ir::Function) -> regalloc::RegisterSet","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Get the set of allocatable registers that can be used when compiling `func`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2482},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":438191,"byte_end":438208,"line_start":335,"line_end":335,"column_start":8,"column_end":25},"name":"prologue_epilogue","qualname":"::isa::TargetIsa::prologue_epilogue","value":"fn (&self, func: &mut ir::Function) -> CodegenResult<()>","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Compute the stack layout and insert prologue and epilogue code into `func`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2487},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":439769,"byte_end":439792,"line_start":373,"line_end":373,"column_start":8,"column_end":31},"name":"emit_function_to_memory","qualname":"::isa::TargetIsa::emit_function_to_memory","value":"fn (&self, func: &ir::Function, sink: &mut binemit::MemoryCodeSink) -> ()","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Emit a whole function into memory.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2488},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":439930,"byte_end":439961,"line_start":376,"line_end":376,"column_start":8,"column_end":39},"name":"unsigned_add_overflow_condition","qualname":"::isa::TargetIsa::unsigned_add_overflow_condition","value":"fn (&self) -> ir::condcodes::IntCC","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" IntCC condition for Unsigned Addition Overflow (Carry).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":440076,"byte_end":440107,"line_start":379,"line_end":379,"column_start":8,"column_end":39},"name":"unsigned_sub_overflow_condition","qualname":"::isa::TargetIsa::unsigned_sub_overflow_condition","value":"fn (&self) -> ir::condcodes::IntCC","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" IntCC condition for Unsigned Subtraction Overflow (Borrow/Carry).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2490},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":440304,"byte_end":440320,"line_start":384,"line_end":384,"column_start":8,"column_end":24},"name":"emit_unwind_info","qualname":"::isa::TargetIsa::emit_unwind_info","value":"fn (&self, _func: &ir::Function, _kind: binemit::FrameUnwindKind, _sink: &mut dyn binemit::FrameUnwindSink) -> ()","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Emit unwind information for the given function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2491},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"loop_analysis","qualname":"::loop_analysis","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":8094},{"krate":0,"index":8107},{"krate":0,"index":8105},{"krate":0,"index":8102},{"krate":0,"index":8100},{"krate":0,"index":8097},{"krate":0,"index":8112},{"krate":0,"index":8115},{"krate":0,"index":8117},{"krate":0,"index":8108},{"krate":0,"index":8110},{"krate":0,"index":2508},{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2524}],"decl_id":null,"docs":" A loop analysis represented as mappings of loops to their header Block\n and parent in the loop tree.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8094},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":621960,"byte_end":621964,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"Loop","qualname":"::loop_analysis::Loop","value":"","parent":null,"children":[],"decl_id":null,"docs":" A opaque reference to a code loop.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2508},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":622242,"byte_end":622254,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"LoopAnalysis","qualname":"::loop_analysis::LoopAnalysis","value":"LoopAnalysis {  }","parent":null,"children":[{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511}],"decl_id":null,"docs":" Loop tree information for a single function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":622908,"byte_end":622911,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<LoopAnalysis>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new blank loop analysis struct. Use `compute` to compute the loop analysis for\n a function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":623135,"byte_end":623140,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"loops","qualname":"<LoopAnalysis>::loops","value":"fn (&self) -> Keys<Loop>","parent":null,"children":[],"decl_id":null,"docs":" Returns all the loops contained in a function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":623385,"byte_end":623396,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"loop_header","qualname":"<LoopAnalysis>::loop_header","value":"fn (&self, lp: Loop) -> Block","parent":null,"children":[],"decl_id":null,"docs":" Returns the header block of a particular loop.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":623536,"byte_end":623547,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"loop_parent","qualname":"<LoopAnalysis>::loop_parent","value":"fn (&self, lp: Loop) -> Option<Loop>","parent":null,"children":[],"decl_id":null,"docs":" Return the eventual parent of a loop in the loop tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":623788,"byte_end":623798,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"is_in_loop","qualname":"<LoopAnalysis>::is_in_loop","value":"fn (&self, block: Block, lp: Loop) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if an Block belongs to a loop by running a finger along the loop tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":624255,"byte_end":624268,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"is_child_loop","qualname":"<LoopAnalysis>::is_child_loop","value":"fn (&self, child: Loop, parent: Loop) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determines if a loop is contained in another loop.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":624690,"byte_end":624697,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"compute","qualname":"<LoopAnalysis>::compute","value":"fn (&mut self, func: &Function, cfg: &ControlFlowGraph, domtree: &DominatorTree) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Detects the loops in a function. Needs the control flow graph and the dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":625414,"byte_end":625422,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<LoopAnalysis>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the loop analysis is in a valid state.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":625686,"byte_end":625691,"line_start":125,"line_end":125,"column_start":12,"column_end":17},"name":"clear","qualname":"<LoopAnalysis>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all the data structures contained in the loop analysis. This will leave the\n analysis in a similar state to a context returned by `new()` except that allocated\n memory be retained.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2530},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/print_errors.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print_errors","qualname":"::print_errors","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/print_errors.rs","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2544},{"krate":0,"index":2548},{"krate":0,"index":2549},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2558},{"krate":0,"index":2563},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573}],"decl_id":null,"docs":" Utility routines for pretty-printing error messages.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2555},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/print_errors.rs","byte_start":635677,"byte_end":635698,"line_start":18,"line_end":18,"column_start":8,"column_end":29},"name":"pretty_verifier_error","qualname":"::print_errors::pretty_verifier_error","value":"fn <'a> (func: &ir::Function, isa: Option<&dyn TargetIsa>, func_w: Option<Box<dyn FuncWriter + 'a>>, errors: VerifierErrors) -> String","parent":null,"children":[],"decl_id":null,"docs":" Pretty-print a verifier error.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2573},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/print_errors.rs","byte_start":640910,"byte_end":640922,"line_start":221,"line_end":221,"column_start":8,"column_end":20},"name":"pretty_error","qualname":"::print_errors::pretty_error","value":"fn (func: &ir::Function, isa: Option<&dyn TargetIsa>, err: CodegenError) -> String","parent":null,"children":[],"decl_id":null,"docs":" Pretty-print a Cranelift error.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2574},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"settings","qualname":"::settings","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":8120},{"krate":0,"index":8123},{"krate":0,"index":2589},{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":8125},{"krate":0,"index":8141},{"krate":0,"index":8142},{"krate":0,"index":8139},{"krate":0,"index":8136},{"krate":0,"index":8134},{"krate":0,"index":2604},{"krate":0,"index":8147},{"krate":0,"index":8153},{"krate":0,"index":8151},{"krate":0,"index":2606},{"krate":0,"index":2610},{"krate":0,"index":8216},{"krate":0,"index":8219},{"krate":0,"index":8169},{"krate":0,"index":8221},{"krate":0,"index":8238},{"krate":0,"index":8237},{"krate":0,"index":8235},{"krate":0,"index":8233},{"krate":0,"index":8231},{"krate":0,"index":8228},{"krate":0,"index":8172},{"krate":0,"index":8174},{"krate":0,"index":8240},{"krate":0,"index":8267},{"krate":0,"index":8266},{"krate":0,"index":8264},{"krate":0,"index":8262},{"krate":0,"index":8260},{"krate":0,"index":8257},{"krate":0,"index":8177},{"krate":0,"index":8179},{"krate":0,"index":8182},{"krate":0,"index":8204},{"krate":0,"index":8206},{"krate":0,"index":8208},{"krate":0,"index":8210},{"krate":0,"index":8212},{"krate":0,"index":8213},{"krate":0,"index":8214},{"krate":0,"index":8269},{"krate":0,"index":8275},{"krate":0,"index":8273},{"krate":0,"index":2633},{"krate":0,"index":2636}],"decl_id":null,"docs":" Shared settings module.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2586},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642284,"byte_end":642296,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"name":"Configurable","qualname":"::settings::Configurable","value":"Configurable","parent":null,"children":[{"krate":0,"index":2587},{"krate":0,"index":2588}],"decl_id":null,"docs":" A string-based configurator for settings groups.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642455,"byte_end":642458,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"set","qualname":"::settings::Configurable::set","value":"fn (&mut self, name: &str, value: &str) -> SetResult<()>","parent":{"krate":0,"index":2586},"children":[],"decl_id":null,"docs":" Set the string value of any setting by name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642675,"byte_end":642681,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"enable","qualname":"::settings::Configurable::enable","value":"fn (&mut self, name: &str) -> SetResult<()>","parent":{"krate":0,"index":2586},"children":[],"decl_id":null,"docs":" Enable a boolean setting or apply a preset.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8120},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642803,"byte_end":642810,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"Builder","qualname":"::settings::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":8121},{"krate":0,"index":8122}],"decl_id":null,"docs":" Collect settings values based on a template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2590},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642983,"byte_end":642986,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"fn (tmpl: &'static detail::Template) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder with defaults and names from the given template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2591},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":643209,"byte_end":643218,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"state_for","qualname":"<Builder>::state_for","value":"fn (self, name: &str) -> Box<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Extract contents of builder once everything is configured.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8126},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":646779,"byte_end":646786,"line_start":172,"line_end":172,"column_start":5,"column_end":12},"name":"BadName","qualname":"::settings::SetError::BadName","value":"SetError::BadName(String)","parent":{"krate":0,"index":8125},"children":[],"decl_id":null,"docs":" No setting by this name exists.\n","sig":null,"attributes":[{"value":"error(\"No existing setting named '{0}'\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":646731,"byte_end":646774,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8129},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":646938,"byte_end":646945,"line_start":176,"line_end":176,"column_start":5,"column_end":12},"name":"BadType","qualname":"::settings::SetError::BadType","value":"SetError::BadType","parent":{"krate":0,"index":8125},"children":[],"decl_id":null,"docs":" Type mismatch for setting (e.g., setting an enum setting as a bool).\n","sig":null,"attributes":[{"value":"error(\"Trying to set a setting with the wrong type\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":646878,"byte_end":646933,"line_start":175,"line_end":175,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8131},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647065,"byte_end":647073,"line_start":180,"line_end":180,"column_start":5,"column_end":13},"name":"BadValue","qualname":"::settings::SetError::BadValue","value":"SetError::BadValue(String)","parent":{"krate":0,"index":8125},"children":[],"decl_id":null,"docs":" This is not a valid value for this setting.\n","sig":null,"attributes":[{"value":"error(\"Unexpected value for a setting, expected {0}\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647004,"byte_end":647060,"line_start":179,"line_end":179,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":8125},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":646676,"byte_end":646684,"line_start":169,"line_end":169,"column_start":10,"column_end":18},"name":"SetError","qualname":"::settings::SetError","value":"SetError::{BadName, BadType, BadValue}","parent":null,"children":[{"krate":0,"index":8126},{"krate":0,"index":8129},{"krate":0,"index":8131}],"decl_id":null,"docs":" An error produced when changing a setting.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2604},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647142,"byte_end":647151,"line_start":184,"line_end":184,"column_start":10,"column_end":19},"name":"SetResult","qualname":"::settings::SetResult","value":"Result<T, SetError>","parent":null,"children":[],"decl_id":null,"docs":" A result returned when changing a setting.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8147},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647507,"byte_end":647520,"line_start":192,"line_end":192,"column_start":12,"column_end":25},"name":"PredicateView","qualname":"::settings::PredicateView","value":"","parent":null,"children":[],"decl_id":null,"docs":" A reference to just the boolean predicates of a settings object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647739,"byte_end":647742,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<PredicateView>::new","value":"fn (bits: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new view of a precomputed predicate vector.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647851,"byte_end":647855,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"test","qualname":"<PredicateView>::test","value":"fn (self, p: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check a numbered predicate.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2610},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648118,"byte_end":648124,"line_start":212,"line_end":212,"column_start":9,"column_end":15},"name":"detail","qualname":"::settings::detail","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","parent":null,"children":[{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2620},{"krate":0,"index":2623},{"krate":0,"index":2627},{"krate":0,"index":8156},{"krate":0,"index":8167},{"krate":0,"index":8166},{"krate":0,"index":2631}],"decl_id":null,"docs":" Implementation details for generated code.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2613},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648231,"byte_end":648239,"line_start":217,"line_end":217,"column_start":16,"column_end":24},"name":"Template","qualname":"::settings::detail::Template","value":"Template { name, descriptors, enumerators, hash_table, defaults, presets }","parent":null,"children":[{"krate":0,"index":2614},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619}],"decl_id":null,"docs":" An instruction group template.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2614},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648297,"byte_end":648301,"line_start":219,"line_end":219,"column_start":13,"column_end":17},"name":"name","qualname":"::settings::detail::Template::name","value":"&'static str","parent":{"krate":0,"index":2613},"children":[],"decl_id":null,"docs":" Name of the instruction group.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2615},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648370,"byte_end":648381,"line_start":221,"line_end":221,"column_start":13,"column_end":24},"name":"descriptors","qualname":"::settings::detail::Template::descriptors","value":"&'static [settings::detail::Descriptor]","parent":{"krate":0,"index":2613},"children":[],"decl_id":null,"docs":" List of setting descriptors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2616},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648456,"byte_end":648467,"line_start":223,"line_end":223,"column_start":13,"column_end":24},"name":"enumerators","qualname":"::settings::detail::Template::enumerators","value":"&'static [&'static str]","parent":{"krate":0,"index":2613},"children":[],"decl_id":null,"docs":" Union of all enumerators.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2617},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648542,"byte_end":648552,"line_start":225,"line_end":225,"column_start":13,"column_end":23},"name":"hash_table","qualname":"::settings::detail::Template::hash_table","value":"&'static [u16]","parent":{"krate":0,"index":2613},"children":[],"decl_id":null,"docs":" Hash table of settings.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2618},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648610,"byte_end":648618,"line_start":227,"line_end":227,"column_start":13,"column_end":21},"name":"defaults","qualname":"::settings::detail::Template::defaults","value":"&'static [u8]","parent":{"krate":0,"index":2613},"children":[],"decl_id":null,"docs":" Default values.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2619},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648695,"byte_end":648702,"line_start":229,"line_end":229,"column_start":13,"column_end":20},"name":"presets","qualname":"::settings::detail::Template::presets","value":"&'static [(u8, u8)]","parent":{"krate":0,"index":2613},"children":[],"decl_id":null,"docs":" Pairs of (mask, value) for presets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648831,"byte_end":648836,"line_start":234,"line_end":234,"column_start":16,"column_end":21},"name":"enums","qualname":"<Template>::enums","value":"fn (&self, last: u8, enumerators: u16) -> &[&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Get enumerators corresponding to a `Details::Enum`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":649188,"byte_end":649205,"line_start":242,"line_end":242,"column_start":16,"column_end":33},"name":"format_toml_value","qualname":"<Template>::format_toml_value","value":"fn (&self, detail: Detail, byte: u8, f: &mut fmt::Formatter) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Format a setting value as a TOML string. This is mostly for use by the generated\n `Display` implementation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2627},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":650683,"byte_end":650693,"line_start":284,"line_end":284,"column_start":16,"column_end":26},"name":"Descriptor","qualname":"::settings::detail::Descriptor","value":"Descriptor { name, offset, detail }","parent":null,"children":[{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630}],"decl_id":null,"docs":" A setting descriptor holds the information needed to generically set and print a setting.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2628},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":650773,"byte_end":650777,"line_start":286,"line_end":286,"column_start":13,"column_end":17},"name":"name","qualname":"::settings::detail::Descriptor::name","value":"&'static str","parent":{"krate":0,"index":2627},"children":[],"decl_id":null,"docs":" Lower snake-case name of setting as defined in meta.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2629},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":650858,"byte_end":650864,"line_start":289,"line_end":289,"column_start":13,"column_end":19},"name":"offset","qualname":"::settings::detail::Descriptor::offset","value":"u32","parent":{"krate":0,"index":2627},"children":[],"decl_id":null,"docs":" Offset of byte containing this setting.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2630},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":650950,"byte_end":650956,"line_start":292,"line_end":292,"column_start":13,"column_end":19},"name":"detail","qualname":"::settings::detail::Descriptor::detail","value":"settings::detail::Detail","parent":{"krate":0,"index":2627},"children":[],"decl_id":null,"docs":" Additional details, depending on the kind of setting.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":8157},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651189,"byte_end":651193,"line_start":299,"line_end":299,"column_start":9,"column_end":13},"name":"Bool","qualname":"::settings::detail::Detail::Bool","value":"Detail::Bool { bit }","parent":{"krate":0,"index":8156},"children":[],"decl_id":null,"docs":" A boolean setting only uses one bit, numbered from LSB.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8159},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651311,"byte_end":651314,"line_start":305,"line_end":305,"column_start":9,"column_end":12},"name":"Num","qualname":"::settings::detail::Detail::Num","value":"Detail::Num","parent":{"krate":0,"index":8156},"children":[],"decl_id":null,"docs":" A numerical setting uses the whole byte.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":8161},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651382,"byte_end":651386,"line_start":308,"line_end":308,"column_start":9,"column_end":13},"name":"Enum","qualname":"::settings::detail::Detail::Enum","value":"Detail::Enum { last, enumerators }","parent":{"krate":0,"index":8156},"children":[],"decl_id":null,"docs":" An Enum setting uses a range of enumerators.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8164},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651790,"byte_end":651796,"line_start":319,"line_end":319,"column_start":9,"column_end":15},"name":"Preset","qualname":"::settings::detail::Detail::Preset","value":"Detail::Preset","parent":{"krate":0,"index":8156},"children":[],"decl_id":null,"docs":" A preset is not an individual setting, it is a collection of settings applied at once.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8156},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651104,"byte_end":651110,"line_start":297,"line_end":297,"column_start":14,"column_end":20},"name":"Detail","qualname":"::settings::detail::Detail","value":"Detail::{Bool, Num, Enum, Preset}","parent":null,"children":[{"krate":0,"index":8157},{"krate":0,"index":8159},{"krate":0,"index":8161},{"krate":0,"index":8164}],"decl_id":null,"docs":" The different kind of settings along with descriptor bits that depend on the kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2632},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651997,"byte_end":652006,"line_start":325,"line_end":325,"column_start":16,"column_end":25},"name":"is_preset","qualname":"<Detail>::is_preset","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a detail is a Detail::Preset. Useful because the Descriptor\n offset field has a different meaning when the detail is a preset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8216},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094089,"byte_end":12094094,"line_start":3,"line_end":3,"column_start":12,"column_end":17},"name":"Flags","qualname":"::settings::Flags","value":"Flags {  }","parent":null,"children":[{"krate":0,"index":8217}],"decl_id":null,"docs":" Flags group `shared`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8170},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094218,"byte_end":12094221,"line_start":9,"line_end":9,"column_start":12,"column_end":15},"name":"new","qualname":"<Flags>::new","value":"fn (builder: Builder) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create flags shared settings group.\n","sig":null,"attributes":[{"value":"allow(unused_variables)","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094180,"byte_end":12094206,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8222},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094588,"byte_end":12094592,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"None","qualname":"::settings::OptLevel::None","value":"OptLevel::None","parent":{"krate":0,"index":8221},"children":[],"decl_id":null,"docs":" `none`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8224},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094615,"byte_end":12094620,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Speed","qualname":"::settings::OptLevel::Speed","value":"OptLevel::Speed","parent":{"krate":0,"index":8221},"children":[],"decl_id":null,"docs":" `speed`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8226},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094652,"byte_end":12094664,"line_start":25,"line_end":25,"column_start":5,"column_end":17},"name":"SpeedAndSize","qualname":"::settings::OptLevel::SpeedAndSize","value":"OptLevel::SpeedAndSize","parent":{"krate":0,"index":8221},"children":[],"decl_id":null,"docs":" `speed_and_size`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8221},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094557,"byte_end":12094565,"line_start":19,"line_end":19,"column_start":10,"column_end":18},"name":"OptLevel","qualname":"::settings::OptLevel","value":"OptLevel::{None, Speed, SpeedAndSize}","parent":null,"children":[{"krate":0,"index":8222},{"krate":0,"index":8224},{"krate":0,"index":8226}],"decl_id":null,"docs":" Values for `shared.opt_level`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8241},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095385,"byte_end":12095395,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"IsaDefault","qualname":"::settings::LibcallCallConv::IsaDefault","value":"LibcallCallConv::IsaDefault","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `isa_default`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8243},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095417,"byte_end":12095421,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"Fast","qualname":"::settings::LibcallCallConv::Fast","value":"LibcallCallConv::Fast","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `fast`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8245},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095443,"byte_end":12095447,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Cold","qualname":"::settings::LibcallCallConv::Cold","value":"LibcallCallConv::Cold","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `cold`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8247},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095473,"byte_end":12095480,"line_start":57,"line_end":57,"column_start":5,"column_end":12},"name":"SystemV","qualname":"::settings::LibcallCallConv::SystemV","value":"LibcallCallConv::SystemV","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `system_v`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8249},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095514,"byte_end":12095529,"line_start":59,"line_end":59,"column_start":5,"column_end":20},"name":"WindowsFastcall","qualname":"::settings::LibcallCallConv::WindowsFastcall","value":"LibcallCallConv::WindowsFastcall","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `windows_fastcall`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8251},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095565,"byte_end":12095581,"line_start":61,"line_end":61,"column_start":5,"column_end":21},"name":"BaldrdashSystemV","qualname":"::settings::LibcallCallConv::BaldrdashSystemV","value":"LibcallCallConv::BaldrdashSystemV","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `baldrdash_system_v`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8253},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095616,"byte_end":12095632,"line_start":63,"line_end":63,"column_start":5,"column_end":21},"name":"BaldrdashWindows","qualname":"::settings::LibcallCallConv::BaldrdashWindows","value":"LibcallCallConv::BaldrdashWindows","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `baldrdash_windows`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8255},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095660,"byte_end":12095670,"line_start":65,"line_end":65,"column_start":5,"column_end":15},"name":"Probestack","qualname":"::settings::LibcallCallConv::Probestack","value":"LibcallCallConv::Probestack","parent":{"krate":0,"index":8240},"children":[],"decl_id":null,"docs":" `probestack`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8240},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095340,"byte_end":12095355,"line_start":49,"line_end":49,"column_start":10,"column_end":25},"name":"LibcallCallConv","qualname":"::settings::LibcallCallConv","value":"LibcallCallConv::{IsaDefault, Fast, Cold, SystemV, WindowsFastcall, BaldrdashSystemV, BaldrdashWindows, Probestack}","parent":null,"children":[{"krate":0,"index":8241},{"krate":0,"index":8243},{"krate":0,"index":8245},{"krate":0,"index":8247},{"krate":0,"index":8249},{"krate":0,"index":8251},{"krate":0,"index":8253},{"krate":0,"index":8255}],"decl_id":null,"docs":" Values for `shared.libcall_call_conv`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8183},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12096906,"byte_end":12096920,"line_start":101,"line_end":101,"column_start":12,"column_end":26},"name":"predicate_view","qualname":"<Flags>::predicate_view","value":"fn (&self) -> crate::settings::PredicateView","parent":null,"children":[],"decl_id":null,"docs":" Get a view of the boolean predicates.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8185},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12097468,"byte_end":12097477,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"opt_level","qualname":"<Flags>::opt_level","value":"fn (&self) -> OptLevel","parent":null,"children":[],"decl_id":null,"docs":" Optimization level:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8186},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12098229,"byte_end":12098246,"line_start":138,"line_end":138,"column_start":12,"column_end":29},"name":"libcall_call_conv","qualname":"<Flags>::libcall_call_conv","value":"fn (&self) -> LibcallCallConv","parent":null,"children":[],"decl_id":null,"docs":" Defines the calling convention to use for LibCalls call expansion,\n since it may be different from the ISA default calling convention.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8187},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12099570,"byte_end":12099594,"line_start":179,"line_end":179,"column_start":12,"column_end":36},"name":"baldrdash_prologue_words","qualname":"<Flags>::baldrdash_prologue_words","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Number of pointer-sized words pushed by the baldrdash prologue.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8188},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12099904,"byte_end":12099924,"line_start":188,"line_end":188,"column_start":12,"column_end":32},"name":"probestack_size_log2","qualname":"<Flags>::probestack_size_log2","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The log2 of the size of the stack guard region.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8189},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12100212,"byte_end":12100227,"line_start":195,"line_end":195,"column_start":12,"column_end":27},"name":"enable_verifier","qualname":"<Flags>::enable_verifier","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Run the Cranelift IR verifier at strategic times during compilation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8190},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12100349,"byte_end":12100355,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"is_pic","qualname":"<Flags>::is_pic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable Position-Independent Code generation\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8191},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12100671,"byte_end":12100693,"line_start":207,"line_end":207,"column_start":12,"column_end":34},"name":"use_colocated_libcalls","qualname":"<Flags>::use_colocated_libcalls","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Use colocated libcalls.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8192},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12101185,"byte_end":12101200,"line_start":218,"line_end":218,"column_start":12,"column_end":27},"name":"avoid_div_traps","qualname":"<Flags>::avoid_div_traps","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Generate explicit checks around native division instructions to avoid\n their trapping.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8193},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12101409,"byte_end":12101421,"line_start":224,"line_end":224,"column_start":12,"column_end":24},"name":"enable_float","qualname":"<Flags>::enable_float","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of floating-point instructions","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8194},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12101756,"byte_end":12101783,"line_start":232,"line_end":232,"column_start":12,"column_end":39},"name":"enable_nan_canonicalization","qualname":"<Flags>::enable_nan_canonicalization","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable NaN canonicalization","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8195},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12102150,"byte_end":12102167,"line_start":240,"line_end":240,"column_start":12,"column_end":29},"name":"enable_pinned_reg","qualname":"<Flags>::enable_pinned_reg","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of the pinned register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8196},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12102836,"byte_end":12102863,"line_start":252,"line_end":252,"column_start":12,"column_end":39},"name":"use_pinned_reg_as_heap_base","qualname":"<Flags>::use_pinned_reg_as_heap_base","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Use the pinned register as the heap base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8197},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12102978,"byte_end":12102989,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"enable_simd","qualname":"<Flags>::enable_simd","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of SIMD instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8198},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12103105,"byte_end":12103119,"line_start":260,"line_end":260,"column_start":12,"column_end":26},"name":"enable_atomics","qualname":"<Flags>::enable_atomics","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of atomic instructions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8199},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12103464,"byte_end":12103481,"line_start":268,"line_end":268,"column_start":12,"column_end":29},"name":"enable_safepoints","qualname":"<Flags>::enable_safepoints","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable safepoint instruction insertions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8200},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12103628,"byte_end":12103651,"line_start":272,"line_end":272,"column_start":12,"column_end":35},"name":"emit_all_ones_funcaddrs","qualname":"<Flags>::emit_all_ones_funcaddrs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Emit not-yet-relocated function addresses as all-ones bit patterns.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8201},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12103828,"byte_end":12103845,"line_start":277,"line_end":277,"column_start":12,"column_end":29},"name":"enable_probestack","qualname":"<Flags>::enable_probestack","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of stack probes, for calling conventions which support this\n functionality.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8202},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12104012,"byte_end":12104038,"line_start":282,"line_end":282,"column_start":12,"column_end":38},"name":"probestack_func_adjusts_sp","qualname":"<Flags>::probestack_func_adjusts_sp","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Set this to true of the stack probe function modifies the stack pointer\n itself.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8203},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12104174,"byte_end":12104192,"line_start":286,"line_end":286,"column_start":12,"column_end":30},"name":"enable_jump_tables","qualname":"<Flags>::enable_jump_tables","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Enable the use of jump tables in generated machine code.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8213},"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12107819,"byte_end":12107826,"line_start":445,"line_end":445,"column_start":8,"column_end":15},"name":"builder","qualname":"::settings::builder","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Create a `settings::Builder` for the shared settings group.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8269},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":652705,"byte_end":652715,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"FlagsOrIsa","qualname":"::settings::FlagsOrIsa","value":"FlagsOrIsa { flags, isa }","parent":null,"children":[{"krate":0,"index":8271},{"krate":0,"index":8272}],"decl_id":null,"docs":" Wrapper containing flags and optionally a `TargetIsa` trait object.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8271},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":652764,"byte_end":652769,"line_start":346,"line_end":346,"column_start":9,"column_end":14},"name":"flags","qualname":"::settings::FlagsOrIsa::flags","value":"&'a settings::Flags","parent":{"krate":0,"index":8269},"children":[],"decl_id":null,"docs":" Flags are always present.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8272},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":652827,"byte_end":652830,"line_start":349,"line_end":349,"column_start":9,"column_end":12},"name":"isa","qualname":"::settings::FlagsOrIsa::isa","value":"core::option::Option<&'a (dyn isa::TargetIsa + 'a)>","parent":{"krate":0,"index":8269},"children":[],"decl_id":null,"docs":" The ISA may not be present.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2639},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timing","qualname":"::timing","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","parent":null,"children":[{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2646},{"krate":0,"index":8313},{"krate":0,"index":8387},{"krate":0,"index":8386},{"krate":0,"index":8384},{"krate":0,"index":8382},{"krate":0,"index":8380},{"krate":0,"index":8278},{"krate":0,"index":8279},{"krate":0,"index":8281},{"krate":0,"index":8282},{"krate":0,"index":8283},{"krate":0,"index":8284},{"krate":0,"index":8285},{"krate":0,"index":8286},{"krate":0,"index":8287},{"krate":0,"index":8288},{"krate":0,"index":8289},{"krate":0,"index":8290},{"krate":0,"index":8291},{"krate":0,"index":8292},{"krate":0,"index":8293},{"krate":0,"index":8294},{"krate":0,"index":8295},{"krate":0,"index":8296},{"krate":0,"index":8297},{"krate":0,"index":8298},{"krate":0,"index":8299},{"krate":0,"index":8300},{"krate":0,"index":8301},{"krate":0,"index":8302},{"krate":0,"index":8303},{"krate":0,"index":8304},{"krate":0,"index":8305},{"krate":0,"index":8306},{"krate":0,"index":8307},{"krate":0,"index":8308},{"krate":0,"index":8309},{"krate":0,"index":8310},{"krate":0,"index":8311},{"krate":0,"index":8312},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2651}],"decl_id":null,"docs":" Pass timing.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8281},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":656983,"byte_end":656995,"line_start":43,"line_end":43,"column_start":5,"column_end":17},"name":"process_file","qualname":"::timing::process_file","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Processing test file\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8282},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657025,"byte_end":657035,"line_start":44,"line_end":44,"column_start":5,"column_end":15},"name":"parse_text","qualname":"::timing::parse_text","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Parsing textual Cranelift IR\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8283},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657073,"byte_end":657094,"line_start":45,"line_end":45,"column_start":5,"column_end":26},"name":"wasm_translate_module","qualname":"::timing::wasm_translate_module","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Translate WASM module\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8284},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657125,"byte_end":657148,"line_start":46,"line_end":46,"column_start":5,"column_end":28},"name":"wasm_translate_function","qualname":"::timing::wasm_translate_function","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Translate WASM function\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8285},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657182,"byte_end":657190,"line_start":48,"line_end":48,"column_start":5,"column_end":13},"name":"verifier","qualname":"::timing::verifier","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify Cranelift IR\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8286},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657219,"byte_end":657230,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"verify_cssa","qualname":"::timing::verify_cssa","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify CSSA\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8287},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657251,"byte_end":657266,"line_start":50,"line_end":50,"column_start":5,"column_end":20},"name":"verify_liveness","qualname":"::timing::verify_liveness","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify live ranges\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8288},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657294,"byte_end":657310,"line_start":51,"line_end":51,"column_start":5,"column_end":21},"name":"verify_locations","qualname":"::timing::verify_locations","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify value locations\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8289},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657342,"byte_end":657354,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"verify_flags","qualname":"::timing::verify_flags","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Verify CPU flags\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8290},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657381,"byte_end":657388,"line_start":54,"line_end":54,"column_start":5,"column_end":12},"name":"compile","qualname":"::timing::compile","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Compilation passes\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8291},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657416,"byte_end":657425,"line_start":55,"line_end":55,"column_start":5,"column_end":14},"name":"flowgraph","qualname":"::timing::flowgraph","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Control flow graph\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8292},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657453,"byte_end":657460,"line_start":56,"line_end":56,"column_start":5,"column_end":12},"name":"domtree","qualname":"::timing::domtree","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Dominator tree\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8293},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657484,"byte_end":657497,"line_start":57,"line_end":57,"column_start":5,"column_end":18},"name":"loop_analysis","qualname":"::timing::loop_analysis","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Loop analysis\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8294},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657520,"byte_end":657527,"line_start":58,"line_end":58,"column_start":5,"column_end":12},"name":"postopt","qualname":"::timing::postopt","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Post-legalization rewriting\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8295},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657564,"byte_end":657570,"line_start":59,"line_end":59,"column_start":5,"column_end":11},"name":"preopt","qualname":"::timing::preopt","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Pre-legalization rewriting\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8296},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657606,"byte_end":657609,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"dce","qualname":"::timing::dce","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Dead code elimination\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8297},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657640,"byte_end":657648,"line_start":61,"line_end":61,"column_start":5,"column_end":13},"name":"legalize","qualname":"::timing::legalize","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Legalization\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8298},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657670,"byte_end":657673,"line_start":62,"line_end":62,"column_start":5,"column_end":8},"name":"gvn","qualname":"::timing::gvn","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Global value numbering\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8299},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657705,"byte_end":657709,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"licm","qualname":"::timing::licm","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Loop invariant code motion\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8300},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657745,"byte_end":657761,"line_start":64,"line_end":64,"column_start":5,"column_end":21},"name":"unreachable_code","qualname":"::timing::unreachable_code","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Remove unreachable blocks\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8301},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657797,"byte_end":657805,"line_start":66,"line_end":66,"column_start":5,"column_end":13},"name":"regalloc","qualname":"::timing::regalloc","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Register allocation\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8302},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657834,"byte_end":657845,"line_start":67,"line_end":67,"column_start":5,"column_end":16},"name":"ra_liveness","qualname":"::timing::ra_liveness","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA liveness analysis\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8303},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657875,"byte_end":657882,"line_start":68,"line_end":68,"column_start":5,"column_end":12},"name":"ra_cssa","qualname":"::timing::ra_cssa","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA coalescing CSSA\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8304},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657910,"byte_end":657921,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ra_spilling","qualname":"::timing::ra_spilling","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA spilling\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8305},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657942,"byte_end":657951,"line_start":70,"line_end":70,"column_start":5,"column_end":14},"name":"ra_reload","qualname":"::timing::ra_reload","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA reloading\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8306},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":657973,"byte_end":657984,"line_start":71,"line_end":71,"column_start":5,"column_end":16},"name":"ra_coloring","qualname":"::timing::ra_coloring","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"RA coloring\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8307},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658006,"byte_end":658023,"line_start":73,"line_end":73,"column_start":5,"column_end":22},"name":"prologue_epilogue","qualname":"::timing::prologue_epilogue","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Prologue/epilogue insertion\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8308},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658060,"byte_end":658079,"line_start":74,"line_end":74,"column_start":5,"column_end":24},"name":"shrink_instructions","qualname":"::timing::shrink_instructions","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Instruction encoding shrinking\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8309},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658119,"byte_end":658133,"line_start":75,"line_end":75,"column_start":5,"column_end":19},"name":"relax_branches","qualname":"::timing::relax_branches","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Branch relaxation\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8310},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658160,"byte_end":658167,"line_start":76,"line_end":76,"column_start":5,"column_end":12},"name":"binemit","qualname":"::timing::binemit","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Binary machine code emission\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8311},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658205,"byte_end":658220,"line_start":77,"line_end":77,"column_start":5,"column_end":20},"name":"layout_renumber","qualname":"::timing::layout_renumber","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Layout full renumbering\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":8312},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658254,"byte_end":658271,"line_start":79,"line_end":79,"column_start":5,"column_end":22},"name":"canonicalize_nans","qualname":"::timing::canonicalize_nans","value":"fn () -> TimingToken","parent":null,"children":[],"decl_id":null,"docs":"Canonicalization of NaNs\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":659450,"byte_end":659461,"line_start":116,"line_end":116,"column_start":16,"column_end":27},"name":"TimingToken","qualname":"::timing::details::TimingToken","value":"TimingToken {  }","parent":null,"children":[{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668}],"decl_id":null,"docs":" A timing token is responsible for timing the currently running pass. Timing starts when it\n is created and ends when it is dropped.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2669},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":660054,"byte_end":660063,"line_start":138,"line_end":138,"column_start":16,"column_end":25},"name":"PassTimes","qualname":"::timing::details::PassTimes","value":"PassTimes {  }","parent":null,"children":[{"krate":0,"index":2670}],"decl_id":null,"docs":" Accumulated timing for all passes.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2684},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":663030,"byte_end":663042,"line_start":216,"line_end":216,"column_start":12,"column_end":24},"name":"take_current","qualname":"::timing::details::take_current","value":"fn () -> PassTimes","parent":null,"children":[],"decl_id":null,"docs":" Take the current accumulated pass timings and reset the timings for the current thread.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2686},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":663236,"byte_end":663250,"line_start":221,"line_end":221,"column_start":12,"column_end":26},"name":"add_to_current","qualname":"::timing::details::add_to_current","value":"fn (times: &PassTimes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add `timings` to the accumulated timings for the current thread.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2688},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"verifier","qualname":"::verifier","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","parent":null,"children":[{"krate":0,"index":2689},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2703},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2773},{"krate":0,"index":2803},{"krate":0,"index":2832},{"krate":0,"index":8405},{"krate":0,"index":8418},{"krate":0,"index":8419},{"krate":0,"index":8416},{"krate":0,"index":8413},{"krate":0,"index":8411},{"krate":0,"index":8409},{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2868},{"krate":0,"index":2872},{"krate":0,"index":2874},{"krate":0,"index":8421},{"krate":0,"index":8435},{"krate":0,"index":8433},{"krate":0,"index":8431},{"krate":0,"index":8428},{"krate":0,"index":8426},{"krate":0,"index":8424},{"krate":0,"index":2876},{"krate":0,"index":2887},{"krate":0,"index":2889},{"krate":0,"index":2891},{"krate":0,"index":2893},{"krate":0,"index":2895},{"krate":0,"index":2898},{"krate":0,"index":2901},{"krate":0,"index":2907}],"decl_id":null,"docs":" A verifier for ensuring that functions are well formed.\n It verifies:","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2760},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/cssa.rs","byte_start":741063,"byte_end":741074,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"verify_cssa","qualname":"::verifier::cssa::verify_cssa","value":"fn (func: &Function, cfg: &ControlFlowGraph, domtree: &DominatorTree, liveness: &Liveness, virtregs: &VirtRegs, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify conventional SSA form for `func`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2820},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/liveness.rs","byte_start":754285,"byte_end":754300,"line_start":24,"line_end":24,"column_start":8,"column_end":23},"name":"verify_liveness","qualname":"::verifier::liveness::verify_liveness","value":"fn (isa: &dyn TargetIsa, func: &Function, cfg: &ControlFlowGraph, liveness: &Liveness, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify liveness information for `func`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2842},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/locations.rs","byte_start":762926,"byte_end":762942,"line_start":22,"line_end":22,"column_start":8,"column_end":24},"name":"verify_locations","qualname":"::verifier::locations::verify_locations","value":"fn (isa: &dyn isa::TargetIsa, func: &ir::Function, cfg: &ControlFlowGraph, liveness: Option<&Liveness>, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify value locations for `func`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8405},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":667957,"byte_end":667970,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"VerifierError","qualname":"::verifier::VerifierError","value":"VerifierError { location, context, message }","parent":null,"children":[{"krate":0,"index":8406},{"krate":0,"index":8407},{"krate":0,"index":8408}],"decl_id":null,"docs":" A verifier error.\n","sig":null,"attributes":[{"value":"error(\"{}{}: {}\", . location, format_context (. context), . message)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":667878,"byte_end":667945,"line_start":95,"line_end":95,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8406},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":668028,"byte_end":668036,"line_start":98,"line_end":98,"column_start":9,"column_end":17},"name":"location","qualname":"::verifier::VerifierError::location","value":"ir::entities::AnyEntity","parent":{"krate":0,"index":8405},"children":[],"decl_id":null,"docs":" The entity causing the verifier error.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8407},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":668216,"byte_end":668223,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"name":"context","qualname":"::verifier::VerifierError::context","value":"core::option::Option<alloc::string::String>","parent":{"krate":0,"index":8405},"children":[],"decl_id":null,"docs":" Optionally provide some context for the given location; e.g., for `inst42` provide\n `Some(\"v3 = iconst.i32 0\")` for more comprehensible errors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8408},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":668276,"byte_end":668283,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"name":"message","qualname":"::verifier::VerifierError::message","value":"alloc::string::String","parent":{"krate":0,"index":8405},"children":[],"decl_id":null,"docs":" The error message.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2872},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670231,"byte_end":670249,"line_start":168,"line_end":168,"column_start":10,"column_end":28},"name":"VerifierStepResult","qualname":"::verifier::VerifierStepResult","value":"Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Result of a step in the verification process.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2874},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670490,"byte_end":670504,"line_start":174,"line_end":174,"column_start":10,"column_end":24},"name":"VerifierResult","qualname":"::verifier::VerifierResult","value":"Result<T, VerifierErrors>","parent":null,"children":[],"decl_id":null,"docs":" Result of a verification operation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8421},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670633,"byte_end":670647,"line_start":178,"line_end":178,"column_start":12,"column_end":26},"name":"VerifierErrors","qualname":"::verifier::VerifierErrors","value":"","parent":null,"children":[],"decl_id":null,"docs":" List of verifier errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2877},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670767,"byte_end":670770,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<VerifierErrors>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a new `VerifierErrors` struct.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670746,"byte_end":670755,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670888,"byte_end":670896,"line_start":189,"line_end":189,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<VerifierErrors>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether no errors were reported.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670867,"byte_end":670876,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671029,"byte_end":671038,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"has_error","qualname":"<VerifierErrors>::has_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether one or more errors were reported.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671008,"byte_end":671017,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671236,"byte_end":671245,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"as_result","qualname":"<VerifierErrors>::as_result","value":"fn (&self) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Return a `VerifierStepResult` that is fatal if at least one error was reported,\n and non-fatal otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671215,"byte_end":671224,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671452,"byte_end":671458,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"report","qualname":"<VerifierErrors>::report","value":"fn (&mut self, error: impl Into<VerifierError>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Report an error, adding it to the list of errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2883},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671605,"byte_end":671610,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"fatal","qualname":"<VerifierErrors>::fatal","value":"fn (&mut self, error: impl Into<VerifierError>) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Report a fatal error and return `Err`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671795,"byte_end":671803,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"nonfatal","qualname":"<VerifierErrors>::nonfatal","value":"fn (&mut self, error: impl Into<VerifierError>) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Report a non-fatal error and return `Ok`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2895},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672581,"byte_end":672596,"line_start":260,"line_end":260,"column_start":8,"column_end":23},"name":"verify_function","qualname":"::verifier::verify_function","value":"fn <'a, FOI> (func: &Function, fisa: FOI) -> VerifierResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify `func`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2898},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":673096,"byte_end":673110,"line_start":278,"line_end":278,"column_start":8,"column_end":22},"name":"verify_context","qualname":"::verifier::verify_context","value":"fn <'a, FOI> (func: &Function, cfg: &ControlFlowGraph, domtree: &DominatorTree, fisa: FOI, errors: &mut VerifierErrors) -> VerifierStepResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Verify `func` after checking the integrity of associated context data structures `cfg` and\n `domtree`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2964},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","parent":null,"children":[{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2978},{"krate":0,"index":2981},{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2989},{"krate":0,"index":2996},{"krate":0,"index":2998},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3005},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015},{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3022},{"krate":0,"index":3025},{"krate":0,"index":3030}],"decl_id":null,"docs":" Converting Cranelift IR to text.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2989},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":776607,"byte_end":776617,"line_start":21,"line_end":21,"column_start":11,"column_end":21},"name":"FuncWriter","qualname":"::write::FuncWriter","value":"FuncWriter","parent":null,"children":[{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995}],"decl_id":null,"docs":" A `FuncWriter` used to decorate functions during printing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":776690,"byte_end":776708,"line_start":23,"line_end":23,"column_start":8,"column_end":26},"name":"write_block_header","qualname":"::write::FuncWriter::write_block_header","value":"fn (&mut self, w: &mut dyn Write, func: &Function, isa: Option<&dyn TargetIsa>, block: Block, indent: usize) -> fmt::Result","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" Write the basic block header for the current function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":776932,"byte_end":776949,"line_start":33,"line_end":33,"column_start":8,"column_end":25},"name":"write_instruction","qualname":"::write::FuncWriter::write_instruction","value":"fn (&mut self, w: &mut dyn Write, func: &Function, aliases: &SecondaryMap<Value, Vec<Value>>, isa: Option<&dyn TargetIsa>, inst: Inst, indent: usize) -> fmt::Result","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" Write the given `inst` to `w`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2992},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":777267,"byte_end":777281,"line_start":44,"line_end":44,"column_start":8,"column_end":22},"name":"write_preamble","qualname":"::write::FuncWriter::write_preamble","value":"fn (&mut self, w: &mut dyn Write, func: &Function, regs: Option<&RegInfo>) -> Result<bool, fmt::Error>","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" Write the preamble to `w`. By default, this uses `write_entity_definition`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":777520,"byte_end":777534,"line_start":54,"line_end":54,"column_start":8,"column_end":22},"name":"super_preamble","qualname":"::write::FuncWriter::super_preamble","value":"fn (&mut self, w: &mut dyn Write, func: &Function, regs: Option<&RegInfo>) -> Result<bool, fmt::Error>","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" Default impl of `write_preamble`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":779289,"byte_end":779312,"line_start":109,"line_end":109,"column_start":8,"column_end":31},"name":"write_entity_definition","qualname":"::write::FuncWriter::write_entity_definition","value":"fn (&mut self, w: &mut dyn Write, func: &Function, entity: AnyEntity, value: &dyn fmt::Display) -> fmt::Result","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" Write an entity definition defined in the preamble to `w`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":779625,"byte_end":779648,"line_start":121,"line_end":121,"column_start":8,"column_end":31},"name":"super_entity_definition","qualname":"::write::FuncWriter::super_entity_definition","value":"fn (&mut self, w: &mut dyn Write, func: &Function, entity: AnyEntity, value: &dyn fmt::Display) -> fmt::Result","parent":{"krate":0,"index":2989},"children":[],"decl_id":null,"docs":" Default impl of `write_entity_definition`\n","sig":null,"attributes":[{"value":"allow(unused_variables)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":779591,"byte_end":779617,"line_start":120,"line_end":120,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2996},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":779931,"byte_end":779942,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"PlainWriter","qualname":"::write::PlainWriter","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `PlainWriter` that doesn't decorate the function.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3001},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":780668,"byte_end":780682,"line_start":162,"line_end":162,"column_start":8,"column_end":22},"name":"write_function","qualname":"::write::write_function","value":"fn (w: &mut dyn Write, func: &Function, annotations: &DisplayFunctionAnnotations) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write `func` to `w` as equivalent text.\n Use `isa` to emit ISA-dependent annotations.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3003},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":781499,"byte_end":781516,"line_start":185,"line_end":185,"column_start":8,"column_end":25},"name":"decorate_function","qualname":"::write::decorate_function","value":"fn <FW> (func_w: &mut FW, w: &mut dyn Write, func: &Function, annotations: &DisplayFunctionAnnotations) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Writes `func` to `w` as text.\n write_function_plain is passed as 'closure' to print instructions as text.\n pretty_function_error is passed as 'closure' to add error decoration.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3007},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":782932,"byte_end":782950,"line_start":242,"line_end":242,"column_start":8,"column_end":26},"name":"write_block_header","qualname":"::write::write_block_header","value":"fn (w: &mut dyn Write, func: &Function, isa: Option<&dyn TargetIsa>, block: Block, indent: usize) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write out the basic block header, outdented:","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3015},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":790084,"byte_end":790098,"line_start":482,"line_end":482,"column_start":8,"column_end":22},"name":"write_operands","qualname":"::write::write_operands","value":"fn (w: &mut dyn Write, dfg: &DataFlowGraph, isa: Option<&dyn TargetIsa>, inst: Inst) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write the operands of `inst` to `w` with a prepended space.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8471},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":811155,"byte_end":811161,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"BitSet","qualname":"::bitset::BitSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" A small bitset built on a single primitive integer type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3067},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":811467,"byte_end":811471,"line_start":28,"line_end":28,"column_start":12,"column_end":16},"name":"bits","qualname":"<BitSet<T>>::bits","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bits supported by this BitSet instance\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":811599,"byte_end":811607,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"max_bits","qualname":"<BitSet<T>>::max_bits","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bits supported by any bitset instance atm.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3069},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":811721,"byte_end":811729,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitSet<T>>::contains","value":"fn (&self, num: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this BitSet contains the number num\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3070},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":812002,"byte_end":812005,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"min","qualname":"<BitSet<T>>::min","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return the smallest number contained in the bitset or None if empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":812253,"byte_end":812256,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"max","qualname":"<BitSet<T>>::max","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return the largest number contained in the bitset or None if empty\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":812581,"byte_end":812591,"line_start":64,"line_end":64,"column_start":12,"column_end":22},"name":"from_range","qualname":"<BitSet<T>>::from_range","value":"fn (lo: u8, hi: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a BitSet with the half-open range [lo,hi) filled in\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3124},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819144,"byte_end":819151,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"Context","qualname":"::context::Context","value":"Context { func, cfg, domtree, regalloc, loop_analysis, redundant_reload_remover }","parent":null,"children":[{"krate":0,"index":3125},{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130}],"decl_id":null,"docs":" Persistent data structures and compilation pipeline.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3125},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819200,"byte_end":819204,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"func","qualname":"::context::Context::func","value":"ir::function::Function","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" The function we're compiling.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3126},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819267,"byte_end":819270,"line_start":45,"line_end":45,"column_start":9,"column_end":12},"name":"cfg","qualname":"::context::Context::cfg","value":"flowgraph::ControlFlowGraph","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" The control flow graph of `func`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3127},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819334,"byte_end":819341,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"domtree","qualname":"::context::Context::domtree","value":"dominator_tree::DominatorTree","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Dominator tree for `func`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3128},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819404,"byte_end":819412,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"regalloc","qualname":"::context::Context::regalloc","value":"regalloc::context::Context","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Register allocation context.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3129},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819475,"byte_end":819488,"line_start":54,"line_end":54,"column_start":9,"column_end":22},"name":"loop_analysis","qualname":"::context::Context::loop_analysis","value":"loop_analysis::LoopAnalysis","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Loop analysis of `func`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3130},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819555,"byte_end":819579,"line_start":57,"line_end":57,"column_start":9,"column_end":33},"name":"redundant_reload_remover","qualname":"::context::Context::redundant_reload_remover","value":"redundant_reload_remover::RedundantReloadRemover","parent":{"krate":0,"index":3124},"children":[],"decl_id":null,"docs":" Redundant-reload remover context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3132},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819822,"byte_end":819825,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new compilation context.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3133},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":820114,"byte_end":820126,"line_start":73,"line_end":73,"column_start":12,"column_end":24},"name":"for_function","qualname":"<Context>::for_function","value":"fn (func: Function) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new compilation context with an existing Function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3134},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":820515,"byte_end":820520,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"clear","qualname":"<Context>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3135},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":821353,"byte_end":821369,"line_start":105,"line_end":105,"column_start":12,"column_end":28},"name":"compile_and_emit","qualname":"<Context>::compile_and_emit","value":"fn (&mut self, isa: &dyn TargetIsa, mem: &mut Vec<u8>, relocs: &mut dyn RelocSink, traps: &mut dyn TrapSink, stackmaps: &mut dyn StackmapSink) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Compile the function, and emit machine code into a `Vec<u8>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3136},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":822269,"byte_end":822276,"line_start":130,"line_end":130,"column_start":12,"column_end":19},"name":"compile","qualname":"<Context>::compile","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Compile the function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3137},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":824165,"byte_end":824179,"line_start":184,"line_end":184,"column_start":19,"column_end":33},"name":"emit_to_memory","qualname":"<Context>::emit_to_memory","value":"fn (&self, isa: &dyn TargetIsa, mem: *mut u8, relocs: &mut dyn RelocSink, traps: &mut dyn TrapSink, stackmaps: &mut dyn StackmapSink) -> CodeInfo","parent":null,"children":[],"decl_id":null,"docs":" Emit machine code directly into raw memory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3138},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":824875,"byte_end":824891,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"emit_unwind_info","qualname":"<Context>::emit_unwind_info","value":"fn (&self, isa: &dyn TargetIsa, kind: FrameUnwindKind, sink: &mut dyn FrameUnwindSink) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emit unwind information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3139},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":825238,"byte_end":825244,"line_start":216,"line_end":216,"column_start":12,"column_end":18},"name":"verify","qualname":"<Context>::verify","value":"fn <'a, FOI> (&self, fisa: FOI) -> VerifierResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the verifier on the function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3142},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":825651,"byte_end":825660,"line_start":228,"line_end":228,"column_start":12,"column_end":21},"name":"verify_if","qualname":"<Context>::verify_if","value":"fn <'a, FOI> (&self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the verifier only if the `enable_verifier` setting is true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3145},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":825934,"byte_end":825950,"line_start":237,"line_end":237,"column_start":12,"column_end":28},"name":"verify_locations","qualname":"<Context>::verify_locations","value":"fn (&self, isa: &dyn TargetIsa) -> VerifierResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the locations verifier on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":826338,"byte_end":826357,"line_start":249,"line_end":249,"column_start":12,"column_end":31},"name":"verify_locations_if","qualname":"<Context>::verify_locations_if","value":"fn (&self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the locations verifier only if the `enable_verifier` setting is true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3147},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":826591,"byte_end":826594,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"name":"dce","qualname":"<Context>::dce","value":"fn <'a, FOI> (&mut self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform dead-code elimination on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3150},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":826845,"byte_end":826851,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"preopt","qualname":"<Context>::preopt","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform pre-legalization rewrites on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3151},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":827086,"byte_end":827103,"line_start":271,"line_end":271,"column_start":12,"column_end":29},"name":"canonicalize_nans","qualname":"<Context>::canonicalize_nans","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform NaN canonicalizing rewrites on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3152},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":827307,"byte_end":827315,"line_start":277,"line_end":277,"column_start":12,"column_end":20},"name":"legalize","qualname":"<Context>::legalize","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the legalizer for `isa` on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3153},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":827836,"byte_end":827843,"line_start":288,"line_end":288,"column_start":12,"column_end":19},"name":"postopt","qualname":"<Context>::postopt","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform post-legalization rewrites on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3154},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":828043,"byte_end":828054,"line_start":295,"line_end":295,"column_start":12,"column_end":23},"name":"compute_cfg","qualname":"<Context>::compute_cfg","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the control flow graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3155},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":828155,"byte_end":828170,"line_start":300,"line_end":300,"column_start":12,"column_end":27},"name":"compute_domtree","qualname":"<Context>::compute_domtree","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3156},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":828289,"byte_end":828310,"line_start":305,"line_end":305,"column_start":12,"column_end":33},"name":"compute_loop_analysis","qualname":"<Context>::compute_loop_analysis","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the loop analysis.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3157},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":828487,"byte_end":828496,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"name":"flowgraph","qualname":"<Context>::flowgraph","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the control flow graph and dominator tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3158},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":828631,"byte_end":828641,"line_start":317,"line_end":317,"column_start":12,"column_end":22},"name":"simple_gvn","qualname":"<Context>::simple_gvn","value":"fn <'a, FOI> (&mut self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform simple GVN on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":828861,"byte_end":828865,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"licm","qualname":"<Context>::licm","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform LICM on the function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3162},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":829181,"byte_end":829207,"line_start":335,"line_end":335,"column_start":12,"column_end":38},"name":"eliminate_unreachable_code","qualname":"<Context>::eliminate_unreachable_code","value":"fn <'a, FOI> (&mut self, fisa: FOI) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Perform unreachable code elimination.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3165},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":829476,"byte_end":829484,"line_start":344,"line_end":344,"column_start":12,"column_end":20},"name":"regalloc","qualname":"<Context>::regalloc","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the register allocator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3166},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":829730,"byte_end":829747,"line_start":350,"line_end":350,"column_start":12,"column_end":29},"name":"prologue_epilogue","qualname":"<Context>::prologue_epilogue","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Insert prologue and epilogues after computing the stack frame layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3167},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":830042,"byte_end":830066,"line_start":358,"line_end":358,"column_start":12,"column_end":36},"name":"redundant_reload_remover","qualname":"<Context>::redundant_reload_remover","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Do redundant-reload removal after allocation of both registers and stack slots.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3168},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":830317,"byte_end":830336,"line_start":366,"line_end":366,"column_start":12,"column_end":31},"name":"shrink_instructions","qualname":"<Context>::shrink_instructions","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Run the instruction shrinking pass.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3169},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":830661,"byte_end":830675,"line_start":375,"line_end":375,"column_start":12,"column_end":26},"name":"relax_branches","qualname":"<Context>::relax_branches","value":"fn (&mut self, isa: &dyn TargetIsa) -> CodegenResult<CodeInfo>","parent":null,"children":[],"decl_id":null,"docs":" Run the branch relaxation pass and return information about the function's code and\n read-only data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3170},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":830996,"byte_end":831021,"line_start":383,"line_end":383,"column_start":12,"column_end":37},"name":"build_value_labels_ranges","qualname":"<Context>::build_value_labels_ranges","value":"fn (&self, isa: &dyn TargetIsa) -> CodegenResult<ValueLabelsRanges>","parent":null,"children":[],"decl_id":null,"docs":" Builds ranges and location for specified value labels.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3454},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/legalizer/mod.rs","byte_start":881131,"byte_end":881148,"line_start":140,"line_end":140,"column_start":8,"column_end":25},"name":"legalize_function","qualname":"::legalizer::legalize_function","value":"fn (func: &mut ir::Function, cfg: &mut ControlFlowGraph, isa: &dyn TargetIsa) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Legalize `func` for `isa`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3656},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1018192,"byte_end":1018214,"line_start":220,"line_end":220,"column_start":12,"column_end":34},"name":"RedundantReloadRemover","qualname":"::redundant_reload_remover::RedundantReloadRemover","value":"RedundantReloadRemover {  }","parent":null,"children":[{"krate":0,"index":3657},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662}],"decl_id":null,"docs":" The redundant reload remover's state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3701},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1043529,"byte_end":1043532,"line_start":766,"line_end":766,"column_start":12,"column_end":15},"name":"new","qualname":"<RedundantReloadRemover>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new remover state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3702},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1044001,"byte_end":1044006,"line_start":778,"line_end":778,"column_start":12,"column_end":17},"name":"clear","qualname":"<RedundantReloadRemover>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the state of the remover.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3713},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1047755,"byte_end":1047758,"line_start":881,"line_end":881,"column_start":12,"column_end":15},"name":"run","qualname":"<RedundantReloadRemover>::run","value":"fn (&mut self, isa: &dyn TargetIsa, func: &mut Function, cfg: &ControlFlowGraph) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Run the remover.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3913},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1132974,"byte_end":1132982,"line_start":290,"line_end":290,"column_start":12,"column_end":20},"name":"Liveness","qualname":"::regalloc::liveness::Liveness","value":"Liveness {  }","parent":null,"children":[{"krate":0,"index":3914},{"krate":0,"index":3915}],"decl_id":null,"docs":" Liveness analysis for a function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3917},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1133539,"byte_end":1133542,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"new","qualname":"<Liveness>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty liveness analysis.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3918},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1133702,"byte_end":1133708,"line_start":313,"line_end":313,"column_start":12,"column_end":18},"name":"ranges","qualname":"<Liveness>::ranges","value":"fn (&self) -> &LiveRangeSet","parent":null,"children":[],"decl_id":null,"docs":" Current live ranges.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1133835,"byte_end":1133840,"line_start":318,"line_end":318,"column_start":12,"column_end":17},"name":"clear","qualname":"<Liveness>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this liveness analysis.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1133986,"byte_end":1133989,"line_start":324,"line_end":324,"column_start":12,"column_end":15},"name":"get","qualname":"<Liveness>::get","value":"fn (&self, value: Value) -> Option<&LiveRange>","parent":null,"children":[],"decl_id":null,"docs":" Get the live range for `value`, if it exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3921},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1134304,"byte_end":1134315,"line_start":333,"line_end":333,"column_start":12,"column_end":23},"name":"create_dead","qualname":"<Liveness>::create_dead","value":"fn <PP> (&mut self, value: Value, def: PP, affinity: Affinity) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Create a new live range for `value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3923},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1134782,"byte_end":1134798,"line_start":346,"line_end":346,"column_start":12,"column_end":28},"name":"move_def_locally","qualname":"<Liveness>::move_def_locally","value":"fn <PP> (&mut self, value: Value, def: PP) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Move the definition of `value` to `def`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3925},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1135281,"byte_end":1135295,"line_start":359,"line_end":359,"column_start":12,"column_end":26},"name":"extend_locally","qualname":"<Liveness>::extend_locally","value":"fn (&mut self, value: Value, block: Block, user: Inst, layout: &Layout) -> &mut Affinity","parent":null,"children":[],"decl_id":null,"docs":" Locally extend the live range for `value` to reach `user`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1135843,"byte_end":1135848,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"spill","qualname":"<Liveness>::spill","value":"fn (&mut self, value: Value) -> Affinity","parent":null,"children":[],"decl_id":null,"docs":" Change the affinity of `value` to `Stack` and return the previous affinity.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1136184,"byte_end":1136191,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"compute","qualname":"<Liveness>::compute","value":"fn (&mut self, isa: &dyn TargetIsa, func: &mut Function, cfg: &ControlFlowGraph) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the live ranges of all SSA values used in `func`.\n This clears out any existing analysis stored in this data structure.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3951},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1147717,"byte_end":1147733,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"GenericLiveRange","qualname":"::regalloc::liverange::GenericLiveRange","value":"GenericLiveRange { affinity }","parent":null,"children":[{"krate":0,"index":3953},{"krate":0,"index":3954},{"krate":0,"index":3955},{"krate":0,"index":3956},{"krate":0,"index":3957},{"krate":0,"index":3959}],"decl_id":null,"docs":" Generic live range implementation.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3954},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1147976,"byte_end":1147984,"line_start":169,"line_end":169,"column_start":9,"column_end":17},"name":"affinity","qualname":"::regalloc::liverange::GenericLiveRange::affinity","value":"regalloc::affinity::Affinity","parent":{"krate":0,"index":3951},"children":[],"decl_id":null,"docs":" The preferred register allocation for this value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3963},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1149573,"byte_end":1149576,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericLiveRange<PO>>::new","value":"fn (value: Value, def: ProgramPoint, affinity: Affinity) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new live range for `value` defined at `def`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3967},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1151147,"byte_end":1151162,"line_start":251,"line_end":251,"column_start":12,"column_end":27},"name":"extend_in_block","qualname":"<GenericLiveRange<PO>>::extend_in_block","value":"fn (&mut self, block: Block, inst: Inst, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extend the local interval for `block` so it reaches `to` which must belong to `block`.\n Create a live-in interval if necessary.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3970},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1155596,"byte_end":1155603,"line_start":352,"line_end":352,"column_start":12,"column_end":19},"name":"is_dead","qualname":"<GenericLiveRange<PO>>::is_dead","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the live range of a dead value?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3971},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1155873,"byte_end":1155881,"line_start":360,"line_end":360,"column_start":12,"column_end":20},"name":"is_local","qualname":"<GenericLiveRange<PO>>::is_local","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a local live range?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3972},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1156145,"byte_end":1156148,"line_start":368,"line_end":368,"column_start":12,"column_end":15},"name":"def","qualname":"<GenericLiveRange<PO>>::def","value":"fn (&self) -> ProgramPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the program point where this live range is defined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3973},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1156416,"byte_end":1156432,"line_start":376,"line_end":376,"column_start":12,"column_end":28},"name":"move_def_locally","qualname":"<GenericLiveRange<PO>>::move_def_locally","value":"fn (&mut self, def: ProgramPoint) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Move the definition of this value to a new program point.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3974},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1156774,"byte_end":1156787,"line_start":384,"line_end":384,"column_start":12,"column_end":25},"name":"def_local_end","qualname":"<GenericLiveRange<PO>>::def_local_end","value":"fn (&self) -> ProgramPoint","parent":null,"children":[],"decl_id":null,"docs":" Get the local end-point of this live range in the block where it is defined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3975},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1157361,"byte_end":1157377,"line_start":396,"line_end":396,"column_start":12,"column_end":28},"name":"livein_local_end","qualname":"<GenericLiveRange<PO>>::livein_local_end","value":"fn (&self, block: Block, order: &PO) -> Option<Inst>","parent":null,"children":[],"decl_id":null,"docs":" Get the local end-point of this live range in an block where it is live-in.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3977},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1157952,"byte_end":1157961,"line_start":413,"line_end":413,"column_start":12,"column_end":21},"name":"is_livein","qualname":"<GenericLiveRange<PO>>::is_livein","value":"fn (&self, block: Block, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this value live-in to `block`?","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3978},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1158263,"byte_end":1158270,"line_start":421,"line_end":421,"column_start":12,"column_end":19},"name":"liveins","qualname":"<GenericLiveRange<PO>>::liveins","value":"fn <'a> (&'a self) -> impl Iterator<Item = (Block, Inst)> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Get all the live-in intervals.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1158517,"byte_end":1158529,"line_start":428,"line_end":428,"column_start":12,"column_end":24},"name":"overlaps_def","qualname":"<GenericLiveRange<PO>>::overlaps_def","value":"fn (&self, def: ExpandedProgramPoint, block: Block, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this live range overlaps a definition in `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3983},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1159215,"byte_end":1159226,"line_start":447,"line_end":447,"column_start":12,"column_end":23},"name":"reaches_use","qualname":"<GenericLiveRange<PO>>::reaches_use","value":"fn (&self, user: Inst, block: Block, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this live range reaches a use at `user` in `block`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3984},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1159736,"byte_end":1159745,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"killed_at","qualname":"<GenericLiveRange<PO>>::killed_at","value":"fn (&self, user: Inst, block: Block, order: &PO) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this live range is killed at `user` in `block`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8583},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1169619,"byte_end":1169630,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"RegisterSet","qualname":"::regalloc::register_set::RegisterSet","value":"RegisterSet {  }","parent":null,"children":[{"krate":0,"index":8584}],"decl_id":null,"docs":" Set of registers available for allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4000},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1170546,"byte_end":1170549,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<RegisterSet>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new register set with all registers available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1170675,"byte_end":1170680,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"empty","qualname":"<RegisterSet>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new register set with no registers available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4004},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1170805,"byte_end":1170813,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"is_avail","qualname":"<RegisterSet>::is_avail","value":"fn (&self, rc: RegClass, reg: RegUnit) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the specified register is available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4005},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1171130,"byte_end":1171134,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"take","qualname":"<RegisterSet>::take","value":"fn (&mut self, rc: RegClass, reg: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allocate `reg` from `rc` so it is no longer available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4006},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1171571,"byte_end":1171575,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"free","qualname":"<RegisterSet>::free","value":"fn (&mut self, rc: RegClass, reg: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Return `reg` and all of its register units to the set of available registers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4007},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1172102,"byte_end":1172106,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"iter","qualname":"<RegisterSet>::iter","value":"fn (&self, rc: RegClass) -> RegSetIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all available registers belonging to the register class `rc`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4008},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1172980,"byte_end":1172995,"line_start":106,"line_end":106,"column_start":12,"column_end":27},"name":"interferes_with","qualname":"<RegisterSet>::interferes_with","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if any register units allocated out of this set interferes with units allocated out\n of `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4010},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1173310,"byte_end":1173319,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"intersect","qualname":"<RegisterSet>::intersect","value":"fn (&mut self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this set of registers with `other`. This has the effect of removing any register\n units from this set that are not in `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4011},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1173575,"byte_end":1173582,"line_start":123,"line_end":123,"column_start":12,"column_end":19},"name":"display","qualname":"<RegisterSet>::display","value":"fn <'a, R> (&self, regs: R) -> DisplayRegisterSet<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this register set, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8587},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1173811,"byte_end":1173821,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"RegSetIter","qualname":"::regalloc::register_set::RegSetIter","value":"RegSetIter {  }","parent":null,"children":[{"krate":0,"index":8588}],"decl_id":null,"docs":" Iterator over available registers in a register class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4020},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1174840,"byte_end":1174845,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"rnext","qualname":"<RegSetIter>::rnext","value":"fn (&mut self) -> Option<RegUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4022},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1175709,"byte_end":1175727,"line_start":193,"line_end":193,"column_start":12,"column_end":30},"name":"DisplayRegisterSet","qualname":"::regalloc::register_set::DisplayRegisterSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying an `RegisterSet` correctly requires the associated `RegInfo` from the target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8593},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1183068,"byte_end":1183075,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"VirtReg","qualname":"::regalloc::virtregs::VirtReg","value":"","parent":null,"children":[],"decl_id":null,"docs":" A virtual register reference.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4054},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1183328,"byte_end":1183336,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"VirtRegs","qualname":"::regalloc::virtregs::VirtRegs","value":"VirtRegs {  }","parent":null,"children":[{"krate":0,"index":4055},{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4059},{"krate":0,"index":4060}],"decl_id":null,"docs":" Collection of virtual registers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4062},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1184108,"byte_end":1184111,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<VirtRegs>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new virtual register collection.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4063},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1184446,"byte_end":1184451,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"clear","qualname":"<VirtRegs>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all virtual registers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4064},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1184738,"byte_end":1184741,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"get","qualname":"<VirtRegs>::get","value":"fn (&self, value: Value) -> Option<VirtReg>","parent":null,"children":[],"decl_id":null,"docs":" Get the virtual register containing `value`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4065},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1184883,"byte_end":1184889,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"name":"values","qualname":"<VirtRegs>::values","value":"fn (&self, vreg: VirtReg) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the list of values in `vreg`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4066},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1185042,"byte_end":1185054,"line_start":93,"line_end":93,"column_start":12,"column_end":24},"name":"all_virtregs","qualname":"<VirtRegs>::all_virtregs","value":"fn (&self) -> Keys<VirtReg>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over all virtual registers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4067},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1185420,"byte_end":1185436,"line_start":102,"line_end":102,"column_start":12,"column_end":28},"name":"congruence_class","qualname":"<VirtRegs>::congruence_class","value":"fn <'a, 'b> (&'a self, value: &'b Value) -> &'b [Value]","parent":null,"children":[],"decl_id":null,"docs":" Get the congruence class of `value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4072},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1185703,"byte_end":1185713,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"same_class","qualname":"<VirtRegs>::same_class","value":"fn (&self, a: Value, b: Value) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `a` and `b` belong to the same congruence class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4073},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1186072,"byte_end":1186083,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"sort_values","qualname":"<VirtRegs>::sort_values","value":"fn (&mut self, vreg: VirtReg, func: &Function, preorder: &DominatorTreePreorder) -> &[Value]","parent":null,"children":[],"decl_id":null,"docs":" Sort the values in `vreg` according to the dominator tree pre-order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4075},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1186703,"byte_end":1186716,"line_start":138,"line_end":138,"column_start":12,"column_end":25},"name":"insert_single","qualname":"<VirtRegs>::insert_single","value":"fn (&mut self, big: Value, single: Value, func: &Function, preorder: &DominatorTreePreorder) -> VirtReg","parent":null,"children":[],"decl_id":null,"docs":" Insert a single value into a sorted virtual register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4078},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1187807,"byte_end":1187813,"line_start":172,"line_end":172,"column_start":12,"column_end":18},"name":"remove","qualname":"<VirtRegs>::remove","value":"fn (&mut self, vreg: VirtReg) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove a virtual register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4081},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1188712,"byte_end":1188717,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"unify","qualname":"<VirtRegs>::unify","value":"fn (&mut self, values: &[Value]) -> VirtReg","parent":null,"children":[],"decl_id":null,"docs":" Unify `values` into a single virtual register.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4097},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1192888,"byte_end":1192893,"line_start":317,"line_end":317,"column_start":12,"column_end":17},"name":"union","qualname":"<VirtRegs>::union","value":"fn (&mut self, a: Value, b: Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union the two sets containing `a` and `b`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4098},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1194878,"byte_end":1194895,"line_start":364,"line_end":364,"column_start":12,"column_end":29},"name":"finish_union_find","qualname":"<VirtRegs>::finish_union_find","value":"fn (&mut self, mut new_vregs: Option<&mut Vec<VirtReg>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute virtual registers based on previous calls to `union(a, b)`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8629},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1200791,"byte_end":1200801,"line_start":22,"line_end":22,"column_start":5,"column_end":15},"name":"Unassigned","qualname":"::regalloc::affinity::Affinity::Unassigned","value":"Affinity::Unassigned","parent":{"krate":0,"index":8628},"children":[],"decl_id":null,"docs":" No affinity.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8631},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1200874,"byte_end":1200879,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Stack","qualname":"::regalloc::affinity::Affinity::Stack","value":"Affinity::Stack","parent":{"krate":0,"index":8628},"children":[],"decl_id":null,"docs":" This value should be placed in a spill slot on the stack.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8633},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1200955,"byte_end":1200958,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"Reg","qualname":"::regalloc::affinity::Affinity::Reg","value":"Affinity::Reg(RegClassIndex)","parent":{"krate":0,"index":8628},"children":[],"decl_id":null,"docs":" This value prefers a register from the given register class.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8628},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1200594,"byte_end":1200602,"line_start":17,"line_end":17,"column_start":10,"column_end":18},"name":"Affinity","qualname":"::regalloc::affinity::Affinity","value":"Affinity::{Unassigned, Stack, Reg}","parent":null,"children":[{"krate":0,"index":8629},{"krate":0,"index":8631},{"krate":0,"index":8633}],"decl_id":null,"docs":" Preferred register allocation for an SSA value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4114},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1201274,"byte_end":1201277,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Affinity>::new","value":"fn (constraint: &OperandConstraint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an affinity that satisfies a single constraint.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4115},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1201560,"byte_end":1201563,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"abi","qualname":"<Affinity>::abi","value":"fn (arg: &AbiParam, isa: &dyn TargetIsa) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an affinity that matches an ABI argument for `isa`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1201914,"byte_end":1201927,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"is_unassigned","qualname":"<Affinity>::is_unassigned","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the `Unassigned` affinity?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4117},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1202091,"byte_end":1202097,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"is_reg","qualname":"<Affinity>::is_reg","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the `Reg` affinity?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4118},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1202259,"byte_end":1202267,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"is_stack","qualname":"<Affinity>::is_stack","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the `Stack` affinity?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4119},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1202584,"byte_end":1202589,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"merge","qualname":"<Affinity>::merge","value":"fn (&mut self, constraint: &OperandConstraint, reginfo: &RegInfo) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Merge an operand constraint into this affinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4120},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1203507,"byte_end":1203514,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"display","qualname":"<Affinity>::display","value":"fn <'a, R> (self, regs: R) -> DisplayAffinity<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display this value affinity, using the register info from the\n target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4123},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1203746,"byte_end":1203761,"line_start":113,"line_end":113,"column_start":12,"column_end":27},"name":"DisplayAffinity","qualname":"::regalloc::affinity::DisplayAffinity","value":"","parent":null,"children":[],"decl_id":null,"docs":" Displaying an `Affinity` correctly requires the associated `RegInfo` from the target ISA.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4328},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1253628,"byte_end":1253635,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"Context","qualname":"::regalloc::context::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4333},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4336}],"decl_id":null,"docs":" Persistent memory allocations for register allocation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4338},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1254041,"byte_end":1254044,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new context for register allocation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4339},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1254467,"byte_end":1254472,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<Context>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all data structures in this context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4340},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1254786,"byte_end":1254794,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"liveness","qualname":"<Context>::liveness","value":"fn (&self) -> &Liveness","parent":null,"children":[],"decl_id":null,"docs":" Current values liveness state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4341},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1255077,"byte_end":1255080,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"run","qualname":"<Context>::run","value":"fn (&mut self, isa: &dyn TargetIsa, func: &mut Function, cfg: &mut ControlFlowGraph, domtree: &mut DominatorTree) -> CodegenResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Allocate registers in `func`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8652},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261248,"byte_end":1261257,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"Diversion","qualname":"::regalloc::diversion::Diversion","value":"Diversion { from, to }","parent":null,"children":[{"krate":0,"index":8653},{"krate":0,"index":8654}],"decl_id":null,"docs":" A diversion of a value from its original location to a new register or stack location.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8653},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261305,"byte_end":1261309,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"name":"from","qualname":"::regalloc::diversion::Diversion::from","value":"ir::valueloc::ValueLoc","parent":{"krate":0,"index":8652},"children":[],"decl_id":null,"docs":" The original value location.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8654},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261365,"byte_end":1261367,"line_start":30,"line_end":30,"column_start":9,"column_end":11},"name":"to","qualname":"::regalloc::diversion::Diversion::to","value":"ir::valueloc::ValueLoc","parent":{"krate":0,"index":8652},"children":[],"decl_id":null,"docs":" The current value location.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4364},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261440,"byte_end":1261443,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Diversion>::new","value":"fn (from: ValueLoc, to: ValueLoc) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a new diversion.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261652,"byte_end":1261665,"line_start":43,"line_end":43,"column_start":12,"column_end":25},"name":"RegDiversions","qualname":"::regalloc::diversion::RegDiversions","value":"RegDiversions {  }","parent":null,"children":[{"krate":0,"index":8666}],"decl_id":null,"docs":" Keep track of diversions in an block.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4365},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261941,"byte_end":1261959,"line_start":55,"line_end":55,"column_start":12,"column_end":30},"name":"EntryRegDiversions","qualname":"::regalloc::diversion::EntryRegDiversions","value":"EntryRegDiversions {  }","parent":null,"children":[{"krate":0,"index":4366}],"decl_id":null,"docs":" Map block to their matching RegDiversions at basic blocks entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4368},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262095,"byte_end":1262098,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<RegDiversions>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty diversion tracker.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4369},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262278,"byte_end":1262283,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"clear","qualname":"<RegDiversions>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the content of the diversions, to reset the state of the compiler.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4370},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262378,"byte_end":1262386,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RegDiversions>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are there any diversions?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4371},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262508,"byte_end":1262517,"line_start":78,"line_end":78,"column_start":12,"column_end":21},"name":"diversion","qualname":"<RegDiversions>::diversion","value":"fn (&self, value: Value) -> Option<&Diversion>","parent":null,"children":[],"decl_id":null,"docs":" Get the current diversion of `value`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4372},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262650,"byte_end":1262654,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"iter","qualname":"<RegDiversions>::iter","value":"fn (&self) -> Iter<'_, Value, Diversion>","parent":null,"children":[],"decl_id":null,"docs":" Get all current diversions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4373},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262850,"byte_end":1262853,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"get","qualname":"<RegDiversions>::get","value":"fn (&self, value: Value, locations: &ValueLocations) -> ValueLoc","parent":null,"children":[],"decl_id":null,"docs":" Get the current location for `value`. Fall back to the assignment map for non-diverted\n values\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4374},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1263146,"byte_end":1263149,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"reg","qualname":"<RegDiversions>::reg","value":"fn (&self, value: Value, locations: &ValueLocations) -> RegUnit","parent":null,"children":[],"decl_id":null,"docs":" Get the current register location for `value`, or panic if `value` isn't in a register.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4375},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1263373,"byte_end":1263378,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"stack","qualname":"<RegDiversions>::stack","value":"fn (&self, value: Value, locations: &ValueLocations) -> StackSlot","parent":null,"children":[],"decl_id":null,"docs":" Get the current stack location for `value`, or panic if `value` isn't in a stack slot.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4377},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1264433,"byte_end":1264440,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"regmove","qualname":"<RegDiversions>::regmove","value":"fn (&mut self, value: Value, from: RegUnit, to: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a register -> register move.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4378},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1264623,"byte_end":1264631,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"regspill","qualname":"<RegDiversions>::regspill","value":"fn (&mut self, value: Value, from: RegUnit, to: StackSlot) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a register -> stack move.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4379},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1264818,"byte_end":1264825,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"regfill","qualname":"<RegDiversions>::regfill","value":"fn (&mut self, value: Value, from: StackSlot, to: RegUnit) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Record a stack -> register move.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4380},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1265127,"byte_end":1265132,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"apply","qualname":"<RegDiversions>::apply","value":"fn (&mut self, inst: &InstructionData) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply the effect of `inst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4381},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1265922,"byte_end":1265928,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"remove","qualname":"<RegDiversions>::remove","value":"fn (&mut self, value: Value) -> Option<ValueLoc>","parent":null,"children":[],"decl_id":null,"docs":" Drop any recorded move for `value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4383},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1266258,"byte_end":1266266,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"at_block","qualname":"<RegDiversions>::at_block","value":"fn (&mut self, entry_diversions: &EntryRegDiversions, block: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of the current diversions to the recorded diversions at the entry of the\n given `block`. The recoded diversions is available after coloring on `func.entry_diversions`\n field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4384},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1266818,"byte_end":1266832,"line_start":196,"line_end":196,"column_start":12,"column_end":26},"name":"save_for_block","qualname":"<RegDiversions>::save_for_block","value":"fn (&mut self, entry_diversions: &mut EntryRegDiversions, target: Block) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copy the current state of the diversions, and save it for the entry of the `block` given as\n argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4385},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1267504,"byte_end":1267521,"line_start":213,"line_end":213,"column_start":12,"column_end":29},"name":"check_block_entry","qualname":"<RegDiversions>::check_block_entry","value":"fn (&self, entry_diversions: &EntryRegDiversions, target: Block) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the recorded entry for a given `block` matches what is recorded in the\n `entry_diversions`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4386},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268124,"byte_end":1268131,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"display","qualname":"<RegDiversions>::display","value":"fn <'a, R> (&'a self, regs: R) -> DisplayDiversions<'a>","parent":null,"children":[],"decl_id":null,"docs":" Return an object that can display the diversions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4390},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268393,"byte_end":1268396,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"new","qualname":"<EntryRegDiversions>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty entry diversion, to associate diversions to each block entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4391},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268487,"byte_end":1268492,"line_start":245,"line_end":245,"column_start":12,"column_end":17},"name":"clear","qualname":"<EntryRegDiversions>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4396},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1269099,"byte_end":1269116,"line_start":270,"line_end":270,"column_start":12,"column_end":29},"name":"DisplayDiversions","qualname":"::regalloc::diversion::DisplayDiversions","value":"","parent":null,"children":[],"decl_id":null,"docs":" Object that displays register diversions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8724},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1381900,"byte_end":1381908,"line_start":16,"line_end":16,"column_start":5,"column_end":13},"name":"Verifier","qualname":"::result::CodegenError::Verifier","value":"CodegenError::Verifier(VerifierErrors)","parent":{"krate":0,"index":8723},"children":[],"decl_id":null,"docs":" A list of IR verifier errors.","sig":null,"attributes":[{"value":"error(\"Verifier errors\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1381868,"byte_end":1381895,"line_start":15,"line_end":15,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8727},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1382313,"byte_end":1382330,"line_start":25,"line_end":25,"column_start":5,"column_end":22},"name":"ImplLimitExceeded","qualname":"::result::CodegenError::ImplLimitExceeded","value":"CodegenError::ImplLimitExceeded","parent":{"krate":0,"index":8723},"children":[],"decl_id":null,"docs":" An implementation limit was exceeded.","sig":null,"attributes":[{"value":"error(\"Implementation limit exceeded\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1382267,"byte_end":1382308,"line_start":24,"line_end":24,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8729},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1382584,"byte_end":1382596,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"CodeTooLarge","qualname":"::result::CodegenError::CodeTooLarge","value":"CodegenError::CodeTooLarge","parent":{"krate":0,"index":8723},"children":[],"decl_id":null,"docs":" The code size for the function is too large.","sig":null,"attributes":[{"value":"error(\"Code for function is too large\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1382537,"byte_end":1382579,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":8723},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1381675,"byte_end":1381687,"line_start":10,"line_end":10,"column_start":10,"column_end":22},"name":"CodegenError","qualname":"::result::CodegenError","value":"CodegenError::{Verifier, ImplLimitExceeded, CodeTooLarge}","parent":null,"children":[{"krate":0,"index":8724},{"krate":0,"index":8727},{"krate":0,"index":8729}],"decl_id":null,"docs":" A compilation error.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4724},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/result.rs","byte_start":1382692,"byte_end":1382705,"line_start":36,"line_end":36,"column_start":10,"column_end":23},"name":"CodegenResult","qualname":"::result::CodegenResult","value":"Result<T, CodegenError>","parent":null,"children":[],"decl_id":null,"docs":" A convenient alias for a `Result` that uses `CodegenError` as the error type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8790},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1447758,"byte_end":1447771,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"ValueLocRange","qualname":"::value_label::ValueLocRange","value":"ValueLocRange { loc, start, end }","parent":null,"children":[{"krate":0,"index":8791},{"krate":0,"index":8792},{"krate":0,"index":8793}],"decl_id":null,"docs":" Value location range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8791},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1447846,"byte_end":1447849,"line_start":20,"line_end":20,"column_start":9,"column_end":12},"name":"loc","qualname":"::value_label::ValueLocRange::loc","value":"ir::valueloc::ValueLoc","parent":{"krate":0,"index":8790},"children":[],"decl_id":null,"docs":" The ValueLoc containing a ValueLabel during this range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8792},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1447901,"byte_end":1447906,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"start","qualname":"::value_label::ValueLocRange::start","value":"u32","parent":{"krate":0,"index":8790},"children":[],"decl_id":null,"docs":" The start of the range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8793},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1447951,"byte_end":1447954,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"end","qualname":"::value_label::ValueLocRange::end","value":"u32","parent":{"krate":0,"index":8790},"children":[],"decl_id":null,"docs":" The end of the range.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4950},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1448035,"byte_end":1448052,"line_start":28,"line_end":28,"column_start":10,"column_end":27},"name":"ValueLabelsRanges","qualname":"::value_label::ValueLabelsRanges","value":"HashMap<ValueLabel, Vec<ValueLocRange>>","parent":null,"children":[],"decl_id":null,"docs":" Resulting map of Value labels and their ranges/locations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4975},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":3047,"byte_end":3054,"line_start":110,"line_end":110,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::VERSION","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Version number of this crate.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":13217,"byte_end":13231,"line_start":46,"line_end":46,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":15029,"byte_end":15043,"line_start":99,"line_end":99,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":15364,"byte_end":15378,"line_start":109,"line_end":109,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17348,"byte_end":17361,"line_start":179,"line_end":179,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17831,"byte_end":17843,"line_start":190,"line_end":190,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":18259,"byte_end":18275,"line_start":203,"line_end":203,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":37420,"byte_end":37428,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4840,"byte_end":4845,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6326,"byte_end":6334,"line_start":98,"line_end":98,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":42036,"byte_end":42046,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":44000,"byte_end":44010,"line_start":79,"line_end":79,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":64824,"byte_end":64834,"line_start":581,"line_end":581,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":65477,"byte_end":65487,"line_start":602,"line_end":602,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":68025,"byte_end":68034,"line_start":685,"line_end":685,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":69443,"byte_end":69452,"line_start":727,"line_end":727,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dbg.rs","byte_start":72365,"byte_end":72376,"line_start":12,"line_end":12,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":74586,"byte_end":74599,"line_start":53,"line_end":53,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":80772,"byte_end":80785,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":92392,"byte_end":92413,"line_start":488,"line_end":488,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":94803,"byte_end":94812,"line_start":552,"line_end":552,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":95098,"byte_end":95119,"line_start":565,"line_end":565,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":106800,"byte_end":106816,"line_start":42,"line_end":42,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":108438,"byte_end":108454,"line_start":81,"line_end":81,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":112909,"byte_end":112917,"line_start":201,"line_end":201,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":123690,"byte_end":123691,"line_start":42,"line_end":42,"column_start":54,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124996,"byte_end":125009,"line_start":74,"line_end":74,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":126657,"byte_end":126670,"line_start":116,"line_end":116,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":127593,"byte_end":127611,"line_start":147,"line_end":147,"column_start":46,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":128984,"byte_end":128998,"line_start":186,"line_end":186,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":129201,"byte_end":129215,"line_start":193,"line_end":193,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":132770,"byte_end":132782,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":132941,"byte_end":132953,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133036,"byte_end":133048,"line_start":43,"line_end":43,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133140,"byte_end":133152,"line_start":49,"line_end":49,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133228,"byte_end":133240,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":134240,"byte_end":134252,"line_start":92,"line_end":92,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":135164,"byte_end":135176,"line_start":117,"line_end":117,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":137482,"byte_end":137499,"line_start":175,"line_end":175,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":138470,"byte_end":138482,"line_start":204,"line_end":204,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151369,"byte_end":151382,"line_start":82,"line_end":82,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":154790,"byte_end":154796,"line_start":203,"line_end":203,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":155091,"byte_end":155104,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":160947,"byte_end":160955,"line_start":383,"line_end":383,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":162478,"byte_end":162491,"line_start":433,"line_end":433,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":174852,"byte_end":174865,"line_start":748,"line_end":748,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175072,"byte_end":175085,"line_start":757,"line_end":757,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175216,"byte_end":175229,"line_start":764,"line_end":764,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":181607,"byte_end":181616,"line_start":932,"line_end":932,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":181865,"byte_end":181876,"line_start":943,"line_end":943,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":182608,"byte_end":182621,"line_start":968,"line_end":968,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":196933,"byte_end":196938,"line_start":39,"line_end":39,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":198085,"byte_end":198090,"line_start":71,"line_end":71,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":200170,"byte_end":200179,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":201706,"byte_end":201717,"line_start":158,"line_end":158,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":202517,"byte_end":202525,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":203325,"byte_end":203334,"line_start":208,"line_end":208,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":204490,"byte_end":204499,"line_start":238,"line_end":238,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":206049,"byte_end":206056,"line_start":273,"line_end":273,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":207364,"byte_end":207370,"line_start":304,"line_end":304,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":208199,"byte_end":208203,"line_start":329,"line_end":329,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209205,"byte_end":209210,"line_start":355,"line_end":355,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210167,"byte_end":210176,"line_start":395,"line_end":395,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210767,"byte_end":210776,"line_start":413,"line_end":413,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210911,"byte_end":210920,"line_start":419,"line_end":419,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211007,"byte_end":211016,"line_start":425,"line_end":425,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211102,"byte_end":211111,"line_start":431,"line_end":431,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211203,"byte_end":211212,"line_start":437,"line_end":437,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211314,"byte_end":211323,"line_start":443,"line_end":443,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211427,"byte_end":211436,"line_start":449,"line_end":449,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":786}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211534,"byte_end":211543,"line_start":455,"line_end":455,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211636,"byte_end":211645,"line_start":461,"line_end":461,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211734,"byte_end":211743,"line_start":467,"line_end":467,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211829,"byte_end":211838,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213891,"byte_end":213900,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":216960,"byte_end":216976,"line_start":123,"line_end":123,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":217349,"byte_end":217358,"line_start":136,"line_end":136,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":218123,"byte_end":218131,"line_start":160,"line_end":160,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":220028,"byte_end":220043,"line_start":218,"line_end":218,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":220638,"byte_end":220646,"line_start":238,"line_end":238,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224024,"byte_end":224039,"line_start":334,"line_end":334,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224178,"byte_end":224193,"line_start":340,"line_end":340,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":225300,"byte_end":225311,"line_start":372,"line_end":372,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":229505,"byte_end":229517,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":230725,"byte_end":230737,"line_start":85,"line_end":85,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":230823,"byte_end":230835,"line_start":91,"line_end":91,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":231352,"byte_end":231364,"line_start":107,"line_end":107,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234624,"byte_end":234635,"line_start":56,"line_end":56,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":238668,"byte_end":238676,"line_start":101,"line_end":101,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":961},{"krate":0,"index":963},{"krate":0,"index":965},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":246740,"byte_end":246766,"line_start":313,"line_end":313,"column_start":46,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247141,"byte_end":247156,"line_start":325,"line_end":325,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247300,"byte_end":247308,"line_start":331,"line_end":331,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247475,"byte_end":247483,"line_start":337,"line_end":337,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247929,"byte_end":247943,"line_start":353,"line_end":353,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":250774,"byte_end":250789,"line_start":69,"line_end":69,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":251402,"byte_end":251417,"line_start":87,"line_end":87,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253960,"byte_end":253968,"line_start":44,"line_end":44,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255624,"byte_end":255627,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255949,"byte_end":255954,"line_start":50,"line_end":50,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256211,"byte_end":256216,"line_start":62,"line_end":62,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256289,"byte_end":256294,"line_start":68,"line_end":68,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256400,"byte_end":256405,"line_start":74,"line_end":74,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256480,"byte_end":256485,"line_start":80,"line_end":80,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257350,"byte_end":257355,"line_start":114,"line_end":114,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257816,"byte_end":257822,"line_start":130,"line_end":130,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":258082,"byte_end":258088,"line_start":142,"line_end":142,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":258161,"byte_end":258167,"line_start":148,"line_end":148,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":258647,"byte_end":258653,"line_start":170,"line_end":170,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":260877,"byte_end":260883,"line_start":241,"line_end":241,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261414,"byte_end":261420,"line_start":261,"line_end":261,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261493,"byte_end":261499,"line_start":267,"line_end":267,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261583,"byte_end":261589,"line_start":273,"line_end":273,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261664,"byte_end":261670,"line_start":279,"line_end":279,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261889,"byte_end":261895,"line_start":289,"line_end":289,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262463,"byte_end":262470,"line_start":310,"line_end":310,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262850,"byte_end":262857,"line_start":327,"line_end":327,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":263314,"byte_end":263322,"line_start":343,"line_end":343,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264023,"byte_end":264031,"line_start":370,"line_end":370,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264104,"byte_end":264112,"line_start":376,"line_end":376,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264196,"byte_end":264204,"line_start":382,"line_end":382,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264279,"byte_end":264287,"line_start":388,"line_end":388,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264738,"byte_end":264746,"line_start":407,"line_end":407,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":273518,"byte_end":273524,"line_start":676,"line_end":676,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274797,"byte_end":274803,"line_start":719,"line_end":719,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274966,"byte_end":274972,"line_start":726,"line_end":726,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275209,"byte_end":275215,"line_start":737,"line_end":737,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275304,"byte_end":275310,"line_start":743,"line_end":743,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275402,"byte_end":275408,"line_start":749,"line_end":749,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276682,"byte_end":276688,"line_start":792,"line_end":792,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276841,"byte_end":276847,"line_start":799,"line_end":799,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":277078,"byte_end":277084,"line_start":810,"line_end":810,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":277173,"byte_end":277179,"line_start":816,"line_end":816,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":277284,"byte_end":277290,"line_start":822,"line_end":822,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10974259,"byte_end":10974276,"line_start":110,"line_end":110,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":6331}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984671,"byte_end":10984686,"line_start":524,"line_end":524,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":6333},{"krate":0,"index":6334},{"krate":0,"index":6335},{"krate":0,"index":6337},{"krate":0,"index":6339},{"krate":0,"index":6340},{"krate":0,"index":6341},{"krate":0,"index":6342}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11048142,"byte_end":11048148,"line_start":2026,"line_end":2026,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":6345},{"krate":0,"index":6346},{"krate":0,"index":6347},{"krate":0,"index":6348},{"krate":0,"index":6349},{"krate":0,"index":6350},{"krate":0,"index":6351},{"krate":0,"index":6352},{"krate":0,"index":6353},{"krate":0,"index":6354},{"krate":0,"index":6355}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":298585,"byte_end":298591,"line_start":47,"line_end":47,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":298706,"byte_end":298712,"line_start":53,"line_end":53,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1179}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":299413,"byte_end":299419,"line_start":70,"line_end":70,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300389,"byte_end":300401,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301096,"byte_end":301108,"line_start":127,"line_end":127,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301216,"byte_end":301228,"line_start":135,"line_end":135,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301323,"byte_end":301335,"line_start":141,"line_end":141,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301640,"byte_end":301652,"line_start":154,"line_end":154,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301860,"byte_end":301875,"line_start":164,"line_end":164,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":308390,"byte_end":308407,"line_start":342,"line_end":342,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312562,"byte_end":312574,"line_start":450,"line_end":450,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":314701,"byte_end":314718,"line_start":523,"line_end":523,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":322592,"byte_end":322605,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323875,"byte_end":323888,"line_start":69,"line_end":69,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":326768,"byte_end":326774,"line_start":46,"line_end":46,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":329085,"byte_end":329091,"line_start":119,"line_end":119,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":329590,"byte_end":329596,"line_start":139,"line_end":139,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":337482,"byte_end":337488,"line_start":344,"line_end":344,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":342186,"byte_end":342192,"line_start":490,"line_end":490,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":342855,"byte_end":342861,"line_start":518,"line_end":518,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":350111,"byte_end":350116,"line_start":734,"line_end":734,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":350525,"byte_end":350530,"line_start":751,"line_end":751,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367611,"byte_end":367618,"line_start":51,"line_end":51,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367739,"byte_end":367746,"line_start":57,"line_end":57,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":368441,"byte_end":368448,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":373491,"byte_end":373499,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":376138,"byte_end":376146,"line_start":108,"line_end":108,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":376887,"byte_end":376899,"line_start":19,"line_end":19,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377083,"byte_end":377095,"line_start":27,"line_end":27,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377289,"byte_end":377301,"line_start":35,"line_end":35,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377771,"byte_end":377791,"line_start":54,"line_end":54,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378034,"byte_end":378054,"line_start":64,"line_end":64,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378146,"byte_end":378166,"line_start":70,"line_end":70,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378265,"byte_end":378285,"line_start":76,"line_end":76,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378501,"byte_end":378521,"line_start":85,"line_end":85,"column_start":29,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378749,"byte_end":378769,"line_start":95,"line_end":95,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378993,"byte_end":379005,"line_start":104,"line_end":104,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":379171,"byte_end":379191,"line_start":111,"line_end":111,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":379334,"byte_end":379346,"line_start":117,"line_end":117,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":381712,"byte_end":381721,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":382088,"byte_end":382097,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":382175,"byte_end":382184,"line_start":44,"line_end":44,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":385769,"byte_end":385782,"line_start":83,"line_end":83,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":386259,"byte_end":386272,"line_start":100,"line_end":100,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1529}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":387444,"byte_end":387457,"line_start":134,"line_end":134,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1532},{"krate":0,"index":1533}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":388180,"byte_end":388193,"line_start":155,"line_end":155,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":389742,"byte_end":389752,"line_start":202,"line_end":202,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391674,"byte_end":391684,"line_start":267,"line_end":267,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391838,"byte_end":391848,"line_start":275,"line_end":275,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":392013,"byte_end":392023,"line_start":282,"line_end":282,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1557}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398731,"byte_end":398740,"line_start":27,"line_end":27,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400740,"byte_end":400748,"line_start":59,"line_end":59,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":401480,"byte_end":401488,"line_start":80,"line_end":80,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":404692,"byte_end":404696,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":412894,"byte_end":412898,"line_start":306,"line_end":306,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":413675,"byte_end":413679,"line_start":329,"line_end":329,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":414504,"byte_end":414508,"line_start":352,"line_end":352,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421110,"byte_end":421118,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421187,"byte_end":421195,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":422456,"byte_end":422471,"line_start":69,"line_end":69,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1653}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424220,"byte_end":424231,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424300,"byte_end":424311,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":425470,"byte_end":425488,"line_start":154,"line_end":154,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/abi.rs","byte_start":448292,"byte_end":448296,"line_start":81,"line_end":81,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/abi.rs","byte_start":449078,"byte_end":449082,"line_start":112,"line_end":112,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","byte_start":543446,"byte_end":543455,"line_start":27,"line_end":27,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","byte_start":543727,"byte_end":543736,"line_start":39,"line_end":39,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/registers-x86.rs","byte_start":12012604,"byte_end":12012606,"line_start":164,"line_end":164,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":7736}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings-x86.rs","byte_start":12012759,"byte_end":12012764,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":7841}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings-x86.rs","byte_start":12014698,"byte_end":12014703,"line_start":71,"line_end":71,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":7844},{"krate":0,"index":7845},{"krate":0,"index":7846},{"krate":0,"index":7847},{"krate":0,"index":7848},{"krate":0,"index":7849},{"krate":0,"index":7850},{"krate":0,"index":7851},{"krate":0,"index":7852},{"krate":0,"index":7853},{"krate":0,"index":7854},{"krate":0,"index":7855},{"krate":0,"index":7856},{"krate":0,"index":7857},{"krate":0,"index":7858},{"krate":0,"index":7859},{"krate":0,"index":7860},{"krate":0,"index":7861},{"krate":0,"index":7862},{"krate":0,"index":7863},{"krate":0,"index":7864},{"krate":0,"index":7865},{"krate":0,"index":7866},{"krate":0,"index":7867}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings-x86.rs","byte_start":12021593,"byte_end":12021598,"line_start":330,"line_end":330,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":7879}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/unwind.rs","byte_start":562350,"byte_end":562360,"line_start":43,"line_end":43,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2148},{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/unwind.rs","byte_start":564843,"byte_end":564853,"line_start":118,"line_end":118,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2164}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/mod.rs","byte_start":442278,"byte_end":442281,"line_start":66,"line_end":66,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/mod.rs","byte_start":445147,"byte_end":445150,"line_start":175,"line_end":175,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580669,"byte_end":580677,"line_start":26,"line_end":26,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":582419,"byte_end":582427,"line_start":69,"line_end":69,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":582896,"byte_end":582904,"line_start":83,"line_end":83,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2236},{"krate":0,"index":2237}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":584369,"byte_end":584386,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2249}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":588164,"byte_end":588181,"line_start":123,"line_end":123,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":590153,"byte_end":590164,"line_start":173,"line_end":173,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":593262,"byte_end":593273,"line_start":52,"line_end":52,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2279}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":597744,"byte_end":597753,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":599673,"byte_end":599682,"line_start":247,"line_end":247,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2319},{"krate":0,"index":2320}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":601876,"byte_end":601884,"line_start":21,"line_end":21,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602457,"byte_end":602465,"line_start":44,"line_end":44,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2337}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602604,"byte_end":602612,"line_start":51,"line_end":51,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2339}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":603091,"byte_end":603106,"line_start":68,"line_end":68,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2344}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604857,"byte_end":604864,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":608465,"byte_end":608472,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611639,"byte_end":611651,"line_start":156,"line_end":156,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613749,"byte_end":613761,"line_start":212,"line_end":212,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613883,"byte_end":613895,"line_start":218,"line_end":218,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2406}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614092,"byte_end":614104,"line_start":225,"line_end":225,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2408}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614494,"byte_end":614507,"line_start":238,"line_end":238,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614665,"byte_end":614678,"line_start":248,"line_end":248,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2413}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614771,"byte_end":614784,"line_start":254,"line_end":254,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2415}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615863,"byte_end":615870,"line_start":284,"line_end":284,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2418},{"krate":0,"index":2420},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":617167,"byte_end":617181,"line_start":324,"line_end":324,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2431}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":618909,"byte_end":618917,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2439},{"krate":0,"index":2440}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":621251,"byte_end":621264,"line_start":90,"line_end":90,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2442}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430714,"byte_end":430721,"line_start":145,"line_end":145,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431061,"byte_end":431068,"line_start":153,"line_end":153,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2455}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431941,"byte_end":431961,"line_start":181,"line_end":181,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":622454,"byte_end":622462,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":622764,"byte_end":622776,"line_start":45,"line_end":45,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2518},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2523}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":624570,"byte_end":624582,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/print_errors.rs","byte_start":636452,"byte_end":636471,"line_start":49,"line_end":49,"column_start":25,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2567}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642884,"byte_end":642891,"line_start":54,"line_end":54,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":645298,"byte_end":645305,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2601}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647546,"byte_end":647559,"line_start":194,"line_end":194,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2608},{"krate":0,"index":2609}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648741,"byte_end":648749,"line_start":232,"line_end":232,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2621},{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":650122,"byte_end":650130,"line_start":266,"line_end":266,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2625},{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651814,"byte_end":651820,"line_start":322,"line_end":322,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094124,"byte_end":12094129,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":8170}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094690,"byte_end":12094698,"line_start":27,"line_end":27,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":8173}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094957,"byte_end":12094965,"line_start":36,"line_end":36,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":8175},{"krate":0,"index":8176}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095696,"byte_end":12095711,"line_start":67,"line_end":67,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":8178}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12096226,"byte_end":12096241,"line_start":81,"line_end":81,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":8180},{"krate":0,"index":8181}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12096841,"byte_end":12096846,"line_start":99,"line_end":99,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":8183},{"krate":0,"index":8184},{"krate":0,"index":8185},{"krate":0,"index":8186},{"krate":0,"index":8187},{"krate":0,"index":8188},{"krate":0,"index":8189},{"krate":0,"index":8190},{"krate":0,"index":8191},{"krate":0,"index":8192},{"krate":0,"index":8193},{"krate":0,"index":8194},{"krate":0,"index":8195},{"krate":0,"index":8196},{"krate":0,"index":8197},{"krate":0,"index":8198},{"krate":0,"index":8199},{"krate":0,"index":8200},{"krate":0,"index":8201},{"krate":0,"index":8202},{"krate":0,"index":8203}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12107894,"byte_end":12107899,"line_start":448,"line_end":448,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":8215}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":652891,"byte_end":652901,"line_start":352,"line_end":352,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2635}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":653040,"byte_end":653050,"line_start":358,"line_end":358,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658309,"byte_end":658313,"line_start":82,"line_end":82,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2648}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658401,"byte_end":658405,"line_start":88,"line_end":88,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":660132,"byte_end":660141,"line_start":142,"line_end":142,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2673}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":660307,"byte_end":660316,"line_start":150,"line_end":150,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":662302,"byte_end":662313,"line_start":199,"line_end":199,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2681}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/cssa.rs","byte_start":741847,"byte_end":741859,"line_start":61,"line_end":61,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2771},{"krate":0,"index":2772}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/flags.rs","byte_start":748184,"byte_end":748197,"line_start":49,"line_end":49,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2798},{"krate":0,"index":2799}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/liveness.rs","byte_start":754846,"byte_end":754862,"line_start":50,"line_end":50,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/locations.rs","byte_start":763623,"byte_end":763639,"line_start":51,"line_end":51,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2858},{"krate":0,"index":2859},{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":669000,"byte_end":669013,"line_start":124,"line_end":124,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":669471,"byte_end":669484,"line_start":143,"line_end":143,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2871}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670679,"byte_end":670693,"line_start":180,"line_end":180,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2883},{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671962,"byte_end":671976,"line_start":228,"line_end":228,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2888}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672083,"byte_end":672097,"line_start":234,"line_end":234,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2890}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672200,"byte_end":672214,"line_start":240,"line_end":240,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2892}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672382,"byte_end":672396,"line_start":250,"line_end":250,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2894}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":673745,"byte_end":673753,"line_start":303,"line_end":303,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2909},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2919},{"krate":0,"index":2921},{"krate":0,"index":2923},{"krate":0,"index":2924},{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2949},{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2954},{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2963}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":779965,"byte_end":779976,"line_start":135,"line_end":135,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2999},{"krate":0,"index":3000}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":798434,"byte_end":798447,"line_start":729,"line_end":729,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3024}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":798823,"byte_end":798849,"line_start":744,"line_end":744,"column_start":27,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3032}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/abi.rs","byte_start":803347,"byte_end":803356,"line_start":28,"line_end":28,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3044}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/abi.rs","byte_start":803461,"byte_end":803470,"line_start":34,"line_end":34,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3046}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/abi.rs","byte_start":804129,"byte_end":804144,"line_start":59,"line_end":59,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3048},{"krate":0,"index":3049}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":811182,"byte_end":811188,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3067},{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819613,"byte_end":819620,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3132},{"krate":0,"index":3133},{"krate":0,"index":3134},{"krate":0,"index":3135},{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3142},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3161},{"krate":0,"index":3162},{"krate":0,"index":3165},{"krate":0,"index":3166},{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3170}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/fx.rs","byte_start":872720,"byte_end":872728,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3218}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/fx.rs","byte_start":872811,"byte_end":872819,"line_start":58,"line_end":58,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3220}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/fx.rs","byte_start":872975,"byte_end":872983,"line_start":65,"line_end":65,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3222},{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3227},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/iterators.rs","byte_start":874345,"byte_end":874346,"line_start":16,"line_end":16,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/iterators.rs","byte_start":874657,"byte_end":874670,"line_start":30,"line_end":30,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3240},{"krate":0,"index":3241}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1021573,"byte_end":1021595,"line_start":303,"line_end":303,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3670},{"krate":0,"index":3671}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1024038,"byte_end":1024046,"line_start":349,"line_end":349,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3673},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3676},{"krate":0,"index":3677},{"krate":0,"index":3678},{"krate":0,"index":3679},{"krate":0,"index":3680},{"krate":0,"index":3681}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1029237,"byte_end":1029259,"line_start":483,"line_end":483,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3684}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1037828,"byte_end":1037850,"line_start":654,"line_end":654,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1043457,"byte_end":1043479,"line_start":764,"line_end":764,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703},{"krate":0,"index":3704},{"krate":0,"index":3705}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1047694,"byte_end":1047716,"line_start":879,"line_end":879,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3713}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coloring.rs","byte_start":1053884,"byte_end":1053892,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3785}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coloring.rs","byte_start":1055107,"byte_end":1055114,"line_start":156,"line_end":156,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3788},{"krate":0,"index":3789},{"krate":0,"index":3790},{"krate":0,"index":3792},{"krate":0,"index":3793},{"krate":0,"index":3795},{"krate":0,"index":3796},{"krate":0,"index":3797},{"krate":0,"index":3801},{"krate":0,"index":3803},{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3807},{"krate":0,"index":3809},{"krate":0,"index":3810},{"krate":0,"index":3811},{"krate":0,"index":3812},{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3816},{"krate":0,"index":3820},{"krate":0,"index":3823},{"krate":0,"index":3824},{"krate":0,"index":3825}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coloring.rs","byte_start":1104349,"byte_end":1104362,"line_start":1302,"line_end":1302,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3830},{"krate":0,"index":3831},{"krate":0,"index":3832}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/live_value_tracker.rs","byte_start":1107490,"byte_end":1107502,"line_start":68,"line_end":68,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3863},{"krate":0,"index":3865},{"krate":0,"index":3866}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/live_value_tracker.rs","byte_start":1109358,"byte_end":1109374,"line_start":126,"line_end":126,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3871},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878},{"krate":0,"index":3880}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1133299,"byte_end":1133307,"line_start":300,"line_end":300,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3923},{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3927}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1138994,"byte_end":1139002,"line_start":436,"line_end":436,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3930},{"krate":0,"index":3931}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1149372,"byte_end":1149388,"line_start":210,"line_end":210,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3963},{"krate":0,"index":3964},{"krate":0,"index":3967},{"krate":0,"index":3970},{"krate":0,"index":3971},{"krate":0,"index":3972},{"krate":0,"index":3973},{"krate":0,"index":3974},{"krate":0,"index":3975},{"krate":0,"index":3977},{"krate":0,"index":3978},{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":3984}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1160029,"byte_end":1160045,"line_start":467,"line_end":467,"column_start":50,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3987}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1170276,"byte_end":1170287,"line_start":35,"line_end":35,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4000},{"krate":0,"index":4002},{"krate":0,"index":4004},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4010},{"krate":0,"index":4011}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1173868,"byte_end":1173878,"line_start":134,"line_end":134,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1174816,"byte_end":1174826,"line_start":165,"line_end":165,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4020}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1175586,"byte_end":1175596,"line_start":190,"line_end":190,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1175794,"byte_end":1175812,"line_start":195,"line_end":195,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4029}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1177944,"byte_end":1177955,"line_start":248,"line_end":248,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4032}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1184036,"byte_end":1184044,"line_start":59,"line_end":59,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4062},{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4072},{"krate":0,"index":4073},{"krate":0,"index":4075},{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4081}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1189709,"byte_end":1189717,"line_start":230,"line_end":230,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4083}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1190677,"byte_end":1190684,"line_start":258,"line_end":258,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4092},{"krate":0,"index":4093}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1191986,"byte_end":1191994,"line_start":292,"line_end":292,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4095},{"krate":0,"index":4097},{"krate":0,"index":4098}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1200995,"byte_end":1201003,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4112}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1201072,"byte_end":1201080,"line_start":37,"line_end":37,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4114},{"krate":0,"index":4115},{"krate":0,"index":4116},{"krate":0,"index":4117},{"krate":0,"index":4118},{"krate":0,"index":4119},{"krate":0,"index":4120}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1203825,"byte_end":1203840,"line_start":115,"line_end":115,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4130}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/branch_splitting.rs","byte_start":1205447,"byte_end":1205454,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4158},{"krate":0,"index":4159},{"krate":0,"index":4160},{"krate":0,"index":4161}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1214237,"byte_end":1214247,"line_start":86,"line_end":86,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4224}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1216242,"byte_end":1216249,"line_start":151,"line_end":151,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4229},{"krate":0,"index":4230},{"krate":0,"index":4231},{"krate":0,"index":4232}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1225292,"byte_end":1225299,"line_start":390,"line_end":390,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4242},{"krate":0,"index":4243}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1237603,"byte_end":1237607,"line_start":697,"line_end":697,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4249},{"krate":0,"index":4250},{"krate":0,"index":4251}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1238428,"byte_end":1238432,"line_start":730,"line_end":730,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4253}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1238711,"byte_end":1238720,"line_start":740,"line_end":740,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1244692,"byte_end":1244705,"line_start":882,"line_end":882,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4264},{"krate":0,"index":4265},{"krate":0,"index":4266},{"krate":0,"index":4268},{"krate":0,"index":4269},{"krate":0,"index":4271},{"krate":0,"index":4273},{"krate":0,"index":4274}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1250566,"byte_end":1250575,"line_start":1038,"line_end":1038,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4283},{"krate":0,"index":4284}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1251345,"byte_end":1251355,"line_start":1066,"line_end":1066,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4297}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1251718,"byte_end":1251728,"line_start":1081,"line_end":1081,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4302},{"krate":0,"index":4303}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1253842,"byte_end":1253849,"line_start":39,"line_end":39,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4338},{"krate":0,"index":4339},{"krate":0,"index":4340},{"krate":0,"index":4341}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261387,"byte_end":1261396,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4364}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262022,"byte_end":1262035,"line_start":59,"line_end":59,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4370},{"krate":0,"index":4371},{"krate":0,"index":4372},{"krate":0,"index":4373},{"krate":0,"index":4374},{"krate":0,"index":4375},{"krate":0,"index":4376},{"krate":0,"index":4377},{"krate":0,"index":4378},{"krate":0,"index":4379},{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4383},{"krate":0,"index":4384},{"krate":0,"index":4385},{"krate":0,"index":4386}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268272,"byte_end":1268290,"line_start":237,"line_end":237,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4390},{"krate":0,"index":4391}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268556,"byte_end":1268574,"line_start":250,"line_end":250,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4393}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268961,"byte_end":1268984,"line_start":263,"line_end":263,"column_start":32,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4395}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1269189,"byte_end":1269206,"line_start":272,"line_end":272,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4403}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/pressure.rs","byte_start":1273228,"byte_end":1273233,"line_start":68,"line_end":68,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4415}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/pressure.rs","byte_start":1273666,"byte_end":1273674,"line_start":83,"line_end":83,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4421},{"krate":0,"index":4423},{"krate":0,"index":4424},{"krate":0,"index":4425},{"krate":0,"index":4426},{"krate":0,"index":4427},{"krate":0,"index":4428},{"krate":0,"index":4429},{"krate":0,"index":4430}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/pressure.rs","byte_start":1280034,"byte_end":1280042,"line_start":261,"line_end":261,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4432}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/reload.rs","byte_start":1285951,"byte_end":1285957,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4482},{"krate":0,"index":4483},{"krate":0,"index":4484}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/reload.rs","byte_start":1287404,"byte_end":1287417,"line_start":108,"line_end":108,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4493}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/reload.rs","byte_start":1287486,"byte_end":1287493,"line_start":114,"line_end":114,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4496},{"krate":0,"index":4497},{"krate":0,"index":4498},{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4504},{"krate":0,"index":4505}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1312101,"byte_end":1312109,"line_start":154,"line_end":154,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":4556},{"krate":0,"index":4557}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1313634,"byte_end":1313642,"line_start":206,"line_end":206,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4559}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1314464,"byte_end":1314474,"line_start":239,"line_end":239,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4561}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1314556,"byte_end":1314566,"line_start":245,"line_end":245,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4563}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1315398,"byte_end":1315402,"line_start":283,"line_end":283,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4565},{"krate":0,"index":4566},{"krate":0,"index":4567},{"krate":0,"index":4568},{"krate":0,"index":4569},{"krate":0,"index":4570},{"krate":0,"index":4571}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1317841,"byte_end":1317845,"line_start":362,"line_end":362,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4573}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1318962,"byte_end":1318966,"line_start":408,"line_end":408,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4575}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1322465,"byte_end":1322471,"line_start":489,"line_end":489,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4585},{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4588},{"krate":0,"index":4590},{"krate":0,"index":4591},{"krate":0,"index":4592},{"krate":0,"index":4593},{"krate":0,"index":4595},{"krate":0,"index":4596},{"krate":0,"index":4597},{"krate":0,"index":4598},{"krate":0,"index":4600},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4604}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1336370,"byte_end":1336376,"line_start":839,"line_end":839,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4613},{"krate":0,"index":4614},{"krate":0,"index":4616},{"krate":0,"index":4617},{"krate":0,"index":4618}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1341503,"byte_end":1341509,"line_start":977,"line_end":977,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":4625}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1347915,"byte_end":1347921,"line_start":1129,"line_end":1129,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4627}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1359576,"byte_end":1359584,"line_start":76,"line_end":76,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4684},{"krate":0,"index":4685},{"krate":0,"index":4686}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1360863,"byte_end":1360870,"line_start":122,"line_end":122,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4691},{"krate":0,"index":4692},{"krate":0,"index":4693},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4696},{"krate":0,"index":4697},{"krate":0,"index":4698},{"krate":0,"index":4702},{"krate":0,"index":4707},{"krate":0,"index":4708},{"krate":0,"index":4710}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1380740,"byte_end":1380746,"line_start":609,"line_end":609,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4712}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1381018,"byte_end":1381024,"line_start":622,"line_end":622,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4714}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/scoped_hash_map.rs","byte_start":1383635,"byte_end":1383648,"line_start":30,"line_end":30,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4745}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/scoped_hash_map.rs","byte_start":1384166,"byte_end":1384177,"line_start":47,"line_end":47,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4757}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/scoped_hash_map.rs","byte_start":1385112,"byte_end":1385125,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4777},{"krate":0,"index":4778},{"krate":0,"index":4780},{"krate":0,"index":4781}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/simple_gvn.rs","byte_start":1391636,"byte_end":1391643,"line_start":41,"line_end":41,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4808}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/simple_gvn.rs","byte_start":1391866,"byte_end":1391873,"line_start":48,"line_end":48,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4813}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/simple_gvn.rs","byte_start":1392080,"byte_end":1392087,"line_start":54,"line_end":54,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/topo_order.rs","byte_start":1441906,"byte_end":1441915,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4916},{"krate":0,"index":4917},{"krate":0,"index":4918},{"krate":0,"index":4920}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456115,"byte_end":1456134,"line_start":246,"line_end":246,"column_start":26,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4962}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456213,"byte_end":1456232,"line_start":252,"line_end":252,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4964},{"krate":0,"index":4965}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456345,"byte_end":1456364,"line_start":259,"line_end":259,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4967}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456481,"byte_end":1456500,"line_start":265,"line_end":265,"column_start":14,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4969}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456620,"byte_end":1456639,"line_start":271,"line_end":271,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4971}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2269,"byte_end":2276,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2286,"byte_end":2297,"line_start":66,"line_end":66,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":212}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2307,"byte_end":2313,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":241}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2323,"byte_end":2326,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":335}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2336,"byte_end":2350,"line_start":69,"line_end":69,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":347}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2360,"byte_end":2369,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":424}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2379,"byte_end":2381,"line_start":71,"line_end":71,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":465}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118363,"byte_end":118371,"line_start":4,"line_end":4,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":537}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118381,"byte_end":118384,"line_start":5,"line_end":5,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":598}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118394,"byte_end":118402,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":745}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118455,"byte_end":118463,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":895}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118500,"byte_end":118510,"line_start":13,"line_end":13,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1025}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118520,"byte_end":118532,"line_start":14,"line_end":14,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1151}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118542,"byte_end":118551,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1279}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118561,"byte_end":118567,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1302}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118645,"byte_end":118654,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1502}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/mod.rs","byte_start":118689,"byte_end":118694,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1584}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2391,"byte_end":2394,"line_start":72,"line_end":72,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1756}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":428658,"byte_end":428667,"line_start":86,"line_end":86,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2358}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2404,"byte_end":2417,"line_start":73,"line_end":73,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":2491}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2427,"byte_end":2439,"line_start":74,"line_end":74,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":2530}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2449,"byte_end":2457,"line_start":75,"line_end":75,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2574}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2467,"byte_end":2473,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2639}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2483,"byte_end":2491,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2688}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/lib.rs","byte_start":2501,"byte_end":2506,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2964}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":13217,"byte_end":13231,"line_start":46,"line_end":46,"column_start":10,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":15029,"byte_end":15043,"line_start":99,"line_end":99,"column_start":10,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":15364,"byte_end":15378,"line_start":109,"line_end":109,"column_start":23,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17348,"byte_end":17361,"line_start":179,"line_end":179,"column_start":20,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":85},"to":{"krate":0,"index":58}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":17831,"byte_end":17843,"line_start":190,"line_end":190,"column_start":19,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":91},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/memorysink.rs","byte_start":18259,"byte_end":18275,"line_start":203,"line_end":203,"column_start":23,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":96},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/stackmap.rs","byte_start":37420,"byte_end":37428,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":4840,"byte_end":4845,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4983},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/binemit/mod.rs","byte_start":6326,"byte_end":6334,"line_start":98,"line_end":98,"column_start":6,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":5013},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":42036,"byte_end":42046,"line_start":18,"line_end":18,"column_start":10,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cfg_printer.rs","byte_start":44000,"byte_end":44010,"line_start":79,"line_end":79,"column_start":22,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":227},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":64824,"byte_end":64834,"line_start":581,"line_end":581,"column_start":10,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":65477,"byte_end":65487,"line_start":602,"line_end":602,"column_start":21,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":283},"to":{"krate":0,"index":244}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":68025,"byte_end":68034,"line_start":685,"line_end":685,"column_start":10,"column_end":19},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/cursor.rs","byte_start":69443,"byte_end":69452,"line_start":727,"line_end":727,"column_start":21,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":307},"to":{"krate":0,"index":244}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dbg.rs","byte_start":72365,"byte_end":72376,"line_start":12,"line_end":12,"column_start":30,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":338},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":74586,"byte_end":74599,"line_start":53,"line_end":53,"column_start":6,"column_end":19},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":80772,"byte_end":80785,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":92392,"byte_end":92413,"line_start":488,"line_end":488,"column_start":6,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":94803,"byte_end":94812,"line_start":552,"line_end":552,"column_start":23,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":407},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/dominator_tree.rs","byte_start":95098,"byte_end":95119,"line_start":565,"line_end":565,"column_start":6,"column_end":27},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":106800,"byte_end":106816,"line_start":42,"line_end":42,"column_start":6,"column_end":22},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":5073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":108438,"byte_end":108454,"line_start":81,"line_end":81,"column_start":6,"column_end":22},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/flowgraph.rs","byte_start":112909,"byte_end":112917,"line_start":201,"line_end":201,"column_start":23,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":122566,"byte_end":122571,"line_start":20,"line_end":20,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1539},"to":{"krate":0,"index":478}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/inst_builder.rs","byte_start":10780993,"byte_end":10781008,"line_start":14,"line_end":14,"column_start":28,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":478},"to":{"krate":0,"index":5090}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":123690,"byte_end":123691,"line_start":42,"line_end":42,"column_start":54,"column_end":55},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":485},"to":{"krate":0,"index":5090}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124144,"byte_end":124149,"line_start":51,"line_end":51,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":1539},"to":{"krate":0,"index":486}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":124996,"byte_end":125009,"line_start":74,"line_end":74,"column_start":37,"column_end":50},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":126657,"byte_end":126670,"line_start":116,"line_end":116,"column_start":61,"column_end":74},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":478}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":127593,"byte_end":127611,"line_start":147,"line_end":147,"column_start":46,"column_end":64},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":511},"to":{"krate":0,"index":478}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":128984,"byte_end":128998,"line_start":186,"line_end":186,"column_start":10,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/builder.rs","byte_start":129201,"byte_end":129215,"line_start":193,"line_end":193,"column_start":34,"column_end":48},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":525},"to":{"krate":0,"index":478}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":132770,"byte_end":132782,"line_start":30,"line_end":30,"column_start":27,"column_end":39},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":5469},"to":{"krate":1,"index":3804}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":132941,"byte_end":132953,"line_start":37,"line_end":37,"column_start":24,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":5469},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133036,"byte_end":133048,"line_start":43,"line_end":43,"column_start":22,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":5469},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133140,"byte_end":133152,"line_start":49,"line_end":49,"column_start":24,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":5469},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":133228,"byte_end":133240,"line_start":55,"line_end":55,"column_start":6,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":134240,"byte_end":134252,"line_start":92,"line_end":92,"column_start":23,"column_end":35},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":5469},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":135164,"byte_end":135176,"line_start":117,"line_end":117,"column_start":18,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":5469},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":137482,"byte_end":137499,"line_start":175,"line_end":175,"column_start":6,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":5486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/constant.rs","byte_start":138470,"byte_end":138482,"line_start":204,"line_end":204,"column_start":6,"column_end":18},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":5491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":151369,"byte_end":151382,"line_start":82,"line_end":82,"column_start":6,"column_end":19},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":154790,"byte_end":154796,"line_start":203,"line_end":203,"column_start":23,"column_end":29},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":649},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":155091,"byte_end":155104,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":5496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":160947,"byte_end":160955,"line_start":383,"line_end":383,"column_start":6,"column_end":14},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":5510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":162478,"byte_end":162491,"line_start":433,"line_end":433,"column_start":6,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":174852,"byte_end":174865,"line_start":748,"line_end":748,"column_start":22,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5496},"to":{"krate":1,"index":1779}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175072,"byte_end":175085,"line_start":757,"line_end":757,"column_start":25,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5496},"to":{"krate":1,"index":1783}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":175216,"byte_end":175229,"line_start":764,"line_end":764,"column_start":6,"column_end":19},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":181607,"byte_end":181616,"line_start":932,"line_end":932,"column_start":6,"column_end":15},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":181865,"byte_end":181876,"line_start":943,"line_end":943,"column_start":27,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/dfg.rs","byte_start":182608,"byte_end":182621,"line_start":968,"line_end":968,"column_start":6,"column_end":19},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":196933,"byte_end":196938,"line_start":39,"line_end":39,"column_start":6,"column_end":11},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":198085,"byte_end":198090,"line_start":71,"line_end":71,"column_start":6,"column_end":11},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":200170,"byte_end":200179,"line_start":122,"line_end":122,"column_start":6,"column_end":15},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":201706,"byte_end":201717,"line_start":158,"line_end":158,"column_start":6,"column_end":17},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":202517,"byte_end":202525,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":203325,"byte_end":203334,"line_start":208,"line_end":208,"column_start":6,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":204490,"byte_end":204499,"line_start":238,"line_end":238,"column_start":6,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":5787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":206049,"byte_end":206056,"line_start":273,"line_end":273,"column_start":6,"column_end":13},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":5821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":207364,"byte_end":207370,"line_start":304,"line_end":304,"column_start":6,"column_end":12},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":5855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":208199,"byte_end":208203,"line_start":329,"line_end":329,"column_start":6,"column_end":10},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":5889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":209205,"byte_end":209210,"line_start":355,"line_end":355,"column_start":6,"column_end":11},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":5923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210167,"byte_end":210176,"line_start":395,"line_end":395,"column_start":23,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210767,"byte_end":210776,"line_start":413,"line_end":413,"column_start":21,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":210911,"byte_end":210920,"line_start":419,"line_end":419,"column_start":22,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211007,"byte_end":211016,"line_start":425,"line_end":425,"column_start":21,"column_end":30},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211102,"byte_end":211111,"line_start":431,"line_end":431,"column_start":22,"column_end":31},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211203,"byte_end":211212,"line_start":437,"line_end":437,"column_start":26,"column_end":35},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211314,"byte_end":211323,"line_start":443,"line_end":443,"column_start":28,"column_end":37},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211427,"byte_end":211436,"line_start":449,"line_end":449,"column_start":26,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211534,"byte_end":211543,"line_start":455,"line_end":455,"column_start":24,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211636,"byte_end":211645,"line_start":461,"line_end":461,"column_start":23,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211734,"byte_end":211743,"line_start":467,"line_end":467,"column_start":21,"column_end":30},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/entities.rs","byte_start":211829,"byte_end":211838,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":5957},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":213891,"byte_end":213900,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":6009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":216960,"byte_end":216976,"line_start":123,"line_end":123,"column_start":27,"column_end":43},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":827},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":217349,"byte_end":217358,"line_start":136,"line_end":136,"column_start":23,"column_end":32},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":6009},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":218123,"byte_end":218131,"line_start":160,"line_end":160,"column_start":6,"column_end":14},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":6025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":220028,"byte_end":220043,"line_start":218,"line_end":218,"column_start":27,"column_end":42},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":847},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":220638,"byte_end":220646,"line_start":238,"line_end":238,"column_start":23,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":6025},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224024,"byte_end":224039,"line_start":334,"line_end":334,"column_start":23,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":6062},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":224178,"byte_end":224193,"line_start":340,"line_end":340,"column_start":18,"column_end":33},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":6062},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extfunc.rs","byte_start":225300,"byte_end":225311,"line_start":372,"line_end":372,"column_start":23,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":6091},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":229505,"byte_end":229517,"line_start":47,"line_end":47,"column_start":6,"column_end":18},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":6099},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":230725,"byte_end":230737,"line_start":85,"line_end":85,"column_start":18,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":6099},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":230823,"byte_end":230835,"line_start":91,"line_end":91,"column_start":23,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":6099},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/extname.rs","byte_start":231352,"byte_end":231364,"line_start":107,"line_end":107,"column_start":18,"column_end":30},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":6099},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/framelayout.rs","byte_start":234624,"byte_end":234635,"line_start":56,"line_end":56,"column_start":6,"column_end":17},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":6146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":238668,"byte_end":238676,"line_start":101,"line_end":101,"column_start":6,"column_end":14},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":6153},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":246740,"byte_end":246766,"line_start":313,"line_end":313,"column_start":46,"column_end":72},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":6174},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247141,"byte_end":247156,"line_start":325,"line_end":325,"column_start":27,"column_end":42},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":977},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247300,"byte_end":247308,"line_start":331,"line_end":331,"column_start":23,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":6153},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247475,"byte_end":247483,"line_start":337,"line_end":337,"column_start":21,"column_end":29},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":6153},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/function.rs","byte_start":247929,"byte_end":247943,"line_start":353,"line_end":353,"column_start":23,"column_end":37},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":250774,"byte_end":250789,"line_start":69,"line_end":69,"column_start":6,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":6181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/globalvalue.rs","byte_start":251402,"byte_end":251417,"line_start":87,"line_end":87,"column_start":23,"column_end":38},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6181},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/heap.rs","byte_start":253960,"byte_end":253968,"line_start":44,"line_end":44,"column_start":23,"column_end":31},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":6199},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255624,"byte_end":255627,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"kind":{"Impl":{"id":99}},"from":{"krate":4,"index":3763},"to":{"krate":0,"index":1035}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":255949,"byte_end":255954,"line_start":50,"line_end":50,"column_start":6,"column_end":11},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":6214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256211,"byte_end":256216,"line_start":62,"line_end":62,"column_start":20,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":6214},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256289,"byte_end":256294,"line_start":68,"line_end":68,"column_start":20,"column_end":25},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":6214},"to":{"krate":0,"index":1035}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256400,"byte_end":256405,"line_start":74,"line_end":74,"column_start":20,"column_end":25},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":6214},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":256480,"byte_end":256485,"line_start":80,"line_end":80,"column_start":18,"column_end":23},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":6214},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257350,"byte_end":257355,"line_start":114,"line_end":114,"column_start":18,"column_end":23},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":6214},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":257816,"byte_end":257822,"line_start":130,"line_end":130,"column_start":6,"column_end":12},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":6230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":258082,"byte_end":258088,"line_start":142,"line_end":142,"column_start":20,"column_end":26},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":6230},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":258161,"byte_end":258167,"line_start":148,"line_end":148,"column_start":20,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":6230},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":258647,"byte_end":258653,"line_start":170,"line_end":170,"column_start":18,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":6230},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":260877,"byte_end":260883,"line_start":241,"line_end":241,"column_start":18,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":6230},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261414,"byte_end":261420,"line_start":261,"line_end":261,"column_start":20,"column_end":26},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":6246},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261493,"byte_end":261499,"line_start":267,"line_end":267,"column_start":20,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":6246},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261583,"byte_end":261589,"line_start":273,"line_end":273,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":6246},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261664,"byte_end":261670,"line_start":279,"line_end":279,"column_start":18,"column_end":24},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":6246},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":261889,"byte_end":261895,"line_start":289,"line_end":289,"column_start":18,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":6246},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262463,"byte_end":262470,"line_start":310,"line_end":310,"column_start":6,"column_end":13},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":6262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":262850,"byte_end":262857,"line_start":327,"line_end":327,"column_start":22,"column_end":29},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":6262},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":263314,"byte_end":263322,"line_start":343,"line_end":343,"column_start":6,"column_end":14},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":6281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264023,"byte_end":264031,"line_start":370,"line_end":370,"column_start":20,"column_end":28},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":6281},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264104,"byte_end":264112,"line_start":376,"line_end":376,"column_start":20,"column_end":28},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":6281},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264196,"byte_end":264204,"line_start":382,"line_end":382,"column_start":20,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":6281},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264279,"byte_end":264287,"line_start":388,"line_end":388,"column_start":18,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":6281},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":264738,"byte_end":264746,"line_start":407,"line_end":407,"column_start":18,"column_end":26},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":6281},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":273518,"byte_end":273524,"line_start":676,"line_end":676,"column_start":6,"column_end":12},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":6297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274797,"byte_end":274803,"line_start":719,"line_end":719,"column_start":18,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":6297},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":274966,"byte_end":274972,"line_start":726,"line_end":726,"column_start":18,"column_end":24},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":6297},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275209,"byte_end":275215,"line_start":737,"line_end":737,"column_start":20,"column_end":26},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":6297},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275304,"byte_end":275310,"line_start":743,"line_end":743,"column_start":20,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":6297},"to":{"krate":0,"index":1035}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":275402,"byte_end":275408,"line_start":749,"line_end":749,"column_start":6,"column_end":12},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":6313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276682,"byte_end":276688,"line_start":792,"line_end":792,"column_start":18,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":6313},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":276841,"byte_end":276847,"line_start":799,"line_end":799,"column_start":18,"column_end":24},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":6313},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":277078,"byte_end":277084,"line_start":810,"line_end":810,"column_start":20,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":6313},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":277173,"byte_end":277179,"line_start":816,"line_end":816,"column_start":20,"column_end":26},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6313},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/immediates.rs","byte_start":277284,"byte_end":277290,"line_start":822,"line_end":822,"column_start":20,"column_end":26},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":6313},"to":{"krate":0,"index":1035}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10974259,"byte_end":10974276,"line_start":110,"line_end":110,"column_start":40,"column_end":57},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":6367},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":10984671,"byte_end":10984686,"line_start":524,"line_end":524,"column_start":6,"column_end":21},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":6477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/opcodes.rs","byte_start":11048142,"byte_end":11048148,"line_start":2026,"line_end":2026,"column_start":6,"column_end":12},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":6693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":298585,"byte_end":298591,"line_start":47,"line_end":47,"column_start":18,"column_end":24},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6693},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":298706,"byte_end":298712,"line_start":53,"line_end":53,"column_start":6,"column_end":12},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":6693},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":299413,"byte_end":299419,"line_start":70,"line_end":70,"column_start":18,"column_end":24},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":6693},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":300389,"byte_end":300401,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":7151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301096,"byte_end":301108,"line_start":127,"line_end":127,"column_start":16,"column_end":28},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":7151},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301216,"byte_end":301228,"line_start":135,"line_end":135,"column_start":19,"column_end":31},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":7151},"to":{"krate":1,"index":1714}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301323,"byte_end":301335,"line_start":141,"line_end":141,"column_start":18,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":7151},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301640,"byte_end":301652,"line_start":154,"line_end":154,"column_start":18,"column_end":30},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":7151},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":301860,"byte_end":301875,"line_start":164,"line_end":164,"column_start":6,"column_end":21},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":308390,"byte_end":308407,"line_start":342,"line_end":342,"column_start":6,"column_end":23},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":7158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":312562,"byte_end":312574,"line_start":450,"line_end":450,"column_start":6,"column_end":18},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":7165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/instructions.rs","byte_start":314701,"byte_end":314718,"line_start":523,"line_end":523,"column_start":6,"column_end":23},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":322592,"byte_end":322605,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":7198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/jumptable.rs","byte_start":323875,"byte_end":323888,"line_start":69,"line_end":69,"column_start":18,"column_end":31},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":7198},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":326768,"byte_end":326774,"line_start":46,"line_end":46,"column_start":6,"column_end":12},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":7202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":329085,"byte_end":329091,"line_start":119,"line_end":119,"column_start":23,"column_end":29},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":7202},"to":{"krate":0,"index":1487}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":329590,"byte_end":329596,"line_start":139,"line_end":139,"column_start":6,"column_end":12},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":7202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":337482,"byte_end":337488,"line_start":344,"line_end":344,"column_start":6,"column_end":12},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":7202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":342186,"byte_end":342192,"line_start":490,"line_end":490,"column_start":23,"column_end":29},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1355},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":342855,"byte_end":342861,"line_start":518,"line_end":518,"column_start":6,"column_end":12},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":7202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":350111,"byte_end":350116,"line_start":734,"line_end":734,"column_start":23,"column_end":28},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1382},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/layout.rs","byte_start":350525,"byte_end":350530,"line_start":751,"line_end":751,"column_start":34,"column_end":39},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1382},"to":{"krate":1,"index":3767}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367611,"byte_end":367618,"line_start":51,"line_end":51,"column_start":23,"column_end":30},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":7232},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":367739,"byte_end":367746,"line_start":57,"line_end":57,"column_start":18,"column_end":25},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":7232},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/libcall.rs","byte_start":368441,"byte_end":368448,"line_start":79,"line_end":79,"column_start":6,"column_end":13},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":7232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":373491,"byte_end":373499,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":7269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/memflags.rs","byte_start":376138,"byte_end":376146,"line_start":108,"line_end":108,"column_start":23,"column_end":31},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":7269},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":376887,"byte_end":376899,"line_start":19,"line_end":19,"column_start":21,"column_end":33},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":7284},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377083,"byte_end":377095,"line_start":27,"line_end":27,"column_start":22,"column_end":34},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7284},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377289,"byte_end":377301,"line_start":35,"line_end":35,"column_start":25,"column_end":37},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7284},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":377771,"byte_end":377791,"line_start":54,"line_end":54,"column_start":6,"column_end":26},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":7295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378034,"byte_end":378054,"line_start":64,"line_end":64,"column_start":21,"column_end":41},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":7295},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378146,"byte_end":378166,"line_start":70,"line_end":70,"column_start":22,"column_end":42},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":7295},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378265,"byte_end":378285,"line_start":76,"line_end":76,"column_start":25,"column_end":45},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":7295},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378501,"byte_end":378521,"line_start":85,"line_end":85,"column_start":29,"column_end":49},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":7295},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378749,"byte_end":378769,"line_start":95,"line_end":95,"column_start":23,"column_end":43},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":7295},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":378993,"byte_end":379005,"line_start":104,"line_end":104,"column_start":23,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7284},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":379171,"byte_end":379191,"line_start":111,"line_end":111,"column_start":21,"column_end":41},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":7295},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/progpoint.rs","byte_start":379334,"byte_end":379346,"line_start":117,"line_end":117,"column_start":21,"column_end":33},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":7284},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":381712,"byte_end":381721,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":7310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":382088,"byte_end":382097,"line_start":38,"line_end":38,"column_start":18,"column_end":27},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":7310},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/sourceloc.rs","byte_start":382175,"byte_end":382184,"line_start":44,"line_end":44,"column_start":23,"column_end":32},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":7310},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":385769,"byte_end":385782,"line_start":83,"line_end":83,"column_start":18,"column_end":31},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":7323},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":386259,"byte_end":386272,"line_start":100,"line_end":100,"column_start":23,"column_end":36},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":7323},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":387444,"byte_end":387457,"line_start":134,"line_end":134,"column_start":6,"column_end":19},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":7345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":388180,"byte_end":388193,"line_start":155,"line_end":155,"column_start":23,"column_end":36},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":7345},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":389742,"byte_end":389752,"line_start":202,"line_end":202,"column_start":6,"column_end":16},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":7371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391674,"byte_end":391684,"line_start":267,"line_end":267,"column_start":27,"column_end":37},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":7371},"to":{"krate":1,"index":1779}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":391838,"byte_end":391848,"line_start":275,"line_end":275,"column_start":30,"column_end":40},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7371},"to":{"krate":1,"index":1783}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/stackslot.rs","byte_start":392013,"byte_end":392023,"line_start":282,"line_end":282,"column_start":6,"column_end":16},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/table.rs","byte_start":398731,"byte_end":398740,"line_start":27,"line_end":27,"column_start":23,"column_end":32},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":7385},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":400740,"byte_end":400748,"line_start":59,"line_end":59,"column_start":18,"column_end":26},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":7393},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/trapcode.rs","byte_start":401480,"byte_end":401488,"line_start":80,"line_end":80,"column_start":18,"column_end":26},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":7393},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":404692,"byte_end":404696,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":7432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":412894,"byte_end":412898,"line_start":306,"line_end":306,"column_start":18,"column_end":22},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7432},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":413675,"byte_end":413679,"line_start":329,"line_end":329,"column_start":16,"column_end":20},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":7432},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/types.rs","byte_start":414504,"byte_end":414508,"line_start":352,"line_end":352,"column_start":18,"column_end":22},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":7432},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421110,"byte_end":421118,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":7504},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":421187,"byte_end":421195,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":7504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":422456,"byte_end":422471,"line_start":69,"line_end":69,"column_start":27,"column_end":42},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1646},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424220,"byte_end":424231,"line_start":110,"line_end":110,"column_start":18,"column_end":29},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":7523},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":424300,"byte_end":424311,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":7523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/ir/valueloc.rs","byte_start":425470,"byte_end":425488,"line_start":154,"line_end":154,"column_start":27,"column_end":45},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1663},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/abi.rs","byte_start":448292,"byte_end":448296,"line_start":81,"line_end":81,"column_start":6,"column_end":10},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":7589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/abi.rs","byte_start":449078,"byte_end":449082,"line_start":112,"line_end":112,"column_start":22,"column_end":26},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":7589},"to":{"krate":0,"index":3050}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","byte_start":543446,"byte_end":543455,"line_start":27,"line_end":27,"column_start":6,"column_end":15},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":7717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/fde.rs","byte_start":543727,"byte_end":543736,"line_start":39,"line_end":39,"column_start":17,"column_end":26},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7717},"to":{"krate":23,"index":139}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/registers-x86.rs","byte_start":12012604,"byte_end":12012606,"line_start":164,"line_end":164,"column_start":24,"column_end":26},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":7737},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings-x86.rs","byte_start":12012759,"byte_end":12012764,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":7880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings-x86.rs","byte_start":12014698,"byte_end":12014703,"line_start":71,"line_end":71,"column_start":6,"column_end":11},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":7880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings-x86.rs","byte_start":12021593,"byte_end":12021598,"line_start":330,"line_end":330,"column_start":23,"column_end":28},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":7880},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/unwind.rs","byte_start":562350,"byte_end":562360,"line_start":43,"line_end":43,"column_start":6,"column_end":16},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":7885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/unwind.rs","byte_start":564843,"byte_end":564853,"line_start":118,"line_end":118,"column_start":6,"column_end":16},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":7902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/mod.rs","byte_start":442278,"byte_end":442281,"line_start":66,"line_end":66,"column_start":20,"column_end":23},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2193},"to":{"krate":0,"index":2461}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/x86/mod.rs","byte_start":445147,"byte_end":445150,"line_start":175,"line_end":175,"column_start":23,"column_end":26},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2193},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":580669,"byte_end":580677,"line_start":26,"line_end":26,"column_start":6,"column_end":14},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":7915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":582419,"byte_end":582427,"line_start":69,"line_end":69,"column_start":23,"column_end":31},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":7915},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/call_conv.rs","byte_start":582896,"byte_end":582904,"line_start":83,"line_end":83,"column_start":23,"column_end":31},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":7915},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":584369,"byte_end":584386,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":7942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":588164,"byte_end":588181,"line_start":123,"line_end":123,"column_start":6,"column_end":23},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":7974},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/constraints.rs","byte_start":590153,"byte_end":590164,"line_start":173,"line_end":173,"column_start":6,"column_end":17},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":7986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":593262,"byte_end":593273,"line_start":52,"line_end":52,"column_start":30,"column_end":41},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2271},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":597744,"byte_end":597753,"line_start":188,"line_end":188,"column_start":10,"column_end":19},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/enc_tables.rs","byte_start":599673,"byte_end":599682,"line_start":247,"line_end":247,"column_start":23,"column_end":32},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2300},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":601876,"byte_end":601884,"line_start":21,"line_end":21,"column_start":6,"column_end":14},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":7994},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602457,"byte_end":602465,"line_start":44,"line_end":44,"column_start":18,"column_end":26},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":7994},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":602604,"byte_end":602612,"line_start":51,"line_end":51,"column_start":23,"column_end":31},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":7994},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":603091,"byte_end":603106,"line_start":68,"line_end":68,"column_start":23,"column_end":38},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2340},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/encoding.rs","byte_start":604857,"byte_end":604864,"line_start":127,"line_end":127,"column_start":6,"column_end":13},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":8007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":608465,"byte_end":608472,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":611639,"byte_end":611651,"line_start":156,"line_end":156,"column_start":6,"column_end":18},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613749,"byte_end":613761,"line_start":212,"line_end":212,"column_start":23,"column_end":35},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2381},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":613883,"byte_end":613895,"line_start":218,"line_end":218,"column_start":21,"column_end":33},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2381},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614092,"byte_end":614104,"line_start":225,"line_end":225,"column_start":20,"column_end":32},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2381},"to":{"krate":1,"index":2039}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614494,"byte_end":614507,"line_start":238,"line_end":238,"column_start":20,"column_end":33},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":8013},"to":{"krate":16,"index":15}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614665,"byte_end":614678,"line_start":248,"line_end":248,"column_start":25,"column_end":38},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":8013},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":614771,"byte_end":614784,"line_start":254,"line_end":254,"column_start":23,"column_end":36},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":8013},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":615863,"byte_end":615870,"line_start":284,"line_end":284,"column_start":6,"column_end":13},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":8026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/registers.rs","byte_start":617167,"byte_end":617181,"line_start":324,"line_end":324,"column_start":27,"column_end":41},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2425},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":618909,"byte_end":618917,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":8031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/stack.rs","byte_start":621251,"byte_end":621264,"line_start":90,"line_end":90,"column_start":6,"column_end":19},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":8058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":430714,"byte_end":430721,"line_start":145,"line_end":145,"column_start":6,"column_end":13},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431061,"byte_end":431068,"line_start":153,"line_end":153,"column_start":33,"column_end":40},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2447},"to":{"krate":0,"index":2586}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":431941,"byte_end":431961,"line_start":181,"line_end":181,"column_start":6,"column_end":26},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":8088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432590,"byte_end":432597,"line_start":200,"line_end":200,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":7484},"to":{"krate":0,"index":2461}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432600,"byte_end":432604,"line_start":200,"line_end":200,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1534},"to":{"krate":0,"index":2461}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/isa/mod.rs","byte_start":432607,"byte_end":432611,"line_start":200,"line_end":200,"column_start":44,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1544},"to":{"krate":0,"index":2461}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":622454,"byte_end":622462,"line_start":34,"line_end":34,"column_start":6,"column_end":14},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":622764,"byte_end":622776,"line_start":45,"line_end":45,"column_start":6,"column_end":18},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/loop_analysis.rs","byte_start":624570,"byte_end":624582,"line_start":101,"line_end":101,"column_start":6,"column_end":18},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/print_errors.rs","byte_start":636452,"byte_end":636471,"line_start":49,"line_end":49,"column_start":25,"column_end":44},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2558},"to":{"krate":0,"index":2989}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":642884,"byte_end":642891,"line_start":54,"line_end":54,"column_start":6,"column_end":13},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":8120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":645298,"byte_end":645305,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":8120},"to":{"krate":0,"index":2586}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":647546,"byte_end":647559,"line_start":194,"line_end":194,"column_start":10,"column_end":23},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":8147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":648741,"byte_end":648749,"line_start":232,"line_end":232,"column_start":10,"column_end":18},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":650122,"byte_end":650130,"line_start":266,"line_end":266,"column_start":48,"column_end":56},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2613},"to":{"krate":0,"index":3075}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":651814,"byte_end":651820,"line_start":322,"line_end":322,"column_start":10,"column_end":16},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":8156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094124,"byte_end":12094129,"line_start":6,"line_end":6,"column_start":6,"column_end":11},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":8216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094690,"byte_end":12094698,"line_start":27,"line_end":27,"column_start":23,"column_end":31},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":8221},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12094957,"byte_end":12094965,"line_start":36,"line_end":36,"column_start":23,"column_end":31},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":8221},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12095696,"byte_end":12095711,"line_start":67,"line_end":67,"column_start":23,"column_end":38},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":8240},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12096226,"byte_end":12096241,"line_start":81,"line_end":81,"column_start":23,"column_end":38},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":8240},"to":{"krate":1,"index":6657}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12096841,"byte_end":12096846,"line_start":99,"line_end":99,"column_start":6,"column_end":11},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":8216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/terra-contracts/erc721/target/rls/debug/build/cranelift-codegen-316f8be3d742bbe2/out/settings.rs","byte_start":12107894,"byte_end":12107899,"line_start":448,"line_end":448,"column_start":23,"column_end":28},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":8216},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":652891,"byte_end":652901,"line_start":352,"line_end":352,"column_start":30,"column_end":40},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":8269},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/settings.rs","byte_start":653040,"byte_end":653050,"line_start":358,"line_end":358,"column_start":38,"column_end":48},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":8269},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658309,"byte_end":658313,"line_start":82,"line_end":82,"column_start":6,"column_end":10},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":8313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":658401,"byte_end":658405,"line_start":88,"line_end":88,"column_start":23,"column_end":27},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":8313},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":660132,"byte_end":660141,"line_start":142,"line_end":142,"column_start":22,"column_end":31},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":660307,"byte_end":660316,"line_start":150,"line_end":150,"column_start":27,"column_end":36},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/timing.rs","byte_start":662302,"byte_end":662313,"line_start":199,"line_end":199,"column_start":19,"column_end":30},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2665},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/cssa.rs","byte_start":741847,"byte_end":741859,"line_start":61,"line_end":61,"column_start":10,"column_end":22},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/flags.rs","byte_start":748184,"byte_end":748197,"line_start":49,"line_end":49,"column_start":10,"column_end":23},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/liveness.rs","byte_start":754846,"byte_end":754862,"line_start":50,"line_end":50,"column_start":10,"column_end":26},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/locations.rs","byte_start":763623,"byte_end":763639,"line_start":51,"line_end":51,"column_start":10,"column_end":26},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":669000,"byte_end":669013,"line_start":124,"line_end":124,"column_start":35,"column_end":48},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":8405},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":669471,"byte_end":669484,"line_start":143,"line_end":143,"column_start":29,"column_end":42},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":8405},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":670679,"byte_end":670693,"line_start":180,"line_end":180,"column_start":6,"column_end":20},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":8421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":671962,"byte_end":671976,"line_start":228,"line_end":228,"column_start":35,"column_end":49},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":8421},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672083,"byte_end":672097,"line_start":234,"line_end":234,"column_start":35,"column_end":49},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":8421},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672200,"byte_end":672214,"line_start":240,"line_end":240,"column_start":35,"column_end":49},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":8421},"to":{"krate":1,"index":2218}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":672382,"byte_end":672396,"line_start":250,"line_end":250,"column_start":18,"column_end":32},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":8421},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/verifier/mod.rs","byte_start":673745,"byte_end":673753,"line_start":303,"line_end":303,"column_start":10,"column_end":18},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":779965,"byte_end":779976,"line_start":135,"line_end":135,"column_start":21,"column_end":32},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2996},"to":{"krate":0,"index":2989}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":798434,"byte_end":798447,"line_start":729,"line_end":729,"column_start":27,"column_end":40},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":3018},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/write.rs","byte_start":798823,"byte_end":798849,"line_start":744,"line_end":744,"column_start":27,"column_end":53},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":3025},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/abi.rs","byte_start":803347,"byte_end":803356,"line_start":28,"line_end":28,"column_start":28,"column_end":37},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":8436},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/abi.rs","byte_start":803461,"byte_end":803470,"line_start":34,"line_end":34,"column_start":32,"column_end":41},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":8436},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/abi.rs","byte_start":804129,"byte_end":804144,"line_start":59,"line_end":59,"column_start":6,"column_end":21},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":8448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/bitset.rs","byte_start":811182,"byte_end":811188,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":8471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/context.rs","byte_start":819613,"byte_end":819620,"line_start":60,"line_end":60,"column_start":6,"column_end":13},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":3124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/fx.rs","byte_start":872720,"byte_end":872728,"line_start":51,"line_end":51,"column_start":18,"column_end":26},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":3214},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/fx.rs","byte_start":872811,"byte_end":872819,"line_start":58,"line_end":58,"column_start":6,"column_end":14},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":3214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/fx.rs","byte_start":872975,"byte_end":872983,"line_start":65,"line_end":65,"column_start":17,"column_end":25},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":3214},"to":{"krate":1,"index":7129}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/iterators.rs","byte_start":874017,"byte_end":874025,"line_start":4,"line_end":4,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3510},"to":{"krate":0,"index":3230}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/iterators.rs","byte_start":874345,"byte_end":874346,"line_start":16,"line_end":16,"column_start":28,"column_end":29},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":3233},"to":{"krate":0,"index":3230}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/iterators.rs","byte_start":874657,"byte_end":874670,"line_start":30,"line_end":30,"column_start":22,"column_end":35},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":3234},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1021573,"byte_end":1021595,"line_start":303,"line_end":303,"column_start":6,"column_end":28},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":3656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1024038,"byte_end":1024046,"line_start":349,"line_end":349,"column_start":6,"column_end":14},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":8571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1029237,"byte_end":1029259,"line_start":483,"line_end":483,"column_start":6,"column_end":28},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":3656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1037828,"byte_end":1037850,"line_start":654,"line_end":654,"column_start":6,"column_end":28},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":3656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1043457,"byte_end":1043479,"line_start":764,"line_end":764,"column_start":6,"column_end":28},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":3656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/redundant_reload_remover.rs","byte_start":1047694,"byte_end":1047716,"line_start":879,"line_end":879,"column_start":6,"column_end":28},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":3656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coloring.rs","byte_start":1053884,"byte_end":1053892,"line_start":113,"line_end":113,"column_start":6,"column_end":14},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":3761},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coloring.rs","byte_start":1055107,"byte_end":1055114,"line_start":156,"line_end":156,"column_start":10,"column_end":17},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":3770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coloring.rs","byte_start":1104349,"byte_end":1104362,"line_start":1302,"line_end":1302,"column_start":6,"column_end":19},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":3826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/live_value_tracker.rs","byte_start":1107490,"byte_end":1107502,"line_start":68,"line_end":68,"column_start":6,"column_end":18},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":3856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/live_value_tracker.rs","byte_start":1109358,"byte_end":1109374,"line_start":126,"line_end":126,"column_start":6,"column_end":22},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1133299,"byte_end":1133307,"line_start":300,"line_end":300,"column_start":6,"column_end":14},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":3913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liveness.rs","byte_start":1138994,"byte_end":1139002,"line_start":436,"line_end":436,"column_start":23,"column_end":31},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3913},"to":{"krate":1,"index":1779}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1149372,"byte_end":1149388,"line_start":210,"line_end":210,"column_start":24,"column_end":40},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":3951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/liverange.rs","byte_start":1160029,"byte_end":1160045,"line_start":467,"line_end":467,"column_start":50,"column_end":66},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":3951},"to":{"krate":16,"index":373}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1170276,"byte_end":1170287,"line_start":35,"line_end":35,"column_start":6,"column_end":17},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":8583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1173868,"byte_end":1173878,"line_start":134,"line_end":134,"column_start":19,"column_end":29},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":8587},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1174816,"byte_end":1174826,"line_start":165,"line_end":165,"column_start":6,"column_end":16},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":8587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1175586,"byte_end":1175596,"line_start":190,"line_end":190,"column_start":28,"column_end":38},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":8587},"to":{"krate":1,"index":3796}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1175794,"byte_end":1175812,"line_start":195,"line_end":195,"column_start":27,"column_end":45},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/register_set.rs","byte_start":1177944,"byte_end":1177955,"line_start":248,"line_end":248,"column_start":23,"column_end":34},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":8583},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1184036,"byte_end":1184044,"line_start":59,"line_end":59,"column_start":6,"column_end":14},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":4054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1189709,"byte_end":1189717,"line_start":230,"line_end":230,"column_start":23,"column_end":31},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":4054},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1190677,"byte_end":1190684,"line_start":258,"line_end":258,"column_start":6,"column_end":13},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":4084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/virtregs.rs","byte_start":1191986,"byte_end":1191994,"line_start":292,"line_end":292,"column_start":6,"column_end":14},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":4054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1200995,"byte_end":1201003,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8628},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1201072,"byte_end":1201080,"line_start":37,"line_end":37,"column_start":6,"column_end":14},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":8628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/affinity.rs","byte_start":1203825,"byte_end":1203840,"line_start":115,"line_end":115,"column_start":27,"column_end":42},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":4123},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/branch_splitting.rs","byte_start":1205447,"byte_end":1205454,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":4149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1214237,"byte_end":1214247,"line_start":86,"line_end":86,"column_start":6,"column_end":16},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4199},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1216242,"byte_end":1216249,"line_start":151,"line_end":151,"column_start":10,"column_end":17},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1225292,"byte_end":1225299,"line_start":390,"line_end":390,"column_start":10,"column_end":17},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":4206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1237603,"byte_end":1237607,"line_start":697,"line_end":697,"column_start":6,"column_end":10},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8641},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1238428,"byte_end":1238432,"line_start":730,"line_end":730,"column_start":23,"column_end":27},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":8641},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1238711,"byte_end":1238720,"line_start":740,"line_end":740,"column_start":6,"column_end":15},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":4246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1244692,"byte_end":1244705,"line_start":882,"line_end":882,"column_start":6,"column_end":19},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":4259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1250566,"byte_end":1250575,"line_start":1038,"line_end":1038,"column_start":23,"column_end":32},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":4276},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1251345,"byte_end":1251355,"line_start":1066,"line_end":1066,"column_start":18,"column_end":28},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":4285},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/coalescing.rs","byte_start":1251718,"byte_end":1251728,"line_start":1081,"line_end":1081,"column_start":31,"column_end":41},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":4285},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/context.rs","byte_start":1253842,"byte_end":1253849,"line_start":39,"line_end":39,"column_start":6,"column_end":13},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":4328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1261387,"byte_end":1261396,"line_start":33,"line_end":33,"column_start":6,"column_end":15},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":8652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1262022,"byte_end":1262035,"line_start":59,"line_end":59,"column_start":6,"column_end":19},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":8665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268272,"byte_end":1268290,"line_start":237,"line_end":237,"column_start":6,"column_end":24},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268556,"byte_end":1268574,"line_start":250,"line_end":250,"column_start":16,"column_end":34},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":4365},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1268961,"byte_end":1268984,"line_start":263,"line_end":263,"column_start":32,"column_end":55},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":8669},"to":{"krate":16,"index":373}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/diversion.rs","byte_start":1269189,"byte_end":1269206,"line_start":272,"line_end":272,"column_start":27,"column_end":44},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":4396},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/pressure.rs","byte_start":1273228,"byte_end":1273233,"line_start":68,"line_end":68,"column_start":6,"column_end":11},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":8674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/pressure.rs","byte_start":1273666,"byte_end":1273674,"line_start":83,"line_end":83,"column_start":6,"column_end":14},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":4416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/pressure.rs","byte_start":1280034,"byte_end":1280042,"line_start":261,"line_end":261,"column_start":23,"column_end":31},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":4416},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/reload.rs","byte_start":1285951,"byte_end":1285957,"line_start":50,"line_end":50,"column_start":6,"column_end":12},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":4469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/reload.rs","byte_start":1287404,"byte_end":1287417,"line_start":108,"line_end":108,"column_start":32,"column_end":45},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":4489},"to":{"krate":16,"index":373}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/reload.rs","byte_start":1287486,"byte_end":1287493,"line_start":114,"line_end":114,"column_start":10,"column_end":17},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":4472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1312101,"byte_end":1312109,"line_start":154,"line_end":154,"column_start":6,"column_end":14},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":4544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1313634,"byte_end":1313642,"line_start":206,"line_end":206,"column_start":23,"column_end":31},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":4544},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1314464,"byte_end":1314474,"line_start":239,"line_end":239,"column_start":32,"column_end":42},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":8683},"to":{"krate":16,"index":373}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1314556,"byte_end":1314566,"line_start":245,"line_end":245,"column_start":23,"column_end":33},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":8683},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1315398,"byte_end":1315402,"line_start":283,"line_end":283,"column_start":6,"column_end":10},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":8692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1317841,"byte_end":1317845,"line_start":362,"line_end":362,"column_start":23,"column_end":27},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":8692},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1318962,"byte_end":1318966,"line_start":408,"line_end":408,"column_start":21,"column_end":25},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":8692},"to":{"krate":1,"index":7479}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1322465,"byte_end":1322471,"line_start":489,"line_end":489,"column_start":6,"column_end":12},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":4576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1336370,"byte_end":1336376,"line_start":839,"line_end":839,"column_start":6,"column_end":12},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":4576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1341503,"byte_end":1341509,"line_start":977,"line_end":977,"column_start":6,"column_end":12},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":4576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/solver.rs","byte_start":1347915,"byte_end":1347921,"line_start":1129,"line_end":1129,"column_start":23,"column_end":29},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4576},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1359576,"byte_end":1359584,"line_start":76,"line_end":76,"column_start":6,"column_end":14},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":4668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1360863,"byte_end":1360870,"line_start":122,"line_end":122,"column_start":10,"column_end":17},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":4671},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1380740,"byte_end":1380746,"line_start":609,"line_end":609,"column_start":6,"column_end":12},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":8713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/regalloc/spilling.rs","byte_start":1381018,"byte_end":1381024,"line_start":622,"line_end":622,"column_start":23,"column_end":29},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":8713},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/scoped_hash_map.rs","byte_start":1383635,"byte_end":1383648,"line_start":30,"line_end":30,"column_start":16,"column_end":29},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/scoped_hash_map.rs","byte_start":1384166,"byte_end":1384177,"line_start":47,"line_end":47,"column_start":22,"column_end":33},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/scoped_hash_map.rs","byte_start":1385112,"byte_end":1385125,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":4768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/simple_gvn.rs","byte_start":1391636,"byte_end":1391643,"line_start":41,"line_end":41,"column_start":27,"column_end":34},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8745},"to":{"krate":1,"index":7121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/simple_gvn.rs","byte_start":1391866,"byte_end":1391873,"line_start":48,"line_end":48,"column_start":32,"column_end":39},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":8745},"to":{"krate":1,"index":2039}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/simple_gvn.rs","byte_start":1392080,"byte_end":1392087,"line_start":54,"line_end":54,"column_start":25,"column_end":32},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":8745},"to":{"krate":1,"index":2044}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/topo_order.rs","byte_start":1441906,"byte_end":1441915,"line_start":28,"line_end":28,"column_start":6,"column_end":15},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":4910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456115,"byte_end":1456134,"line_start":246,"line_end":246,"column_start":26,"column_end":45},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":8804},"to":{"krate":1,"index":2221}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456213,"byte_end":1456232,"line_start":252,"line_end":252,"column_start":16,"column_end":35},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":8804},"to":{"krate":1,"index":1703}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456345,"byte_end":1456364,"line_start":259,"line_end":259,"column_start":21,"column_end":40},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":8804},"to":{"krate":1,"index":2076}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456481,"byte_end":1456500,"line_start":265,"line_end":265,"column_start":14,"column_end":33},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":8804},"to":{"krate":1,"index":2065}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-codegen-0.59.0/src/value_label.rs","byte_start":1456620,"byte_end":1456639,"line_start":271,"line_end":271,"column_start":20,"column_end":39},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":8804},"to":{"krate":1,"index":2039}}]}