{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0","program":"/home/hskang9/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","cranelift_bforest","/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=5358e57b1c4c883c","-C","extra-filename=-5358e57b1c4c883c","--out-dir","/home/hskang9/terra-contracts/erc721/target/rls/debug/deps","-L","dependency=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps","--extern","cranelift_entity=/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libcranelift_entity-fe1d0406170917ad.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hskang9/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hskang9/terra-contracts/erc721/target/rls/debug/deps/libcranelift_bforest-5358e57b1c4c883c.rmeta"},"prelude":{"crate_id":{"name":"cranelift_bforest","disambiguator":[13856497635522155208,18351677305291548907]},"crate_root":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src","external_crates":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18244709825056937379,8541279172166540996]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[5740174754597782991,14381932371412392788]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5912038166719388440,1348551350470015689]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":4,"id":{"name":"cranelift_entity","disambiguator":[15649407093681424624,11725493798286033142]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8555818017763115910,12072062234804656131]}}],"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":0,"byte_end":5807,"line_start":1,"line_end":199,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":417},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1547,"byte_end":1550,"line_start":51,"line_end":51,"column_start":21,"column_end":24},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1552,"byte_end":1561,"line_start":51,"line_end":51,"column_start":26,"column_end":35},"alias_span":null,"name":"MapCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1563,"byte_end":1572,"line_start":51,"line_end":51,"column_start":37,"column_end":46},"alias_span":null,"name":"MapForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":113},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1574,"byte_end":1581,"line_start":51,"line_end":51,"column_start":48,"column_end":55},"alias_span":null,"name":"MapIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1604,"byte_end":1607,"line_start":52,"line_end":52,"column_start":21,"column_end":24},"alias_span":null,"name":"Set","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1609,"byte_end":1618,"line_start":52,"line_end":52,"column_start":26,"column_end":35},"alias_span":null,"name":"SetCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":316},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1620,"byte_end":1629,"line_start":52,"line_end":52,"column_start":37,"column_end":46},"alias_span":null,"name":"SetForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":371},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1631,"byte_end":1638,"line_start":52,"line_end":52,"column_start":48,"column_end":55},"alias_span":null,"name":"SetIter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":0,"byte_end":5807,"line_start":1,"line_end":199,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":126},{"krate":0,"index":194},{"krate":0,"index":261},{"krate":0,"index":288},{"krate":0,"index":383},{"krate":0,"index":388},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":403},{"krate":0,"index":406},{"krate":0,"index":451},{"krate":0,"index":460},{"krate":0,"index":459},{"krate":0,"index":456},{"krate":0,"index":454},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":476},{"krate":0,"index":413},{"krate":0,"index":415}],"decl_id":null,"docs":" A forest of B+-trees.","sig":null,"attributes":[{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":709,"byte_end":776,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":777,"byte_end":807,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"no_std","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1288,"byte_end":1298,"line_start":33,"line_end":33,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":46},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6584,"byte_end":6593,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"MapForest","qualname":"::map::MapForest","value":"MapForest {  }","parent":null,"children":[{"krate":0,"index":49}],"decl_id":null,"docs":" Memory pool for a forest of `Map` instances.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6781,"byte_end":6784,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<MapForest<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7018,"byte_end":7023,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"clear","qualname":"<MapForest<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all maps in the forest.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":417},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7523,"byte_end":7526,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"decl_id":null,"docs":" B-tree mapping from `K` to `V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7726,"byte_end":7729,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7879,"byte_end":7887,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty map?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7991,"byte_end":7994,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"get","qualname":"<Map<K, V>>::get","value":"fn <C> (&self, key: K, forest: &MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the value stored for `key`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8516,"byte_end":8527,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"get_or_less","qualname":"<Map<K, V>>::get_or_less","value":"fn <C> (&self, key: K, forest: &MapForest<K, V>, comp: &C) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Look up the value stored for `key`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9041,"byte_end":9047,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<K, V>>::insert","value":"fn <C> (&mut self, key: K, value: V, forest: &mut MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `key, value` into the map and return the old value stored for `key`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9350,"byte_end":9356,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<K, V>>::remove","value":"fn <C> (&mut self, key: K, forest: &mut MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the map and return the removed value for `key`, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9683,"byte_end":9688,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map<K, V>>::clear","value":"fn (&mut self, forest: &mut MapForest<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":10070,"byte_end":10076,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"retain","qualname":"<Map<K, V>>::retain","value":"fn <F> (&mut self, forest: &mut MapForest<K, V>, mut predicate: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":10866,"byte_end":10872,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Map<K, V>>::cursor","value":"fn <'a, C> (&'a mut self, forest: &'a mut MapForest<K, V>, comp: &'a C) -> MapCursor<'a, K, V, C>","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this map. The cursor is initially positioned off the end of\n the map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11154,"byte_end":11158,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"iter","qualname":"<Map<K, V>>::iter","value":"fn <'a> (&'a self, forest: &'a MapForest<K, V>) -> MapIter<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this map. The iterator type is `(K, V)`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12529,"byte_end":12538,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"MapCursor","qualname":"::map::MapCursor","value":"MapCursor {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" A position in a `Map` used to navigate and modify the ordered map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13235,"byte_end":13243,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MapCursor>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty map?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13569,"byte_end":13573,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"next","qualname":"<MapCursor>::next","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next key-value pair and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13827,"byte_end":13831,"line_start":295,"line_end":295,"column_start":12,"column_end":16},"name":"prev","qualname":"<MapCursor>::prev","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous key-value pair and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14051,"byte_end":14054,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"key","qualname":"<MapCursor>::key","value":"fn (&self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current key, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14298,"byte_end":14303,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"value","qualname":"<MapCursor>::value","value":"fn (&self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14570,"byte_end":14579,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<MapCursor>::value_mut","value":"fn (&mut self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15031,"byte_end":15035,"line_start":328,"line_end":328,"column_start":12,"column_end":16},"name":"goto","qualname":"<MapCursor>::goto","value":"fn (&mut self, elem: K) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `key`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15367,"byte_end":15377,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<MapCursor>::goto_first","value":"fn (&mut self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15744,"byte_end":15750,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"insert","qualname":"<MapCursor>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `(key, value))` into the map and leave the cursor at the inserted pair.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16682,"byte_end":16688,"line_start":371,"line_end":371,"column_start":12,"column_end":18},"name":"remove","qualname":"<MapCursor>::remove","value":"fn (&mut self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current entry (if any) and return the mapped value.\n This advances the cursor to the next entry after the removed one.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":113},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16940,"byte_end":16947,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"MapIter","qualname":"::map::MapIter","value":"MapIter {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" An iterator visiting the key-value pairs of a `Map`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":316},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104641,"byte_end":104650,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"SetForest","qualname":"::set::SetForest","value":"SetForest {  }","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Memory pool for a forest of `Set` instances.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104800,"byte_end":104803,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<SetForest<K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105037,"byte_end":105042,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"clear","qualname":"<SetForest<K>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all sets in the forest.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":444},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105587,"byte_end":105590,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"Set","qualname":"::set::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447}],"decl_id":null,"docs":" B-tree representing an ordered set of `K`s using `C` for comparing elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105750,"byte_end":105753,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Set<K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105903,"byte_end":105911,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Set<K>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty set?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106012,"byte_end":106020,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"contains","qualname":"<Set<K>>::contains","value":"fn <C> (&self, key: K, forest: &SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the set contain `key`?.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106464,"byte_end":106470,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"insert","qualname":"<Set<K>>::insert","value":"fn <C> (&mut self, key: K, forest: &mut SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `key` into the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106776,"byte_end":106782,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<Set<K>>::remove","value":"fn <C> (&mut self, key: K, forest: &mut SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the set and return true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107110,"byte_end":107115,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set<K>>::clear","value":"fn (&mut self, forest: &mut SetForest<K>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107406,"byte_end":107412,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"retain","qualname":"<Set<K>>::retain","value":"fn <F> (&mut self, forest: &mut SetForest<K>, mut predicate: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108077,"byte_end":108083,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Set<K>>::cursor","value":"fn <'a, C> (&'a mut self, forest: &'a mut SetForest<K>, comp: &'a C) -> SetCursor<'a, K, C>","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this set. The cursor is initially positioned off the end of\n the set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108354,"byte_end":108358,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"iter","qualname":"<Set<K>>::iter","value":"fn <'a> (&'a self, forest: &'a SetForest<K>) -> SetIter<'a, K>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this set. The iterator type is `K`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108872,"byte_end":108881,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"name":"SetCursor","qualname":"::set::SetCursor","value":"SetCursor {  }","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"decl_id":null,"docs":" A position in a `Set` used to navigate and modify the ordered set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109522,"byte_end":109530,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SetCursor>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty set?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109849,"byte_end":109853,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"next","qualname":"<SetCursor>::next","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next element and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110113,"byte_end":110117,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"prev","qualname":"<SetCursor>::prev","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous element and return it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110352,"byte_end":110356,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"elem","qualname":"<SetCursor>::elem","value":"fn (&self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current element, or `None` if the cursor is at the end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110779,"byte_end":110783,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"goto","qualname":"<SetCursor>::goto","value":"fn (&mut self, elem: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `elem`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111219,"byte_end":111229,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<SetCursor>::goto_first","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111633,"byte_end":111639,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"insert","qualname":"<SetCursor>::insert","value":"fn (&mut self, elem: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `elem` into the set and leave the cursor at the inserted element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":112499,"byte_end":112505,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"remove","qualname":"<SetCursor>::remove","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current element (if any) and return it.\n This advances the cursor to the next element after the removed one.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113161,"byte_end":113168,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"SetIter","qualname":"::set::SetIter","value":"SetIter {  }","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376}],"decl_id":null,"docs":" An iterator visiting the elements of a `Set`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":398},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2296,"byte_end":2306,"line_start":71,"line_end":71,"column_start":11,"column_end":21},"name":"Comparator","qualname":"::Comparator","value":"Comparator<K>","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401}],"decl_id":null,"docs":" Key comparator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2450,"byte_end":2453,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"cmp","qualname":"::Comparator::cmp","value":"fn (&self, a: K, b: K) -> Ordering","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Compare keys `a` and `b`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2805,"byte_end":2811,"line_start":86,"line_end":86,"column_start":8,"column_end":14},"name":"search","qualname":"::Comparator::search","value":"fn (&self, k: K, s: &[K]) -> Result<usize, usize>","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Binary search for `k` in an ordered slice.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":407},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3260,"byte_end":3263,"line_start":104,"line_end":104,"column_start":10,"column_end":13},"name":"Key","qualname":"::Forest::Key","value":"type Key: Copy;","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" The key type is present for both sets and maps.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":408},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3322,"byte_end":3327,"line_start":107,"line_end":107,"column_start":10,"column_end":15},"name":"Value","qualname":"::Forest::Value","value":"type Value: Copy;","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" The value type is `()` for sets.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":409},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3390,"byte_end":3398,"line_start":110,"line_end":110,"column_start":10,"column_end":18},"name":"LeafKeys","qualname":"::Forest::LeafKeys","value":"type LeafKeys: Copy + BorrowMut<[Self::Key]>;","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" An array of keys for the leaf nodes.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":410},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3488,"byte_end":3498,"line_start":113,"line_end":113,"column_start":10,"column_end":20},"name":"LeafValues","qualname":"::Forest::LeafValues","value":"type LeafValues: Copy + BorrowMut<[Self::Value]>;","parent":{"krate":0,"index":406},"children":[],"decl_id":null,"docs":" An array of values for the leaf nodes.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6160,"byte_end":6168,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6685,"byte_end":6694,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7644,"byte_end":7647,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11382,"byte_end":11385,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12775,"byte_end":12784,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":17135,"byte_end":17142,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36555,"byte_end":36563,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36596,"byte_end":36604,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36679,"byte_end":36687,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":54484,"byte_end":54491,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55075,"byte_end":55083,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55206,"byte_end":55207,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55337,"byte_end":55345,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64754,"byte_end":64758,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64968,"byte_end":64972,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":96435,"byte_end":96443,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103556,"byte_end":103564,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103730,"byte_end":103738,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104203,"byte_end":104211,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104720,"byte_end":104729,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105684,"byte_end":105687,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108573,"byte_end":108576,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109088,"byte_end":109097,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113326,"byte_end":113333,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6160,"byte_end":6168,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":406}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6685,"byte_end":6694,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7644,"byte_end":7647,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11382,"byte_end":11385,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":417},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12775,"byte_end":12784,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":17135,"byte_end":17142,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":113},"to":{"krate":1,"index":3510}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36555,"byte_end":36563,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":1542}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36596,"byte_end":36604,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":2179}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36679,"byte_end":36687,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":54484,"byte_end":54491,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55075,"byte_end":55083,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":474},"to":{"krate":0,"index":184}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55206,"byte_end":55207,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":189},"to":{"krate":0,"index":184}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55337,"byte_end":55345,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":7484}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64754,"byte_end":64758,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":207},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64968,"byte_end":64972,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":96435,"byte_end":96443,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103556,"byte_end":103564,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":270},"to":{"krate":1,"index":1779}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103730,"byte_end":103738,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":270},"to":{"krate":1,"index":1783}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104203,"byte_end":104211,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":300},"to":{"krate":0,"index":406}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104720,"byte_end":104729,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105684,"byte_end":105687,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108573,"byte_end":108576,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":444},"to":{"krate":1,"index":2204}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109088,"byte_end":109097,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113326,"byte_end":113333,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":3510}}]}