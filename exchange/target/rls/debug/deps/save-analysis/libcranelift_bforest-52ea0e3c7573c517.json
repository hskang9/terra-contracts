{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0","program":"/Users/hyungsukkang/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","cranelift_bforest","--edition=2018","/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=52ea0e3c7573c517","-C","extra-filename=-52ea0e3c7573c517","--out-dir","/Users/hyungsukkang/terra/terra-contracts/exchange/target/rls/debug/deps","-L","dependency=/Users/hyungsukkang/terra/terra-contracts/exchange/target/rls/debug/deps","--extern","cranelift_entity=/Users/hyungsukkang/terra/terra-contracts/exchange/target/rls/debug/deps/libcranelift_entity-2264b99d5e665013.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/hyungsukkang/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/hyungsukkang/terra/terra-contracts/exchange/target/rls/debug/deps/libcranelift_bforest-52ea0e3c7573c517.rmeta"},"prelude":{"crate_id":{"name":"cranelift_bforest","disambiguator":[11763536731786746803,9992190659630586076]},"crate_root":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src","external_crates":[{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5902495869598878631,6483651549774204679]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12311488937759207811,9591695617658421232]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13642764918293034548,9567326413417207759]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":4,"id":{"name":"cranelift_entity","disambiguator":[10219056643693994650,10087982876222114507]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13989086203811079768,14781321679734955535]}}],"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":0,"byte_end":5807,"line_start":1,"line_end":199,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1547,"byte_end":1550,"line_start":51,"line_end":51,"column_start":21,"column_end":24},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":73},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1552,"byte_end":1561,"line_start":51,"line_end":51,"column_start":26,"column_end":35},"alias_span":null,"name":"MapCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1563,"byte_end":1572,"line_start":51,"line_end":51,"column_start":37,"column_end":46},"alias_span":null,"name":"MapForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1574,"byte_end":1581,"line_start":51,"line_end":51,"column_start":48,"column_end":55},"alias_span":null,"name":"MapIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1604,"byte_end":1607,"line_start":52,"line_end":52,"column_start":21,"column_end":24},"alias_span":null,"name":"Set","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":336},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1609,"byte_end":1618,"line_start":52,"line_end":52,"column_start":26,"column_end":35},"alias_span":null,"name":"SetCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":307},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1620,"byte_end":1629,"line_start":52,"line_end":52,"column_start":37,"column_end":46},"alias_span":null,"name":"SetForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1631,"byte_end":1638,"line_start":52,"line_end":52,"column_start":48,"column_end":55},"alias_span":null,"name":"SetIter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":0,"byte_end":5807,"line_start":1,"line_end":199,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":117},{"krate":0,"index":185},{"krate":0,"index":252},{"krate":0,"index":279},{"krate":0,"index":374},{"krate":0,"index":379},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":444},{"krate":0,"index":455},{"krate":0,"index":454},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":471},{"krate":0,"index":404},{"krate":0,"index":406}],"decl_id":null,"docs":" A forest of B+-trees.","sig":null,"attributes":[{"value":"! A forest of B+-trees.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":26,"byte_end":29,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate provides a data structures representing a set of small ordered sets or maps.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":30,"byte_end":121,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"! It is implemented as a forest of B+-trees all allocating nodes out of the same pool.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":122,"byte_end":210,"line_start":4,"line_end":4,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":211,"byte_end":214,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! **These are not general purpose data structures that are somehow magically faster that the","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":215,"byte_end":309,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"! standard library's `BTreeSet` and `BTreeMap` types.**","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":310,"byte_end":367,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":368,"byte_end":371,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The tradeoffs are different:","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":372,"byte_end":404,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":405,"byte_end":408,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! - Keys and values are expected to be small and copyable. We optimize for 32-bit types.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":409,"byte_end":499,"line_start":11,"line_end":11,"column_start":1,"column_end":91}},{"value":"! - A comparator object is used to compare keys, allowing smaller \"context free\" keys.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":500,"byte_end":588,"line_start":12,"line_end":12,"column_start":1,"column_end":89}},{"value":"! - Empty trees have a very small 32-bit footprint.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":589,"byte_end":642,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"! - All the trees in a forest can be cleared in constant time.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":643,"byte_end":707,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":709,"byte_end":776,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":777,"byte_end":807,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"no_std","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":1288,"byte_end":1298,"line_start":33,"line_end":33,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6584,"byte_end":6593,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"MapForest","qualname":"::map::MapForest","value":"MapForest {  }","parent":null,"children":[{"krate":0,"index":40}],"decl_id":null,"docs":" Memory pool for a forest of `Map` instances.\n","sig":null,"attributes":[{"value":"/ Memory pool for a forest of `Map` instances.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6524,"byte_end":6572,"line_start":33,"line_end":33,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6781,"byte_end":6784,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<MapForest<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[{"value":"/ Create a new empty forest.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6739,"byte_end":6769,"line_start":47,"line_end":47,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7018,"byte_end":7023,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"clear","qualname":"<MapForest<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all maps in the forest.","sig":null,"attributes":[{"value":"/ Clear all maps in the forest.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6869,"byte_end":6902,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6907,"byte_end":6910,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ All `Map` instances belong to this forest are invalidated and should no longer be used.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6915,"byte_end":7006,"line_start":56,"line_end":56,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":408},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7523,"byte_end":7526,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":" B-tree mapping from `K` to `V`.","sig":null,"attributes":[{"value":"/ B-tree mapping from `K` to `V`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7074,"byte_end":7109,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7110,"byte_end":7113,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose replacement for `BTreeMap`. See the [module","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7114,"byte_end":7191,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/ documentation](index.html) for more information about design tradeoffs.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7192,"byte_end":7267,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7268,"byte_end":7271,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Maps can be cloned, but that operation should only be used as part of cloning the whole forest","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7272,"byte_end":7370,"line_start":67,"line_end":67,"column_start":1,"column_end":99}},{"value":"/ they belong to. *Cloning a map does not allocate new memory for the clone*. It creates an alias","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7371,"byte_end":7470,"line_start":68,"line_end":68,"column_start":1,"column_end":100}},{"value":"/ of the same memory.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7471,"byte_end":7494,"line_start":69,"line_end":69,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7726,"byte_end":7729,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty map.\n","sig":null,"attributes":[{"value":"/ Make an empty map.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7692,"byte_end":7714,"line_start":85,"line_end":85,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7879,"byte_end":7887,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty map?\n","sig":null,"attributes":[{"value":"/ Is this an empty map?","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7842,"byte_end":7867,"line_start":93,"line_end":93,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7991,"byte_end":7994,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"get","qualname":"<Map<K, V>>::get","value":"fn <C> (&self, key: K, forest: &MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the value stored for `key`.\n","sig":null,"attributes":[{"value":"/ Get the value stored for `key`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7944,"byte_end":7979,"line_start":98,"line_end":98,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8516,"byte_end":8527,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"get_or_less","qualname":"<Map<K, V>>::get_or_less","value":"fn <C> (&self, key: K, forest: &MapForest<K, V>, comp: &C) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Look up the value stored for `key`.","sig":null,"attributes":[{"value":"/ Look up the value stored for `key`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8213,"byte_end":8252,"line_start":105,"line_end":105,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8257,"byte_end":8260,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ If it exists, return the stored key-value pair.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8265,"byte_end":8316,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8321,"byte_end":8324,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Otherwise, return the last key-value pair with a key that is less than or equal to `key`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8329,"byte_end":8422,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8427,"byte_end":8430,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If no stored keys are less than or equal to `key`, return `None`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8435,"byte_end":8504,"line_start":111,"line_end":111,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9041,"byte_end":9047,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<K, V>>::insert","value":"fn <C> (&mut self, key: K, value: V, forest: &mut MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `key, value` into the map and return the old value stored for `key`, if any.\n","sig":null,"attributes":[{"value":"/ Insert `key, value` into the map and return the old value stored for `key`, if any.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":8942,"byte_end":9029,"line_start":127,"line_end":127,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9350,"byte_end":9356,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<K, V>>::remove","value":"fn <C> (&mut self, key: K, forest: &mut MapForest<K, V>, comp: &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the map and return the removed value for `key`, if any.\n","sig":null,"attributes":[{"value":"/ Remove `key` from the map and return the removed value for `key`, if any.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9261,"byte_end":9338,"line_start":138,"line_end":138,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9683,"byte_end":9688,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map<K, V>>::clear","value":"fn (&mut self, forest: &mut MapForest<K, V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[{"value":"/ Remove all entries.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9648,"byte_end":9671,"line_start":153,"line_end":153,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":10070,"byte_end":10076,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"retain","qualname":"<Map<K, V>>::retain","value":"fn <F> (&mut self, forest: &mut MapForest<K, V>, mut predicate: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9842,"byte_end":9899,"line_start":160,"line_end":160,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9904,"byte_end":9907,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Remove all key-value pairs where the predicate returns false.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9912,"byte_end":9977,"line_start":162,"line_end":162,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9982,"byte_end":9985,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The predicate is allowed to update the values stored in the map.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":9990,"byte_end":10058,"line_start":164,"line_end":164,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":10866,"byte_end":10872,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Map<K, V>>::cursor","value":"fn <'a, C> (&'a mut self, forest: &'a mut MapForest<K, V>, comp: &'a C) -> MapCursor<'a, K, V, C>","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this map. The cursor is initially positioned off the end of\n the map.\n","sig":null,"attributes":[{"value":"/ Create a cursor for navigating this map. The cursor is initially positioned off the end of","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":10743,"byte_end":10837,"line_start":186,"line_end":186,"column_start":5,"column_end":99}},{"value":"/ the map.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":10842,"byte_end":10854,"line_start":187,"line_end":187,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11154,"byte_end":11158,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"iter","qualname":"<Map<K, V>>::iter","value":"fn <'a> (&'a self, forest: &'a MapForest<K, V>) -> MapIter<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this map. The iterator type is `(K, V)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator traversing this map. The iterator type is `(K, V)`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11068,"byte_end":11142,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":73},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12529,"byte_end":12538,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"MapCursor","qualname":"::map::MapCursor","value":"MapCursor {  }","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" A position in a `Map` used to navigate and modify the ordered map.","sig":null,"attributes":[{"value":"/ A position in a `Map` used to navigate and modify the ordered map.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12310,"byte_end":12380,"line_start":246,"line_end":246,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12381,"byte_end":12384,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ A cursor always points at a key-value pair in the map, or \"off the end\" which is a position","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12385,"byte_end":12480,"line_start":248,"line_end":248,"column_start":1,"column_end":96}},{"value":"/ after the last entry in the map.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12481,"byte_end":12517,"line_start":249,"line_end":249,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13235,"byte_end":13243,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MapCursor>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty map?\n","sig":null,"attributes":[{"value":"/ Is this cursor pointing to an empty map?","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13179,"byte_end":13223,"line_start":278,"line_end":278,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13569,"byte_end":13573,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"next","qualname":"<MapCursor>::next","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next key-value pair and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the next key-value pair and return it.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13300,"byte_end":13357,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13362,"byte_end":13365,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ If the cursor reaches the end, return `None` and leave the cursor at the off-the-end","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13370,"byte_end":13458,"line_start":285,"line_end":285,"column_start":5,"column_end":93}},{"value":"/ position.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13463,"byte_end":13476,"line_start":286,"line_end":286,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13827,"byte_end":13831,"line_start":295,"line_end":295,"column_start":12,"column_end":16},"name":"prev","qualname":"<MapCursor>::prev","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous key-value pair and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the previous key-value pair and return it.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13650,"byte_end":13711,"line_start":292,"line_end":292,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13716,"byte_end":13719,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ If the cursor is already pointing at the first entry, leave it there and return `None`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13724,"byte_end":13815,"line_start":294,"line_end":294,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14051,"byte_end":14054,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"key","qualname":"<MapCursor>::key","value":"fn (&self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current key, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get the current key, or `None` if the cursor is at the end.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":13976,"byte_end":14039,"line_start":301,"line_end":301,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14298,"byte_end":14303,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"value","qualname":"<MapCursor>::value","value":"fn (&self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get the current value, or `None` if the cursor is at the end.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14221,"byte_end":14286,"line_start":308,"line_end":308,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14570,"byte_end":14579,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<MapCursor>::value_mut","value":"fn (&mut self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the current value, or `None` if the cursor is at the end.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14470,"byte_end":14558,"line_start":315,"line_end":315,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15031,"byte_end":15035,"line_start":328,"line_end":328,"column_start":12,"column_end":16},"name":"goto","qualname":"<MapCursor>::goto","value":"fn (&mut self, elem: K) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `key`.","sig":null,"attributes":[{"value":"/ Move this cursor to `key`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14759,"byte_end":14789,"line_start":322,"line_end":322,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14794,"byte_end":14797,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ If `key` is in the map, place the cursor at `key` and return the corresponding value.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14802,"byte_end":14891,"line_start":324,"line_end":324,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14896,"byte_end":14899,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ If `key` is not in the set, place the cursor at the next larger element (or the end) and","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":14904,"byte_end":14996,"line_start":326,"line_end":326,"column_start":5,"column_end":97}},{"value":"/ return `None`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15001,"byte_end":15019,"line_start":327,"line_end":327,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15367,"byte_end":15377,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<MapCursor>::goto_first","value":"fn (&mut self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[{"value":"/ Move this cursor to the first element.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15313,"byte_end":15355,"line_start":338,"line_end":338,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15744,"byte_end":15750,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"insert","qualname":"<MapCursor>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `(key, value))` into the map and leave the cursor at the inserted pair.","sig":null,"attributes":[{"value":"/ Insert `(key, value))` into the map and leave the cursor at the inserted pair.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15480,"byte_end":15562,"line_start":343,"line_end":343,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15567,"byte_end":15570,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ If the map did not contain `key`, return `None`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15575,"byte_end":15627,"line_start":345,"line_end":345,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15632,"byte_end":15635,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ If `key` is already present, replace the existing with `value` and return the old value.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":15640,"byte_end":15732,"line_start":347,"line_end":347,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16682,"byte_end":16688,"line_start":371,"line_end":371,"column_start":12,"column_end":18},"name":"remove","qualname":"<MapCursor>::remove","value":"fn (&mut self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current entry (if any) and return the mapped value.\n This advances the cursor to the next entry after the removed one.\n","sig":null,"attributes":[{"value":"/ Remove the current entry (if any) and return the mapped value.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16530,"byte_end":16596,"line_start":369,"line_end":369,"column_start":5,"column_end":71}},{"value":"/ This advances the cursor to the next entry after the removed one.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16601,"byte_end":16670,"line_start":370,"line_end":370,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16940,"byte_end":16947,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"MapIter","qualname":"::map::MapIter","value":"MapIter {  }","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":" An iterator visiting the key-value pairs of a `Map`.\n","sig":null,"attributes":[{"value":"/ An iterator visiting the key-value pairs of a `Map`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":16872,"byte_end":16928,"line_start":380,"line_end":380,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":307},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104641,"byte_end":104650,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"SetForest","qualname":"::set::SetForest","value":"SetForest {  }","parent":null,"children":[{"krate":0,"index":309}],"decl_id":null,"docs":" Memory pool for a forest of `Set` instances.\n","sig":null,"attributes":[{"value":"/ Memory pool for a forest of `Set` instances.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104581,"byte_end":104629,"line_start":32,"line_end":32,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104800,"byte_end":104803,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<SetForest<K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[{"value":"/ Create a new empty forest.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104758,"byte_end":104788,"line_start":44,"line_end":44,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105037,"byte_end":105042,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"clear","qualname":"<SetForest<K>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all sets in the forest.","sig":null,"attributes":[{"value":"/ Clear all sets in the forest.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104888,"byte_end":104921,"line_start":51,"line_end":51,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104926,"byte_end":104929,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ All `Set` instances belong to this forest are invalidated and should no longer be used.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104934,"byte_end":105025,"line_start":53,"line_end":53,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":437},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105587,"byte_end":105590,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"Set","qualname":"::set::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" B-tree representing an ordered set of `K`s using `C` for comparing elements.","sig":null,"attributes":[{"value":"/ B-tree representing an ordered set of `K`s using `C` for comparing elements.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105093,"byte_end":105173,"line_start":59,"line_end":59,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105174,"byte_end":105177,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose replacement for `BTreeSet`. See the [module","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105178,"byte_end":105255,"line_start":61,"line_end":61,"column_start":1,"column_end":78}},{"value":"/ documentation](index.html) for more information about design tradeoffs.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105256,"byte_end":105331,"line_start":62,"line_end":62,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105332,"byte_end":105335,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Sets can be cloned, but that operation should only be used as part of cloning the whole forest","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105336,"byte_end":105434,"line_start":64,"line_end":64,"column_start":1,"column_end":99}},{"value":"/ they belong to. *Cloning a set does not allocate new memory for the clone*. It creates an alias","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105435,"byte_end":105534,"line_start":65,"line_end":65,"column_start":1,"column_end":100}},{"value":"/ of the same memory.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105535,"byte_end":105558,"line_start":66,"line_end":66,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105750,"byte_end":105753,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Set<K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty set.\n","sig":null,"attributes":[{"value":"/ Make an empty set.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105716,"byte_end":105738,"line_start":80,"line_end":80,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105903,"byte_end":105911,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Set<K>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty set?\n","sig":null,"attributes":[{"value":"/ Is this an empty set?","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105866,"byte_end":105891,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106012,"byte_end":106020,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"contains","qualname":"<Set<K>>::contains","value":"fn <C> (&self, key: K, forest: &SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the set contain `key`?.\n","sig":null,"attributes":[{"value":"/ Does the set contain `key`?.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105968,"byte_end":106000,"line_start":93,"line_end":93,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106464,"byte_end":106470,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"insert","qualname":"<Set<K>>::insert","value":"fn <C> (&mut self, key: K, forest: &mut SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `key` into the set.","sig":null,"attributes":[{"value":"/ Try to insert `key` into the set.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106254,"byte_end":106291,"line_start":101,"line_end":101,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106296,"byte_end":106299,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ If the set did not contain `key`, insert it and return true.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106304,"byte_end":106368,"line_start":103,"line_end":103,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106373,"byte_end":106376,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ If `key` is already present, don't change the set and return false.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106381,"byte_end":106452,"line_start":105,"line_end":105,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106776,"byte_end":106782,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<Set<K>>::remove","value":"fn <C> (&mut self, key: K, forest: &mut SetForest<K>, comp: &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the set and return true.","sig":null,"attributes":[{"value":"/ Remove `key` from the set and return true.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106651,"byte_end":106697,"line_start":115,"line_end":115,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106702,"byte_end":106705,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ If `key` was not present in the set, return false.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":106710,"byte_end":106764,"line_start":117,"line_end":117,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107110,"byte_end":107115,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set<K>>::clear","value":"fn (&mut self, forest: &mut SetForest<K>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[{"value":"/ Remove all entries.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107075,"byte_end":107098,"line_start":133,"line_end":133,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107406,"byte_end":107412,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"retain","qualname":"<Set<K>>::retain","value":"fn <F> (&mut self, forest: &mut SetForest<K>, mut predicate: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107266,"byte_end":107323,"line_start":140,"line_end":140,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107328,"byte_end":107331,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Remove all elements where the predicate returns false.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107336,"byte_end":107394,"line_start":142,"line_end":142,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108077,"byte_end":108083,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Set<K>>::cursor","value":"fn <'a, C> (&'a mut self, forest: &'a mut SetForest<K>, comp: &'a C) -> SetCursor<'a, K, C>","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this set. The cursor is initially positioned off the end of\n the set.\n","sig":null,"attributes":[{"value":"/ Create a cursor for navigating this set. The cursor is initially positioned off the end of","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":107954,"byte_end":108048,"line_start":160,"line_end":160,"column_start":5,"column_end":99}},{"value":"/ the set.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108053,"byte_end":108065,"line_start":161,"line_end":161,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108354,"byte_end":108358,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"iter","qualname":"<Set<K>>::iter","value":"fn <'a> (&'a self, forest: &'a SetForest<K>) -> SetIter<'a, K>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this set. The iterator type is `K`.\n","sig":null,"attributes":[{"value":"/ Create an iterator traversing this set. The iterator type is `K`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108273,"byte_end":108342,"line_start":170,"line_end":170,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108872,"byte_end":108881,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"name":"SetCursor","qualname":"::set::SetCursor","value":"SetCursor {  }","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"decl_id":null,"docs":" A position in a `Set` used to navigate and modify the ordered set.","sig":null,"attributes":[{"value":"/ A position in a `Set` used to navigate and modify the ordered set.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108657,"byte_end":108727,"line_start":189,"line_end":189,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108728,"byte_end":108731,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ A cursor always points at an element in the set, or \"off the end\" which is a position after the","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108732,"byte_end":108831,"line_start":191,"line_end":191,"column_start":1,"column_end":100}},{"value":"/ last element in the set.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108832,"byte_end":108860,"line_start":192,"line_end":192,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109522,"byte_end":109530,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SetCursor>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty set?\n","sig":null,"attributes":[{"value":"/ Is this cursor pointing to an empty set?","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109466,"byte_end":109510,"line_start":219,"line_end":219,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109849,"byte_end":109853,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"next","qualname":"<SetCursor>::next","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next element and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the next element and return it.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109587,"byte_end":109637,"line_start":224,"line_end":224,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109642,"byte_end":109645,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ If the cursor reaches the end, return `None` and leave the cursor at the off-the-end","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109650,"byte_end":109738,"line_start":226,"line_end":226,"column_start":5,"column_end":93}},{"value":"/ position.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109743,"byte_end":109756,"line_start":227,"line_end":227,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110113,"byte_end":110117,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"prev","qualname":"<SetCursor>::prev","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous element and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the previous element and return it.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109941,"byte_end":109995,"line_start":233,"line_end":233,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110000,"byte_end":110003,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ If the cursor is already pointing at the first element, leave it there and return `None`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110008,"byte_end":110101,"line_start":235,"line_end":235,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110352,"byte_end":110356,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"elem","qualname":"<SetCursor>::elem","value":"fn (&self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current element, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get the current element, or `None` if the cursor is at the end.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110273,"byte_end":110340,"line_start":242,"line_end":242,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110779,"byte_end":110783,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"goto","qualname":"<SetCursor>::goto","value":"fn (&mut self, elem: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `elem`.","sig":null,"attributes":[{"value":"/ Move this cursor to `elem`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110523,"byte_end":110554,"line_start":249,"line_end":249,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110559,"byte_end":110562,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If `elem` is in the set, place the cursor at `elem` and return true.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110567,"byte_end":110639,"line_start":251,"line_end":251,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110644,"byte_end":110647,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If `elem` is not in the set, place the cursor at the next larger element (or the end) and","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110652,"byte_end":110745,"line_start":253,"line_end":253,"column_start":5,"column_end":98}},{"value":"/ return false.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":110750,"byte_end":110767,"line_start":254,"line_end":254,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111219,"byte_end":111229,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<SetCursor>::goto_first","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[{"value":"/ Move this cursor to the first element.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111165,"byte_end":111207,"line_start":269,"line_end":269,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111633,"byte_end":111639,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"insert","qualname":"<SetCursor>::insert","value":"fn (&mut self, elem: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `elem` into the set and leave the cursor at the inserted element.","sig":null,"attributes":[{"value":"/ Try to insert `elem` into the set and leave the cursor at the inserted element.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111332,"byte_end":111415,"line_start":274,"line_end":274,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111420,"byte_end":111423,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ If the set did not contain `elem`, insert it and return true.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111428,"byte_end":111493,"line_start":276,"line_end":276,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111498,"byte_end":111501,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If `elem` is already present, don't change the set, place the cursor at `goto(elem)`, and","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111506,"byte_end":111599,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ return false.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":111604,"byte_end":111621,"line_start":279,"line_end":279,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":112499,"byte_end":112505,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"remove","qualname":"<SetCursor>::remove","value":"fn (&mut self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current element (if any) and return it.\n This advances the cursor to the next element after the removed one.\n","sig":null,"attributes":[{"value":"/ Remove the current element (if any) and return it.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":112357,"byte_end":112411,"line_start":300,"line_end":300,"column_start":5,"column_end":59}},{"value":"/ This advances the cursor to the next element after the removed one.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":112416,"byte_end":112487,"line_start":301,"line_end":301,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113161,"byte_end":113168,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"SetIter","qualname":"::set::SetIter","value":"SetIter {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"decl_id":null,"docs":" An iterator visiting the elements of a `Set`.\n","sig":null,"attributes":[{"value":"/ An iterator visiting the elements of a `Set`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113100,"byte_end":113149,"line_start":329,"line_end":329,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":389},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2296,"byte_end":2306,"line_start":71,"line_end":71,"column_start":11,"column_end":21},"name":"Comparator","qualname":"::Comparator","value":"Comparator<K>","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" Key comparator.","sig":null,"attributes":[{"value":"/ Key comparator.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2133,"byte_end":2152,"line_start":67,"line_end":67,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2153,"byte_end":2156,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Keys don't need to implement `Ord`. They are compared using a comparator object which","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2157,"byte_end":2246,"line_start":69,"line_end":69,"column_start":1,"column_end":90}},{"value":"/ provides a context for comparison.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2247,"byte_end":2285,"line_start":70,"line_end":70,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2450,"byte_end":2453,"line_start":78,"line_end":78,"column_start":8,"column_end":11},"name":"cmp","qualname":"::Comparator::cmp","value":"fn (&self, a: K, b: K) -> Ordering","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" Compare keys `a` and `b`.","sig":null,"attributes":[{"value":"/ Compare keys `a` and `b`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2335,"byte_end":2364,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2369,"byte_end":2372,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ This relation must provide a total ordering or the key space.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2377,"byte_end":2442,"line_start":77,"line_end":77,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2805,"byte_end":2811,"line_start":86,"line_end":86,"column_start":8,"column_end":14},"name":"search","qualname":"::Comparator::search","value":"fn (&self, k: K, s: &[K]) -> Result<usize, usize>","parent":{"krate":0,"index":389},"children":[],"decl_id":null,"docs":" Binary search for `k` in an ordered slice.","sig":null,"attributes":[{"value":"/ Binary search for `k` in an ordered slice.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2491,"byte_end":2537,"line_start":80,"line_end":80,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2542,"byte_end":2545,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Assume that `s` is already sorted according to this ordering, search for the key `k`.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2550,"byte_end":2639,"line_start":82,"line_end":82,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2644,"byte_end":2647,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(idx)` if `k` was found in the slice or `Err(idx)` with the position where it","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2652,"byte_end":2744,"line_start":84,"line_end":84,"column_start":5,"column_end":97}},{"value":"/ should be inserted to preserve the ordering.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":2749,"byte_end":2797,"line_start":85,"line_end":85,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3260,"byte_end":3263,"line_start":104,"line_end":104,"column_start":10,"column_end":13},"name":"Key","qualname":"::Forest::Key","value":"type Key: Copy;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" The key type is present for both sets and maps.\n","sig":null,"attributes":[{"value":"/ The key type is present for both sets and maps.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3199,"byte_end":3250,"line_start":103,"line_end":103,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":399},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3322,"byte_end":3327,"line_start":107,"line_end":107,"column_start":10,"column_end":15},"name":"Value","qualname":"::Forest::Value","value":"type Value: Copy;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" The value type is `()` for sets.\n","sig":null,"attributes":[{"value":"/ The value type is `()` for sets.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3276,"byte_end":3312,"line_start":106,"line_end":106,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":400},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3390,"byte_end":3398,"line_start":110,"line_end":110,"column_start":10,"column_end":18},"name":"LeafKeys","qualname":"::Forest::LeafKeys","value":"type LeafKeys: Copy + BorrowMut<[Self::Key]>;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" An array of keys for the leaf nodes.\n","sig":null,"attributes":[{"value":"/ An array of keys for the leaf nodes.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3340,"byte_end":3380,"line_start":109,"line_end":109,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":401},"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3488,"byte_end":3498,"line_start":113,"line_end":113,"column_start":10,"column_end":20},"name":"LeafValues","qualname":"::Forest::LeafValues","value":"type LeafValues: Copy + BorrowMut<[Self::Value]>;","parent":{"krate":0,"index":397},"children":[],"decl_id":null,"docs":" An array of values for the leaf nodes.\n","sig":null,"attributes":[{"value":"/ An array of values for the leaf nodes.","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/lib.rs","byte_start":3436,"byte_end":3478,"line_start":112,"line_end":112,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6160,"byte_end":6168,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6685,"byte_end":6694,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7644,"byte_end":7647,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11382,"byte_end":11385,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12775,"byte_end":12784,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":17135,"byte_end":17142,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36555,"byte_end":36563,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36596,"byte_end":36604,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36679,"byte_end":36687,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":54484,"byte_end":54491,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55075,"byte_end":55083,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55206,"byte_end":55207,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55337,"byte_end":55345,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64754,"byte_end":64758,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64968,"byte_end":64972,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":96435,"byte_end":96443,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103556,"byte_end":103564,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103730,"byte_end":103738,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104203,"byte_end":104211,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104720,"byte_end":104729,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105684,"byte_end":105687,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108573,"byte_end":108576,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109088,"byte_end":109097,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113326,"byte_end":113333,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6160,"byte_end":6168,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":19},"to":{"krate":0,"index":397}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":6685,"byte_end":6694,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":37},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":7644,"byte_end":7647,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":11382,"byte_end":11385,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":408},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":12775,"byte_end":12784,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":73},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/map.rs","byte_start":17135,"byte_end":17142,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":104},"to":{"krate":1,"index":4852}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36555,"byte_end":36563,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":1914}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36596,"byte_end":36604,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":1606}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":36679,"byte_end":36687,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":54484,"byte_end":54491,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55075,"byte_end":55083,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":469},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55206,"byte_end":55207,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":180},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/node.rs","byte_start":55337,"byte_end":55345,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":6074}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64754,"byte_end":64758,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":198},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/path.rs","byte_start":64968,"byte_end":64972,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":96435,"byte_end":96443,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103556,"byte_end":103564,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":2154}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/pool.rs","byte_start":103730,"byte_end":103738,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":261},"to":{"krate":1,"index":2158}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104203,"byte_end":104211,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":291},"to":{"krate":0,"index":397}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":104720,"byte_end":104729,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":105684,"byte_end":105687,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":108573,"byte_end":108576,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":437},"to":{"krate":1,"index":1895}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":109088,"byte_end":109097,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.59.0/src/set.rs","byte_start":113326,"byte_end":113333,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":4852}}]}