{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0","program":"/home/hskang9/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","base64","--edition=2018","/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=65dda43108c1bbf5","-C","extra-filename=-65dda43108c1bbf5","--out-dir","/home/hskang9/terra-contracts/ico/target/rls/debug/deps","-L","dependency=/home/hskang9/terra-contracts/ico/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/hskang9/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/hskang9/terra-contracts/ico/target/rls/debug/deps/libbase64-65dda43108c1bbf5.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[2171810114664782184,9405394793630904672]},"crate_root":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src","external_crates":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15171822389981698586,9596930288317159773]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8371738565553744270,17943531712744420027]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17468180561489458258,7285327718060701271]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14551538593801126895,13478667531910088620]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16022708609364593127,529027819734980321]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[18024135037275500963,3187671833432925572]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5194268306266264186,14551347693776345482]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18097577876301876973,855323625195415836]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5106557709654100294,13294098602154984522]}}],"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":0,"byte_end":7018,"line_start":1,"line_end":203,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":83},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/mod.rs","byte_start":57135,"byte_end":57148,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":67}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3488,"byte_end":3507,"line_start":85,"line_end":85,"column_start":24,"column_end":43},"alias_span":null,"name":"encode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3587,"byte_end":3593,"line_start":87,"line_end":87,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3595,"byte_end":3608,"line_start":87,"line_end":87,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3610,"byte_end":3627,"line_start":87,"line_end":87,"column_start":48,"column_end":65},"alias_span":null,"name":"encode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":175},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3721,"byte_end":3727,"line_start":91,"line_end":91,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3729,"byte_end":3742,"line_start":91,"line_end":91,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3744,"byte_end":3761,"line_start":91,"line_end":91,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":183},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3788,"byte_end":3807,"line_start":92,"line_end":92,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3809,"byte_end":3820,"line_start":92,"line_end":92,"column_start":46,"column_end":57},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":0,"byte_end":7018,"line_start":1,"line_end":203,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":37},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":123},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":248},{"krate":0,"index":258},{"krate":0,"index":257},{"krate":0,"index":255},{"krate":0,"index":200},{"krate":0,"index":260},{"krate":0,"index":267},{"krate":0,"index":266},{"krate":0,"index":264},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" # Configs","sig":null,"attributes":[{"value":"! # Configs","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":14,"byte_end":17,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! There isn't just one type of Base64; that would be too simple. You need to choose a character","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":18,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! set (standard, URL-safe, etc) and padding suffix (yes/no).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":116,"byte_end":178,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"! The `Config` struct encapsulates this info. There are some common configs included: `STANDARD`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":179,"byte_end":278,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"! `URL_SAFE`, etc. You can also make your own `Config` if needed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":279,"byte_end":346,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":347,"byte_end":350,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The functions that don't have `config` in the name (e.g. `encode()` and `decode()`) use the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":351,"byte_end":446,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"! `STANDARD` config .","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":447,"byte_end":470,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":471,"byte_end":474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! The functions that write to a slice (the ones that end in `_slice`) are generally the fastest","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":475,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"! because they don't need to resize anything. If it fits in your workflow and you care about","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":573,"byte_end":667,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"! performance, keep using the same buffer (growing as need be) and use the `_slice` methods for","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":668,"byte_end":765,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"! the best performance.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":766,"byte_end":791,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":792,"byte_end":795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Encoding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":796,"byte_end":810,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":811,"byte_end":814,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Several different encoding functions are available to you depending on your desire for","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":815,"byte_end":905,"line_start":18,"line_end":18,"column_start":1,"column_end":91}},{"value":"! convenience vs performance.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":906,"byte_end":937,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":938,"byte_end":941,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! | Function                | Output                       | Allocates                      |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":942,"byte_end":1037,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"! | ----------------------- | ---------------------------- | ------------------------------ |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1038,"byte_end":1133,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"! | `encode`                | Returns a new `String`       | Always                         |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1134,"byte_end":1229,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"! | `encode_config`         | Returns a new `String`       | Always                         |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1230,"byte_end":1325,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"! | `encode_config_buf`     | Appends to provided `String` | Only if `String` needs to grow |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1326,"byte_end":1421,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"! | `encode_config_slice`   | Writes to provided `&[u8]`   | Never                          |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1422,"byte_end":1517,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1518,"byte_end":1521,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! All of the encoding functions that take a `Config` will pad as per the config.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1522,"byte_end":1604,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1605,"byte_end":1608,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! # Decoding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1609,"byte_end":1623,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! Just as for encoding, there are different decoding functions available.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1628,"byte_end":1703,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1704,"byte_end":1707,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! | Function                | Output                        | Allocates                      |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1708,"byte_end":1804,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"! | ----------------------- | ----------------------------- | ------------------------------ |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1805,"byte_end":1901,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! | `decode`                | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1902,"byte_end":1998,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! | `decode_config`         | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":1999,"byte_end":2095,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"! | `decode_config_buf`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2096,"byte_end":2192,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"! | `decode_config_slice`   | Writes to provided `&[u8]`    | Never                          |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2193,"byte_end":2289,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2290,"byte_end":2293,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Unlike encoding, where all possible input is valid, decoding can fail (see `DecodeError`).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2294,"byte_end":2388,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2389,"byte_end":2392,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! Input can be invalid because it has invalid characters or invalid padding. (No padding at all is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2393,"byte_end":2493,"line_start":43,"line_end":43,"column_start":1,"column_end":101}},{"value":"! valid, but excess padding is not.) Whitespace in the input is invalid.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2494,"byte_end":2568,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2569,"byte_end":2572,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! # Panics","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2573,"byte_end":2585,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2586,"byte_end":2589,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! If length calculations result in overflowing `usize`, a panic will result.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2590,"byte_end":2668,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2669,"byte_end":2672,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! The `_slice` flavors of encode or decode will panic if the provided output slice is too small,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2673,"byte_end":2771,"line_start":50,"line_end":50,"column_start":1,"column_end":99}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_results,\n       variant_size_differences, warnings)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":2842,"byte_end":3032,"line_start":53,"line_end":62,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3033,"byte_end":3056,"line_start":63,"line_end":63,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":7345,"byte_end":7350,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[{"value":"! Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14565,"byte_end":14665,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14666,"byte_end":14669,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14670,"byte_end":14677,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"! use base64::display::Base64Display;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14678,"byte_end":14717,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14718,"byte_end":14721,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! let data = vec![0x0, 0x1, 0x2, 0x3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14722,"byte_end":14762,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"! let wrapper = Base64Display::with_config(&data, base64::STANDARD);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14763,"byte_end":14833,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14834,"byte_end":14837,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! assert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14838,"byte_end":14905,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":14906,"byte_end":14913,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":46},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15142,"byte_end":15155,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[{"value":"/ A convenience wrapper for base64'ing bytes into a format string without heap allocation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15038,"byte_end":15130,"line_start":17,"line_end":17,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15322,"byte_end":15333,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Base64Display>::with_config","value":"pub fn with_config(&[u8], Config) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a `Base64Display` with the provided config.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15256,"byte_end":15310,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":122}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3402,"byte_end":3436,"line_start":81,"line_end":81,"column_start":1,"column_end":35}},{"value":"! Implementations of `io::Write` to transparently handle base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/mod.rs","byte_start":57032,"byte_end":57098,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":83},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":59200,"byte_end":59213,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":57600,"byte_end":57694,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":57695,"byte_end":57698,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Because base64 has special handling for the end of the input data (padding, etc), there's a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":57699,"byte_end":57794,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ `finish()` method on this type that encodes any leftover input bytes and adds padding if","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":57795,"byte_end":57887,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ appropriate. It's called automatically when deallocated (see the `Drop` implementation), but","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":57888,"byte_end":57984,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ any error that occurs when invoking the underlying writer will be suppressed. If you want to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":57985,"byte_end":58081,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ handle such errors, call `finish()` yourself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58082,"byte_end":58131,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58132,"byte_end":58135,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58136,"byte_end":58150,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58151,"byte_end":58154,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58155,"byte_end":58162,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58163,"byte_end":58186,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58187,"byte_end":58190,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58191,"byte_end":58286,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ let mut wrapped_writer = Vec::new();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58287,"byte_end":58327,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/ {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58328,"byte_end":58333,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/     let mut enc = base64::write::EncoderWriter::new(","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58334,"byte_end":58390,"line_start":30,"line_end":30,"column_start":1,"column_end":57}},{"value":"/         &mut wrapped_writer, base64::STANDARD);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58391,"byte_end":58442,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58443,"byte_end":58446,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // handle errors as you normally would","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58447,"byte_end":58493,"line_start":33,"line_end":33,"column_start":1,"column_end":47}},{"value":"/     enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58494,"byte_end":58534,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/     // could leave this out to be called by Drop, if you don't care","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58535,"byte_end":58606,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/     // about handling errors","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58607,"byte_end":58639,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/     enc.finish().unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58640,"byte_end":58670,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58671,"byte_end":58674,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58675,"byte_end":58680,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58681,"byte_end":58684,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // base64 was written to the writer","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58685,"byte_end":58724,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(b\"YXNkZg==\", &wrapped_writer[..]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58725,"byte_end":58774,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58775,"byte_end":58778,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58779,"byte_end":58786,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58787,"byte_end":58790,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58791,"byte_end":58803,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58804,"byte_end":58807,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` after `finish()` is invalid and will panic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58808,"byte_end":58873,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58874,"byte_end":58877,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58878,"byte_end":58890,"line_start":50,"line_end":50,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58891,"byte_end":58894,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Base64 encoding itself does not generate errors, but errors from the wrapped writer will be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58895,"byte_end":58990,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ returned as per the contract of `Write`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":58991,"byte_end":59035,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":59036,"byte_end":59039,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":59040,"byte_end":59057,"line_start":55,"line_end":55,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":59058,"byte_end":59061,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ It has some minor performance loss compared to encoding slices (a couple percent).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":59062,"byte_end":59148,"line_start":57,"line_end":57,"column_start":1,"column_end":87}},{"value":"/ It does not do any heap allocation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":59149,"byte_end":59188,"line_start":58,"line_end":58,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":60727,"byte_end":60730,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter>::new","value":"pub fn new(&'a mut W, Config) -> EncoderWriter","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer `w`.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that will write to the provided delegate writer `w`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":60638,"byte_end":60715,"line_start":93,"line_end":93,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61640,"byte_end":61646,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter>::finish","value":"pub fn finish(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data and write it, including any trailing incomplete input","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61094,"byte_end":61186,"line_start":107,"line_end":107,"column_start":5,"column_end":97}},{"value":"/ triples and associated padding.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61191,"byte_end":61226,"line_start":108,"line_end":108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61231,"byte_end":61234,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes can be performed, as that would produce invalid","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61239,"byte_end":61328,"line_start":110,"line_end":110,"column_start":5,"column_end":94}},{"value":"/ base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61333,"byte_end":61344,"line_start":111,"line_end":111,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61349,"byte_end":61352,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This may write to the delegate writer multiple times if the delegate writer does not accept all input provided","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61357,"byte_end":61471,"line_start":113,"line_end":113,"column_start":5,"column_end":119}},{"value":"/ to its `write` each invocation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61476,"byte_end":61511,"line_start":114,"line_end":114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61516,"byte_end":61519,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61524,"byte_end":61536,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61541,"byte_end":61544,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of [`ErrorKind::Interrupted`] will be returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":61549,"byte_end":61628,"line_start":118,"line_end":118,"column_start":5,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72369,"byte_end":72375,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"pub fn encode<T: ?Sized + AsRef<[u8]>>(&T) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.\nConvenience for `encode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72023,"byte_end":72060,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72061,"byte_end":72081,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/Convenience for `encode_config(input, base64::STANDARD);`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72082,"byte_end":72143,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72144,"byte_end":72147,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72148,"byte_end":72160,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72161,"byte_end":72164,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72165,"byte_end":72175,"line_start":14,"line_end":14,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72176,"byte_end":72199,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72200,"byte_end":72203,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72204,"byte_end":72218,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode(b\"hello world\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72219,"byte_end":72267,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72268,"byte_end":72295,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72296,"byte_end":72300,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72301,"byte_end":72307,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72308,"byte_end":72361,"line_start":22,"line_end":22,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":134},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72890,"byte_end":72903,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"encode_config","qualname":"::encode::encode_config","value":"pub fn encode_config<T: ?Sized + AsRef<[u8]>>(&T, Config) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72462,"byte_end":72499,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72500,"byte_end":72520,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72521,"byte_end":72524,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72525,"byte_end":72537,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72538,"byte_end":72541,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72542,"byte_end":72552,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72553,"byte_end":72576,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72577,"byte_end":72580,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72581,"byte_end":72595,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode_config(b\"hello world~\", base64::STANDARD);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72596,"byte_end":72670,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72671,"byte_end":72698,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72699,"byte_end":72702,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/    let b64_url = base64::encode_config(b\"hello internet~\", base64::URL_SAFE);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72703,"byte_end":72784,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", b64_url);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72785,"byte_end":72816,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72817,"byte_end":72821,"line_start":41,"line_end":41,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72822,"byte_end":72828,"line_start":42,"line_end":42,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":72829,"byte_end":72882,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":136},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73874,"byte_end":73891,"line_start":75,"line_end":75,"column_start":8,"column_end":25},"name":"encode_config_buf","qualname":"::encode::encode_config_buf","value":"pub fn encode_config_buf<T: ?Sized + AsRef<[u8]>>(&T, Config, &mut String)","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer, which will grow the buffer if needed.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73330,"byte_end":73367,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/Writes into the supplied output buffer, which will grow the buffer if needed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73368,"byte_end":73448,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73449,"byte_end":73452,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73453,"byte_end":73465,"line_start":59,"line_end":59,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73466,"byte_end":73469,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73470,"byte_end":73480,"line_start":61,"line_end":61,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73481,"byte_end":73504,"line_start":62,"line_end":62,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73505,"byte_end":73508,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73509,"byte_end":73523,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/    let mut buf = String::new();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73524,"byte_end":73559,"line_start":65,"line_end":65,"column_start":1,"column_end":36}},{"value":"/    base64::encode_config_buf(b\"hello world~\", base64::STANDARD, &mut buf);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73560,"byte_end":73638,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73639,"byte_end":73666,"line_start":67,"line_end":67,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73667,"byte_end":73670,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/    buf.clear();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73671,"byte_end":73690,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/    base64::encode_config_buf(b\"hello internet~\", base64::URL_SAFE, &mut buf);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73691,"byte_end":73772,"line_start":70,"line_end":70,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73773,"byte_end":73800,"line_start":71,"line_end":71,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73801,"byte_end":73805,"line_start":72,"line_end":72,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73806,"byte_end":73812,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":73813,"byte_end":73866,"line_start":74,"line_end":74,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":138},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":75177,"byte_end":75196,"line_start":118,"line_end":118,"column_start":8,"column_end":27},"name":"encode_config_slice","qualname":"::encode::encode_config_slice","value":"pub fn encode_config_slice<T: ?Sized + AsRef<[u8]>>(&T, Config, &mut [u8])\n-> usize","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64.\n Writes into the supplied output buffer.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74267,"byte_end":74305,"line_start":88,"line_end":88,"column_start":1,"column_end":39}},{"value":"/ Writes into the supplied output buffer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74306,"byte_end":74349,"line_start":89,"line_end":89,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74350,"byte_end":74353,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74354,"byte_end":74450,"line_start":91,"line_end":91,"column_start":1,"column_end":97}},{"value":"/ or statically-allocated buffer).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74451,"byte_end":74487,"line_start":92,"line_end":92,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74488,"byte_end":74491,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74492,"byte_end":74504,"line_start":94,"line_end":94,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74505,"byte_end":74508,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ If `output` is too small to hold the encoded version of `input`, a panic will result.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74509,"byte_end":74598,"line_start":96,"line_end":96,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74599,"byte_end":74602,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74603,"byte_end":74616,"line_start":98,"line_end":98,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74617,"byte_end":74620,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74621,"byte_end":74632,"line_start":100,"line_end":100,"column_start":1,"column_end":12}},{"value":"/ extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74633,"byte_end":74657,"line_start":101,"line_end":101,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74658,"byte_end":74661,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74662,"byte_end":74677,"line_start":103,"line_end":103,"column_start":1,"column_end":16}},{"value":"/     let s = b\"hello internet!\";","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74678,"byte_end":74713,"line_start":104,"line_end":104,"column_start":1,"column_end":36}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74714,"byte_end":74747,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/     // make sure we'll have a slice big enough for base64 + padding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74748,"byte_end":74819,"line_start":106,"line_end":106,"column_start":1,"column_end":72}},{"value":"/     buf.resize(s.len() * 4 / 3 + 4, 0);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74820,"byte_end":74863,"line_start":107,"line_end":107,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74864,"byte_end":74867,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/     let bytes_written = base64::encode_config_slice(s,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74868,"byte_end":74926,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/                             base64::STANDARD, &mut buf);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74927,"byte_end":74987,"line_start":110,"line_end":110,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74988,"byte_end":74991,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     // shorten our vec down to just what was written","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":74992,"byte_end":75048,"line_start":112,"line_end":112,"column_start":1,"column_end":57}},{"value":"/     buf.resize(bytes_written, 0);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":75049,"byte_end":75086,"line_start":113,"line_end":113,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":75087,"byte_end":75090,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(s, base64::decode(&buf).unwrap().as_slice());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":75091,"byte_end":75155,"line_start":115,"line_end":115,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":75156,"byte_end":75161,"line_start":116,"line_end":116,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/encode.rs","byte_start":75162,"byte_end":75169,"line_start":117,"line_end":117,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":227},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96344,"byte_end":96355,"line_start":30,"line_end":30,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n","sig":null,"attributes":[{"value":"/ An invalid byte was found in the input. The offset and offending byte are provided.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96252,"byte_end":96339,"line_start":29,"line_end":29,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":231},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96416,"byte_end":96429,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n","sig":null,"attributes":[{"value":"/ The length of the input is invalid.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96372,"byte_end":96411,"line_start":31,"line_end":31,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":233},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96772,"byte_end":96789,"line_start":37,"line_end":37,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[{"value":"/ The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96435,"byte_end":96531,"line_start":33,"line_end":33,"column_start":5,"column_end":101}},{"value":"/ This is indicative of corrupted or truncated Base64.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96536,"byte_end":96592,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/ Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96597,"byte_end":96689,"line_start":35,"line_end":35,"column_start":5,"column_end":97}},{"value":"/ symbols that are in the alphabet but represent nonsensical encodings.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96694,"byte_end":96767,"line_start":36,"line_end":36,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":226},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96234,"byte_end":96245,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"pub enum DecodeError {\n\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    InvalidByte(usize, u8),\n\n    /// The length of the input is invalid.\n    InvalidLength,\n\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n    /// symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n}","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":231},{"krate":0,"index":233}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96144,"byte_end":96185,"line_start":26,"line_end":26,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":175},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98135,"byte_end":98141,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"pub fn decode<T: ?Sized + AsRef<[u8]>>(&T) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.\nConvenience `decode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97748,"byte_end":97790,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97791,"byte_end":97832,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/Convenience `decode_config(input, base64::STANDARD);`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97833,"byte_end":97890,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97891,"byte_end":97894,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97895,"byte_end":97907,"line_start":73,"line_end":73,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97908,"byte_end":97911,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97912,"byte_end":97922,"line_start":75,"line_end":75,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97923,"byte_end":97946,"line_start":76,"line_end":76,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97947,"byte_end":97950,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97951,"byte_end":97965,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97966,"byte_end":98029,"line_start":79,"line_end":79,"column_start":1,"column_end":64}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98030,"byte_end":98061,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98062,"byte_end":98066,"line_start":81,"line_end":81,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98067,"byte_end":98073,"line_start":82,"line_end":82,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98074,"byte_end":98127,"line_start":83,"line_end":83,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98749,"byte_end":98762,"line_start":105,"line_end":105,"column_start":8,"column_end":21},"name":"decode_config","qualname":"::decode::decode_config","value":"pub fn decode_config<T: ?Sized + AsRef<[u8]>>(&T, Config)\n-> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98250,"byte_end":98292,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98293,"byte_end":98334,"line_start":89,"line_end":89,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98335,"byte_end":98338,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98339,"byte_end":98351,"line_start":91,"line_end":91,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98352,"byte_end":98355,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98356,"byte_end":98366,"line_start":93,"line_end":93,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98367,"byte_end":98390,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98391,"byte_end":98394,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98395,"byte_end":98409,"line_start":96,"line_end":96,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode_config(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD).unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98410,"byte_end":98502,"line_start":97,"line_end":97,"column_start":1,"column_end":93}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98503,"byte_end":98534,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98535,"byte_end":98538,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/    let bytes_url = base64::decode_config(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE).unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98539,"byte_end":98639,"line_start":100,"line_end":100,"column_start":1,"column_end":101}},{"value":"/    println!(\"{:?}\", bytes_url);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98640,"byte_end":98675,"line_start":101,"line_end":101,"column_start":1,"column_end":36}},{"value":"/}","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98676,"byte_end":98680,"line_start":102,"line_end":102,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98681,"byte_end":98687,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":98688,"byte_end":98741,"line_start":104,"line_end":104,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99660,"byte_end":99677,"line_start":136,"line_end":136,"column_start":8,"column_end":25},"name":"decode_config_buf","qualname":"::decode::decode_config_buf","value":"pub fn decode_config_buf<T: ?Sized + AsRef<[u8]>>(&T, Config, &mut Vec<u8>)\n-> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nWrites into the supplied buffer to avoid allocation.\nReturns a Result containing an empty tuple, aka ().","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99007,"byte_end":99049,"line_start":114,"line_end":114,"column_start":1,"column_end":43}},{"value":"/Writes into the supplied buffer to avoid allocation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99050,"byte_end":99105,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/Returns a Result containing an empty tuple, aka ().","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99106,"byte_end":99160,"line_start":116,"line_end":116,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99161,"byte_end":99164,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99165,"byte_end":99177,"line_start":118,"line_end":118,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99178,"byte_end":99181,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99182,"byte_end":99192,"line_start":120,"line_end":120,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99193,"byte_end":99216,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99217,"byte_end":99220,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99221,"byte_end":99235,"line_start":123,"line_end":123,"column_start":1,"column_end":15}},{"value":"/    let mut buffer = Vec::<u8>::new();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99236,"byte_end":99277,"line_start":124,"line_end":124,"column_start":1,"column_end":42}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD, &mut buffer).unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99278,"byte_end":99375,"line_start":125,"line_end":125,"column_start":1,"column_end":98}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99376,"byte_end":99408,"line_start":126,"line_end":126,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99409,"byte_end":99412,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/    buffer.clear();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99413,"byte_end":99435,"line_start":128,"line_end":128,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99436,"byte_end":99439,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE, &mut buffer)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99440,"byte_end":99531,"line_start":130,"line_end":130,"column_start":1,"column_end":92}},{"value":"/        .unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99532,"byte_end":99553,"line_start":131,"line_end":131,"column_start":1,"column_end":22}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99554,"byte_end":99586,"line_start":132,"line_end":132,"column_start":1,"column_end":33}},{"value":"/}","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99587,"byte_end":99591,"line_start":133,"line_end":133,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99592,"byte_end":99598,"line_start":134,"line_end":134,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":99599,"byte_end":99652,"line_start":135,"line_end":135,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100943,"byte_end":100962,"line_start":172,"line_end":172,"column_start":8,"column_end":27},"name":"decode_config_slice","qualname":"::decode::decode_config_slice","value":"pub fn decode_config_slice<T: ?Sized + AsRef<[u8]>>(&T, Config, &mut [u8])\n-> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100452,"byte_end":100504,"line_start":163,"line_end":163,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100505,"byte_end":100508,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100509,"byte_end":100608,"line_start":165,"line_end":165,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100609,"byte_end":100612,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ If you don't know ahead of time what the decoded length should be, size your buffer with a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100613,"byte_end":100707,"line_start":167,"line_end":167,"column_start":1,"column_end":95}},{"value":"/ conservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100708,"byte_end":100808,"line_start":168,"line_end":168,"column_start":1,"column_end":101}},{"value":"/ input, rounded up, or in other words `(input_len + 3) / 4 * 3`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100809,"byte_end":100876,"line_start":169,"line_end":169,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100877,"byte_end":100880,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ If the slice is not large enough, this will panic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":100881,"byte_end":100935,"line_start":171,"line_end":171,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4079,"byte_end":4087,"line_start":103,"line_end":103,"column_start":5,"column_end":13},"name":"Standard","qualname":"::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":248},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`).","sig":null,"attributes":[{"value":"/ The standard character set (uses `+` and `/`).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3945,"byte_end":3995,"line_start":100,"line_end":100,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4000,"byte_end":4003,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4008,"byte_end":4074,"line_start":102,"line_end":102,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":251},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4227,"byte_end":4234,"line_start":107,"line_end":107,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":248},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`).","sig":null,"attributes":[{"value":"/ The URL safe character set (uses `-` and `_`).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4093,"byte_end":4143,"line_start":104,"line_end":104,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4148,"byte_end":4151,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4156,"byte_end":4222,"line_start":106,"line_end":106,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":253},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4460,"byte_end":4465,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"Crypt","qualname":"::CharacterSet::Crypt","value":"CharacterSet::Crypt","parent":{"krate":0,"index":248},"children":[],"decl_id":null,"docs":" The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","sig":null,"attributes":[{"value":"/ The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4240,"byte_end":4347,"line_start":108,"line_end":108,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4352,"byte_end":4355,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4360,"byte_end":4455,"line_start":110,"line_end":110,"column_start":5,"column_end":100}}]},{"kind":"Enum","id":{"krate":0,"index":248},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3926,"byte_end":3938,"line_start":99,"line_end":99,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::CharacterSet","value":"pub enum CharacterSet {\n\n    /// The standard character set (uses `+` and `/`).\n    ///\n    /// See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).\n    Standard,\n\n    /// The URL safe character set (uses `-` and `_`).\n    ///\n    /// See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).\n    UrlSafe,\n\n    /// The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).\n    ///\n    /// Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.\n    Crypt,\n}","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":253}],"decl_id":null,"docs":" Available encoding character sets\n","sig":null,"attributes":[{"value":"/ Available encoding character sets","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3849,"byte_end":3886,"line_start":97,"line_end":97,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":260},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5130,"byte_end":5136,"line_start":134,"line_end":134,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding\n","sig":null,"attributes":[{"value":"/ Contains configuration parameters for base64 encoding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5031,"byte_end":5088,"line_start":132,"line_end":132,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5455,"byte_end":5458,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<Config>::new","value":"pub fn new(CharacterSet, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Config`.\n","sig":null,"attributes":[{"value":"/ Create a new `Config`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5417,"byte_end":5443,"line_start":144,"line_end":144,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5693,"byte_end":5696,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"pad","qualname":"<Config>::pad","value":"pub fn pad(Self, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to pad output with `=` characters.\n","sig":null,"attributes":[{"value":"/ Sets whether to pad output with `=` characters.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5630,"byte_end":5681,"line_start":153,"line_end":153,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5978,"byte_end":6004,"line_start":162,"line_end":162,"column_start":12,"column_end":38},"name":"decode_allow_trailing_bits","qualname":"<Config>::decode_allow_trailing_bits","value":"pub fn decode_allow_trailing_bits(Self, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to emit errors for nonzero trailing bits.","sig":null,"attributes":[{"value":"/ Sets whether to emit errors for nonzero trailing bits.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5768,"byte_end":5826,"line_start":158,"line_end":158,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5831,"byte_end":5834,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This is useful when implementing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5839,"byte_end":5875,"line_start":160,"line_end":160,"column_start":5,"column_end":41}},{"value":"/ [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5880,"byte_end":5966,"line_start":161,"line_end":161,"column_start":5,"column_end":91}}]},{"kind":"Const","id":{"krate":0,"index":209},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6189,"byte_end":6197,"line_start":171,"line_end":171,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::STANDARD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set with padding.\n","sig":null,"attributes":[{"value":"/ Standard character set with padding.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6138,"byte_end":6178,"line_start":170,"line_end":170,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":210},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6367,"byte_end":6382,"line_start":178,"line_end":178,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::STANDARD_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set without padding.\n","sig":null,"attributes":[{"value":"/ Standard character set without padding.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6313,"byte_end":6356,"line_start":177,"line_end":177,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":211},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6549,"byte_end":6557,"line_start":185,"line_end":185,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::URL_SAFE","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set with padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set with padding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6499,"byte_end":6538,"line_start":184,"line_end":184,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":212},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6725,"byte_end":6740,"line_start":192,"line_end":192,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::URL_SAFE_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set without padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set without padding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6672,"byte_end":6714,"line_start":191,"line_end":191,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":213},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6901,"byte_end":6906,"line_start":199,"line_end":199,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::CRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" As per `crypt(3)` requirements\n","sig":null,"attributes":[{"value":"/ As per `crypt(3)` requirements","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":6856,"byte_end":6890,"line_start":198,"line_end":198,"column_start":1,"column_end":35}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":7701,"byte_end":7715,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":10035,"byte_end":10045,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":10220,"byte_end":10230,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15232,"byte_end":15245,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15524,"byte_end":15537,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15858,"byte_end":15871,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":60211,"byte_end":60224,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":60611,"byte_end":60624,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":64748,"byte_end":64761,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":71604,"byte_end":71617,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96827,"byte_end":96838,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97389,"byte_end":97400,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4475,"byte_end":4487,"line_start":114,"line_end":114,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5404,"byte_end":5410,"line_start":143,"line_end":143,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3381,"byte_end":3388,"line_start":79,"line_end":79,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":37}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":3445,"byte_end":3450,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":7701,"byte_end":7715,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":10035,"byte_end":10045,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/chunked_encoder.rs","byte_start":10220,"byte_end":10230,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15232,"byte_end":15245,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15524,"byte_end":15537,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":6207}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/display.rs","byte_start":15858,"byte_end":15871,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":60211,"byte_end":60224,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":83},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":60611,"byte_end":60624,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":83},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":64748,"byte_end":64761,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":83},"to":{"krate":1,"index":3020}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/write/encoder.rs","byte_start":71604,"byte_end":71617,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":83},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":96827,"byte_end":96838,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":6207}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/decode.rs","byte_start":97389,"byte_end":97400,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":226},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":4475,"byte_end":4487,"line_start":114,"line_end":114,"column_start":6,"column_end":18},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.11.0/src/lib.rs","byte_start":5404,"byte_end":5410,"line_start":143,"line_end":143,"column_start":6,"column_end":12},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":260},"to":{"krate":4294967295,"index":4294967295}}]}