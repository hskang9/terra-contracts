{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1","program":"/home/hskang9/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rayon","--edition=2018","/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=79d569bd9c6ebda6","-C","extra-filename=-79d569bd9c6ebda6","--out-dir","/home/hskang9/terra-contracts/dice/target/rls/debug/deps","-L","dependency=/home/hskang9/terra-contracts/dice/target/rls/debug/deps","--extern","crossbeam_deque=/home/hskang9/terra-contracts/dice/target/rls/debug/deps/libcrossbeam_deque-e370d3fdffac5d1f.rmeta","--extern","either=/home/hskang9/terra-contracts/dice/target/rls/debug/deps/libeither-400a3d24d8d16a22.rmeta","--extern","rayon_core=/home/hskang9/terra-contracts/dice/target/rls/debug/deps/librayon_core-1d601a5f966a6107.rmeta","--cap-lints","allow","--cfg","step_by","--error-format=json","--sysroot","/home/hskang9/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/hskang9/terra-contracts/dice/target/rls/debug/deps/librayon-79d569bd9c6ebda6.rmeta"},"prelude":{"crate_id":{"name":"rayon","disambiguator":[7582730169470030100,9570750865181198067]},"crate_root":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src","external_crates":[{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15171822389981698586,9596930288317159773]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[309489290393175025,9116230521283433112]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4391997853131671271,2752570053062459009]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[680011651820151502,5018330578075825921]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4249137077638888796,17834651879708154657]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13082819734751436340,16140962863799451331]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8371738565553744270,17943531712744420027]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17468180561489458258,7285327718060701271]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[14551538593801126895,13478667531910088620]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16022708609364593127,529027819734980321]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[18024135037275500963,3187671833432925572]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5194268306266264186,14551347693776345482]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18097577876301876973,855323625195415836]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5106557709654100294,13294098602154984522]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","num":15,"id":{"name":"either","disambiguator":[395528142795792205,4785059848802021571]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":16,"id":{"name":"rayon_core","disambiguator":[7450903763372378899,1159505960151203965]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":17,"id":{"name":"crossbeam_queue","disambiguator":[18093531571961922354,5029470469433151518]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":18,"id":{"name":"cfg_if","disambiguator":[11398942730684294966,14323025178007651326]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":19,"id":{"name":"maybe_uninit","disambiguator":[8582789466291786245,15757313237170521968]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":20,"id":{"name":"crossbeam_utils","disambiguator":[18109781354686426415,218901752760741539]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":21,"id":{"name":"lazy_static","disambiguator":[8459626925222228716,798854105538023797]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","num":22,"id":{"name":"crossbeam_deque","disambiguator":[5990219963786236974,5373087985785527887]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":23,"id":{"name":"crossbeam_epoch","disambiguator":[2951332883762162061,9673651694499180799]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":24,"id":{"name":"memoffset","disambiguator":[2558208206526098542,2262804152297641125]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":25,"id":{"name":"scopeguard","disambiguator":[4635274692953825589,13528100928419728666]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":26,"id":{"name":"num_cpus","disambiguator":[3674008533887517183,15039273184544240469]}},{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","num":27,"id":{"name":"libc","disambiguator":[17960483848605735994,1061587657846045282]}}],"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":0,"byte_end":4568,"line_start":1,"line_end":118,"column_start":1,"column_end":41}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":161},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":26400,"byte_end":26406,"line_start":84,"line_end":84,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5462},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27743,"byte_end":27748,"line_start":152,"line_end":152,"column_start":12,"column_end":17},"alias_span":null,"name":"Chain","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5475},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27762,"byte_end":27768,"line_start":153,"line_end":153,"column_start":13,"column_end":19},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5485},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27782,"byte_end":27788,"line_start":154,"line_end":154,"column_start":13,"column_end":19},"alias_span":null,"name":"Cloned","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5494},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27802,"byte_end":27808,"line_start":155,"line_end":155,"column_start":13,"column_end":19},"alias_span":null,"name":"Copied","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":662},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27822,"byte_end":27827,"line_start":156,"line_end":156,"column_start":13,"column_end":18},"alias_span":null,"name":"empty","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27829,"byte_end":27834,"line_start":156,"line_end":156,"column_start":20,"column_end":25},"alias_span":null,"name":"Empty","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5503},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27852,"byte_end":27861,"line_start":157,"line_end":157,"column_start":16,"column_end":25},"alias_span":null,"name":"Enumerate","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5512},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27875,"byte_end":27881,"line_start":158,"line_end":158,"column_start":13,"column_end":19},"alias_span":null,"name":"Filter","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5521},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27899,"byte_end":27908,"line_start":159,"line_end":159,"column_start":17,"column_end":26},"alias_span":null,"name":"FilterMap","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5538},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27924,"byte_end":27931,"line_start":160,"line_end":160,"column_start":15,"column_end":22},"alias_span":null,"name":"FlatMap","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5547},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27946,"byte_end":27953,"line_start":161,"line_end":161,"column_start":14,"column_end":21},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5556},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27966,"byte_end":27970,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"alias_span":null,"name":"Fold","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5568},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27972,"byte_end":27980,"line_start":162,"line_end":162,"column_start":18,"column_end":26},"alias_span":null,"name":"FoldWith","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5580},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":27996,"byte_end":28003,"line_start":163,"line_end":163,"column_start":14,"column_end":21},"alias_span":null,"name":"Inspect","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5589},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28021,"byte_end":28031,"line_start":164,"line_end":164,"column_start":17,"column_end":27},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5602},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28058,"byte_end":28076,"line_start":165,"line_end":165,"column_start":26,"column_end":44},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5614},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28095,"byte_end":28106,"line_start":166,"line_end":166,"column_start":18,"column_end":29},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5634},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28118,"byte_end":28124,"line_start":167,"line_end":167,"column_start":11,"column_end":17},"alias_span":null,"name":"MaxLen","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5624},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28126,"byte_end":28132,"line_start":167,"line_end":167,"column_start":19,"column_end":25},"alias_span":null,"name":"MinLen","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5644},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28144,"byte_end":28147,"line_start":168,"line_end":168,"column_start":10,"column_end":13},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28164,"byte_end":28171,"line_start":169,"line_end":169,"column_start":16,"column_end":23},"alias_span":null,"name":"MapInit","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5653},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28173,"byte_end":28180,"line_start":169,"line_end":169,"column_start":25,"column_end":32},"alias_span":null,"name":"MapWith","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":5677},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28197,"byte_end":28205,"line_start":170,"line_end":170,"column_start":15,"column_end":23},"alias_span":null,"name":"MultiZip","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2331},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28218,"byte_end":28222,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"alias_span":null,"name":"once","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6556},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28224,"byte_end":28228,"line_start":171,"line_end":171,"column_start":18,"column_end":22},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6565},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28247,"byte_end":28256,"line_start":172,"line_end":172,"column_start":17,"column_end":26},"alias_span":null,"name":"PanicFuse","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6581},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28275,"byte_end":28285,"line_start":173,"line_end":173,"column_start":18,"column_end":28},"alias_span":null,"name":"IterBridge","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2490},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28287,"byte_end":28301,"line_start":173,"line_end":173,"column_start":30,"column_end":44},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2635},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28317,"byte_end":28323,"line_start":174,"line_end":174,"column_start":14,"column_end":20},"alias_span":null,"name":"repeat","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2656},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28325,"byte_end":28332,"line_start":174,"line_end":174,"column_start":22,"column_end":29},"alias_span":null,"name":"repeatn","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6590},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28334,"byte_end":28340,"line_start":174,"line_end":174,"column_start":31,"column_end":37},"alias_span":null,"name":"Repeat","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6599},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28342,"byte_end":28349,"line_start":174,"line_end":174,"column_start":39,"column_end":46},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6609},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28361,"byte_end":28364,"line_start":175,"line_end":175,"column_start":10,"column_end":13},"alias_span":null,"name":"Rev","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6618},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28376,"byte_end":28380,"line_start":176,"line_end":176,"column_start":11,"column_end":15},"alias_span":null,"name":"Skip","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":2775},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28397,"byte_end":28402,"line_start":177,"line_end":177,"column_start":16,"column_end":21},"alias_span":null,"name":"split","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6628},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28404,"byte_end":28409,"line_start":177,"line_end":177,"column_start":23,"column_end":28},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6637},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28422,"byte_end":28426,"line_start":178,"line_end":178,"column_start":11,"column_end":15},"alias_span":null,"name":"Take","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6647},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28443,"byte_end":28450,"line_start":179,"line_end":179,"column_start":16,"column_end":23},"alias_span":null,"name":"TryFold","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6662},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28452,"byte_end":28463,"line_start":179,"line_end":179,"column_start":25,"column_end":36},"alias_span":null,"name":"TryFoldWith","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6674},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28478,"byte_end":28484,"line_start":180,"line_end":180,"column_start":13,"column_end":19},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6696},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28502,"byte_end":28511,"line_start":181,"line_end":181,"column_start":17,"column_end":26},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6705},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28522,"byte_end":28525,"line_start":182,"line_end":182,"column_start":10,"column_end":13},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6718},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28539,"byte_end":28544,"line_start":183,"line_end":183,"column_start":13,"column_end":18},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":6730},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28602,"byte_end":28608,"line_start":188,"line_end":188,"column_start":24,"column_end":30},"alias_span":null,"name":"StepBy","value":"","parent":{"krate":0,"index":137}},{"kind":"Use","ref_id":{"krate":0,"index":3988},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392828,"byte_end":392848,"line_start":5,"line_end":5,"column_start":22,"column_end":42},"alias_span":null,"name":"FromParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3925},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392871,"byte_end":392894,"line_start":6,"line_end":6,"column_start":22,"column_end":45},"alias_span":null,"name":"IndexedParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3695},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392917,"byte_end":392937,"line_start":7,"line_end":7,"column_start":22,"column_end":42},"alias_span":null,"name":"IntoParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3699},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392960,"byte_end":392983,"line_start":8,"line_end":8,"column_start":22,"column_end":45},"alias_span":null,"name":"IntoParallelRefIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3710},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393006,"byte_end":393032,"line_start":9,"line_end":9,"column_start":22,"column_end":48},"alias_span":null,"name":"IntoParallelRefMutIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":2490},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393055,"byte_end":393069,"line_start":10,"line_end":10,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelBridge","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3992},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393092,"byte_end":393106,"line_start":11,"line_end":11,"column_start":22,"column_end":36},"alias_span":null,"name":"ParallelExtend","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":3721},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393129,"byte_end":393145,"line_start":12,"line_end":12,"column_start":22,"column_end":38},"alias_span":null,"name":"ParallelIterator","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":4340},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393169,"byte_end":393182,"line_start":13,"line_end":13,"column_start":23,"column_end":36},"alias_span":null,"name":"ParallelSlice","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":4351},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393206,"byte_end":393222,"line_start":14,"line_end":14,"column_start":23,"column_end":39},"alias_span":null,"name":"ParallelSliceMut","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":0,"index":4684},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":393244,"byte_end":393258,"line_start":15,"line_end":15,"column_start":21,"column_end":35},"alias_span":null,"name":"ParallelString","value":"","parent":{"krate":0,"index":4076}},{"kind":"Use","ref_id":{"krate":16,"index":849},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4181,"byte_end":4190,"line_start":109,"line_end":109,"column_start":21,"column_end":30},"alias_span":null,"name":"FnContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":237},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4212,"byte_end":4225,"line_start":110,"line_end":110,"column_start":21,"column_end":34},"alias_span":null,"name":"ThreadBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":519},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4247,"byte_end":4257,"line_start":111,"line_end":111,"column_start":21,"column_end":31},"alias_span":null,"name":"ThreadPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":837},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4279,"byte_end":4299,"line_start":112,"line_end":112,"column_start":21,"column_end":41},"alias_span":null,"name":"ThreadPoolBuildError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":608},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4321,"byte_end":4338,"line_start":113,"line_end":113,"column_start":21,"column_end":38},"alias_span":null,"name":"ThreadPoolBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":607},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4361,"byte_end":4380,"line_start":114,"line_end":114,"column_start":22,"column_end":41},"alias_span":null,"name":"current_num_threads","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":558},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4382,"byte_end":4402,"line_start":114,"line_end":114,"column_start":43,"column_end":63},"alias_span":null,"name":"current_thread_index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":100},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4426,"byte_end":4430,"line_start":115,"line_end":115,"column_start":22,"column_end":26},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":110},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4432,"byte_end":4444,"line_start":115,"line_end":115,"column_start":28,"column_end":40},"alias_span":null,"name":"join_context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":401},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4468,"byte_end":4473,"line_start":116,"line_end":116,"column_start":22,"column_end":27},"alias_span":null,"name":"scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":387},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4475,"byte_end":4480,"line_start":116,"line_end":116,"column_start":29,"column_end":34},"alias_span":null,"name":"Scope","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":408},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4504,"byte_end":4514,"line_start":117,"line_end":117,"column_start":22,"column_end":32},"alias_span":null,"name":"scope_fifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":390},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4516,"byte_end":4525,"line_start":117,"line_end":117,"column_start":34,"column_end":43},"alias_span":null,"name":"ScopeFifo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":488},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4549,"byte_end":4554,"line_start":118,"line_end":118,"column_start":22,"column_end":27},"alias_span":null,"name":"spawn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":495},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4556,"byte_end":4566,"line_start":118,"line_end":118,"column_start":29,"column_end":39},"alias_span":null,"name":"spawn_fifo","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":0,"byte_end":4568,"line_start":1,"line_end":118,"column_start":1,"column_end":41},"name":"","qualname":"::","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":11},{"krate":0,"index":46},{"krate":0,"index":137},{"krate":0,"index":4018},{"krate":0,"index":4076},{"krate":0,"index":4088},{"krate":0,"index":4111},{"krate":0,"index":4126},{"krate":0,"index":4166},{"krate":0,"index":4677},{"krate":0,"index":4909},{"krate":0,"index":4967},{"krate":0,"index":4969},{"krate":0,"index":4996},{"krate":0,"index":5007},{"krate":0,"index":5008},{"krate":0,"index":5009},{"krate":0,"index":5010},{"krate":0,"index":5011},{"krate":0,"index":5012},{"krate":0,"index":5013},{"krate":0,"index":5014},{"krate":0,"index":5015},{"krate":0,"index":5016},{"krate":0,"index":5017},{"krate":0,"index":5018},{"krate":0,"index":5019},{"krate":0,"index":5020},{"krate":0,"index":5021},{"krate":0,"index":5022},{"krate":0,"index":5023},{"krate":0,"index":5024},{"krate":0,"index":5025},{"krate":0,"index":5026}],"decl_id":null,"docs":" Data-parallelism library that makes it easy to convert sequential\n computations into parallel","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":53,"byte_end":92,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":93,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":116,"byte_end":141,"line_start":4,"line_end":4,"column_start":1,"column_end":26}},{"value":"! Data-parallelism library that makes it easy to convert sequential","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":143,"byte_end":212,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"! computations into parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":213,"byte_end":243,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":244,"byte_end":247,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! Rayon is lightweight and convenient for introducing parallelism into existing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":248,"byte_end":329,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"! code. It guarantees data-race free executions and takes advantage of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":330,"byte_end":402,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"! parallelism when sensible, based on work-load at runtime.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":403,"byte_end":464,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":465,"byte_end":468,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! # How to use Rayon","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":469,"byte_end":491,"line_start":13,"line_end":13,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":492,"byte_end":495,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! There are two ways to use Rayon:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":496,"byte_end":532,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":533,"byte_end":536,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! - **High-level parallel constructs** are the simplest way to use Rayon and also","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":537,"byte_end":620,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"!   typically the most efficient.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":621,"byte_end":656,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"!   - [Parallel iterators][iter module] make it easy to convert a sequential iterator to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":657,"byte_end":747,"line_start":19,"line_end":19,"column_start":1,"column_end":91}},{"value":"!     execute in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":748,"byte_end":776,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"!     - The [`ParallelIterator`] trait defines general methods for all parallel iterators.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":777,"byte_end":869,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"!     - The [`IndexedParallelIterator`] trait adds methods for iterators that support random","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":870,"byte_end":964,"line_start":22,"line_end":22,"column_start":1,"column_end":95}},{"value":"!       access.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":965,"byte_end":982,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"!   - The [`par_sort`] method sorts `&mut [T]` slices (or vectors) in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":983,"byte_end":1064,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"!   - [`par_extend`] can be used to efficiently grow collections with items produced","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1065,"byte_end":1151,"line_start":25,"line_end":25,"column_start":1,"column_end":87}},{"value":"!     by a parallel iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1152,"byte_end":1183,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"! - **Custom tasks** let you divide your work into parallel tasks yourself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1184,"byte_end":1261,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"!   - [`join`] is used to subdivide a task into two pieces.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1262,"byte_end":1323,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"!   - [`scope`] creates a scope within which you can create any number of parallel tasks.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1324,"byte_end":1415,"line_start":29,"line_end":29,"column_start":1,"column_end":92}},{"value":"!   - [`ThreadPoolBuilder`] can be used to create your own thread pools or customize","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1416,"byte_end":1502,"line_start":30,"line_end":30,"column_start":1,"column_end":87}},{"value":"!     the global one.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1503,"byte_end":1526,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1527,"byte_end":1530,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! [iter module]: iter/index.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1531,"byte_end":1565,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"! [`join`]: fn.join.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1566,"byte_end":1592,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"! [`scope`]: fn.scope.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1593,"byte_end":1621,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"! [`par_sort`]: slice/trait.ParallelSliceMut.html#method.par_sort","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1622,"byte_end":1689,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"! [`par_extend`]: iter/trait.ParallelExtend.html#tymethod.par_extend","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1690,"byte_end":1760,"line_start":37,"line_end":37,"column_start":1,"column_end":71}},{"value":"! [`ThreadPoolBuilder`]: struct.ThreadPoolBuilder.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1761,"byte_end":1817,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1818,"byte_end":1821,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! # Basic usage and the Rayon prelude","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1822,"byte_end":1861,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1862,"byte_end":1865,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! First, you will need to add `rayon` to your `Cargo.toml`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1866,"byte_end":1927,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1928,"byte_end":1931,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Next, to use parallel iterators or the other high-level methods,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":1932,"byte_end":2000,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"! you need to import several traits. Those traits are bundled into","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2001,"byte_end":2069,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"! the module [`rayon::prelude`]. It is recommended that you import","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2070,"byte_end":2138,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"! all of these traits at once by adding `use rayon::prelude::*` at","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2139,"byte_end":2207,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"! the top of each module that uses Rayon methods.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2208,"byte_end":2259,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2260,"byte_end":2263,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! These traits give you access to the `par_iter` method which provides","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2264,"byte_end":2336,"line_start":50,"line_end":50,"column_start":1,"column_end":73}},{"value":"! parallel implementations of many iterative functions such as [`map`],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2337,"byte_end":2410,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"! [`for_each`], [`filter`], [`fold`], and [more].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2411,"byte_end":2462,"line_start":52,"line_end":52,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2463,"byte_end":2466,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! [`rayon::prelude`]: prelude/index.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2467,"byte_end":2509,"line_start":54,"line_end":54,"column_start":1,"column_end":43}},{"value":"! [`map`]: iter/trait.ParallelIterator.html#method.map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2510,"byte_end":2566,"line_start":55,"line_end":55,"column_start":1,"column_end":57}},{"value":"! [`for_each`]: iter/trait.ParallelIterator.html#method.for_each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2567,"byte_end":2633,"line_start":56,"line_end":56,"column_start":1,"column_end":67}},{"value":"! [`filter`]: iter/trait.ParallelIterator.html#method.filter","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2634,"byte_end":2696,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"! [`fold`]: iter/trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2697,"byte_end":2755,"line_start":58,"line_end":58,"column_start":1,"column_end":59}},{"value":"! [more]: iter/trait.ParallelIterator.html#provided-methods","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2756,"byte_end":2817,"line_start":59,"line_end":59,"column_start":1,"column_end":62}},{"value":"! [`ParallelIterator`]: iter/trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2818,"byte_end":2876,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"! [`IndexedParallelIterator`]: iter/trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2877,"byte_end":2949,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2950,"byte_end":2953,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! # Crate Layout","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2954,"byte_end":2972,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2973,"byte_end":2976,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! Rayon extends many of the types found in the standard library with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":2977,"byte_end":3047,"line_start":65,"line_end":65,"column_start":1,"column_end":71}},{"value":"! parallel iterator implementations. The modules in the `rayon`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3048,"byte_end":3113,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"! crate mirror [`std`] itself: so, e.g., the `option` module in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3114,"byte_end":3179,"line_start":67,"line_end":67,"column_start":1,"column_end":66}},{"value":"! Rayon contains parallel iterators for the `Option` type, which is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3180,"byte_end":3249,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"! found in [the `option` module of `std`]. Similarly, the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3250,"byte_end":3309,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"! `collections` module in Rayon offers parallel iterator types for","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3310,"byte_end":3378,"line_start":70,"line_end":70,"column_start":1,"column_end":69}},{"value":"! [the `collections` from `std`]. You will rarely need to access","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3379,"byte_end":3445,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"! these submodules unless you need to name iterator types","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3446,"byte_end":3505,"line_start":72,"line_end":72,"column_start":1,"column_end":60}},{"value":"! explicitly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3506,"byte_end":3521,"line_start":73,"line_end":73,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3522,"byte_end":3525,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! [the `option` module of `std`]: https://doc.rust-lang.org/std/option/index.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3526,"byte_end":3609,"line_start":75,"line_end":75,"column_start":1,"column_end":84}},{"value":"! [the `collections` from `std`]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3610,"byte_end":3698,"line_start":76,"line_end":76,"column_start":1,"column_end":89}},{"value":"! [`std`]: https://doc.rust-lang.org/std/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3699,"byte_end":3742,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3743,"byte_end":3746,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! # Other questions?","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3747,"byte_end":3769,"line_start":79,"line_end":79,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3770,"byte_end":3773,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! See [the Rayon FAQ][faq].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3774,"byte_end":3803,"line_start":81,"line_end":81,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3804,"byte_end":3807,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! [faq]: https://github.com/rayon-rs/rayon/blob/master/FAQ.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3808,"byte_end":3871,"line_start":83,"line_end":83,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/private.rs","byte_start":7086,"byte_end":7099,"line_start":9,"line_end":9,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::private::PrivateMarker","value":"","parent":null,"children":[],"decl_id":null,"docs":" If this type is pub but not publicly reachable, third parties\n can't name it and can't implement traits using it.\n","sig":null,"attributes":[{"value":"/ If this type is pub but not publicly reachable, third parties","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/private.rs","byte_start":6914,"byte_end":6979,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ can't name it and can't implement traits using it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/private.rs","byte_start":6980,"byte_end":7034,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/private.rs","byte_start":7035,"byte_end":7074,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":46},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collections","qualname":"::collections","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":62},{"krate":0,"index":72},{"krate":0,"index":81},{"krate":0,"index":94},{"krate":0,"index":106},{"krate":0,"index":115}],"decl_id":null,"docs":" Parallel iterator types for [standard collections][std::collections]","sig":null,"attributes":[{"value":"! Parallel iterator types for [standard collections][std::collections]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":11649,"byte_end":11721,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":11722,"byte_end":11725,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":11726,"byte_end":11804,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":11805,"byte_end":11843,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":11844,"byte_end":11847,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::collections]: https://doc.rust-lang.org/stable/std/collections/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":11848,"byte_end":11921,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":48},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::collections::binary_heap","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":5027},{"krate":0,"index":5033},{"krate":0,"index":5030},{"krate":0,"index":53},{"krate":0,"index":5043},{"krate":0,"index":5036},{"krate":0,"index":5049},{"krate":0,"index":5053},{"krate":0,"index":58},{"krate":0,"index":5057},{"krate":0,"index":5072},{"krate":0,"index":5064}],"decl_id":null,"docs":" This module contains the parallel iterator types for heaps\n (`BinaryHeap<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for heaps","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":12625,"byte_end":12687,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"! (`BinaryHeap<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":12688,"byte_end":12760,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":12761,"byte_end":12820,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5027},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13001,"byte_end":13009,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::binary_heap::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5029}],"decl_id":null,"docs":" Parallel iterator over a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a binary heap","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":12925,"byte_end":12965,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5049},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13475,"byte_end":13479,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::binary_heap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5052}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a binary heap\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a binary heap","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13380,"byte_end":13446,"line_start":34,"line_end":34,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":62},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_map","qualname":"::collections::btree_map","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":5079},{"krate":0,"index":5083},{"krate":0,"index":5087},{"krate":0,"index":5094},{"krate":0,"index":5101},{"krate":0,"index":5106},{"krate":0,"index":67},{"krate":0,"index":5111},{"krate":0,"index":5119},{"krate":0,"index":5127},{"krate":0,"index":5132},{"krate":0,"index":5137},{"krate":0,"index":5145}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree maps\n (`BTreeMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for B-Tree maps","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":13915,"byte_end":13983,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"! (`BTreeMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":13984,"byte_end":14057,"line_start":2,"line_end":2,"column_start":1,"column_end":74}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14058,"byte_end":14117,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5079},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14309,"byte_end":14317,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5082}],"decl_id":null,"docs":" Parallel iterator over a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14220,"byte_end":14259,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5101},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14652,"byte_end":14656,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5105}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14558,"byte_end":14623,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5127},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":15193,"byte_end":15200,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::btree_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5131}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a B-Tree map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a B-Tree map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":15102,"byte_end":15164,"line_start":52,"line_end":52,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":72},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"btree_set","qualname":"::collections::btree_set","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":5153},{"krate":0,"index":5156},{"krate":0,"index":5159},{"krate":0,"index":5165},{"krate":0,"index":5171},{"krate":0,"index":5175},{"krate":0,"index":77},{"krate":0,"index":5179},{"krate":0,"index":5186}],"decl_id":null,"docs":" This module contains the parallel iterator types for B-Tree sets\n (`BTreeSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for B-Tree sets","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":15501,"byte_end":15569,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"! (`BTreeSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":15570,"byte_end":15640,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":15641,"byte_end":15700,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5153},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":15892,"byte_end":15900,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::btree_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5155}],"decl_id":null,"docs":" Parallel iterator over a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a B-Tree set","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":15803,"byte_end":15842,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5171},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":16189,"byte_end":16193,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::btree_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5174}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a B-Tree set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a B-Tree set","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":16095,"byte_end":16160,"line_start":28,"line_end":28,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":81},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_map","qualname":"::collections::hash_map","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":7424},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":5193},{"krate":0,"index":5197},{"krate":0,"index":5201},{"krate":0,"index":5209},{"krate":0,"index":5216},{"krate":0,"index":5221},{"krate":0,"index":89},{"krate":0,"index":5226},{"krate":0,"index":5235},{"krate":0,"index":5243},{"krate":0,"index":5248},{"krate":0,"index":5253},{"krate":0,"index":5262}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash maps\n (`HashMap<K, V>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for hash maps","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":16622,"byte_end":16688,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"! (`HashMap<K, V>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":16689,"byte_end":16761,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":16762,"byte_end":16821,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5193},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":17046,"byte_end":17054,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5196}],"decl_id":null,"docs":" Parallel iterator over a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":16959,"byte_end":16996,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5216},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":17423,"byte_end":17427,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5220}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":17331,"byte_end":17394,"line_start":29,"line_end":29,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5243},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":18004,"byte_end":18011,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::hash_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5247}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a hash map\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a hash map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":17915,"byte_end":17975,"line_start":53,"line_end":53,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash_set","qualname":"::collections::hash_set","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":7438},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":5270},{"krate":0,"index":5273},{"krate":0,"index":5276},{"krate":0,"index":5283},{"krate":0,"index":5289},{"krate":0,"index":5293},{"krate":0,"index":102},{"krate":0,"index":5297},{"krate":0,"index":5305}],"decl_id":null,"docs":" This module contains the parallel iterator types for hash sets\n (`HashSet<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for hash sets","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":18348,"byte_end":18414,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"! (`HashSet<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":18415,"byte_end":18484,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":18485,"byte_end":18544,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5270},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":18769,"byte_end":18777,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::hash_set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5272}],"decl_id":null,"docs":" Parallel iterator over a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a hash set","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":18682,"byte_end":18719,"line_start":13,"line_end":13,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5289},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":19100,"byte_end":19104,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::hash_set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5292}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a hash set\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a hash set","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":19008,"byte_end":19071,"line_start":29,"line_end":29,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linked_list","qualname":"::collections::linked_list","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":5312},{"krate":0,"index":5318},{"krate":0,"index":5315},{"krate":0,"index":5321},{"krate":0,"index":5327},{"krate":0,"index":5333},{"krate":0,"index":5337},{"krate":0,"index":111},{"krate":0,"index":5341},{"krate":0,"index":5348},{"krate":0,"index":5355},{"krate":0,"index":5359},{"krate":0,"index":5363},{"krate":0,"index":5370}],"decl_id":null,"docs":" This module contains the parallel iterator types for linked lists\n (`LinkedList<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for linked lists","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":19569,"byte_end":19638,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"! (`LinkedList<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":19639,"byte_end":19711,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":19712,"byte_end":19771,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5312},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":19952,"byte_end":19960,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::linked_list::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5314}],"decl_id":null,"docs":" Parallel iterator over a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a linked list","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":19876,"byte_end":19916,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5333},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":20234,"byte_end":20238,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5336}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a linked list","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":20139,"byte_end":20205,"line_start":28,"line_end":28,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5355},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":20683,"byte_end":20690,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::linked_list::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5358}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a linked list\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a linked list","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":20591,"byte_end":20654,"line_start":52,"line_end":52,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":115},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec_deque","qualname":"::collections::vec_deque","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":5377},{"krate":0,"index":5383},{"krate":0,"index":5380},{"krate":0,"index":5386},{"krate":0,"index":5399},{"krate":0,"index":5392},{"krate":0,"index":5405},{"krate":0,"index":5409},{"krate":0,"index":121},{"krate":0,"index":125},{"krate":0,"index":5421},{"krate":0,"index":5413},{"krate":0,"index":5428},{"krate":0,"index":5432},{"krate":0,"index":131},{"krate":0,"index":5444},{"krate":0,"index":5436}],"decl_id":null,"docs":" This module contains the parallel iterator types for double-ended queues\n (`VecDeque<T>`). You will rarely need to interact with it directly\n unless you have need to name one of the iterator types.\n","sig":null,"attributes":[{"value":"! This module contains the parallel iterator types for double-ended queues","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":20916,"byte_end":20992,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! (`VecDeque<T>`). You will rarely need to interact with it directly","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":20993,"byte_end":21063,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"! unless you have need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21064,"byte_end":21123,"line_start":3,"line_end":3,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":5377},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21327,"byte_end":21335,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::collections::vec_deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5379}],"decl_id":null,"docs":" Parallel iterator over a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a double-ended queue","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21244,"byte_end":21291,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5405},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21622,"byte_end":21626,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Iter","qualname":"::collections::vec_deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":5408}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a double-ended queue","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21520,"byte_end":21593,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5428},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":22309,"byte_end":22316,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::collections::vec_deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":5431}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a double-ended queue\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a double-ended queue","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":22210,"byte_end":22280,"line_start":60,"line_end":60,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":137},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":230},{"krate":0,"index":325},{"krate":0,"index":386},{"krate":0,"index":470},{"krate":0,"index":573},{"krate":0,"index":657},{"krate":0,"index":698},{"krate":0,"index":741},{"krate":0,"index":894},{"krate":0,"index":958},{"krate":0,"index":1026},{"krate":0,"index":1086},{"krate":0,"index":1151},{"krate":0,"index":1221},{"krate":0,"index":1236},{"krate":0,"index":1362},{"krate":0,"index":1400},{"krate":0,"index":1486},{"krate":0,"index":1592},{"krate":0,"index":1686},{"krate":0,"index":1708},{"krate":0,"index":1819},{"krate":0,"index":1903},{"krate":0,"index":2016},{"krate":0,"index":2293},{"krate":0,"index":2300},{"krate":0,"index":2328},{"krate":0,"index":2346},{"krate":0,"index":2470},{"krate":0,"index":2518},{"krate":0,"index":2567},{"krate":0,"index":2630},{"krate":0,"index":2696},{"krate":0,"index":2738},{"krate":0,"index":2769},{"krate":0,"index":2803},{"krate":0,"index":2852},{"krate":0,"index":2882},{"krate":0,"index":3005},{"krate":0,"index":3072},{"krate":0,"index":3131},{"krate":0,"index":3327},{"krate":0,"index":3455},{"krate":0,"index":3510},{"krate":0,"index":3572},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3596},{"krate":0,"index":3597},{"krate":0,"index":3598},{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":3617},{"krate":0,"index":3618},{"krate":0,"index":3619},{"krate":0,"index":3620},{"krate":0,"index":3621},{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3626},{"krate":0,"index":3627},{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3630},{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3638},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3641},{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3694},{"krate":0,"index":3695},{"krate":0,"index":3699},{"krate":0,"index":3704},{"krate":0,"index":3710},{"krate":0,"index":3715},{"krate":0,"index":3721},{"krate":0,"index":3920},{"krate":0,"index":3925},{"krate":0,"index":3988},{"krate":0,"index":3992},{"krate":0,"index":3996}],"decl_id":null,"docs":" Traits for writing parallel programs using an iterator-style interface","sig":null,"attributes":[{"value":"! Traits for writing parallel programs using an iterator-style interface","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":22786,"byte_end":22860,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":22861,"byte_end":22864,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":22865,"byte_end":22943,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":22944,"byte_end":22987,"line_start":4,"line_end":4,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":22988,"byte_end":22991,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! Parallel iterators make it easy to write iterator-like chains that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":22992,"byte_end":23062,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"! execute in parallel: typically all you have to do is convert the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23063,"byte_end":23131,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"! first `.iter()` (or `iter_mut()`, `into_iter()`, etc) method into","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23132,"byte_end":23201,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"! `par_iter()` (or `par_iter_mut()`, `into_par_iter()`, etc). For","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23202,"byte_end":23269,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! example, to compute the sum of the squares of a sequence of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23270,"byte_end":23333,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"! integers, one might write:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23334,"byte_end":23364,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23365,"byte_end":23368,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23369,"byte_end":23380,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23381,"byte_end":23407,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"! fn sum_of_squares(input: &[i32]) -> i32 {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23408,"byte_end":23453,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"!     input.par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23454,"byte_end":23478,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"!          .map(|i| i * i)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23479,"byte_end":23507,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"!          .sum()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23508,"byte_end":23527,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"! }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23528,"byte_end":23533,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23534,"byte_end":23541,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23542,"byte_end":23545,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Or, to increment all the integers in a slice, you could write:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23546,"byte_end":23612,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23613,"byte_end":23616,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23617,"byte_end":23628,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23629,"byte_end":23655,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"! fn increment_all(input: &mut [i32]) {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23656,"byte_end":23697,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"!     input.par_iter_mut()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23698,"byte_end":23726,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"!          .for_each(|p| *p += 1);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23727,"byte_end":23763,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"! }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23764,"byte_end":23769,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23770,"byte_end":23777,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23778,"byte_end":23781,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! To use parallel iterators, first import the traits by adding","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23782,"byte_end":23846,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"! something like `use rayon::prelude::*` to your module. You can","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23847,"byte_end":23913,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"! then call `par_iter`, `par_iter_mut`, or `into_par_iter` to get a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23914,"byte_end":23983,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"! parallel iterator. Like a [regular iterator][], parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":23984,"byte_end":24044,"line_start":35,"line_end":35,"column_start":1,"column_end":61}},{"value":"! iterators work by first constructing a computation and then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24045,"byte_end":24108,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"! executing it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24109,"byte_end":24126,"line_start":37,"line_end":37,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24127,"byte_end":24130,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! In addition to `par_iter()` and friends, some types offer other","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24131,"byte_end":24198,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"! ways to create (or consume) parallel iterators:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24199,"byte_end":24250,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24251,"byte_end":24254,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! - Slices (`&[T]`, `&mut [T]`) offer methods like `par_split` and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24255,"byte_end":24323,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"!   `par_windows`, as well as various parallel sorting","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24324,"byte_end":24380,"line_start":43,"line_end":43,"column_start":1,"column_end":57}},{"value":"!   operations. See [the `ParallelSlice` trait] for the full list.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24381,"byte_end":24449,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"! - Strings (`&str`) offer methods like `par_split` and `par_lines`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24450,"byte_end":24520,"line_start":45,"line_end":45,"column_start":1,"column_end":71}},{"value":"!   See [the `ParallelString` trait] for the full list.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24521,"byte_end":24578,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"! - Various collections offer [`par_extend`], which grows a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24579,"byte_end":24640,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"!   collection given a parallel iterator. (If you don't have a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24641,"byte_end":24705,"line_start":48,"line_end":48,"column_start":1,"column_end":65}},{"value":"!   collection to extend, you can use [`collect()`] to create a new","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24706,"byte_end":24775,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"!   one from scratch.)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24776,"byte_end":24800,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24801,"byte_end":24804,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! [the `ParallelSlice` trait]: ../slice/trait.ParallelSlice.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24805,"byte_end":24871,"line_start":52,"line_end":52,"column_start":1,"column_end":67}},{"value":"! [the `ParallelString` trait]: ../str/trait.ParallelString.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24872,"byte_end":24938,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"! [`par_extend`]: trait.ParallelExtend.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24939,"byte_end":24984,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"! [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":24985,"byte_end":25046,"line_start":55,"line_end":55,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25047,"byte_end":25050,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! To see the full range of methods available on parallel iterators,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25051,"byte_end":25120,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"! check out the [`ParallelIterator`] and [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25121,"byte_end":25191,"line_start":58,"line_end":58,"column_start":1,"column_end":71}},{"value":"! traits.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25192,"byte_end":25203,"line_start":59,"line_end":59,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25204,"byte_end":25207,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! If you'd like to build a custom parallel iterator, or to write your own","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25208,"byte_end":25283,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"! combinator, then check out the [split] function and the [plumbing] module.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25284,"byte_end":25362,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25363,"byte_end":25366,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"! [regular iterator]: http://doc.rust-lang.org/std/iter/trait.Iterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25367,"byte_end":25444,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"! [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25445,"byte_end":25498,"line_start":65,"line_end":65,"column_start":1,"column_end":54}},{"value":"! [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25499,"byte_end":25566,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"! [split]: fn.split.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25567,"byte_end":25593,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"! [plumbing]: plumbing/index.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25594,"byte_end":25629,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25630,"byte_end":25633,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! Note: Several of the `ParallelIterator` methods rely on a `Try` trait which","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25634,"byte_end":25713,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"! has been deliberately obscured from the public API.  This trait is intended","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25714,"byte_end":25793,"line_start":71,"line_end":71,"column_start":1,"column_end":80}},{"value":"! to mirror the unstable `std::ops::Try` with implementations for `Option` and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25794,"byte_end":25874,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"! `Result`, where `Some`/`Ok` values will let those iterators continue, but","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25875,"byte_end":25952,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"! `None`/`Err` values will exit early.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25953,"byte_end":25993,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25994,"byte_end":25997,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! A note about object safety: It is currently _not_ possible to wrap","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":25998,"byte_end":26068,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"! a `ParallelIterator` (or any trait that depends on it) using a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":26069,"byte_end":26135,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"! `Box<dyn ParallelIterator>` or other kind of dynamic allocation,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":26136,"byte_end":26204,"line_start":78,"line_end":78,"column_start":1,"column_end":69}},{"value":"! because `ParallelIterator` is **not object-safe**.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":26205,"byte_end":26259,"line_start":79,"line_end":79,"column_start":1,"column_end":55}},{"value":"! (This keeps the implementation simpler and allows extra optimizations.)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":26260,"byte_end":26335,"line_start":80,"line_end":80,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":148},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plumbing","qualname":"::iter::plumbing","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":158},{"krate":0,"index":167},{"krate":0,"index":175},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":5451},{"krate":0,"index":5454},{"krate":0,"index":5453},{"krate":0,"index":195},{"krate":0,"index":5456},{"krate":0,"index":5460},{"krate":0,"index":5459},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":214},{"krate":0,"index":222},{"krate":0,"index":225}],"decl_id":null,"docs":" Traits and functions used to implement parallel iteration.  These are\n low-level details -- users of parallel iterators should not need to\n interact with them directly.  See [the `plumbing` README][r] for a general overview.","sig":null,"attributes":[{"value":"! Traits and functions used to implement parallel iteration.  These are","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":116969,"byte_end":117042,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"! low-level details -- users of parallel iterators should not need to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117043,"byte_end":117114,"line_start":2,"line_end":2,"column_start":1,"column_end":72}},{"value":"! interact with them directly.  See [the `plumbing` README][r] for a general overview.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117115,"byte_end":117203,"line_start":3,"line_end":3,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117204,"byte_end":117207,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117208,"byte_end":117290,"line_start":5,"line_end":5,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":153},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117747,"byte_end":117763,"line_start":20,"line_end":20,"column_start":11,"column_end":27},"name":"ProducerCallback","qualname":"::iter::plumbing::ProducerCallback","value":"ProducerCallback<T>","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":" The `ProducerCallback` trait is a kind of generic closure,\n [analogous to `FnOnce`][FnOnce]. See [the corresponding section in\n the plumbing README][r] for more details.","sig":null,"attributes":[{"value":"/ The `ProducerCallback` trait is a kind of generic closure,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117386,"byte_end":117448,"line_start":14,"line_end":14,"column_start":1,"column_end":63}},{"value":"/ [analogous to `FnOnce`][FnOnce]. See [the corresponding section in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117449,"byte_end":117519,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ the plumbing README][r] for more details.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117520,"byte_end":117565,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117566,"byte_end":117569,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md#producer-callback","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117570,"byte_end":117670,"line_start":18,"line_end":18,"column_start":1,"column_end":101}},{"value":"/ [FnOnce]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117671,"byte_end":117736,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":155},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117996,"byte_end":118002,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::iter::plumbing::ProducerCallback::Output","value":"type Output;","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" The type of value returned by this callback. Analogous to\n [`Output` from the `FnOnce` trait][Output].","sig":null,"attributes":[{"value":"/ The type of value returned by this callback. Analogous to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117773,"byte_end":117834,"line_start":21,"line_end":21,"column_start":5,"column_end":66}},{"value":"/ [`Output` from the `FnOnce` trait][Output].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117839,"byte_end":117886,"line_start":22,"line_end":22,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117891,"byte_end":117894,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ [Output]: https://doc.rust-lang.org/std/ops/trait.FnOnce.html#associatedtype.Output","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":117899,"byte_end":117986,"line_start":24,"line_end":24,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118220,"byte_end":118228,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"callback","qualname":"::iter::plumbing::ProducerCallback::callback","value":"pub fn callback<P>(Self, P) -> Self::Output where P: Producer<Item = T>","parent":{"krate":0,"index":153},"children":[],"decl_id":null,"docs":" Invokes the callback with the given producer as argument. The\n key point of this trait is that this method is generic over\n `P`, and hence implementors must be defined for any producer.\n","sig":null,"attributes":[{"value":"/ Invokes the callback with the given producer as argument. The","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118009,"byte_end":118074,"line_start":27,"line_end":27,"column_start":5,"column_end":70}},{"value":"/ key point of this trait is that this method is generic over","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118079,"byte_end":118142,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ `P`, and hence implementors must be defined for any producer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118147,"byte_end":118212,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":158},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119702,"byte_end":119710,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Producer","qualname":"::iter::plumbing::Producer","value":"Producer: Send + Sized","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" A `Producer` is effectively a \"splittable `IntoIterator`\". That\n is, a producer is a value which can be converted into an iterator\n at any time: at that point, it simply produces items on demand,\n like any iterator. But what makes a `Producer` special is that,\n *before* we convert to an iterator, we can also **split** it at a\n particular point using the `split_at` method. This will yield up\n two producers, one producing the items before that point, and one\n producing the items after that point (these two producers can then\n independently be split further, or be converted into iterators).\n In Rayon, this splitting is used to divide between threads.\n See [the `plumbing` README][r] for further details.","sig":null,"attributes":[{"value":"/ A `Producer` is effectively a \"splittable `IntoIterator`\". That","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118311,"byte_end":118378,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ is, a producer is a value which can be converted into an iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118379,"byte_end":118448,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ at any time: at that point, it simply produces items on demand,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118449,"byte_end":118516,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ like any iterator. But what makes a `Producer` special is that,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118517,"byte_end":118584,"line_start":38,"line_end":38,"column_start":1,"column_end":68}},{"value":"/ *before* we convert to an iterator, we can also **split** it at a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118585,"byte_end":118654,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ particular point using the `split_at` method. This will yield up","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118655,"byte_end":118723,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ two producers, one producing the items before that point, and one","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118724,"byte_end":118793,"line_start":41,"line_end":41,"column_start":1,"column_end":70}},{"value":"/ producing the items after that point (these two producers can then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118794,"byte_end":118864,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ independently be split further, or be converted into iterators).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118865,"byte_end":118933,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ In Rayon, this splitting is used to divide between threads.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118934,"byte_end":118997,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/ See [the `plumbing` README][r] for further details.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":118998,"byte_end":119053,"line_start":45,"line_end":45,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119054,"byte_end":119057,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that each producer will always produce a fixed number of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119058,"byte_end":119123,"line_start":47,"line_end":47,"column_start":1,"column_end":66}},{"value":"/ items N. However, this number N is not queryable through the API;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119124,"byte_end":119193,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ the consumer is expected to track it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119194,"byte_end":119235,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119236,"byte_end":119239,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ NB. You might expect `Producer` to extend the `IntoIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119240,"byte_end":119304,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ trait.  However, [rust-lang/rust#20671][20671] prevents us from","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119305,"byte_end":119372,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/ declaring the DoubleEndedIterator and ExactSizeIterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119373,"byte_end":119432,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/ constraints on a required IntoIterator trait, so we inline","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119433,"byte_end":119495,"line_start":54,"line_end":54,"column_start":1,"column_end":63}},{"value":"/ IntoIterator here until that issue is fixed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119496,"byte_end":119544,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119545,"byte_end":119548,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119549,"byte_end":119631,"line_start":57,"line_end":57,"column_start":1,"column_end":83}},{"value":"/ [20671]: https://github.com/rust-lang/rust/issues/20671","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119632,"byte_end":119691,"line_start":58,"line_end":58,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":159},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119847,"byte_end":119851,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::Producer::Item","value":"type Item;","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The type of item that will be produced by this producer once\n it is converted into an iterator.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced by this producer once","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119731,"byte_end":119795,"line_start":60,"line_end":60,"column_start":5,"column_end":69}},{"value":"/ it is converted into an iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119800,"byte_end":119837,"line_start":61,"line_end":61,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":160},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119908,"byte_end":119916,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::plumbing::Producer::IntoIter","value":"type IntoIter: Iterator<Item = Self::Item> + DoubleEndedIterator + ExactSizeIterator;","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The type of iterator we will become.\n","sig":null,"attributes":[{"value":"/ The type of iterator we will become.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119858,"byte_end":119898,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120099,"byte_end":120108,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::plumbing::Producer::into_iter","value":"pub fn into_iter(Self) -> Self::IntoIter","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Convert `self` into an iterator; at this point, no more parallel splits\n are possible.\n","sig":null,"attributes":[{"value":"/ Convert `self` into an iterator; at this point, no more parallel splits","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119994,"byte_end":120069,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ are possible.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120074,"byte_end":120091,"line_start":68,"line_end":68,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120711,"byte_end":120718,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"min_len","qualname":"::iter::plumbing::Producer::min_len","value":"pub fn min_len(&Self) -> usize","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The minimum number of items that we will process\n sequentially. Defaults to 1, which means that we will split\n all the way down to a single item. This can be raised higher\n using the [`with_min_len`] method, which will force us to\n create sequential tasks at a larger granularity. Note that\n Rayon automatically normally attempts to adjust the size of\n parallel splits to reduce overhead, so this should not be\n needed.","sig":null,"attributes":[{"value":"/ The minimum number of items that we will process","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120139,"byte_end":120191,"line_start":71,"line_end":71,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to 1, which means that we will split","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120196,"byte_end":120259,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ all the way down to a single item. This can be raised higher","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120264,"byte_end":120328,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ using the [`with_min_len`] method, which will force us to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120333,"byte_end":120394,"line_start":74,"line_end":74,"column_start":5,"column_end":66}},{"value":"/ create sequential tasks at a larger granularity. Note that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120399,"byte_end":120461,"line_start":75,"line_end":75,"column_start":5,"column_end":67}},{"value":"/ Rayon automatically normally attempts to adjust the size of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120466,"byte_end":120529,"line_start":76,"line_end":76,"column_start":5,"column_end":68}},{"value":"/ parallel splits to reduce overhead, so this should not be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120534,"byte_end":120595,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/ needed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120600,"byte_end":120611,"line_start":78,"line_end":78,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120616,"byte_end":120619,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`with_min_len`]: ../trait.IndexedParallelIterator.html#method.with_min_len","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120624,"byte_end":120703,"line_start":80,"line_end":80,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121283,"byte_end":121290,"line_start":94,"line_end":94,"column_start":8,"column_end":15},"name":"max_len","qualname":"::iter::plumbing::Producer::max_len","value":"pub fn max_len(&Self) -> usize","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The maximum number of items that we will process\n sequentially. Defaults to MAX, which means that we can choose\n not to split at all. This can be lowered using the\n [`with_max_len`] method, which will force us to create more\n parallel tasks. Note that Rayon automatically normally\n attempts to adjust the size of parallel splits to reduce\n overhead, so this should not be needed.","sig":null,"attributes":[{"value":"/ The maximum number of items that we will process","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120758,"byte_end":120810,"line_start":85,"line_end":85,"column_start":5,"column_end":57}},{"value":"/ sequentially. Defaults to MAX, which means that we can choose","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120815,"byte_end":120880,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ not to split at all. This can be lowered using the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120885,"byte_end":120939,"line_start":87,"line_end":87,"column_start":5,"column_end":59}},{"value":"/ [`with_max_len`] method, which will force us to create more","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":120944,"byte_end":121007,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/ parallel tasks. Note that Rayon automatically normally","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121012,"byte_end":121070,"line_start":89,"line_end":89,"column_start":5,"column_end":63}},{"value":"/ attempts to adjust the size of parallel splits to reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121075,"byte_end":121135,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ overhead, so this should not be needed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121140,"byte_end":121183,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121188,"byte_end":121191,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ [`with_max_len`]: ../trait.IndexedParallelIterator.html#method.with_max_len","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121196,"byte_end":121275,"line_start":93,"line_end":93,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121478,"byte_end":121486,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Producer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Split into two producers; one produces items `0..index`, the\n other `index..N`. Index must be less than or equal to `N`.\n","sig":null,"attributes":[{"value":"/ Split into two producers; one produces items `0..index`, the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121339,"byte_end":121403,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ other `index..N`. Index must be less than or equal to `N`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121408,"byte_end":121470,"line_start":99,"line_end":99,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121753,"byte_end":121762,"line_start":106,"line_end":106,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::Producer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121529,"byte_end":121592,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121597,"byte_end":121667,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121672,"byte_end":121675,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The provided implementation is sufficient for most iterables.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121680,"byte_end":121745,"line_start":105,"line_end":105,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122710,"byte_end":122718,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"name":"Consumer","qualname":"::iter::plumbing::Consumer","value":"Consumer<Item>: Send + Sized","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" A consumer is effectively a [generalized \"fold\" operation][fold],\n and in fact each consumer will eventually be converted into a\n [`Folder`]. What makes a consumer special is that, like a\n [`Producer`], it can be **split** into multiple consumers using\n the `split_at` method. When a consumer is split, it produces two\n consumers, as well as a **reducer**. The two consumers can be fed\n items independently, and when they are done the reducer is used to\n combine their two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ A consumer is effectively a [generalized \"fold\" operation][fold],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121890,"byte_end":121959,"line_start":114,"line_end":114,"column_start":1,"column_end":70}},{"value":"/ and in fact each consumer will eventually be converted into a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":121960,"byte_end":122025,"line_start":115,"line_end":115,"column_start":1,"column_end":66}},{"value":"/ [`Folder`]. What makes a consumer special is that, like a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122026,"byte_end":122087,"line_start":116,"line_end":116,"column_start":1,"column_end":62}},{"value":"/ [`Producer`], it can be **split** into multiple consumers using","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122088,"byte_end":122155,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ the `split_at` method. When a consumer is split, it produces two","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122156,"byte_end":122224,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ consumers, as well as a **reducer**. The two consumers can be fed","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122225,"byte_end":122294,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ items independently, and when they are done the reducer is used to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122295,"byte_end":122365,"line_start":120,"line_end":120,"column_start":1,"column_end":71}},{"value":"/ combine their two results into one. See [the `plumbing`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122366,"byte_end":122425,"line_start":121,"line_end":121,"column_start":1,"column_end":60}},{"value":"/ README][r] for further details.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122426,"byte_end":122461,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122462,"byte_end":122465,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122466,"byte_end":122548,"line_start":124,"line_end":124,"column_start":1,"column_end":83}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122549,"byte_end":122627,"line_start":125,"line_end":125,"column_start":1,"column_end":79}},{"value":"/ [`Folder`]: trait.Folder.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122628,"byte_end":122661,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/ [`Producer`]: trait.Producer.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122662,"byte_end":122699,"line_start":127,"line_end":127,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":169},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122819,"byte_end":122825,"line_start":130,"line_end":130,"column_start":10,"column_end":16},"name":"Folder","qualname":"::iter::plumbing::Consumer::Folder","value":"type Folder: Folder<Item, Result = Self::Result>;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" The type of folder that this consumer can be converted into.\n","sig":null,"attributes":[{"value":"/ The type of folder that this consumer can be converted into.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122745,"byte_end":122809,"line_start":129,"line_end":129,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":170},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122946,"byte_end":122953,"line_start":133,"line_end":133,"column_start":10,"column_end":17},"name":"Reducer","qualname":"::iter::plumbing::Consumer::Reducer","value":"type Reducer: Reducer<Self::Result>;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" The type of reducer that is produced if this consumer is split.\n","sig":null,"attributes":[{"value":"/ The type of reducer that is produced if this consumer is split.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122869,"byte_end":122936,"line_start":132,"line_end":132,"column_start":5,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":171},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123059,"byte_end":123065,"line_start":136,"line_end":136,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Consumer::Result","value":"type Result: Send;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" The type of result that this consumer will ultimately produce.\n","sig":null,"attributes":[{"value":"/ The type of result that this consumer will ultimately produce.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122983,"byte_end":123049,"line_start":135,"line_end":135,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123301,"byte_end":123309,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"split_at","qualname":"::iter::plumbing::Consumer::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self, Self::Reducer)","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Divide the consumer into two consumers, one processing items\n `0..index` and one processing items from `index..`. Also\n produces a reducer that can be used to reduce the results at\n the end.\n","sig":null,"attributes":[{"value":"/ Divide the consumer into two consumers, one processing items","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123078,"byte_end":123142,"line_start":138,"line_end":138,"column_start":5,"column_end":69}},{"value":"/ `0..index` and one processing items from `index..`. Also","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123147,"byte_end":123207,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ produces a reducer that can be used to reduce the results at","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123212,"byte_end":123276,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/ the end.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123281,"byte_end":123293,"line_start":141,"line_end":141,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123495,"byte_end":123506,"line_start":146,"line_end":146,"column_start":8,"column_end":19},"name":"into_folder","qualname":"::iter::plumbing::Consumer::into_folder","value":"pub fn into_folder(Self) -> Self::Folder","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Convert the consumer into a folder that can consume items\n sequentially, eventually producing a final result.\n","sig":null,"attributes":[{"value":"/ Convert the consumer into a folder that can consume items","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123367,"byte_end":123428,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ sequentially, eventually producing a final result.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123433,"byte_end":123487,"line_start":145,"line_end":145,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123665,"byte_end":123669,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Consumer::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Hint whether this `Consumer` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Consumer` would like to stop processing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123535,"byte_end":123597,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123602,"byte_end":123657,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124032,"byte_end":124038,"line_start":159,"line_end":159,"column_start":11,"column_end":17},"name":"Folder","qualname":"::iter::plumbing::Folder","value":"Folder<Item>: Sized","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":182}],"decl_id":null,"docs":" The `Folder` trait encapsulates [the standard fold\n operation][fold].  It can be fed many items using the `consume`\n method. At the end, once all items have been consumed, it can then\n be converted (using `complete`) into a final value.","sig":null,"attributes":[{"value":"/ The `Folder` trait encapsulates [the standard fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123689,"byte_end":123743,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/ operation][fold].  It can be fed many items using the `consume`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123744,"byte_end":123811,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ method. At the end, once all items have been consumed, it can then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123812,"byte_end":123882,"line_start":155,"line_end":155,"column_start":1,"column_end":71}},{"value":"/ be converted (using `complete`) into a final value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123883,"byte_end":123938,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123939,"byte_end":123942,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ [fold]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":123943,"byte_end":124021,"line_start":158,"line_end":158,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":177},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124138,"byte_end":124144,"line_start":161,"line_end":161,"column_start":10,"column_end":16},"name":"Result","qualname":"::iter::plumbing::Folder::Result","value":"type Result;","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" The type of result that will ultimately be produced by the folder.\n","sig":null,"attributes":[{"value":"/ The type of result that will ultimately be produced by the folder.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124058,"byte_end":124128,"line_start":160,"line_end":160,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124213,"byte_end":124220,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"consume","qualname":"::iter::plumbing::Folder::consume","value":"pub fn consume(Self, Item) -> Self","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Consume next item and return new sequential state.\n","sig":null,"attributes":[{"value":"/ Consume next item and return new sequential state.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124151,"byte_end":124205,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124649,"byte_end":124661,"line_start":174,"line_end":174,"column_start":8,"column_end":20},"name":"consume_iter","qualname":"::iter::plumbing::Folder::consume_iter","value":"pub fn consume_iter<I>(Self, I) -> Self where I: IntoIterator<Item = Item>","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Consume items from the iterator until full, and return new sequential state.","sig":null,"attributes":[{"value":"/ Consume items from the iterator until full, and return new sequential state.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124253,"byte_end":124333,"line_start":166,"line_end":166,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124338,"byte_end":124341,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This method is **optional**. The default simply iterates over","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124346,"byte_end":124411,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ `iter`, invoking `consume` and checking after each iteration","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124416,"byte_end":124480,"line_start":169,"line_end":169,"column_start":5,"column_end":69}},{"value":"/ whether `full` returns false.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124485,"byte_end":124518,"line_start":170,"line_end":170,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124523,"byte_end":124526,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The main reason to override it is if you can provide a more","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124531,"byte_end":124594,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ specialized, efficient implementation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124599,"byte_end":124641,"line_start":173,"line_end":173,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124969,"byte_end":124977,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"complete","qualname":"::iter::plumbing::Folder::complete","value":"pub fn complete(Self) -> Self::Result","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Finish consuming items, produce final result.\n","sig":null,"attributes":[{"value":"/ Finish consuming items, produce final result.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124912,"byte_end":124961,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125134,"byte_end":125138,"line_start":192,"line_end":192,"column_start":8,"column_end":12},"name":"full","qualname":"::iter::plumbing::Folder::full","value":"pub fn full(&Self) -> bool","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Hint whether this `Folder` would like to stop processing\n further items, e.g. if a search has been completed.\n","sig":null,"attributes":[{"value":"/ Hint whether this `Folder` would like to stop processing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125006,"byte_end":125066,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ further items, e.g. if a search has been completed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125071,"byte_end":125126,"line_start":191,"line_end":191,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":183},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125568,"byte_end":125575,"line_start":202,"line_end":202,"column_start":11,"column_end":18},"name":"Reducer","qualname":"::iter::plumbing::Reducer","value":"Reducer<Result>","parent":null,"children":[{"krate":0,"index":185}],"decl_id":null,"docs":" The reducer is the final step of a `Consumer` -- after a consumer\n has been split into two parts, and each of those parts has been\n fully processed, we are left with two results. The reducer is then\n used to combine those two results into one. See [the `plumbing`\n README][r] for further details.","sig":null,"attributes":[{"value":"/ The reducer is the final step of a `Consumer` -- after a consumer","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125158,"byte_end":125227,"line_start":195,"line_end":195,"column_start":1,"column_end":70}},{"value":"/ has been split into two parts, and each of those parts has been","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125228,"byte_end":125295,"line_start":196,"line_end":196,"column_start":1,"column_end":68}},{"value":"/ fully processed, we are left with two results. The reducer is then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125296,"byte_end":125366,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ used to combine those two results into one. See [the `plumbing`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125367,"byte_end":125434,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ README][r] for further details.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125435,"byte_end":125470,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125471,"byte_end":125474,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [r]: https://github.com/rayon-rs/rayon/blob/master/src/iter/plumbing/README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125475,"byte_end":125557,"line_start":201,"line_end":201,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125676,"byte_end":125682,"line_start":205,"line_end":205,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::plumbing::Reducer::reduce","value":"pub fn reduce(Self, Result, Result) -> Result","parent":{"krate":0,"index":183},"children":[],"decl_id":null,"docs":" Reduce two final results into one; this is executed after a\n split.\n","sig":null,"attributes":[{"value":"/ Reduce two final results into one; this is executed after a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125590,"byte_end":125653,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/ split.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125658,"byte_end":125668,"line_start":204,"line_end":204,"column_start":5,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126044,"byte_end":126061,"line_start":213,"line_end":213,"column_start":11,"column_end":28},"name":"UnindexedConsumer","qualname":"::iter::plumbing::UnindexedConsumer","value":"UnindexedConsumer<I>: Consumer<I>","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":" A stateless consumer can be freely copied. These consumers can be\n used like regular consumers, but they also support a\n `split_off_left` method that does not take an index to split, but\n simply splits at some arbitrary point (`for_each`, for example,\n produces an unindexed consumer).\n","sig":null,"attributes":[{"value":"/ A stateless consumer can be freely copied. These consumers can be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125732,"byte_end":125801,"line_start":208,"line_end":208,"column_start":1,"column_end":70}},{"value":"/ used like regular consumers, but they also support a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125802,"byte_end":125858,"line_start":209,"line_end":209,"column_start":1,"column_end":57}},{"value":"/ `split_off_left` method that does not take an index to split, but","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125859,"byte_end":125928,"line_start":210,"line_end":210,"column_start":1,"column_end":70}},{"value":"/ simply splits at some arbitrary point (`for_each`, for example,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125929,"byte_end":125996,"line_start":211,"line_end":211,"column_start":1,"column_end":68}},{"value":"/ produces an unindexed consumer).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":125997,"byte_end":126033,"line_start":212,"line_end":212,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126537,"byte_end":126551,"line_start":221,"line_end":221,"column_start":8,"column_end":22},"name":"split_off_left","qualname":"::iter::plumbing::UnindexedConsumer::split_off_left","value":"pub fn split_off_left(&Self) -> Self","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Splits off a \"left\" consumer and returns it. The `self`\n consumer should then be used to consume the \"right\" portion of\n the data. (The ordering matters for methods like find_first --\n values produced by the returned value are given precedence\n over values produced by `self`.) Once the left and right\n halves have been fully consumed, you should reduce the results\n with the result of `to_reducer`.\n","sig":null,"attributes":[{"value":"/ Splits off a \"left\" consumer and returns it. The `self`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126084,"byte_end":126143,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ consumer should then be used to consume the \"right\" portion of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126148,"byte_end":126214,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"/ the data. (The ordering matters for methods like find_first --","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126219,"byte_end":126285,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ values produced by the returned value are given precedence","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126290,"byte_end":126352,"line_start":217,"line_end":217,"column_start":5,"column_end":67}},{"value":"/ over values produced by `self`.) Once the left and right","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126357,"byte_end":126417,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/ halves have been fully consumed, you should reduce the results","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126422,"byte_end":126488,"line_start":219,"line_end":219,"column_start":5,"column_end":71}},{"value":"/ with the result of `to_reducer`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126493,"byte_end":126529,"line_start":220,"line_end":220,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126673,"byte_end":126683,"line_start":225,"line_end":225,"column_start":8,"column_end":18},"name":"to_reducer","qualname":"::iter::plumbing::UnindexedConsumer::to_reducer","value":"pub fn to_reducer(&Self) -> Self::Reducer","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Creates a reducer that can be used to combine the results from\n a split consumer.\n","sig":null,"attributes":[{"value":"/ Creates a reducer that can be used to combine the results from","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126573,"byte_end":126639,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"/ a split consumer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126644,"byte_end":126665,"line_start":224,"line_end":224,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":190},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127160,"byte_end":127177,"line_start":236,"line_end":236,"column_start":11,"column_end":28},"name":"UnindexedProducer","qualname":"::iter::plumbing::UnindexedProducer","value":"UnindexedProducer: Send + Sized","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"decl_id":null,"docs":" A variant on `Producer` which does not know its exact length or\n cannot represent it in a `usize`. These producers act like\n ordinary producers except that they cannot be told to split at a\n particular point. Instead, you just ask them to split 'somewhere'.","sig":null,"attributes":[{"value":"/ A variant on `Producer` which does not know its exact length or","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126712,"byte_end":126779,"line_start":228,"line_end":228,"column_start":1,"column_end":68}},{"value":"/ cannot represent it in a `usize`. These producers act like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126780,"byte_end":126842,"line_start":229,"line_end":229,"column_start":1,"column_end":63}},{"value":"/ ordinary producers except that they cannot be told to split at a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126843,"byte_end":126911,"line_start":230,"line_end":230,"column_start":1,"column_end":69}},{"value":"/ particular point. Instead, you just ask them to split 'somewhere'.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126912,"byte_end":126982,"line_start":231,"line_end":231,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126983,"byte_end":126986,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ (In principle, `Producer` could extend this trait; however, it","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126987,"byte_end":127053,"line_start":233,"line_end":233,"column_start":1,"column_end":67}},{"value":"/ does not because to do so would require producers to carry their","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127054,"byte_end":127122,"line_start":234,"line_end":234,"column_start":1,"column_end":69}},{"value":"/ own length with them.)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127123,"byte_end":127149,"line_start":235,"line_end":235,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":191},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127255,"byte_end":127259,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::plumbing::UnindexedProducer::Item","value":"type Item;","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" The type of item returned by this producer.\n","sig":null,"attributes":[{"value":"/ The type of item returned by this producer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127198,"byte_end":127245,"line_start":237,"line_end":237,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127348,"byte_end":127353,"line_start":241,"line_end":241,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::plumbing::UnindexedProducer::split","value":"pub fn split(Self) -> (Self, Option<Self>)","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" Split midway into a new producer if possible, otherwise return `None`.\n","sig":null,"attributes":[{"value":"/ Split midway into a new producer if possible, otherwise return `None`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127266,"byte_end":127340,"line_start":240,"line_end":240,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127536,"byte_end":127545,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::plumbing::UnindexedProducer::fold_with","value":"pub fn fold_with<F>(Self, F) -> F where F: Folder<Self::Item>","parent":{"krate":0,"index":190},"children":[],"decl_id":null,"docs":" Iterate the producer, feeding each element to `folder`, and\n stop when the folder is full (or all elements have been consumed).\n","sig":null,"attributes":[{"value":"/ Iterate the producer, feeding each element to `folder`, and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127390,"byte_end":127453,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ stop when the folder is full (or all elements have been consumed).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127458,"byte_end":127528,"line_start":244,"line_end":244,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":201},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131365,"byte_end":131371,"line_start":351,"line_end":351,"column_start":8,"column_end":14},"name":"bridge","qualname":"::iter::plumbing::bridge","value":"pub fn bridge<I, C>(I, C) -> C::Result where I: IndexedParallelIterator,\nC: Consumer<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a parallel iterator to a\n consumer. It will convert the `par_iter` into a producer P and\n then pull items from P and feed them to `consumer`, splitting and\n creating parallel threads as needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a parallel iterator to a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":130786,"byte_end":130856,"line_start":340,"line_end":340,"column_start":1,"column_end":71}},{"value":"/ consumer. It will convert the `par_iter` into a producer P and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":130857,"byte_end":130923,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/ then pull items from P and feed them to `consumer`, splitting and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":130924,"byte_end":130993,"line_start":342,"line_end":342,"column_start":1,"column_end":70}},{"value":"/ creating parallel threads as needed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":130994,"byte_end":131034,"line_start":343,"line_end":343,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131035,"byte_end":131038,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131039,"byte_end":131101,"line_start":345,"line_end":345,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131102,"byte_end":131158,"line_start":346,"line_end":346,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131159,"byte_end":131204,"line_start":347,"line_end":347,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131205,"byte_end":131208,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131209,"byte_end":131289,"line_start":349,"line_end":349,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131290,"byte_end":131357,"line_start":350,"line_end":350,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":214},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132617,"byte_end":132641,"line_start":391,"line_end":391,"column_start":8,"column_end":32},"name":"bridge_producer_consumer","qualname":"::iter::plumbing::bridge_producer_consumer","value":"pub fn bridge_producer_consumer<P, C>(usize, P, C) -> C::Result where\nP: Producer, C: Consumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" This helper function is used to \"connect\" a producer and a\n consumer. You may prefer to call [`bridge`], which wraps this\n function. This function will draw items from `producer` and feed\n them to `consumer`, splitting and creating parallel tasks when\n needed.","sig":null,"attributes":[{"value":"/ This helper function is used to \"connect\" a producer and a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131979,"byte_end":132041,"line_start":378,"line_end":378,"column_start":1,"column_end":63}},{"value":"/ consumer. You may prefer to call [`bridge`], which wraps this","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132042,"byte_end":132107,"line_start":379,"line_end":379,"column_start":1,"column_end":66}},{"value":"/ function. This function will draw items from `producer` and feed","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132108,"byte_end":132176,"line_start":380,"line_end":380,"column_start":1,"column_end":69}},{"value":"/ them to `consumer`, splitting and creating parallel tasks when","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132177,"byte_end":132243,"line_start":381,"line_end":381,"column_start":1,"column_end":67}},{"value":"/ needed.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132244,"byte_end":132255,"line_start":382,"line_end":382,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132256,"byte_end":132259,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ This is useful when you are implementing your own parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132260,"byte_end":132322,"line_start":384,"line_end":384,"column_start":1,"column_end":63}},{"value":"/ iterators: it is often used as the definition of the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132323,"byte_end":132379,"line_start":385,"line_end":385,"column_start":1,"column_end":57}},{"value":"/ [`drive_unindexed`] or [`drive`] methods.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132380,"byte_end":132425,"line_start":386,"line_end":386,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132426,"byte_end":132429,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ [`bridge`]: fn.bridge.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132430,"byte_end":132460,"line_start":388,"line_end":388,"column_start":1,"column_end":31}},{"value":"/ [`drive_unindexed`]: ../trait.ParallelIterator.html#tymethod.drive_unindexed","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132461,"byte_end":132541,"line_start":389,"line_end":389,"column_start":1,"column_end":81}},{"value":"/ [`drive`]: ../trait.IndexedParallelIterator.html#tymethod.drive","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":132542,"byte_end":132609,"line_start":390,"line_end":390,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":134417,"byte_end":134433,"line_start":446,"line_end":446,"column_start":8,"column_end":24},"name":"bridge_unindexed","qualname":"::iter::plumbing::bridge_unindexed","value":"pub fn bridge_unindexed<P, C>(P, C) -> C::Result where P: UnindexedProducer,\nC: UnindexedConsumer<P::Item>","parent":null,"children":[],"decl_id":null,"docs":" A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","sig":null,"attributes":[{"value":"/ A variant of [`bridge_producer_consumer`] where the producer is an unindexed producer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":134248,"byte_end":134338,"line_start":443,"line_end":443,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":134339,"byte_end":134342,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ [`bridge_producer_consumer`]: fn.bridge_producer_consumer.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":134343,"byte_end":134409,"line_start":445,"line_end":445,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":5462},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136290,"byte_end":136295,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::chain::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":5465},{"krate":0,"index":5466}],"decl_id":null,"docs":" `Chain` is an iterator that joins `b` after `a` in one continuous iterator.\n This struct is created by the [`chain()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Chain` is an iterator that joins `b` after `a` in one continuous iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":135908,"byte_end":135987,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`chain()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":135988,"byte_end":136064,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136065,"byte_end":136068,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`chain()`]: trait.ParallelIterator.html#method.chain","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136069,"byte_end":136126,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136127,"byte_end":136180,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136181,"byte_end":136254,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5475},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143223,"byte_end":143229,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::iter::chunks::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":5477},{"krate":0,"index":5478}],"decl_id":null,"docs":" `Chunks` is an iterator that groups elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Chunks` is an iterator that groups elements of an underlying iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":142810,"byte_end":142885,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":142886,"byte_end":142889,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`chunks()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":142890,"byte_end":142974,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":142975,"byte_end":142978,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`chunks()`]: trait.IndexedParallelIterator.html#method.chunks","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":142979,"byte_end":143045,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143046,"byte_end":143113,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143114,"byte_end":143187,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5485},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148213,"byte_end":148219,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::cloned::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":5487}],"decl_id":null,"docs":" `Cloned` is an iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Cloned` is an iterator that clones the elements of an underlying iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":147824,"byte_end":147903,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":147904,"byte_end":147907,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`cloned()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":147908,"byte_end":147985,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":147986,"byte_end":147989,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`cloned()`]: trait.ParallelIterator.html#method.cloned","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":147990,"byte_end":148049,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148050,"byte_end":148103,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148104,"byte_end":148177,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5494},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178391,"byte_end":178397,"line_start":14,"line_end":14,"column_start":12,"column_end":18},"name":"Copied","qualname":"::iter::copied::Copied","value":"Copied {  }","parent":null,"children":[{"krate":0,"index":5496}],"decl_id":null,"docs":" `Copied` is an iterator that copies the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Copied` is an iterator that copies the elements of an underlying iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178002,"byte_end":178081,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178082,"byte_end":178085,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`copied()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178086,"byte_end":178163,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178164,"byte_end":178167,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`copied()`]: trait.ParallelIterator.html#method.copied","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178168,"byte_end":178227,"line_start":10,"line_end":10,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178228,"byte_end":178281,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178282,"byte_end":178355,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183547,"byte_end":183552,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::empty::empty","value":"pub fn empty<T: Send>() -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces nothing.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces nothing.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183129,"byte_end":183183,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183184,"byte_end":183187,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be used for code that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183188,"byte_end":183265,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ deals with generic parallel iterators.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183266,"byte_end":183308,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183309,"byte_end":183312,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183313,"byte_end":183327,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183328,"byte_end":183331,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183332,"byte_end":183339,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183340,"byte_end":183366,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::empty;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183367,"byte_end":183394,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183395,"byte_end":183398,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183399,"byte_end":183437,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/     .chain(empty())","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183438,"byte_end":183461,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183462,"byte_end":183491,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183492,"byte_end":183495,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.count(), 10_000);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183496,"byte_end":183531,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183532,"byte_end":183539,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183705,"byte_end":183710,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::empty::Empty","value":"Empty {  }","parent":null,"children":[{"krate":0,"index":666}],"decl_id":null,"docs":" Iterator adaptor for [the `empty()` function](fn.empty.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `empty()` function](fn.empty.html).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183628,"byte_end":183693,"line_start":30,"line_end":30,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5503},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185718,"byte_end":185727,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::enumerate::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":5505}],"decl_id":null,"docs":" `Enumerate` is an iterator that returns the current count along with the element.\n This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Enumerate` is an iterator that returns the current count along with the element.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185290,"byte_end":185375,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ This struct is created by the [`enumerate()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185376,"byte_end":185463,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185464,"byte_end":185467,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`enumerate()`]: trait.IndexedParallelIterator.html#method.enumerate","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185468,"byte_end":185540,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185541,"byte_end":185608,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185609,"byte_end":185682,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5512},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198942,"byte_end":198948,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":5515},{"krate":0,"index":5516}],"decl_id":null,"docs":" `Filter` takes a predicate `filter_op` and filters out elements that match.\n This struct is created by the [`filter()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Filter` takes a predicate `filter_op` and filters out elements that match.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198564,"byte_end":198643,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ This struct is created by the [`filter()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198644,"byte_end":198721,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198722,"byte_end":198725,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter()`]: trait.ParallelIterator.html#method.filter","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198726,"byte_end":198785,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198786,"byte_end":198839,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":198840,"byte_end":198913,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5521},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202481,"byte_end":202490,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":5524},{"krate":0,"index":5525}],"decl_id":null,"docs":" `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.\n This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `FilterMap` creates an iterator that uses `filter_op` to both filter and map elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202079,"byte_end":202169,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/ This struct is created by the [`filter_map()`] method on [`ParallelIterator`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202170,"byte_end":202252,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202253,"byte_end":202256,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`filter_map()`]: trait.ParallelIterator.html#method.filter_map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202257,"byte_end":202324,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202325,"byte_end":202378,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202379,"byte_end":202452,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5538},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216505,"byte_end":216512,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::flat_map::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":5541},{"krate":0,"index":5542}],"decl_id":null,"docs":" `FlatMap` maps each element to an iterator, then flattens these iterators together.\n This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FlatMap` maps each element to an iterator, then flattens these iterators together.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216113,"byte_end":216200,"line_start":6,"line_end":6,"column_start":1,"column_end":88}},{"value":"/ This struct is created by the [`flat_map()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216201,"byte_end":216280,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216281,"byte_end":216284,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`flat_map()`]: trait.ParallelIterator.html#method.flat_map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216285,"byte_end":216348,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216349,"byte_end":216402,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216403,"byte_end":216476,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5547},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220557,"byte_end":220564,"line_start":12,"line_end":12,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::iter::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":5549}],"decl_id":null,"docs":" `Flatten` turns each element to an iterator, then flattens these iterators\n together. This struct is created by the [`flatten()`] method on\n [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `Flatten` turns each element to an iterator, then flattens these iterators","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220155,"byte_end":220233,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ together. This struct is created by the [`flatten()`] method on","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220234,"byte_end":220301,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220302,"byte_end":220327,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220328,"byte_end":220331,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`flatten()`]: trait.ParallelIterator.html#method.flatten","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220332,"byte_end":220393,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220394,"byte_end":220447,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220448,"byte_end":220521,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5556},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221984,"byte_end":221988,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"Fold","qualname":"::iter::fold::Fold","value":"Fold {  }","parent":null,"children":[{"krate":0,"index":5560},{"krate":0,"index":5561},{"krate":0,"index":5562}],"decl_id":null,"docs":" `Fold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Fold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221599,"byte_end":221691,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ This struct is created by the [`fold()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221692,"byte_end":221767,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221768,"byte_end":221771,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`fold()`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221772,"byte_end":221827,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221828,"byte_end":221881,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221882,"byte_end":221955,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5568},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":226103,"byte_end":226111,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"FoldWith","qualname":"::iter::fold::FoldWith","value":"FoldWith {  }","parent":null,"children":[{"krate":0,"index":5572},{"krate":0,"index":5573},{"krate":0,"index":5574}],"decl_id":null,"docs":" `FoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `FoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225699,"byte_end":225795,"line_start":197,"line_end":197,"column_start":1,"column_end":97}},{"value":"/ This struct is created by the [`fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225796,"byte_end":225876,"line_start":198,"line_end":198,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225877,"byte_end":225880,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ [`fold_with()`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225881,"byte_end":225946,"line_start":200,"line_end":200,"column_start":1,"column_end":66}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225947,"byte_end":226000,"line_start":201,"line_end":201,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":226001,"byte_end":226074,"line_start":202,"line_end":202,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5580},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236352,"byte_end":236359,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::inspect::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":5583},{"krate":0,"index":5584}],"decl_id":null,"docs":" `Inspect` is an iterator that calls a function with a reference to each\n element before yielding it.","sig":null,"attributes":[{"value":"/ `Inspect` is an iterator that calls a function with a reference to each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":235939,"byte_end":236014,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ element before yielding it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236015,"byte_end":236046,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236047,"byte_end":236050,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`inspect()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236051,"byte_end":236129,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236130,"byte_end":236133,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`inspect()`]: trait.ParallelIterator.html#method.inspect","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236134,"byte_end":236195,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236196,"byte_end":236249,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236250,"byte_end":236323,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5589},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242494,"byte_end":242504,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::iter::interleave::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":5592},{"krate":0,"index":5593}],"decl_id":null,"docs":" `Interleave` is an iterator that interleaves elements of iterators\n `i` and `j` in one continuous iterator. This struct is created by\n the [`interleave()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Interleave` is an iterator that interleaves elements of iterators","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242034,"byte_end":242104,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"/ `i` and `j` in one continuous iterator. This struct is created by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242105,"byte_end":242174,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ the [`interleave()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242175,"byte_end":242237,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242238,"byte_end":242241,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`interleave()`]: trait.IndexedParallelIterator.html#method.interleave","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242242,"byte_end":242316,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242317,"byte_end":242384,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242385,"byte_end":242458,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5602},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251505,"byte_end":251523,"line_start":15,"line_end":15,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::iter::interleave_shortest::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":5605}],"decl_id":null,"docs":" `InterleaveShortest` is an iterator that works similarly to\n `Interleave`, but this version stops returning elements once one\n of the iterators run out.","sig":null,"attributes":[{"value":"/ `InterleaveShortest` is an iterator that works similarly to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":250961,"byte_end":251024,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/ `Interleave`, but this version stops returning elements once one","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251025,"byte_end":251093,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ of the iterators run out.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251094,"byte_end":251123,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251124,"byte_end":251127,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`interleave_shortest()`] method on","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251128,"byte_end":251197,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ [`IndexedParallelIterator`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251198,"byte_end":251230,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251231,"byte_end":251234,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`interleave_shortest()`]: trait.IndexedParallelIterator.html#method.interleave_shortest","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251235,"byte_end":251327,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251328,"byte_end":251395,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251396,"byte_end":251469,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5614},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253742,"byte_end":253753,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::iter::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":5616},{"krate":0,"index":5617}],"decl_id":null,"docs":" `Intersperse` is an iterator that inserts a particular item between each\n item of the adapted iterator.  This struct is created by the\n [`intersperse()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `Intersperse` is an iterator that inserts a particular item between each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253310,"byte_end":253386,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ item of the adapted iterator.  This struct is created by the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253387,"byte_end":253451,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`intersperse()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253452,"byte_end":253504,"line_start":8,"line_end":8,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253505,"byte_end":253508,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`intersperse()`]: trait.ParallelIterator.html#method.intersperse","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253509,"byte_end":253578,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253579,"byte_end":253632,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253633,"byte_end":253706,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5624},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263959,"byte_end":263965,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"MinLen","qualname":"::iter::len::MinLen","value":"MinLen {  }","parent":null,"children":[{"krate":0,"index":5626},{"krate":0,"index":5627}],"decl_id":null,"docs":" `MinLen` is an iterator that imposes a minimum length on iterator splits.\n This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MinLen` is an iterator that imposes a minimum length on iterator splits.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263545,"byte_end":263622,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263623,"byte_end":263708,"line_start":6,"line_end":6,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263709,"byte_end":263712,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`min_len()`]: trait.IndexedParallelIterator.html#method.min_len","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263713,"byte_end":263781,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263782,"byte_end":263849,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":263850,"byte_end":263923,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5634},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267044,"byte_end":267050,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"MaxLen","qualname":"::iter::len::MaxLen","value":"MaxLen {  }","parent":null,"children":[{"krate":0,"index":5636},{"krate":0,"index":5637}],"decl_id":null,"docs":" `MaxLen` is an iterator that imposes a maximum length on iterator splits.\n This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `MaxLen` is an iterator that imposes a maximum length on iterator splits.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":266630,"byte_end":266707,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":266708,"byte_end":266793,"line_start":140,"line_end":140,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":266794,"byte_end":266797,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`max_len()`]: trait.IndexedParallelIterator.html#method.max_len","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":266798,"byte_end":266866,"line_start":142,"line_end":142,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":266867,"byte_end":266934,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":266935,"byte_end":267008,"line_start":144,"line_end":144,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5644},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270173,"byte_end":270176,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":5647},{"krate":0,"index":5648}],"decl_id":null,"docs":" `Map` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `Map` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":269799,"byte_end":269879,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":269880,"byte_end":269883,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":269884,"byte_end":269958,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":269959,"byte_end":269962,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`map()`]: trait.ParallelIterator.html#method.map","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":269963,"byte_end":270016,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270017,"byte_end":270070,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270071,"byte_end":270144,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5653},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276151,"byte_end":276158,"line_start":14,"line_end":14,"column_start":12,"column_end":19},"name":"MapWith","qualname":"::iter::map_with::MapWith","value":"MapWith {  }","parent":null,"children":[{"krate":0,"index":5657},{"krate":0,"index":5658},{"krate":0,"index":5659}],"decl_id":null,"docs":" `MapWith` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapWith` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":275758,"byte_end":275842,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":275843,"byte_end":275846,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":275847,"byte_end":275926,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":275927,"byte_end":275930,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`map_with()`]: trait.ParallelIterator.html#method.map_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":275931,"byte_end":275994,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":275995,"byte_end":276048,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276049,"byte_end":276122,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5665},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284219,"byte_end":284226,"line_start":346,"line_end":346,"column_start":12,"column_end":19},"name":"MapInit","qualname":"::iter::map_with::MapInit","value":"MapInit {  }","parent":null,"children":[{"krate":0,"index":5669},{"krate":0,"index":5670},{"krate":0,"index":5671}],"decl_id":null,"docs":" `MapInit` is an iterator that transforms the elements of an underlying iterator.","sig":null,"attributes":[{"value":"/ `MapInit` is an iterator that transforms the elements of an underlying iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":283826,"byte_end":283910,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":283911,"byte_end":283914,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`map_init()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":283915,"byte_end":283994,"line_start":340,"line_end":340,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":283995,"byte_end":283998,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ [`map_init()`]: trait.ParallelIterator.html#method.map_init","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":283999,"byte_end":284062,"line_start":342,"line_end":342,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284063,"byte_end":284116,"line_start":343,"line_end":343,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284117,"byte_end":284190,"line_start":344,"line_end":344,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5677},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292380,"byte_end":292388,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"MultiZip","qualname":"::iter::multizip::MultiZip","value":"MultiZip {  }","parent":null,"children":[{"krate":0,"index":5679}],"decl_id":null,"docs":" `MultiZip` is an iterator that zips up a tuple of parallel iterators to\n produce tuples of their items.","sig":null,"attributes":[{"value":"/ `MultiZip` is an iterator that zips up a tuple of parallel iterators to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":289964,"byte_end":290039,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ produce tuples of their items.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290040,"byte_end":290074,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290075,"byte_end":290078,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is created by calling `into_par_iter()` on a tuple of types that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290079,"byte_end":290150,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ implement `IntoParallelIterator`, or `par_iter()`/`par_iter_mut()` with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290151,"byte_end":290226,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types that are iterable by reference.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290227,"byte_end":290268,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290269,"byte_end":290272,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The implementation currently support tuples up to length 12.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290273,"byte_end":290337,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290338,"byte_end":290341,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290342,"byte_end":290356,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290357,"byte_end":290360,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290361,"byte_end":290368,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290369,"byte_end":290395,"line_start":16,"line_end":16,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290396,"byte_end":290399,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // This will iterate `r` by mutable reference, like `par_iter_mut()`, while","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290400,"byte_end":290479,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ // ranges are all iterated by value like `into_par_iter()`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290480,"byte_end":290543,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ // Note that the zipped iterator is only as long as the shortest input.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290544,"byte_end":290619,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ let mut r = vec![0; 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290620,"byte_end":290647,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/ (&mut r, 1..10, 10..100, 100..1000).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290648,"byte_end":290703,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     .for_each(|(r, x, y, z)| *r = x * y + z);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290704,"byte_end":290753,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290754,"byte_end":290757,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&r, &[1 * 10 + 100, 2 * 11 + 101, 3 * 12 + 102]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290758,"byte_end":290822,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290823,"byte_end":290830,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290831,"byte_end":290834,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ For a group that should all be iterated by reference, you can use a tuple reference.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290835,"byte_end":290923,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290924,"byte_end":290927,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290928,"byte_end":290935,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290936,"byte_end":290962,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290963,"byte_end":290966,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let xs: Vec<_> = (1..10).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":290967,"byte_end":291006,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/ let ys: Vec<_> = (10..100).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291007,"byte_end":291048,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ let zs: Vec<_> = (100..1000).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291049,"byte_end":291092,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291093,"byte_end":291096,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Reference each input separately with `IntoParallelIterator`:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291097,"byte_end":291164,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ let r1: Vec<_> = (&xs, &ys, &zs).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291165,"byte_end":291217,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291218,"byte_end":291253,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291254,"byte_end":291273,"line_start":40,"line_end":40,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291274,"byte_end":291277,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Reference them all together with `IntoParallelRefIterator`:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291278,"byte_end":291344,"line_start":42,"line_end":42,"column_start":1,"column_end":67}},{"value":"/ let r2: Vec<_> = (xs, ys, zs).par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291345,"byte_end":291389,"line_start":43,"line_end":43,"column_start":1,"column_end":45}},{"value":"/     .map(|(x, y, z)| x * y + z)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291390,"byte_end":291425,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291426,"byte_end":291445,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291446,"byte_end":291449,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(r1, r2);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291450,"byte_end":291473,"line_start":47,"line_end":47,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291474,"byte_end":291481,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291482,"byte_end":291485,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Mutable references to a tuple will work similarly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291486,"byte_end":291540,"line_start":50,"line_end":50,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291541,"byte_end":291544,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291545,"byte_end":291552,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291553,"byte_end":291579,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291580,"byte_end":291583,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let mut xs: Vec<_> = (1..4).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291584,"byte_end":291626,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ let mut ys: Vec<_> = (-4..-1).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291627,"byte_end":291671,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ let mut zs = vec![0; 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291672,"byte_end":291700,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291701,"byte_end":291704,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference each input separately with `IntoParallelIterator`:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291705,"byte_end":291780,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ (&mut xs, &mut ys, &mut zs).into_par_iter().for_each(|(x, y, z)| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291781,"byte_end":291851,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/     *z += *x + *y;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291852,"byte_end":291874,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291875,"byte_end":291904,"line_start":62,"line_end":62,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291905,"byte_end":291912,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291913,"byte_end":291916,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(xs, (vec![-4, -3, -2]));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291917,"byte_end":291956,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(ys, (vec![1, 2, 3]));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291957,"byte_end":291993,"line_start":66,"line_end":66,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(zs, (vec![-3, -1, 1]));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":291994,"byte_end":292032,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292033,"byte_end":292036,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Mutably reference them all together with `IntoParallelRefMutIterator`:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292037,"byte_end":292114,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ let mut tuple = (xs, ys, zs);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292115,"byte_end":292148,"line_start":70,"line_end":70,"column_start":1,"column_end":34}},{"value":"/ tuple.par_iter_mut().for_each(|(x, y, z)| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292149,"byte_end":292196,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/     *z += *x + *y;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292197,"byte_end":292219,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/     std::mem::swap(x, y);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292220,"byte_end":292249,"line_start":73,"line_end":73,"column_start":1,"column_end":30}},{"value":"/ });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292250,"byte_end":292257,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292258,"byte_end":292261,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(tuple, (vec![1, 2, 3], vec![-4, -3, -2], vec![-6, -2, 2]));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292262,"byte_end":292336,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/multizip.rs","byte_start":292337,"byte_end":292344,"line_start":77,"line_end":77,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2331},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300649,"byte_end":300653,"line_start":24,"line_end":24,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::once::once","value":"pub fn once<T: Send>(T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces an element exactly once.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces an element exactly once.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300007,"byte_end":300077,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300078,"byte_end":300081,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This admits no parallelism on its own, but it could be chained to existing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300082,"byte_end":300160,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ parallel iterators to extend their contents, or otherwise used for any code","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300161,"byte_end":300240,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ that deals with generic parallel iterators.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300241,"byte_end":300288,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300289,"byte_end":300292,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300293,"byte_end":300307,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300308,"byte_end":300311,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300312,"byte_end":300319,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300320,"byte_end":300346,"line_start":13,"line_end":13,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::once;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300347,"byte_end":300373,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300374,"byte_end":300377,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let pi = (0..1234).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300378,"byte_end":300416,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/     .chain(once(-1))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300417,"byte_end":300441,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/     .chain(1234..10_000);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300442,"byte_end":300471,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300472,"byte_end":300475,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pi.clone().count(), 10_001);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300476,"byte_end":300519,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(pi.clone().filter(|&x| x < 0).count(), 1);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300520,"byte_end":300577,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(pi.position_any(|x| x < 0), Some(1234));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300578,"byte_end":300633,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300634,"byte_end":300641,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6556},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300805,"byte_end":300809,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":6558}],"decl_id":null,"docs":" Iterator adaptor for [the `once()` function](fn.once.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `once()` function](fn.once.html).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300706,"byte_end":300769,"line_start":28,"line_end":28,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6565},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302169,"byte_end":302178,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"PanicFuse","qualname":"::iter::panic_fuse::PanicFuse","value":"PanicFuse {  }","parent":null,"children":[{"krate":0,"index":6567}],"decl_id":null,"docs":" `PanicFuse` is an adaptor that wraps an iterator with a fuse in case\n of panics, to halt all threads as soon as possible.","sig":null,"attributes":[{"value":"/ `PanicFuse` is an adaptor that wraps an iterator with a fuse in case","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":301719,"byte_end":301791,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of panics, to halt all threads as soon as possible.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":301792,"byte_end":301847,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":301848,"byte_end":301851,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`panic_fuse()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":301852,"byte_end":301933,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":301934,"byte_end":301937,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`panic_fuse()`]: trait.ParallelIterator.html#method.panic_fuse","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":301938,"byte_end":302005,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302006,"byte_end":302059,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302060,"byte_end":302133,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2490},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310920,"byte_end":310934,"line_start":46,"line_end":46,"column_start":11,"column_end":25},"name":"ParallelBridge","qualname":"::iter::par_bridge::ParallelBridge","value":"ParallelBridge: Sized","parent":null,"children":[{"krate":0,"index":2491}],"decl_id":null,"docs":" Conversion trait to convert an `Iterator` to a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ Conversion trait to convert an `Iterator` to a `ParallelIterator`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":309656,"byte_end":309726,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":309727,"byte_end":309730,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This creates a \"bridge\" from a sequential iterator to a parallel one, by distributing its items","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":309731,"byte_end":309830,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ across the Rayon thread pool. This has the advantage of being able to parallelize just about","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":309831,"byte_end":309927,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ anything, but the resulting `ParallelIterator` can be less efficient than if you started with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":309928,"byte_end":310025,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ `par_iter` instead. However, it can still be useful for iterators that are difficult to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310026,"byte_end":310117,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ parallelize by other means, like channels or file or network I/O.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310118,"byte_end":310187,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310188,"byte_end":310191,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The resulting iterator is not guaranteed to keep the order of the original iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310192,"byte_end":310280,"line_start":19,"line_end":19,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310281,"byte_end":310284,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310285,"byte_end":310299,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310300,"byte_end":310303,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ To use this trait, take an existing `Iterator` and call `par_bridge` on it. After that, you can","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310304,"byte_end":310403,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ use any of the `ParallelIterator` methods:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310404,"byte_end":310450,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310451,"byte_end":310454,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310455,"byte_end":310462,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter::ParallelBridge;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310463,"byte_end":310499,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ use rayon::prelude::ParallelIterator;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310500,"byte_end":310541,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310542,"byte_end":310575,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310576,"byte_end":310579,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let rx = {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310580,"byte_end":310594,"line_start":31,"line_end":31,"column_start":1,"column_end":15}},{"value":"/     let (tx, rx) = channel();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310595,"byte_end":310628,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310629,"byte_end":310632,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     tx.send(\"one!\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310633,"byte_end":310657,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"two!\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310658,"byte_end":310682,"line_start":35,"line_end":35,"column_start":1,"column_end":25}},{"value":"/     tx.send(\"three!\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310683,"byte_end":310709,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310710,"byte_end":310713,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/     rx","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310714,"byte_end":310724,"line_start":38,"line_end":38,"column_start":1,"column_end":11}},{"value":"/ };","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310725,"byte_end":310731,"line_start":39,"line_end":39,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310732,"byte_end":310735,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut output: Vec<&'static str> = rx.into_iter().par_bridge().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310736,"byte_end":310814,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ output.sort_unstable();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310815,"byte_end":310842,"line_start":42,"line_end":42,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310843,"byte_end":310846,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(&*output, &[\"one!\", \"three!\", \"two!\"]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310847,"byte_end":310901,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310902,"byte_end":310909,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311016,"byte_end":311026,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"par_bridge","qualname":"::iter::par_bridge::ParallelBridge::par_bridge","value":"pub fn par_bridge(Self) -> IterBridge<Self>","parent":{"krate":0,"index":2490},"children":[],"decl_id":null,"docs":" Creates a bridge from this type to a `ParallelIterator`.\n","sig":null,"attributes":[{"value":"/ Creates a bridge from this type to a `ParallelIterator`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310948,"byte_end":311008,"line_start":47,"line_end":47,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6581},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311525,"byte_end":311535,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"IterBridge","qualname":"::iter::par_bridge::IterBridge","value":"IterBridge {  }","parent":null,"children":[{"krate":0,"index":6583}],"decl_id":null,"docs":" `IterBridge` is a parallel iterator that wraps a sequential iterator.","sig":null,"attributes":[{"value":"/ `IterBridge` is a parallel iterator that wraps a sequential iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311219,"byte_end":311292,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311293,"byte_end":311296,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This type is created when using the `par_bridge` method on `ParallelBridge`. See the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311297,"byte_end":311385,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ [`ParallelBridge`] documentation for details.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311386,"byte_end":311435,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311436,"byte_end":311439,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ [`ParallelBridge`]: trait.ParallelBridge.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311440,"byte_end":311489,"line_start":65,"line_end":65,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6590},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321002,"byte_end":321008,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::repeat::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":6592}],"decl_id":null,"docs":" Iterator adaptor for [the `repeat()` function](fn.repeat.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeat()` function](fn.repeat.html).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":320899,"byte_end":320966,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":2635},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321560,"byte_end":321566,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::repeat::repeat","value":"pub fn repeat<T: Clone + Send>(T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that endlessly repeats `elt` (by\n cloning it). Note that this iterator has \"infinite\" length, so\n typically you would want to use `zip` or `take` or some other\n means to shorten it, or consider using\n [the `repeatn()` function](fn.repeatn.html) instead.","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that endlessly repeats `elt` (by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321047,"byte_end":321111,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ cloning it). Note that this iterator has \"infinite\" length, so","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321112,"byte_end":321178,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ typically you would want to use `zip` or `take` or some other","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321179,"byte_end":321244,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ means to shorten it, or consider using","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321245,"byte_end":321287,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/ [the `repeatn()` function](fn.repeatn.html) instead.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321288,"byte_end":321344,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321345,"byte_end":321348,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321349,"byte_end":321363,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321364,"byte_end":321367,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321368,"byte_end":321375,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321376,"byte_end":321402,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeat;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321403,"byte_end":321431,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ let x: Vec<(i32, i32)> = repeat(22).zip(0..3).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321432,"byte_end":321492,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321493,"byte_end":321544,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321545,"byte_end":321552,"line_start":25,"line_end":25,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321964,"byte_end":321968,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"take","qualname":"<Repeat<T>>::take","value":"pub fn take(Self, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes only `n` repeats of the element, similar to the general\n [`take()`](trait.IndexedParallelIterator.html#method.take).","sig":null,"attributes":[{"value":"/ Takes only `n` repeats of the element, similar to the general","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321689,"byte_end":321754,"line_start":34,"line_end":34,"column_start":5,"column_end":70}},{"value":"/ [`take()`](trait.IndexedParallelIterator.html#method.take).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321759,"byte_end":321822,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321827,"byte_end":321830,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The resulting `RepeatN` is an `IndexedParallelIterator`, allowing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321835,"byte_end":321904,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ more functionality than `Repeat` alone.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321909,"byte_end":321952,"line_start":38,"line_end":38,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322230,"byte_end":322233,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"zip","qualname":"<Repeat<T>>::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<RepeatN<T>, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates tuples, repeating the element with items from another\n iterator, similar to the general\n [`zip()`](trait.IndexedParallelIterator.html#method.zip).\n","sig":null,"attributes":[{"value":"/ Iterates tuples, repeating the element with items from another","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322045,"byte_end":322111,"line_start":43,"line_end":43,"column_start":5,"column_end":71}},{"value":"/ iterator, similar to the general","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322116,"byte_end":322152,"line_start":44,"line_end":44,"column_start":5,"column_end":41}},{"value":"/ [`zip()`](trait.IndexedParallelIterator.html#method.zip).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322157,"byte_end":322218,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":6599},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323502,"byte_end":323509,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::iter::repeat::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":6601},{"krate":0,"index":6602}],"decl_id":null,"docs":" Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).\n","sig":null,"attributes":[{"value":"/ Iterator adaptor for [the `repeatn()` function](fn.repeatn.html).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323397,"byte_end":323466,"line_start":101,"line_end":101,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":2656},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323874,"byte_end":323881,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::iter::repeat::repeatn","value":"pub fn repeatn<T: Clone + Send>(T, usize) -> RepeatN<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a parallel iterator that produces `n` repeats of `elt`\n (by cloning it).","sig":null,"attributes":[{"value":"/ Creates a parallel iterator that produces `n` repeats of `elt`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323566,"byte_end":323632,"line_start":108,"line_end":108,"column_start":1,"column_end":67}},{"value":"/ (by cloning it).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323633,"byte_end":323653,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323654,"byte_end":323657,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323658,"byte_end":323672,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323673,"byte_end":323676,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323677,"byte_end":323684,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323685,"byte_end":323711,"line_start":114,"line_end":114,"column_start":1,"column_end":27}},{"value":"/ use rayon::iter::repeatn;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323712,"byte_end":323741,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ let x: Vec<(i32, i32)> = repeatn(22, 3).zip(0..3).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323742,"byte_end":323806,"line_start":116,"line_end":116,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(x, vec![(22, 0), (22, 1), (22, 2)]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323807,"byte_end":323858,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":323859,"byte_end":323866,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":6609},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326821,"byte_end":326824,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::rev::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":6611}],"decl_id":null,"docs":" `Rev` is an iterator that produces elements in reverse order. This struct\n is created by the [`rev()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Rev` is an iterator that produces elements in reverse order. This struct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326431,"byte_end":326508,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ is created by the [`rev()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326509,"byte_end":326578,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326579,"byte_end":326582,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`rev()`]: trait.IndexedParallelIterator.html#method.rev","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326583,"byte_end":326643,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326644,"byte_end":326711,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326712,"byte_end":326785,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6618},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329666,"byte_end":329670,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::skip::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":6620},{"krate":0,"index":6621}],"decl_id":null,"docs":" `Skip` is an iterator that skips over the first `n` elements.\n This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Skip` is an iterator that skips over the first `n` elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329273,"byte_end":329338,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ This struct is created by the [`skip()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329339,"byte_end":329421,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329422,"byte_end":329425,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`skip()`]: trait.IndexedParallelIterator.html#method.skip","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329426,"byte_end":329488,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329489,"byte_end":329556,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329557,"byte_end":329630,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2775},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335299,"byte_end":335304,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"split","qualname":"::iter::splitter::split","value":"pub fn split<D, S>(D, S) -> Split<D, S> where D: Send, S: Fn(D) ->\n(D, Option<D>) + Sync","parent":null,"children":[],"decl_id":null,"docs":" The `split` function takes arbitrary data and a closure that knows how to\n split it, and turns this into a `ParallelIterator`.","sig":null,"attributes":[{"value":"/ The `split` function takes arbitrary data and a closure that knows how to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331415,"byte_end":331492,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ split it, and turns this into a `ParallelIterator`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331493,"byte_end":331548,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331549,"byte_end":331552,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331553,"byte_end":331567,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331568,"byte_end":331571,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ As a simple example, Rayon can recursively split ranges of indices","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331572,"byte_end":331642,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331643,"byte_end":331646,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331647,"byte_end":331654,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use rayon::iter;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331655,"byte_end":331675,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331676,"byte_end":331702,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ use std::ops::Range;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331703,"byte_end":331727,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331728,"byte_end":331731,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331732,"byte_end":331735,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // We define a range of indices as follows","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331736,"byte_end":331782,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ type Range1D = Range<usize>;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331783,"byte_end":331815,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331816,"byte_end":331819,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // Splitting it in two can be done like this","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331820,"byte_end":331868,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331869,"byte_end":331932,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     // We are mathematically unable to split the range if there is only","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":331933,"byte_end":332008,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/     // one point inside of it, but we could stop splitting before that.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332009,"byte_end":332084,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332085,"byte_end":332138,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332139,"byte_end":332142,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/     // Here, our range is considered large enough to be splittable","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332143,"byte_end":332213,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332214,"byte_end":332269,"line_start":29,"line_end":29,"column_start":1,"column_end":56}},{"value":"/     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332270,"byte_end":332320,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332321,"byte_end":332326,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332327,"byte_end":332330,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // By using iter::split, Rayon will split the range until it has enough work","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332331,"byte_end":332411,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ // to feed the CPU cores, then give us the resulting sub-ranges","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332412,"byte_end":332479,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/ iter::split(0..4096, split_range1).for_each(|sub_range| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332480,"byte_end":332541,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/     // As our initial range had a power-of-two size, the final sub-ranges","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332542,"byte_end":332619,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/     // should have power-of-two sizes too","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332620,"byte_end":332665,"line_start":37,"line_end":37,"column_start":1,"column_end":46}},{"value":"/     assert!((sub_range.end - sub_range.start).is_power_of_two());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332666,"byte_end":332735,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/ });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332736,"byte_end":332743,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332744,"byte_end":332751,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332752,"byte_end":332755,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ This recursive splitting can be extended to two or three dimensions,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332756,"byte_end":332828,"line_start":42,"line_end":42,"column_start":1,"column_end":73}},{"value":"/ to reproduce a classic \"block-wise\" parallelization scheme of graphics and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332829,"byte_end":332907,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ numerical simulations:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332908,"byte_end":332934,"line_start":44,"line_end":44,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332935,"byte_end":332938,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332939,"byte_end":332946,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # use rayon::iter;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332947,"byte_end":332969,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ # use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332970,"byte_end":332998,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ # use std::ops::Range;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":332999,"byte_end":333025,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/ # type Range1D = Range<usize>;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333026,"byte_end":333060,"line_start":50,"line_end":50,"column_start":1,"column_end":35}},{"value":"/ # fn split_range1(r: Range1D) -> (Range1D, Option<Range1D>) {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333061,"byte_end":333126,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ #     if r.end - r.start <= 1 { return (r, None); }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333127,"byte_end":333182,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ #     let midpoint = r.start + (r.end - r.start) / 2;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333183,"byte_end":333240,"line_start":53,"line_end":53,"column_start":1,"column_end":58}},{"value":"/ #     (r.start..midpoint, Some(midpoint..r.end))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333241,"byte_end":333293,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333294,"byte_end":333301,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333302,"byte_end":333307,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/ // A two-dimensional range of indices can be built out of two 1D ones","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333308,"byte_end":333381,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ struct Range2D {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333382,"byte_end":333402,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/     // Range of horizontal indices","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333403,"byte_end":333441,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/     pub rx: Range1D,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333442,"byte_end":333466,"line_start":60,"line_end":60,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333467,"byte_end":333470,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Range of vertical indices","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333471,"byte_end":333507,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/     pub ry: Range1D,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333508,"byte_end":333532,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333533,"byte_end":333538,"line_start":64,"line_end":64,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333539,"byte_end":333542,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ // We want to recursively split them by the largest dimension until we have","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333543,"byte_end":333622,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/ // enough sub-ranges to feed our mighty multi-core CPU. This function","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333623,"byte_end":333696,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ // carries out one such split.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333697,"byte_end":333731,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/ fn split_range2(r2: Range2D) -> (Range2D, Option<Range2D>) {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333732,"byte_end":333796,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/     // Decide on which axis (horizontal/vertical) the range should be split","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333797,"byte_end":333876,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/     let width = r2.rx.end - r2.rx.start;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333877,"byte_end":333921,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/     let height = r2.ry.end - r2.ry.start;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333922,"byte_end":333967,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/     if width >= height {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333968,"byte_end":333996,"line_start":73,"line_end":73,"column_start":1,"column_end":29}},{"value":"/         // This is a wide range, split it on the horizontal axis","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":333997,"byte_end":334065,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/         let (split_rx, ry) = (split_range1(r2.rx), r2.ry);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334066,"byte_end":334128,"line_start":75,"line_end":75,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334129,"byte_end":334161,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/             rx: split_rx.0,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334162,"byte_end":334193,"line_start":77,"line_end":77,"column_start":1,"column_end":32}},{"value":"/             ry: ry.clone(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334194,"byte_end":334225,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334226,"byte_end":334240,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_rx.1.map(|rx| Range2D { rx, ry });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334241,"byte_end":334304,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/         (out1, out2)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334305,"byte_end":334329,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/     } else {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334330,"byte_end":334346,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/         // This is a tall range, split it on the vertical axis","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334347,"byte_end":334413,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/         let (rx, split_ry) = (r2.rx, split_range1(r2.ry));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334414,"byte_end":334476,"line_start":84,"line_end":84,"column_start":1,"column_end":63}},{"value":"/         let out1 = Range2D {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334477,"byte_end":334509,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/             rx: rx.clone(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334510,"byte_end":334541,"line_start":86,"line_end":86,"column_start":1,"column_end":32}},{"value":"/             ry: split_ry.0,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334542,"byte_end":334573,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"/         };","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334574,"byte_end":334588,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/         let out2 = split_ry.1.map(|ry| Range2D { rx, ry, });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334589,"byte_end":334653,"line_start":89,"line_end":89,"column_start":1,"column_end":65}},{"value":"/         (out1, out2)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334654,"byte_end":334678,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334679,"byte_end":334688,"line_start":91,"line_end":91,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334689,"byte_end":334694,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334695,"byte_end":334698,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // Again, rayon can handle the recursive splitting for us","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334699,"byte_end":334760,"line_start":94,"line_end":94,"column_start":1,"column_end":62}},{"value":"/ let range = Range2D { rx: 0..800, ry: 0..600 };","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334761,"byte_end":334812,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ iter::split(range, split_range2).for_each(|sub_range| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334813,"byte_end":334872,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/     // If the sub-ranges were indeed split by the largest dimension, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334873,"byte_end":334950,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/     // if no dimension was twice larger than the other initially, this","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":334951,"byte_end":335025,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/     // property will remain true in the final sub-ranges.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335026,"byte_end":335087,"line_start":99,"line_end":99,"column_start":1,"column_end":62}},{"value":"/     let width = sub_range.rx.end - sub_range.rx.start;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335088,"byte_end":335146,"line_start":100,"line_end":100,"column_start":1,"column_end":59}},{"value":"/     let height = sub_range.ry.end - sub_range.ry.start;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335147,"byte_end":335206,"line_start":101,"line_end":101,"column_start":1,"column_end":60}},{"value":"/     assert!((width / 2 <= height) && (height / 2 <= width));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335207,"byte_end":335271,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335272,"byte_end":335279,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335280,"byte_end":335287,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335288,"byte_end":335291,"line_start":105,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6628},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335641,"byte_end":335646,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"Split","qualname":"::iter::splitter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6631},{"krate":0,"index":6632}],"decl_id":null,"docs":" `Split` is a parallel iterator using arbitrary data and a splitting function.\n This struct is created by the [`split()`] function.","sig":null,"attributes":[{"value":"/ `Split` is a parallel iterator using arbitrary data and a splitting function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335440,"byte_end":335521,"line_start":114,"line_end":114,"column_start":1,"column_end":82}},{"value":"/ This struct is created by the [`split()`] function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335522,"byte_end":335577,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335578,"byte_end":335581,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ [`split()`]: fn.split.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335582,"byte_end":335612,"line_start":117,"line_end":117,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6637},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339347,"byte_end":339351,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::take::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":6639},{"krate":0,"index":6640}],"decl_id":null,"docs":" `Take` is an iterator that iterates over the first `n` elements.\n This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Take` is an iterator that iterates over the first `n` elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":338951,"byte_end":339019,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ This struct is created by the [`take()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339020,"byte_end":339102,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339103,"byte_end":339106,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [`take()`]: trait.IndexedParallelIterator.html#method.take","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339107,"byte_end":339169,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339170,"byte_end":339237,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339238,"byte_end":339311,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6647},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341814,"byte_end":341821,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"TryFold","qualname":"::iter::try_fold::TryFold","value":"TryFold {  }","parent":null,"children":[{"krate":0,"index":6652},{"krate":0,"index":6653},{"krate":0,"index":6654},{"krate":0,"index":6655}],"decl_id":null,"docs":" `TryFold` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFold` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341414,"byte_end":341509,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ This struct is created by the [`try_fold()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341510,"byte_end":341589,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341590,"byte_end":341593,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`try_fold()`]: trait.ParallelIterator.html#method.try_fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341594,"byte_end":341657,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341658,"byte_end":341711,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341712,"byte_end":341785,"line_start":30,"line_end":30,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6662},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345775,"byte_end":345786,"line_start":190,"line_end":190,"column_start":12,"column_end":23},"name":"TryFoldWith","qualname":"::iter::try_fold::TryFoldWith","value":"TryFoldWith {  }","parent":null,"children":[{"krate":0,"index":6666},{"krate":0,"index":6667},{"krate":0,"index":6668}],"decl_id":null,"docs":" `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.\n This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","sig":null,"attributes":[{"value":"/ `TryFoldWith` is an iterator that applies a function over an iterator producing a single value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345356,"byte_end":345455,"line_start":183,"line_end":183,"column_start":1,"column_end":100}},{"value":"/ This struct is created by the [`try_fold_with()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345456,"byte_end":345540,"line_start":184,"line_end":184,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345541,"byte_end":345544,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ [`try_fold_with()`]: trait.ParallelIterator.html#method.try_fold_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345545,"byte_end":345618,"line_start":186,"line_end":186,"column_start":1,"column_end":74}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345619,"byte_end":345672,"line_start":187,"line_end":187,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345673,"byte_end":345746,"line_start":188,"line_end":188,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":3136},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":354848,"byte_end":354852,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Left","qualname":"::iter::unzip::UnzipOp::Left","value":"type Left: Send;","parent":{"krate":0,"index":3134},"children":[],"decl_id":null,"docs":" The type of item expected by the left consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the left consumer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":354787,"byte_end":354838,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":3137},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":354927,"byte_end":354932,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Right","qualname":"::iter::unzip::UnzipOp::Right","value":"type Right: Send;","parent":{"krate":0,"index":3134},"children":[],"decl_id":null,"docs":" The type of item expected by the right consumer.\n","sig":null,"attributes":[{"value":"/ The type of item expected by the right consumer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":354865,"byte_end":354917,"line_start":11,"line_end":11,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":6674},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367058,"byte_end":367064,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Update","qualname":"::iter::update::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":6677},{"krate":0,"index":6678}],"decl_id":null,"docs":" `Update` is an iterator that mutates the elements of an\n underlying iterator before they are yielded.","sig":null,"attributes":[{"value":"/ `Update` is an iterator that mutates the elements of an","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366647,"byte_end":366706,"line_start":6,"line_end":6,"column_start":1,"column_end":60}},{"value":"/ underlying iterator before they are yielded.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366707,"byte_end":366755,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366756,"byte_end":366759,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`update()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366760,"byte_end":366837,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366838,"byte_end":366841,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`update()`]: trait.ParallelIterator.html#method.update","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366842,"byte_end":366901,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366902,"byte_end":366955,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":366956,"byte_end":367029,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6696},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374781,"byte_end":374790,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::iter::while_some::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":6698}],"decl_id":null,"docs":" `WhileSome` is an iterator that yields the `Some` elements of an iterator,\n halting as soon as any `None` is produced.","sig":null,"attributes":[{"value":"/ `WhileSome` is an iterator that yields the `Some` elements of an iterator,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374334,"byte_end":374412,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ halting as soon as any `None` is produced.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374413,"byte_end":374459,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374460,"byte_end":374463,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`while_some()`] method on [`ParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374464,"byte_end":374545,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374546,"byte_end":374549,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`while_some()`]: trait.ParallelIterator.html#method.while_some","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374550,"byte_end":374617,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374618,"byte_end":374671,"line_start":11,"line_end":11,"column_start":1,"column_end":54}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374672,"byte_end":374745,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6705},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378486,"byte_end":378489,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::zip::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":6708},{"krate":0,"index":6709}],"decl_id":null,"docs":" `Zip` is an iterator that zips up `a` and `b` into a single iterator\n of pairs. This struct is created by the [`zip()`] method on\n [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `Zip` is an iterator that zips up `a` and `b` into a single iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378075,"byte_end":378147,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ of pairs. This struct is created by the [`zip()`] method on","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378148,"byte_end":378211,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/ [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378212,"byte_end":378243,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378244,"byte_end":378247,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip()`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378248,"byte_end":378308,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378309,"byte_end":378376,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378377,"byte_end":378450,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6718},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382476,"byte_end":382481,"line_start":14,"line_end":14,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::iter::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":6721}],"decl_id":null,"docs":" An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal\n length simultaneously.","sig":null,"attributes":[{"value":"/ An [`IndexedParallelIterator`] that iterates over two parallel iterators of equal","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":381981,"byte_end":382066,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ length simultaneously.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382067,"byte_end":382093,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382094,"byte_end":382097,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct is created by the [`zip_eq`] method on [`IndexedParallelIterator`],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382098,"byte_end":382181,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/ see its documentation for more information.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382182,"byte_end":382229,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382230,"byte_end":382233,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`zip_eq`]: trait.IndexedParallelIterator.html#method.zip_eq","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382234,"byte_end":382298,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382299,"byte_end":382366,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382367,"byte_end":382440,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6730},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384270,"byte_end":384276,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::step_by::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":6732},{"krate":0,"index":6733}],"decl_id":null,"docs":" `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.\n This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","sig":null,"attributes":[{"value":"/ `StepBy` is an iterator that skips `n` elements between each yield, where `n` is the given step.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":383833,"byte_end":383933,"line_start":10,"line_end":10,"column_start":1,"column_end":101}},{"value":"/ This struct is created by the [`step_by()`] method on [`IndexedParallelIterator`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":383934,"byte_end":384019,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384020,"byte_end":384023,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`step_by()`]: trait.IndexedParallelIterator.html#method.step_by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384024,"byte_end":384092,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384093,"byte_end":384160,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384161,"byte_end":384234,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":3695},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29059,"byte_end":29079,"line_start":198,"line_end":198,"column_start":11,"column_end":31},"name":"IntoParallelIterator","qualname":"::iter::IntoParallelIterator","value":"IntoParallelIterator","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698}],"decl_id":null,"docs":" `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `IntoParallelIterator` implements the conversion to a [`ParallelIterator`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28611,"byte_end":28690,"line_start":190,"line_end":190,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28691,"byte_end":28694,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ By implementing `IntoParallelIterator` for a type, you define how it will","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28695,"byte_end":28772,"line_start":192,"line_end":192,"column_start":1,"column_end":78}},{"value":"/ transformed into an iterator. This is a parallel version of the standard","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28773,"byte_end":28849,"line_start":193,"line_end":193,"column_start":1,"column_end":77}},{"value":"/ library's [`std::iter::IntoIterator`] trait.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28850,"byte_end":28898,"line_start":194,"line_end":194,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28899,"byte_end":28902,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28903,"byte_end":28956,"line_start":196,"line_end":196,"column_start":1,"column_end":54}},{"value":"/ [`std::iter::IntoIterator`]: https://doc.rust-lang.org/std/iter/trait.IntoIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":28957,"byte_end":29048,"line_start":197,"line_end":197,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":3696},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29148,"byte_end":29152,"line_start":200,"line_end":200,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":" The parallel iterator type that will be created.\n","sig":null,"attributes":[{"value":"/ The parallel iterator type that will be created.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29086,"byte_end":29138,"line_start":199,"line_end":199,"column_start":5,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":3697},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29267,"byte_end":29271,"line_start":203,"line_end":203,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29196,"byte_end":29257,"line_start":202,"line_end":202,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3698},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29922,"byte_end":29935,"line_start":227,"line_end":227,"column_start":8,"column_end":21},"name":"into_par_iter","qualname":"::iter::IntoParallelIterator::into_par_iter","value":"pub fn into_par_iter(Self) -> Self::Iter","parent":{"krate":0,"index":3695},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29284,"byte_end":29329,"line_start":205,"line_end":205,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29334,"byte_end":29337,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29342,"byte_end":29356,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29361,"byte_end":29364,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29369,"byte_end":29376,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29381,"byte_end":29407,"line_start":210,"line_end":210,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29412,"byte_end":29415,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ println!(\"counting in parallel:\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29420,"byte_end":29458,"line_start":212,"line_end":212,"column_start":5,"column_end":43}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29463,"byte_end":29491,"line_start":213,"line_end":213,"column_start":5,"column_end":33}},{"value":"/     .for_each(|i| println!(\"{}\", i));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29496,"byte_end":29537,"line_start":214,"line_end":214,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29542,"byte_end":29549,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29554,"byte_end":29557,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This conversion is often implicit for arguments to methods like [`zip`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29562,"byte_end":29638,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29643,"byte_end":29646,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29651,"byte_end":29658,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29663,"byte_end":29689,"line_start":220,"line_end":220,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29694,"byte_end":29697,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..5).into_par_iter().zip(5..10).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29702,"byte_end":29766,"line_start":222,"line_end":222,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v, [(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29771,"byte_end":29831,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29836,"byte_end":29843,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29848,"byte_end":29851,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ [`zip`]: trait.IndexedParallelIterator.html#method.zip","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29856,"byte_end":29914,"line_start":226,"line_end":226,"column_start":5,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":3699},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30524,"byte_end":30547,"line_start":243,"line_end":243,"column_start":11,"column_end":34},"name":"IntoParallelRefIterator","qualname":"::iter::IntoParallelRefIterator","value":"IntoParallelRefIterator<'data>","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703}],"decl_id":null,"docs":" `IntoParallelRefIterator` implements the conversion to a\n [`ParallelIterator`], providing shared references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefIterator` implements the conversion to a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":29960,"byte_end":30020,"line_start":230,"line_end":230,"column_start":1,"column_end":61}},{"value":"/ [`ParallelIterator`], providing shared references to the data.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30021,"byte_end":30087,"line_start":231,"line_end":231,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30088,"byte_end":30091,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter()` method","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30092,"byte_end":30145,"line_start":233,"line_end":233,"column_start":1,"column_end":54}},{"value":"/ defined by various collections.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30146,"byte_end":30181,"line_start":234,"line_end":234,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30182,"byte_end":30185,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30186,"byte_end":30229,"line_start":236,"line_end":236,"column_start":1,"column_end":44}},{"value":"/ `for I where &I: IntoParallelIterator`. In most cases, users","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30230,"byte_end":30294,"line_start":237,"line_end":237,"column_start":1,"column_end":65}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30295,"byte_end":30368,"line_start":238,"line_end":238,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30369,"byte_end":30393,"line_start":239,"line_end":239,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30394,"byte_end":30397,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30398,"byte_end":30451,"line_start":241,"line_end":241,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30452,"byte_end":30513,"line_start":242,"line_end":242,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":3701},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30631,"byte_end":30635,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3699},"children":[],"decl_id":null,"docs":" The type of the parallel iterator that will be returned.\n","sig":null,"attributes":[{"value":"/ The type of the parallel iterator that will be returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30561,"byte_end":30621,"line_start":244,"line_end":244,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":3702},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30811,"byte_end":30815,"line_start":249,"line_end":249,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":3699},"children":[],"decl_id":null,"docs":" The type of item that the parallel iterator will produce.\n This will typically be an `&'data T` reference type.\n","sig":null,"attributes":[{"value":"/ The type of item that the parallel iterator will produce.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30679,"byte_end":30740,"line_start":247,"line_end":247,"column_start":5,"column_end":66}},{"value":"/ This will typically be an `&'data T` reference type.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30745,"byte_end":30801,"line_start":248,"line_end":248,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3703},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31305,"byte_end":31313,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"par_iter","qualname":"::iter::IntoParallelRefIterator::par_iter","value":"pub fn par_iter(&'data Self) -> Self::Iter","parent":{"krate":0,"index":3699},"children":[],"decl_id":null,"docs":" Converts `self` into a parallel iterator.","sig":null,"attributes":[{"value":"/ Converts `self` into a parallel iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30836,"byte_end":30881,"line_start":251,"line_end":251,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30886,"byte_end":30889,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30894,"byte_end":30908,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30913,"byte_end":30916,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30921,"byte_end":30928,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30933,"byte_end":30959,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30964,"byte_end":30967,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_> = (0..100).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":30972,"byte_end":31011,"line_start":258,"line_end":258,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.par_iter().sum::<i32>(), 100 * 99 / 2);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31016,"byte_end":31072,"line_start":259,"line_end":259,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31077,"byte_end":31080,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ // `v.par_iter()` is shorthand for `(&v).into_par_iter()`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31085,"byte_end":31147,"line_start":261,"line_end":261,"column_start":5,"column_end":67}},{"value":"/ // producing the exact same references.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31152,"byte_end":31195,"line_start":262,"line_end":262,"column_start":5,"column_end":48}},{"value":"/ assert!(v.par_iter().zip(&v)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31200,"byte_end":31232,"line_start":263,"line_end":263,"column_start":5,"column_end":37}},{"value":"/          .all(|(a, b)| std::ptr::eq(a, b)));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31237,"byte_end":31285,"line_start":264,"line_end":264,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31290,"byte_end":31297,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3710},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32233,"byte_end":32259,"line_start":294,"line_end":294,"column_start":11,"column_end":37},"name":"IntoParallelRefMutIterator","qualname":"::iter::IntoParallelRefMutIterator","value":"IntoParallelRefMutIterator<'data>","parent":null,"children":[{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714}],"decl_id":null,"docs":" `IntoParallelRefMutIterator` implements the conversion to a\n [`ParallelIterator`], providing mutable references to the data.","sig":null,"attributes":[{"value":"/ `IntoParallelRefMutIterator` implements the conversion to a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31657,"byte_end":31720,"line_start":281,"line_end":281,"column_start":1,"column_end":64}},{"value":"/ [`ParallelIterator`], providing mutable references to the data.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31721,"byte_end":31788,"line_start":282,"line_end":282,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31789,"byte_end":31792,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ This is a parallel version of the `iter_mut()` method","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31793,"byte_end":31850,"line_start":284,"line_end":284,"column_start":1,"column_end":58}},{"value":"/ defined by various collections.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31851,"byte_end":31886,"line_start":285,"line_end":285,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31887,"byte_end":31890,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31891,"byte_end":31934,"line_start":287,"line_end":287,"column_start":1,"column_end":44}},{"value":"/ `for I where &mut I: IntoParallelIterator`. In most cases, users","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31935,"byte_end":32003,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ will want to implement [`IntoParallelIterator`] rather than implement","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32004,"byte_end":32077,"line_start":289,"line_end":289,"column_start":1,"column_end":74}},{"value":"/ this trait directly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32078,"byte_end":32102,"line_start":290,"line_end":290,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32103,"byte_end":32106,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32107,"byte_end":32160,"line_start":292,"line_end":292,"column_start":1,"column_end":54}},{"value":"/ [`IntoParallelIterator`]: trait.IntoParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32161,"byte_end":32222,"line_start":293,"line_end":293,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":3712},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32329,"byte_end":32333,"line_start":296,"line_end":296,"column_start":10,"column_end":14},"name":"Iter","qualname":"::iter::IntoParallelRefMutIterator::Iter","value":"type Iter: ParallelIterator<Item = Self::Item>;","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" The type of iterator that will be created.\n","sig":null,"attributes":[{"value":"/ The type of iterator that will be created.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32273,"byte_end":32319,"line_start":295,"line_end":295,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":3713},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32485,"byte_end":32489,"line_start":300,"line_end":300,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::IntoParallelRefMutIterator::Item","value":"type Item: Send + 'data;","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" The type of item that will be produced; this is typically an\n `&'data mut T` reference.\n","sig":null,"attributes":[{"value":"/ The type of item that will be produced; this is typically an","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32377,"byte_end":32441,"line_start":298,"line_end":298,"column_start":5,"column_end":69}},{"value":"/ `&'data mut T` reference.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32446,"byte_end":32475,"line_start":299,"line_end":299,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3714},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32803,"byte_end":32815,"line_start":313,"line_end":313,"column_start":8,"column_end":20},"name":"par_iter_mut","qualname":"::iter::IntoParallelRefMutIterator::par_iter_mut","value":"pub fn par_iter_mut(&'data mut Self) -> Self::Iter","parent":{"krate":0,"index":3710},"children":[],"decl_id":null,"docs":" Creates the parallel iterator from `self`.","sig":null,"attributes":[{"value":"/ Creates the parallel iterator from `self`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32510,"byte_end":32556,"line_start":302,"line_end":302,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32561,"byte_end":32564,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32569,"byte_end":32583,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32588,"byte_end":32591,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32596,"byte_end":32603,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32608,"byte_end":32634,"line_start":307,"line_end":307,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32639,"byte_end":32642,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0usize; 5];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32647,"byte_end":32679,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/ v.par_iter_mut().enumerate().for_each(|(i, x)| *x = i);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32684,"byte_end":32743,"line_start":310,"line_end":310,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(v, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32748,"byte_end":32783,"line_start":311,"line_end":311,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32788,"byte_end":32795,"line_start":312,"line_end":312,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3721},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33792,"byte_end":33808,"line_start":342,"line_end":342,"column_start":11,"column_end":27},"name":"ParallelIterator","qualname":"::iter::ParallelIterator","value":"ParallelIterator: Sized + Send","parent":null,"children":[{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3728},{"krate":0,"index":3732},{"krate":0,"index":3737},{"krate":0,"index":3743},{"krate":0,"index":3750},{"krate":0,"index":3753},{"krate":0,"index":3756},{"krate":0,"index":3760},{"krate":0,"index":3765},{"krate":0,"index":3768},{"krate":0,"index":3771},{"krate":0,"index":3773},{"krate":0,"index":3775},{"krate":0,"index":3777},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3787},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3810},{"krate":0,"index":3813},{"krate":0,"index":3818},{"krate":0,"index":3822},{"krate":0,"index":3824},{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3834},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3854},{"krate":0,"index":3866},{"krate":0,"index":3868},{"krate":0,"index":3870},{"krate":0,"index":3872},{"krate":0,"index":3874},{"krate":0,"index":3879},{"krate":0,"index":3884},{"krate":0,"index":3889},{"krate":0,"index":3891},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3901},{"krate":0,"index":3906},{"krate":0,"index":3910},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3919}],"decl_id":null,"docs":" Parallel version of the standard iterator trait.","sig":null,"attributes":[{"value":"/ Parallel version of the standard iterator trait.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33186,"byte_end":33238,"line_start":328,"line_end":328,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33239,"byte_end":33242,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ The combinators on this trait are available on **all** parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33243,"byte_end":33310,"line_start":330,"line_end":330,"column_start":1,"column_end":68}},{"value":"/ iterators.  Additional methods can be found on the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33311,"byte_end":33365,"line_start":331,"line_end":331,"column_start":1,"column_end":55}},{"value":"/ [`IndexedParallelIterator`] trait: those methods are only","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33366,"byte_end":33427,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"/ available for parallel iterators where the number of items is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33428,"byte_end":33493,"line_start":333,"line_end":333,"column_start":1,"column_end":66}},{"value":"/ known in advance (so, e.g., after invoking `filter`, those methods","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33494,"byte_end":33564,"line_start":334,"line_end":334,"column_start":1,"column_end":71}},{"value":"/ become unavailable).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33565,"byte_end":33589,"line_start":335,"line_end":335,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33590,"byte_end":33593,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ For examples of using parallel iterators, see [the docs on the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33594,"byte_end":33660,"line_start":337,"line_end":337,"column_start":1,"column_end":67}},{"value":"/ `iter` module][iter].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33661,"byte_end":33686,"line_start":338,"line_end":338,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33687,"byte_end":33690,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ [iter]: index.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33691,"byte_end":33713,"line_start":340,"line_end":340,"column_start":1,"column_end":23}},{"value":"/ [`IndexedParallelIterator`]: trait.IndexedParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33714,"byte_end":33781,"line_start":341,"line_end":341,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":3722},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34074,"byte_end":34078,"line_start":348,"line_end":348,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ParallelIterator::Item","value":"type Item: Send;","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" The type of item that this parallel iterator produces.\n For example, if you use the [`for_each`] method, this is the type of\n item that your closure will be invoked with.","sig":null,"attributes":[{"value":"/ The type of item that this parallel iterator produces.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33829,"byte_end":33887,"line_start":343,"line_end":343,"column_start":5,"column_end":63}},{"value":"/ For example, if you use the [`for_each`] method, this is the type of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33892,"byte_end":33964,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ item that your closure will be invoked with.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33969,"byte_end":34017,"line_start":345,"line_end":345,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34022,"byte_end":34025,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ [`for_each`]: #method.for_each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34030,"byte_end":34064,"line_start":347,"line_end":347,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34334,"byte_end":34342,"line_start":359,"line_end":359,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::ParallelIterator::for_each","value":"pub fn for_each<OP>(Self, OP) where OP: Fn(Self::Item) -> () + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34091,"byte_end":34160,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34165,"byte_end":34168,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34173,"byte_end":34187,"line_start":352,"line_end":352,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34192,"byte_end":34195,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34200,"byte_end":34207,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34212,"byte_end":34238,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34243,"byte_end":34246,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ (0..100).into_par_iter().for_each(|x| println!(\"{:?}\", x));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34251,"byte_end":34314,"line_start":357,"line_end":357,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34319,"byte_end":34326,"line_start":358,"line_end":358,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3725},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35177,"byte_end":35190,"line_start":389,"line_end":389,"column_start":8,"column_end":21},"name":"for_each_with","qualname":"::iter::ParallelIterator::for_each_with","value":"pub fn for_each_with<OP, T>(Self, T, OP) where OP: Fn(&mut T, Self::Item) ->\n() + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes `OP` on the given `init` value with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on the given `init` value with each item produced by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34468,"byte_end":34538,"line_start":366,"line_end":366,"column_start":5,"column_end":75}},{"value":"/ the iterator, in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34543,"byte_end":34573,"line_start":367,"line_end":367,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34578,"byte_end":34581,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34586,"byte_end":34654,"line_start":369,"line_end":369,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34659,"byte_end":34730,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34735,"byte_end":34752,"line_start":371,"line_end":371,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34757,"byte_end":34760,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34765,"byte_end":34779,"line_start":373,"line_end":373,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34784,"byte_end":34787,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34792,"byte_end":34799,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34804,"byte_end":34837,"line_start":376,"line_end":376,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34842,"byte_end":34868,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34873,"byte_end":34876,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34881,"byte_end":34920,"line_start":379,"line_end":379,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34925,"byte_end":34928,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter().for_each_with(sender, |s, x| s.send(x).unwrap());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":34933,"byte_end":35009,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35014,"byte_end":35017,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35022,"byte_end":35074,"line_start":383,"line_end":383,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35079,"byte_end":35082,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35087,"byte_end":35102,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35107,"byte_end":35110,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35115,"byte_end":35157,"line_start":387,"line_end":387,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35162,"byte_end":35169,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3728},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36158,"byte_end":36171,"line_start":423,"line_end":423,"column_start":8,"column_end":21},"name":"for_each_init","qualname":"::iter::ParallelIterator::for_each_init","value":"pub fn for_each_init<OP, INIT, T>(Self, INIT, OP) where\nOP: Fn(&mut T, Self::Item) -> () + Sync + Send, INIT: Fn() -> T + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes `OP` on a value returned by `init` with each item produced by\n the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes `OP` on a value returned by `init` with each item produced by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35365,"byte_end":35439,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ the iterator, in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35444,"byte_end":35474,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35479,"byte_end":35482,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35487,"byte_end":35558,"line_start":400,"line_end":400,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35563,"byte_end":35629,"line_start":401,"line_end":401,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35634,"byte_end":35678,"line_start":402,"line_end":402,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35683,"byte_end":35686,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35691,"byte_end":35705,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35710,"byte_end":35713,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35718,"byte_end":35725,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35730,"byte_end":35748,"line_start":407,"line_end":407,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35753,"byte_end":35779,"line_start":408,"line_end":408,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35784,"byte_end":35787,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35792,"byte_end":35829,"line_start":410,"line_end":410,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35834,"byte_end":35837,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35842,"byte_end":35868,"line_start":412,"line_end":412,"column_start":5,"column_end":31}},{"value":"/     .for_each_init(","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35873,"byte_end":35896,"line_start":413,"line_end":413,"column_start":5,"column_end":28}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35901,"byte_end":35935,"line_start":414,"line_end":414,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.fill(chunk),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35940,"byte_end":35981,"line_start":415,"line_end":415,"column_start":5,"column_end":46}},{"value":"/     );","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":35986,"byte_end":35996,"line_start":416,"line_end":416,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36001,"byte_end":36004,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36009,"byte_end":36062,"line_start":418,"line_end":418,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36067,"byte_end":36091,"line_start":419,"line_end":419,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36096,"byte_end":36128,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36133,"byte_end":36138,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36143,"byte_end":36150,"line_start":422,"line_end":422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37274,"byte_end":37286,"line_start":451,"line_end":451,"column_start":8,"column_end":20},"name":"try_for_each","qualname":"::iter::ParallelIterator::try_for_each","value":"pub fn try_for_each<OP, R>(Self, OP) -> R where OP: Fn(Self::Item) -> R +\nSync + Send, R: Try<Ok = ()> + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on each item produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on each item produced by the iterator, in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36369,"byte_end":36449,"line_start":431,"line_end":431,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36454,"byte_end":36457,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ If the `OP` returns `Result::Err` or `Option::None`, we will attempt to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36462,"byte_end":36537,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/ stop processing the rest of the items in the iterator as soon as","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36542,"byte_end":36610,"line_start":434,"line_end":434,"column_start":5,"column_end":73}},{"value":"/ possible, and we will return that terminating value.  Otherwise, we will","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36615,"byte_end":36691,"line_start":435,"line_end":435,"column_start":5,"column_end":81}},{"value":"/ return an empty `Result::Ok(())` or `Option::Some(())`.  If there are","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36696,"byte_end":36769,"line_start":436,"line_end":436,"column_start":5,"column_end":78}},{"value":"/ multiple errors in parallel, it is not specified which will be returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36774,"byte_end":36850,"line_start":437,"line_end":437,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36855,"byte_end":36858,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36863,"byte_end":36877,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36882,"byte_end":36885,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36890,"byte_end":36897,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36902,"byte_end":36928,"line_start":442,"line_end":442,"column_start":5,"column_end":31}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36933,"byte_end":36964,"line_start":443,"line_end":443,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36969,"byte_end":36972,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ // This will stop iteration early if there's any write error, like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":36977,"byte_end":37047,"line_start":445,"line_end":445,"column_start":5,"column_end":75}},{"value":"/ // having piped output get closed on the other end.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37052,"byte_end":37107,"line_start":446,"line_end":446,"column_start":5,"column_end":60}},{"value":"/ (0..100).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37112,"byte_end":37140,"line_start":447,"line_end":447,"column_start":5,"column_end":33}},{"value":"/     .try_for_each(|x| writeln!(io::stdout(), \"{:?}\", x))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37145,"byte_end":37205,"line_start":448,"line_end":448,"column_start":5,"column_end":65}},{"value":"/     .expect(\"expected no write errors\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37210,"byte_end":37254,"line_start":449,"line_end":449,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37259,"byte_end":37266,"line_start":450,"line_end":450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3737},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38395,"byte_end":38412,"line_start":490,"line_end":490,"column_start":8,"column_end":25},"name":"try_for_each_with","qualname":"::iter::ParallelIterator::try_for_each_with","value":"pub fn try_for_each_with<OP, T, R>(Self, T, OP) -> R where\nOP: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Try<Ok =\n()> + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on the given `init` value with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on the given `init` value with each item","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37560,"byte_end":37629,"line_start":463,"line_end":463,"column_start":5,"column_end":74}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37634,"byte_end":37676,"line_start":464,"line_end":464,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37681,"byte_end":37684,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_with()`] and the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37689,"byte_end":37758,"line_start":466,"line_end":466,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37763,"byte_end":37807,"line_start":467,"line_end":467,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37812,"byte_end":37815,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [`for_each_with()`]: #method.for_each_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37820,"byte_end":37866,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37871,"byte_end":37915,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37920,"byte_end":37923,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37928,"byte_end":37942,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37947,"byte_end":37950,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37955,"byte_end":37962,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":37967,"byte_end":38000,"line_start":475,"line_end":475,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38005,"byte_end":38031,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38036,"byte_end":38039,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38044,"byte_end":38083,"line_start":478,"line_end":478,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38088,"byte_end":38091,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38096,"byte_end":38122,"line_start":480,"line_end":480,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_with(sender, |s, x| s.send(x))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38127,"byte_end":38179,"line_start":481,"line_end":481,"column_start":5,"column_end":57}},{"value":"/     .expect(\"expected no send errors\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38184,"byte_end":38227,"line_start":482,"line_end":482,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38232,"byte_end":38235,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ let mut res: Vec<_> = receiver.iter().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38240,"byte_end":38292,"line_start":484,"line_end":484,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38297,"byte_end":38300,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ res.sort();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38305,"byte_end":38320,"line_start":486,"line_end":486,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38325,"byte_end":38328,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&res[..], &[0, 1, 2, 3, 4])","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38333,"byte_end":38375,"line_start":488,"line_end":488,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38380,"byte_end":38387,"line_start":489,"line_end":489,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3743},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39636,"byte_end":39653,"line_start":532,"line_end":532,"column_start":8,"column_end":25},"name":"try_for_each_init","qualname":"::iter::ParallelIterator::try_for_each_init","value":"pub fn try_for_each_init<OP, INIT, T, R>(Self, INIT, OP) -> R where\nOP: Fn(&mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T + Sync + Send,\nR: Try<Ok = ()> + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Executes a fallible `OP` on a value returned by `init` with each item\n produced by the iterator, in parallel.","sig":null,"attributes":[{"value":"/ Executes a fallible `OP` on a value returned by `init` with each item","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38742,"byte_end":38815,"line_start":503,"line_end":503,"column_start":5,"column_end":78}},{"value":"/ produced by the iterator, in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38820,"byte_end":38862,"line_start":504,"line_end":504,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38867,"byte_end":38870,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`for_each_init()`] and the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38875,"byte_end":38944,"line_start":506,"line_end":506,"column_start":5,"column_end":74}},{"value":"/ failure semantics of [`try_for_each()`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38949,"byte_end":38993,"line_start":507,"line_end":507,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":38998,"byte_end":39001,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ [`for_each_init()`]: #method.for_each_init","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39006,"byte_end":39052,"line_start":509,"line_end":509,"column_start":5,"column_end":51}},{"value":"/ [`try_for_each()`]: #method.try_for_each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39057,"byte_end":39101,"line_start":510,"line_end":510,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39106,"byte_end":39109,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39114,"byte_end":39128,"line_start":512,"line_end":512,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39133,"byte_end":39136,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39141,"byte_end":39148,"line_start":514,"line_end":514,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39153,"byte_end":39171,"line_start":515,"line_end":515,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39176,"byte_end":39202,"line_start":516,"line_end":516,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39207,"byte_end":39210,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let mut v = vec![0u8; 1_000_000];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39215,"byte_end":39252,"line_start":518,"line_end":518,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39257,"byte_end":39260,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ v.par_chunks_mut(1000)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39265,"byte_end":39291,"line_start":520,"line_end":520,"column_start":5,"column_end":31}},{"value":"/     .try_for_each_init(","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39296,"byte_end":39323,"line_start":521,"line_end":521,"column_start":5,"column_end":32}},{"value":"/         || rand::thread_rng(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39328,"byte_end":39362,"line_start":522,"line_end":522,"column_start":5,"column_end":39}},{"value":"/         |rng, chunk| rng.try_fill(chunk),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39367,"byte_end":39412,"line_start":523,"line_end":523,"column_start":5,"column_end":50}},{"value":"/     )","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39417,"byte_end":39426,"line_start":524,"line_end":524,"column_start":5,"column_end":14}},{"value":"/     .expect(\"expected no rand errors\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39431,"byte_end":39474,"line_start":525,"line_end":525,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39479,"byte_end":39482,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39487,"byte_end":39540,"line_start":527,"line_end":527,"column_start":5,"column_end":58}},{"value":"/ for i in 0u8..=255 {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39545,"byte_end":39569,"line_start":528,"line_end":528,"column_start":5,"column_end":29}},{"value":"/     assert!(v.contains(&i));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39574,"byte_end":39606,"line_start":529,"line_end":529,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39611,"byte_end":39616,"line_start":530,"line_end":530,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":39621,"byte_end":39628,"line_start":531,"line_end":531,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40263,"byte_end":40268,"line_start":556,"line_end":556,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::ParallelIterator::count","value":"pub fn count(Self) -> usize","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Counts the number of items in this parallel iterator.","sig":null,"attributes":[{"value":"/ Counts the number of items in this parallel iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40006,"byte_end":40063,"line_start":545,"line_end":545,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40068,"byte_end":40071,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40076,"byte_end":40090,"line_start":547,"line_end":547,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40095,"byte_end":40098,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40103,"byte_end":40110,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40115,"byte_end":40141,"line_start":550,"line_end":550,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40146,"byte_end":40149,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let count = (0..100).into_par_iter().count();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40154,"byte_end":40203,"line_start":552,"line_end":552,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40208,"byte_end":40211,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(count, 100);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40216,"byte_end":40243,"line_start":554,"line_end":554,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40248,"byte_end":40255,"line_start":555,"line_end":555,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40777,"byte_end":40780,"line_start":578,"line_end":578,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::ParallelIterator::map","value":"pub fn map<F, R>(Self, F) -> Map<Self, F> where F: Fn(Self::Item) -> R +\nSync + Send, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator, producing a new\n iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator, producing a new","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40385,"byte_end":40452,"line_start":564,"line_end":564,"column_start":5,"column_end":72}},{"value":"/ iterator with the results.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40457,"byte_end":40487,"line_start":565,"line_end":565,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40492,"byte_end":40495,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40500,"byte_end":40514,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40519,"byte_end":40522,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40527,"byte_end":40534,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40539,"byte_end":40565,"line_start":570,"line_end":570,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40570,"byte_end":40573,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..5).into_par_iter().map(|x| x * 2);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40578,"byte_end":40639,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40644,"byte_end":40647,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40652,"byte_end":40697,"line_start":574,"line_end":574,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40702,"byte_end":40705,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40710,"byte_end":40757,"line_start":576,"line_end":576,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40762,"byte_end":40769,"line_start":577,"line_end":577,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42123,"byte_end":42131,"line_start":615,"line_end":615,"column_start":8,"column_end":16},"name":"map_with","qualname":"::iter::ParallelIterator::map_with","value":"pub fn map_with<F, T, R>(Self, T, F) -> MapWith<Self, T, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, T: Send + Clone, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to the given `init` value with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to the given `init` value with each item of this","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":40941,"byte_end":41010,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41015,"byte_end":41071,"line_start":587,"line_end":587,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41076,"byte_end":41079,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ The `init` value will be cloned only as needed to be paired with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41084,"byte_end":41152,"line_start":589,"line_end":589,"column_start":5,"column_end":73}},{"value":"/ the group of items in each rayon job.  It does not require the type","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41157,"byte_end":41228,"line_start":590,"line_end":590,"column_start":5,"column_end":76}},{"value":"/ to be `Sync`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41233,"byte_end":41250,"line_start":591,"line_end":591,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41255,"byte_end":41258,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41263,"byte_end":41277,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41282,"byte_end":41285,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41290,"byte_end":41297,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41302,"byte_end":41335,"line_start":596,"line_end":596,"column_start":5,"column_end":38}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41340,"byte_end":41366,"line_start":597,"line_end":597,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41371,"byte_end":41374,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let (sender, receiver) = channel();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41379,"byte_end":41418,"line_start":599,"line_end":599,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41423,"byte_end":41426,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (0..5)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41431,"byte_end":41457,"line_start":601,"line_end":601,"column_start":5,"column_end":31}},{"value":"/                 .into_par_iter()            // iterating over i32","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41462,"byte_end":41531,"line_start":602,"line_end":602,"column_start":5,"column_end":74}},{"value":"/                 .map_with(sender, |s, x| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41536,"byte_end":41582,"line_start":603,"line_end":603,"column_start":5,"column_end":51}},{"value":"/                     s.send(x).unwrap();     // sending i32 values through the channel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41587,"byte_end":41676,"line_start":604,"line_end":604,"column_start":5,"column_end":94}},{"value":"/                     x                       // returning i32","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41681,"byte_end":41745,"line_start":605,"line_end":605,"column_start":5,"column_end":69}},{"value":"/                 })","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41750,"byte_end":41772,"line_start":606,"line_end":606,"column_start":5,"column_end":27}},{"value":"/                 .collect();                 // collecting the returned values into a vector","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41777,"byte_end":41872,"line_start":607,"line_end":607,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41877,"byte_end":41880,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let mut b: Vec<_> = receiver.iter()         // iterating over the values in the channel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41885,"byte_end":41976,"line_start":609,"line_end":609,"column_start":5,"column_end":96}},{"value":"/                             .collect();     // and collecting them","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":41981,"byte_end":42051,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/ b.sort();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42056,"byte_end":42069,"line_start":611,"line_end":611,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42074,"byte_end":42077,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42082,"byte_end":42103,"line_start":613,"line_end":613,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42108,"byte_end":42115,"line_start":614,"line_end":614,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3760},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43314,"byte_end":43322,"line_start":652,"line_end":652,"column_start":8,"column_end":16},"name":"map_init","qualname":"::iter::ParallelIterator::map_init","value":"pub fn map_init<F, INIT, T, R>(Self, INIT, F) -> MapInit<Self, INIT, F> where\nF: Fn(&mut T, Self::Item) -> R + Sync + Send, INIT: Fn() -> T + Sync + Send,\nR: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to a value returned by `init` with each item of this\n iterator, producing a new iterator with the results.","sig":null,"attributes":[{"value":"/ Applies `map_op` to a value returned by `init` with each item of this","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42354,"byte_end":42427,"line_start":624,"line_end":624,"column_start":5,"column_end":78}},{"value":"/ iterator, producing a new iterator with the results.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42432,"byte_end":42488,"line_start":625,"line_end":625,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42493,"byte_end":42496,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ The `init` function will be called only as needed for a value to be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42501,"byte_end":42572,"line_start":627,"line_end":627,"column_start":5,"column_end":76}},{"value":"/ paired with the group of items in each rayon job.  There is no","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42577,"byte_end":42643,"line_start":628,"line_end":628,"column_start":5,"column_end":71}},{"value":"/ constraint on that returned type at all!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42648,"byte_end":42692,"line_start":629,"line_end":629,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42697,"byte_end":42700,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42705,"byte_end":42719,"line_start":631,"line_end":631,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42724,"byte_end":42727,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42732,"byte_end":42739,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42744,"byte_end":42762,"line_start":634,"line_end":634,"column_start":5,"column_end":23}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42767,"byte_end":42793,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42798,"byte_end":42801,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let a: Vec<_> = (1i32..1_000_000)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42806,"byte_end":42843,"line_start":637,"line_end":637,"column_start":5,"column_end":42}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42848,"byte_end":42872,"line_start":638,"line_end":638,"column_start":5,"column_end":29}},{"value":"/     .map_init(","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42877,"byte_end":42895,"line_start":639,"line_end":639,"column_start":5,"column_end":23}},{"value":"/         || rand::thread_rng(),  // get the thread-local RNG","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42900,"byte_end":42963,"line_start":640,"line_end":640,"column_start":5,"column_end":68}},{"value":"/         |rng, x| if rng.gen() { // randomly negate items","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":42968,"byte_end":43028,"line_start":641,"line_end":641,"column_start":5,"column_end":65}},{"value":"/             -x","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43033,"byte_end":43051,"line_start":642,"line_end":642,"column_start":5,"column_end":23}},{"value":"/         } else {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43056,"byte_end":43076,"line_start":643,"line_end":643,"column_start":5,"column_end":25}},{"value":"/             x","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43081,"byte_end":43098,"line_start":644,"line_end":644,"column_start":5,"column_end":22}},{"value":"/         },","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43103,"byte_end":43117,"line_start":645,"line_end":645,"column_start":5,"column_end":19}},{"value":"/     ).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43122,"byte_end":43142,"line_start":646,"line_end":646,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43147,"byte_end":43150,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ // There's a remote chance that this will fail...","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43155,"byte_end":43208,"line_start":648,"line_end":648,"column_start":5,"column_end":58}},{"value":"/ assert!(a.iter().any(|&x| x < 0));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43213,"byte_end":43251,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ assert!(a.iter().any(|&x| x > 0));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43256,"byte_end":43294,"line_start":650,"line_end":650,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43299,"byte_end":43306,"line_start":651,"line_end":651,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44253,"byte_end":44259,"line_start":682,"line_end":682,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::ParallelIterator::cloned","value":"pub fn cloned<'a, T>(Self) -> Cloned<Self> where T: 'a + Clone + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates an iterator which clones all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Clone`. See also [`copied()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which clones all of its elements.  This may be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43571,"byte_end":43641,"line_start":661,"line_end":661,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43646,"byte_end":43715,"line_start":662,"line_end":662,"column_start":5,"column_end":74}},{"value":"/ that type implements `Clone`. See also [`copied()`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43720,"byte_end":43776,"line_start":663,"line_end":663,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43781,"byte_end":43784,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ [`copied()`]: #method.copied","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43789,"byte_end":43821,"line_start":665,"line_end":665,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43826,"byte_end":43829,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43834,"byte_end":43848,"line_start":667,"line_end":667,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43853,"byte_end":43856,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43861,"byte_end":43868,"line_start":669,"line_end":669,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43873,"byte_end":43899,"line_start":670,"line_end":670,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43904,"byte_end":43907,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43912,"byte_end":43934,"line_start":672,"line_end":672,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43939,"byte_end":43942,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let v_cloned: Vec<_> = a.par_iter().cloned().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":43947,"byte_end":44006,"line_start":674,"line_end":674,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44011,"byte_end":44014,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ // cloned is the same as .map(|&x| x), for integers","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44019,"byte_end":44074,"line_start":676,"line_end":676,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44079,"byte_end":44138,"line_start":677,"line_end":677,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44143,"byte_end":44146,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_cloned, vec![1, 2, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44151,"byte_end":44191,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44196,"byte_end":44233,"line_start":680,"line_end":680,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44238,"byte_end":44245,"line_start":681,"line_end":681,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3768},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45099,"byte_end":45105,"line_start":711,"line_end":711,"column_start":8,"column_end":14},"name":"copied","qualname":"::iter::ParallelIterator::copied","value":"pub fn copied<'a, T>(Self) -> Copied<Self> where T: 'a + Copy + Send,\nSelf: ParallelIterator<Item = &'a T>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates an iterator which copies all of its elements.  This may be\n useful when you have an iterator over `&T`, but you need `T`, and\n that type implements `Copy`. See also [`cloned()`].","sig":null,"attributes":[{"value":"/ Creates an iterator which copies all of its elements.  This may be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44418,"byte_end":44488,"line_start":690,"line_end":690,"column_start":5,"column_end":75}},{"value":"/ useful when you have an iterator over `&T`, but you need `T`, and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44493,"byte_end":44562,"line_start":691,"line_end":691,"column_start":5,"column_end":74}},{"value":"/ that type implements `Copy`. See also [`cloned()`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44567,"byte_end":44622,"line_start":692,"line_end":692,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44627,"byte_end":44630,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ [`cloned()`]: #method.cloned","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44635,"byte_end":44667,"line_start":694,"line_end":694,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44672,"byte_end":44675,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44680,"byte_end":44694,"line_start":696,"line_end":696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44699,"byte_end":44702,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44707,"byte_end":44714,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44719,"byte_end":44745,"line_start":699,"line_end":699,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44750,"byte_end":44753,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44758,"byte_end":44780,"line_start":701,"line_end":701,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44785,"byte_end":44788,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ let v_copied: Vec<_> = a.par_iter().copied().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44793,"byte_end":44852,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44857,"byte_end":44860,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ // copied is the same as .map(|&x| x), for integers","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44865,"byte_end":44920,"line_start":705,"line_end":705,"column_start":5,"column_end":60}},{"value":"/ let v_map: Vec<_> = a.par_iter().map(|&x| x).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44925,"byte_end":44984,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44989,"byte_end":44992,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v_copied, vec![1, 2, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":44997,"byte_end":45037,"line_start":708,"line_end":708,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(v_map, vec![1, 2, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45042,"byte_end":45079,"line_start":709,"line_end":709,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45084,"byte_end":45091,"line_start":710,"line_end":710,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46299,"byte_end":46306,"line_start":748,"line_end":748,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::ParallelIterator::inspect","value":"pub fn inspect<OP>(Self, OP) -> Inspect<Self, OP> where OP: Fn(&Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `inspect_op` to a reference to each item of this iterator,\n producing a new iterator passing through the original items.  This is\n often useful for debugging to see what's happening in iterator stages.","sig":null,"attributes":[{"value":"/ Applies `inspect_op` to a reference to each item of this iterator,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45263,"byte_end":45333,"line_start":719,"line_end":719,"column_start":5,"column_end":75}},{"value":"/ producing a new iterator passing through the original items.  This is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45338,"byte_end":45411,"line_start":720,"line_end":720,"column_start":5,"column_end":78}},{"value":"/ often useful for debugging to see what's happening in iterator stages.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45416,"byte_end":45490,"line_start":721,"line_end":721,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45495,"byte_end":45498,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45503,"byte_end":45517,"line_start":723,"line_end":723,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45522,"byte_end":45525,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45530,"byte_end":45537,"line_start":725,"line_end":725,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45542,"byte_end":45568,"line_start":726,"line_end":726,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45573,"byte_end":45576,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 4, 2, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45581,"byte_end":45606,"line_start":728,"line_end":728,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45611,"byte_end":45614,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ // this iterator sequence is complex.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45619,"byte_end":45660,"line_start":730,"line_end":730,"column_start":5,"column_end":46}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45665,"byte_end":45691,"line_start":731,"line_end":731,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45696,"byte_end":45721,"line_start":732,"line_end":732,"column_start":5,"column_end":30}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45726,"byte_end":45766,"line_start":733,"line_end":733,"column_start":5,"column_end":45}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45771,"byte_end":45819,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45824,"byte_end":45827,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45832,"byte_end":45856,"line_start":736,"line_end":736,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45861,"byte_end":45864,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ // let's add some inspect() calls to investigate what's happening","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45869,"byte_end":45938,"line_start":738,"line_end":738,"column_start":5,"column_end":74}},{"value":"/ let sum = a.par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45943,"byte_end":45969,"line_start":739,"line_end":739,"column_start":5,"column_end":31}},{"value":"/             .cloned()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":45974,"byte_end":45999,"line_start":740,"line_end":740,"column_start":5,"column_end":30}},{"value":"/             .inspect(|x| println!(\"about to filter: {}\", x))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46004,"byte_end":46068,"line_start":741,"line_end":741,"column_start":5,"column_end":69}},{"value":"/             .filter(|&x| x % 2 == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46073,"byte_end":46113,"line_start":742,"line_end":742,"column_start":5,"column_end":45}},{"value":"/             .inspect(|x| println!(\"made it through filter: {}\", x))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46118,"byte_end":46189,"line_start":743,"line_end":743,"column_start":5,"column_end":76}},{"value":"/             .reduce(|| 0, |sum, i| sum + i);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46194,"byte_end":46242,"line_start":744,"line_end":744,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46247,"byte_end":46250,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46255,"byte_end":46279,"line_start":746,"line_end":746,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46284,"byte_end":46291,"line_start":747,"line_end":747,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3773},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46815,"byte_end":46821,"line_start":768,"line_end":768,"column_start":8,"column_end":14},"name":"update","qualname":"::iter::ParallelIterator::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where F: Fn(&mut Self::Item) ->\n() + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Mutates each item of this iterator before yielding it.","sig":null,"attributes":[{"value":"/ Mutates each item of this iterator before yielding it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46463,"byte_end":46521,"line_start":755,"line_end":755,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46526,"byte_end":46529,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46534,"byte_end":46548,"line_start":757,"line_end":757,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46553,"byte_end":46556,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46561,"byte_end":46568,"line_start":759,"line_end":759,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46573,"byte_end":46599,"line_start":760,"line_end":760,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46604,"byte_end":46607,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..5).into_par_iter().update(|x| {*x *= 2;});","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46612,"byte_end":46677,"line_start":762,"line_end":762,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46682,"byte_end":46685,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ let doubles: Vec<_> = par_iter.collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46690,"byte_end":46735,"line_start":764,"line_end":764,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46740,"byte_end":46743,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&doubles[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46748,"byte_end":46795,"line_start":766,"line_end":766,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46800,"byte_end":46807,"line_start":767,"line_end":767,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3775},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47416,"byte_end":47422,"line_start":789,"line_end":789,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::ParallelIterator::filter","value":"pub fn filter<P>(Self, P) -> Filter<Self, P> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator, producing a new\n iterator with only the items that gave `true` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator, producing a new","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":46974,"byte_end":47044,"line_start":775,"line_end":775,"column_start":5,"column_end":75}},{"value":"/ iterator with only the items that gave `true` results.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47049,"byte_end":47107,"line_start":776,"line_end":776,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47112,"byte_end":47115,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47120,"byte_end":47134,"line_start":778,"line_end":778,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47139,"byte_end":47142,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47147,"byte_end":47154,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47159,"byte_end":47185,"line_start":781,"line_end":781,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47190,"byte_end":47193,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter().filter(|x| x % 2 == 0);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47198,"byte_end":47268,"line_start":783,"line_end":783,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47273,"byte_end":47276,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47281,"byte_end":47331,"line_start":785,"line_end":785,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47336,"byte_end":47339,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 2, 4, 6, 8]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47344,"byte_end":47396,"line_start":787,"line_end":787,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47401,"byte_end":47408,"line_start":788,"line_end":788,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3777},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48216,"byte_end":48226,"line_start":814,"line_end":814,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::ParallelIterator::filter_map","value":"pub fn filter_map<P, R>(Self, P) -> FilterMap<Self, P> where P: Fn(Self::Item)\n-> Option<R> + Sync + Send, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `filter_op` to each item of this iterator to get an `Option`,\n producing a new iterator with only the items from `Some` results.","sig":null,"attributes":[{"value":"/ Applies `filter_op` to each item of this iterator to get an `Option`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47579,"byte_end":47652,"line_start":796,"line_end":796,"column_start":5,"column_end":78}},{"value":"/ producing a new iterator with only the items from `Some` results.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47657,"byte_end":47726,"line_start":797,"line_end":797,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47731,"byte_end":47734,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47739,"byte_end":47753,"line_start":799,"line_end":799,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47758,"byte_end":47761,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47766,"byte_end":47773,"line_start":801,"line_end":801,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47778,"byte_end":47804,"line_start":802,"line_end":802,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47809,"byte_end":47812,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ let mut par_iter = (0..10).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47817,"byte_end":47863,"line_start":804,"line_end":804,"column_start":5,"column_end":51}},{"value":"/                         .filter_map(|x| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47868,"byte_end":47913,"line_start":805,"line_end":805,"column_start":5,"column_end":50}},{"value":"/                             if x % 2 == 0 { Some(x * 3) }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47918,"byte_end":47979,"line_start":806,"line_end":806,"column_start":5,"column_end":66}},{"value":"/                             else { None }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":47984,"byte_end":48029,"line_start":807,"line_end":807,"column_start":5,"column_end":50}},{"value":"/                         });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48034,"byte_end":48065,"line_start":808,"line_end":808,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48070,"byte_end":48073,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ let even_numbers: Vec<_> = par_iter.collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48078,"byte_end":48128,"line_start":810,"line_end":810,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48133,"byte_end":48136,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&even_numbers[..], &[0, 6, 12, 18, 24]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48141,"byte_end":48196,"line_start":812,"line_end":812,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48201,"byte_end":48208,"line_start":813,"line_end":813,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3780},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48910,"byte_end":48918,"line_start":838,"line_end":838,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::ParallelIterator::flat_map","value":"pub fn flat_map<F, PI>(Self, F) -> FlatMap<Self, F> where F: Fn(Self::Item) ->\nPI + Sync + Send, PI: IntoParallelIterator","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `map_op` to each item of this iterator to get nested iterators,\n producing a new iterator that flattens these back into one.","sig":null,"attributes":[{"value":"/ Applies `map_op` to each item of this iterator to get nested iterators,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48413,"byte_end":48488,"line_start":822,"line_end":822,"column_start":5,"column_end":80}},{"value":"/ producing a new iterator that flattens these back into one.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48493,"byte_end":48556,"line_start":823,"line_end":823,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48561,"byte_end":48564,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48569,"byte_end":48583,"line_start":825,"line_end":825,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48588,"byte_end":48591,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48596,"byte_end":48603,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48608,"byte_end":48634,"line_start":828,"line_end":828,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48639,"byte_end":48642,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ let a = [[1, 2], [3, 4], [5, 6], [7, 8]];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48647,"byte_end":48692,"line_start":830,"line_end":830,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48697,"byte_end":48700,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().cloned().flat_map(|a| a.to_vec());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48705,"byte_end":48771,"line_start":832,"line_end":832,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48776,"byte_end":48779,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48784,"byte_end":48825,"line_start":834,"line_end":834,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48830,"byte_end":48833,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&vec[..], &[1, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48838,"byte_end":48890,"line_start":836,"line_end":836,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":48895,"byte_end":48902,"line_start":837,"line_end":837,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49452,"byte_end":49459,"line_start":858,"line_end":858,"column_start":8,"column_end":15},"name":"flatten","qualname":"::iter::ParallelIterator::flatten","value":"pub fn flatten(Self) -> Flatten<Self> where Self::Item: IntoParallelIterator","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" An adaptor that flattens iterable `Item`s into one large iterator","sig":null,"attributes":[{"value":"/ An adaptor that flattens iterable `Item`s into one large iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49106,"byte_end":49175,"line_start":846,"line_end":846,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49180,"byte_end":49183,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49188,"byte_end":49202,"line_start":848,"line_end":848,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49207,"byte_end":49210,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49215,"byte_end":49222,"line_start":850,"line_end":850,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49227,"byte_end":49253,"line_start":851,"line_end":851,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49258,"byte_end":49261,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<Vec<_>> = vec![vec![1, 2], vec![3, 4]];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49266,"byte_end":49320,"line_start":853,"line_end":853,"column_start":5,"column_end":59}},{"value":"/ let y: Vec<_> = x.into_par_iter().flatten().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49325,"byte_end":49383,"line_start":854,"line_end":854,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49388,"byte_end":49391,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(y, vec![1, 2, 3, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49396,"byte_end":49432,"line_start":856,"line_end":856,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49437,"byte_end":49444,"line_start":857,"line_end":857,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51144,"byte_end":51150,"line_start":895,"line_end":895,"column_start":8,"column_end":14},"name":"reduce","qualname":"::iter::ParallelIterator::reduce","value":"pub fn reduce<OP, ID>(Self, ID, OP) -> Self::Item where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send, ID: Fn() ->\nSelf::Item + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n The argument `identity` should be a closure that can produce\n \"identity\" value which may be inserted into the sequence as\n needed to create opportunities for parallel execution. So, for\n example, if you are doing a summation, then `identity()` ought\n to produce something that represents the zero for your type\n (but consider just calling `sum()` in that case).","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49579,"byte_end":49642,"line_start":865,"line_end":865,"column_start":5,"column_end":68}},{"value":"/ The argument `identity` should be a closure that can produce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49647,"byte_end":49711,"line_start":866,"line_end":866,"column_start":5,"column_end":69}},{"value":"/ \"identity\" value which may be inserted into the sequence as","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49716,"byte_end":49779,"line_start":867,"line_end":867,"column_start":5,"column_end":68}},{"value":"/ needed to create opportunities for parallel execution. So, for","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49784,"byte_end":49850,"line_start":868,"line_end":868,"column_start":5,"column_end":71}},{"value":"/ example, if you are doing a summation, then `identity()` ought","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49855,"byte_end":49921,"line_start":869,"line_end":869,"column_start":5,"column_end":71}},{"value":"/ to produce something that represents the zero for your type","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49926,"byte_end":49989,"line_start":870,"line_end":870,"column_start":5,"column_end":68}},{"value":"/ (but consider just calling `sum()` in that case).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":49994,"byte_end":50047,"line_start":871,"line_end":871,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50052,"byte_end":50055,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50060,"byte_end":50074,"line_start":873,"line_end":873,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50079,"byte_end":50082,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50087,"byte_end":50094,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/ // Iterate over a sequence of pairs `(x0, y0), ..., (xN, yN)`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50099,"byte_end":50164,"line_start":876,"line_end":876,"column_start":5,"column_end":70}},{"value":"/ // and use reduce to compute one pair `(x0 + ... + xN, y0 + ... + yN)`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50169,"byte_end":50243,"line_start":877,"line_end":877,"column_start":5,"column_end":79}},{"value":"/ // where the first/second elements are summed separately.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50248,"byte_end":50309,"line_start":878,"line_end":878,"column_start":5,"column_end":66}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50314,"byte_end":50340,"line_start":879,"line_end":879,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50345,"byte_end":50393,"line_start":880,"line_end":880,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50398,"byte_end":50461,"line_start":881,"line_end":881,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50466,"byte_end":50528,"line_start":882,"line_end":882,"column_start":5,"column_end":67}},{"value":"/            .reduce(|| (0, 0), // the \"identity\" is 0 in both columns","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50533,"byte_end":50605,"line_start":883,"line_end":883,"column_start":5,"column_end":77}},{"value":"/                    |a, b| (a.0 + b.0, a.1 + b.1));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50610,"byte_end":50664,"line_start":884,"line_end":884,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50669,"byte_end":50723,"line_start":885,"line_end":885,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50728,"byte_end":50735,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50740,"byte_end":50743,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50748,"byte_end":50812,"line_start":888,"line_end":888,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50817,"byte_end":50881,"line_start":889,"line_end":889,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50886,"byte_end":50952,"line_start":890,"line_end":890,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic. And of course `identity()` should","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":50957,"byte_end":51021,"line_start":891,"line_end":891,"column_start":5,"column_end":69}},{"value":"/ produce a true identity.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51026,"byte_end":51054,"line_start":892,"line_end":892,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51059,"byte_end":51062,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51067,"byte_end":51136,"line_start":894,"line_end":894,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3787},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52491,"byte_end":52502,"line_start":929,"line_end":929,"column_start":8,"column_end":19},"name":"reduce_with","qualname":"::iter::ParallelIterator::reduce_with","value":"pub fn reduce_with<OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(Self::Item, Self::Item) -> Self::Item + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using `op`.\n If the iterator is empty, `None` is returned; otherwise,\n `Some` is returned.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using `op`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51385,"byte_end":51448,"line_start":903,"line_end":903,"column_start":5,"column_end":68}},{"value":"/ If the iterator is empty, `None` is returned; otherwise,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51453,"byte_end":51513,"line_start":904,"line_end":904,"column_start":5,"column_end":65}},{"value":"/ `Some` is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51518,"byte_end":51541,"line_start":905,"line_end":905,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51546,"byte_end":51549,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ This version of `reduce` is simple but somewhat less","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51554,"byte_end":51610,"line_start":907,"line_end":907,"column_start":5,"column_end":61}},{"value":"/ efficient. If possible, it is better to call `reduce()`, which","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51615,"byte_end":51681,"line_start":908,"line_end":908,"column_start":5,"column_end":71}},{"value":"/ requires an identity element.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51686,"byte_end":51719,"line_start":909,"line_end":909,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51724,"byte_end":51727,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51732,"byte_end":51746,"line_start":911,"line_end":911,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51751,"byte_end":51754,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51759,"byte_end":51766,"line_start":913,"line_end":913,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51771,"byte_end":51797,"line_start":914,"line_end":914,"column_start":5,"column_end":31}},{"value":"/ let sums = [(0, 1), (5, 6), (16, 2), (8, 9)]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51802,"byte_end":51850,"line_start":915,"line_end":915,"column_start":5,"column_end":53}},{"value":"/            .par_iter()        // iterating over &(i32, i32)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51855,"byte_end":51918,"line_start":916,"line_end":916,"column_start":5,"column_end":68}},{"value":"/            .cloned()          // iterating over (i32, i32)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51923,"byte_end":51985,"line_start":917,"line_end":917,"column_start":5,"column_end":67}},{"value":"/            .reduce_with(|a, b| (a.0 + b.0, a.1 + b.1))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":51990,"byte_end":52048,"line_start":918,"line_end":918,"column_start":5,"column_end":63}},{"value":"/            .unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52053,"byte_end":52078,"line_start":919,"line_end":919,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sums, (0 + 5 + 16 + 8, 1 + 6 + 2 + 9));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52083,"byte_end":52137,"line_start":920,"line_end":920,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52142,"byte_end":52149,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52154,"byte_end":52157,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ **Note:** unlike a sequential `fold` operation, the order in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52162,"byte_end":52226,"line_start":923,"line_end":923,"column_start":5,"column_end":69}},{"value":"/ which `op` will be applied to reduce the result is not fully","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52231,"byte_end":52295,"line_start":924,"line_end":924,"column_start":5,"column_end":69}},{"value":"/ specified. So `op` should be [associative] or else the results","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52300,"byte_end":52366,"line_start":925,"line_end":925,"column_start":5,"column_end":71}},{"value":"/ will be non-deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52371,"byte_end":52401,"line_start":926,"line_end":926,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52406,"byte_end":52409,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":52414,"byte_end":52483,"line_start":928,"line_end":928,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3799},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54686,"byte_end":54696,"line_start":983,"line_end":983,"column_start":8,"column_end":18},"name":"try_reduce","qualname":"::iter::ParallelIterator::try_reduce","value":"pub fn try_reduce<T, OP, ID>(Self, ID, OP) -> Self::Item where OP: Fn(T, T) ->\nSelf::Item + Sync + Send, ID: Fn() -> T + Sync + Send, Self::Item: Try<Ok = T>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.\n The `identity` argument is used the same way as in [`reduce()`].","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53297,"byte_end":53371,"line_start":952,"line_end":952,"column_start":5,"column_end":79}},{"value":"/ The `identity` argument is used the same way as in [`reduce()`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53376,"byte_end":53444,"line_start":953,"line_end":953,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53449,"byte_end":53452,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ [`reduce()`]: #method.reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53457,"byte_end":53489,"line_start":955,"line_end":955,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53494,"byte_end":53497,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ If a `Result::Err` or `Option::None` item is found, or if `op` reduces","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53502,"byte_end":53576,"line_start":957,"line_end":957,"column_start":5,"column_end":79}},{"value":"/ to one, we will attempt to stop processing the rest of the items in the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53581,"byte_end":53656,"line_start":958,"line_end":958,"column_start":5,"column_end":80}},{"value":"/ iterator as soon as possible, and we will return that terminating value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53661,"byte_end":53737,"line_start":959,"line_end":959,"column_start":5,"column_end":81}},{"value":"/ Otherwise, we will return the final reduced `Result::Ok(T)` or","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53742,"byte_end":53808,"line_start":960,"line_end":960,"column_start":5,"column_end":71}},{"value":"/ `Option::Some(T)`.  If there are multiple errors in parallel, it is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53813,"byte_end":53888,"line_start":961,"line_end":961,"column_start":5,"column_end":80}},{"value":"/ specified which will be returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53893,"byte_end":53930,"line_start":962,"line_end":962,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53935,"byte_end":53938,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53943,"byte_end":53957,"line_start":964,"line_end":964,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53962,"byte_end":53965,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53970,"byte_end":53977,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":53982,"byte_end":54008,"line_start":967,"line_end":967,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54013,"byte_end":54016,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ // Compute the sum of squares, being careful about overflow.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54021,"byte_end":54085,"line_start":969,"line_end":969,"column_start":5,"column_end":69}},{"value":"/ fn sum_squares<I: IntoParallelIterator<Item = i32>>(iter: I) -> Option<i32> {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54090,"byte_end":54171,"line_start":970,"line_end":970,"column_start":5,"column_end":86}},{"value":"/     iter.into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54176,"byte_end":54204,"line_start":971,"line_end":971,"column_start":5,"column_end":33}},{"value":"/         .map(|i| i.checked_mul(i))            // square each item,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54209,"byte_end":54279,"line_start":972,"line_end":972,"column_start":5,"column_end":75}},{"value":"/         .try_reduce(|| 0, i32::checked_add)   // and add them up!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54284,"byte_end":54353,"line_start":973,"line_end":973,"column_start":5,"column_end":74}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54358,"byte_end":54363,"line_start":974,"line_end":974,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(sum_squares(0..5), Some(0 + 1 + 4 + 9 + 16));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54368,"byte_end":54428,"line_start":975,"line_end":975,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54433,"byte_end":54436,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ // The sum might overflow","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54441,"byte_end":54470,"line_start":977,"line_end":977,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(sum_squares(0..10_000), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54475,"byte_end":54520,"line_start":978,"line_end":978,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54525,"byte_end":54528,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ // Or the squares might overflow before it even reaches `try_reduce`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54533,"byte_end":54605,"line_start":980,"line_end":980,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(sum_squares(1_000_000..1_000_001), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54610,"byte_end":54666,"line_start":981,"line_end":981,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54671,"byte_end":54678,"line_start":982,"line_end":982,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3803},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56323,"byte_end":56338,"line_start":1027,"line_end":1027,"column_start":8,"column_end":23},"name":"try_reduce_with","qualname":"::iter::ParallelIterator::try_reduce_with","value":"pub fn try_reduce_with<T, OP>(Self, OP) -> Option<Self::Item> where\nOP: Fn(T, T) -> Self::Item + Sync + Send, Self::Item: Try<Ok = T>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Reduces the items in the iterator into one item using a fallible `op`.","sig":null,"attributes":[{"value":"/ Reduces the items in the iterator into one item using a fallible `op`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":54948,"byte_end":55022,"line_start":992,"line_end":992,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55027,"byte_end":55030,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ Like [`reduce_with()`], if the iterator is empty, `None` is returned;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55035,"byte_end":55108,"line_start":994,"line_end":994,"column_start":5,"column_end":78}},{"value":"/ otherwise, `Some` is returned.  Beyond that, it behaves like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55113,"byte_end":55177,"line_start":995,"line_end":995,"column_start":5,"column_end":69}},{"value":"/ [`try_reduce()`] for handling `Err`/`None`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55182,"byte_end":55229,"line_start":996,"line_end":996,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55234,"byte_end":55237,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ [`reduce_with()`]: #method.reduce_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55242,"byte_end":55284,"line_start":998,"line_end":998,"column_start":5,"column_end":47}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55289,"byte_end":55329,"line_start":999,"line_end":999,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55334,"byte_end":55337,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ For instance, with `Option` items, the return value may be:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55342,"byte_end":55405,"line_start":1001,"line_end":1001,"column_start":5,"column_end":68}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55410,"byte_end":55446,"line_start":1002,"line_end":1002,"column_start":5,"column_end":41}},{"value":"/ - `Some(None)`, we stopped after encountering `None`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55451,"byte_end":55508,"line_start":1003,"line_end":1003,"column_start":5,"column_end":62}},{"value":"/ - `Some(Some(x))`, the entire iterator reduced to `x`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55513,"byte_end":55571,"line_start":1004,"line_end":1004,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55576,"byte_end":55579,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ With `Result` items, the nesting is more obvious:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55584,"byte_end":55637,"line_start":1006,"line_end":1006,"column_start":5,"column_end":58}},{"value":"/ - `None`, the iterator was empty","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55642,"byte_end":55678,"line_start":1007,"line_end":1007,"column_start":5,"column_end":41}},{"value":"/ - `Some(Err(e))`, we stopped after encountering an error `e`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55683,"byte_end":55748,"line_start":1008,"line_end":1008,"column_start":5,"column_end":70}},{"value":"/ - `Some(Ok(x))`, the entire iterator reduced to `x`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55753,"byte_end":55809,"line_start":1009,"line_end":1009,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55814,"byte_end":55817,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55822,"byte_end":55836,"line_start":1011,"line_end":1011,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55841,"byte_end":55844,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55849,"byte_end":55856,"line_start":1013,"line_end":1013,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55861,"byte_end":55887,"line_start":1014,"line_end":1014,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55892,"byte_end":55895,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ let files = [\"/dev/null\", \"/does/not/exist\"];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55900,"byte_end":55949,"line_start":1016,"line_end":1016,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55954,"byte_end":55957,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ // Find the biggest file","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55962,"byte_end":55990,"line_start":1018,"line_end":1018,"column_start":5,"column_end":33}},{"value":"/ files.into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":55995,"byte_end":56020,"line_start":1019,"line_end":1019,"column_start":5,"column_end":30}},{"value":"/     .map(|path| std::fs::metadata(path).map(|m| (path, m.len())))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56025,"byte_end":56094,"line_start":1020,"line_end":1020,"column_start":5,"column_end":74}},{"value":"/     .try_reduce_with(|a, b| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56099,"byte_end":56132,"line_start":1021,"line_end":1021,"column_start":5,"column_end":38}},{"value":"/         Ok(if a.1 >= b.1 { a } else { b })","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56137,"byte_end":56183,"line_start":1022,"line_end":1022,"column_start":5,"column_end":51}},{"value":"/     })","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56188,"byte_end":56198,"line_start":1023,"line_end":1023,"column_start":5,"column_end":15}},{"value":"/     .expect(\"Some value, since the iterator is not empty\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56203,"byte_end":56265,"line_start":1024,"line_end":1024,"column_start":5,"column_end":67}},{"value":"/     .expect_err(\"not found\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56270,"byte_end":56303,"line_start":1025,"line_end":1025,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56308,"byte_end":56315,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62116,"byte_end":62120,"line_start":1168,"line_end":1168,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::ParallelIterator::fold","value":"pub fn fold<T, ID, F>(Self, ID, F) -> Fold<Self, ID, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, ID: Fn() -> T + Sync + Send, T: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Parallel fold is similar to sequential fold except that the\n sequence of items may be subdivided before it is\n folded. Consider a list of numbers like `22 3 77 89 46`. If\n you used sequential fold to add them (`fold(0, |a,b| a+b)`,\n you would wind up first adding 0 + 22, then 22 + 3, then 25 +\n 77, and so forth. The **parallel fold** works similarly except\n that it first breaks up your list into sublists, and hence\n instead of yielding up a single sum at the end, it yields up\n multiple sums. The number of results is nondeterministic, as\n is the point where the breaks occur.","sig":null,"attributes":[{"value":"/ Parallel fold is similar to sequential fold except that the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56543,"byte_end":56606,"line_start":1035,"line_end":1035,"column_start":5,"column_end":68}},{"value":"/ sequence of items may be subdivided before it is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56611,"byte_end":56663,"line_start":1036,"line_end":1036,"column_start":5,"column_end":57}},{"value":"/ folded. Consider a list of numbers like `22 3 77 89 46`. If","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56668,"byte_end":56731,"line_start":1037,"line_end":1037,"column_start":5,"column_end":68}},{"value":"/ you used sequential fold to add them (`fold(0, |a,b| a+b)`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56736,"byte_end":56799,"line_start":1038,"line_end":1038,"column_start":5,"column_end":68}},{"value":"/ you would wind up first adding 0 + 22, then 22 + 3, then 25 +","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56804,"byte_end":56869,"line_start":1039,"line_end":1039,"column_start":5,"column_end":70}},{"value":"/ 77, and so forth. The **parallel fold** works similarly except","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56874,"byte_end":56940,"line_start":1040,"line_end":1040,"column_start":5,"column_end":71}},{"value":"/ that it first breaks up your list into sublists, and hence","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":56945,"byte_end":57007,"line_start":1041,"line_end":1041,"column_start":5,"column_end":67}},{"value":"/ instead of yielding up a single sum at the end, it yields up","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57012,"byte_end":57076,"line_start":1042,"line_end":1042,"column_start":5,"column_end":69}},{"value":"/ multiple sums. The number of results is nondeterministic, as","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57081,"byte_end":57145,"line_start":1043,"line_end":1043,"column_start":5,"column_end":69}},{"value":"/ is the point where the breaks occur.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57150,"byte_end":57190,"line_start":1044,"line_end":1044,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57195,"byte_end":57198,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ So if did the same parallel fold (`fold(0, |a,b| a+b)`) on","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57203,"byte_end":57265,"line_start":1046,"line_end":1046,"column_start":5,"column_end":67}},{"value":"/ our example list, we might wind up with a sequence of two numbers,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57270,"byte_end":57340,"line_start":1047,"line_end":1047,"column_start":5,"column_end":75}},{"value":"/ like so:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57345,"byte_end":57357,"line_start":1048,"line_end":1048,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57362,"byte_end":57365,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57370,"byte_end":57384,"line_start":1050,"line_end":1050,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57389,"byte_end":57406,"line_start":1051,"line_end":1051,"column_start":5,"column_end":22}},{"value":"/       |     |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57411,"byte_end":57428,"line_start":1052,"line_end":1052,"column_start":5,"column_end":22}},{"value":"/     102   135","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57433,"byte_end":57450,"line_start":1053,"line_end":1053,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57455,"byte_end":57462,"line_start":1054,"line_end":1054,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57467,"byte_end":57470,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ Or perhaps these three numbers:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57475,"byte_end":57510,"line_start":1056,"line_end":1056,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57515,"byte_end":57518,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ ```notrust","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57523,"byte_end":57537,"line_start":1058,"line_end":1058,"column_start":5,"column_end":19}},{"value":"/ 22 3 77 89 46","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57542,"byte_end":57559,"line_start":1059,"line_end":1059,"column_start":5,"column_end":22}},{"value":"/       |  |  |","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57564,"byte_end":57581,"line_start":1060,"line_end":1060,"column_start":5,"column_end":22}},{"value":"/     102 89 46","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57586,"byte_end":57603,"line_start":1061,"line_end":1061,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57608,"byte_end":57615,"line_start":1062,"line_end":1062,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57620,"byte_end":57623,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ In general, Rayon will attempt to find good breaking points","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57628,"byte_end":57691,"line_start":1064,"line_end":1064,"column_start":5,"column_end":68}},{"value":"/ that keep all of your cores busy.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57696,"byte_end":57733,"line_start":1065,"line_end":1065,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57738,"byte_end":57741,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ### Fold versus reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57746,"byte_end":57772,"line_start":1067,"line_end":1067,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57777,"byte_end":57780,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ The `fold()` and `reduce()` methods each take an identity element","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57785,"byte_end":57854,"line_start":1069,"line_end":1069,"column_start":5,"column_end":74}},{"value":"/ and a combining function, but they operate rather differently.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57859,"byte_end":57925,"line_start":1070,"line_end":1070,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57930,"byte_end":57933,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ `reduce()` requires that the identity function has the same","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":57938,"byte_end":58001,"line_start":1072,"line_end":1072,"column_start":5,"column_end":68}},{"value":"/ type as the things you are iterating over, and it fully","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58006,"byte_end":58065,"line_start":1073,"line_end":1073,"column_start":5,"column_end":64}},{"value":"/ reduces the list of items into a single item. So, for example,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58070,"byte_end":58136,"line_start":1074,"line_end":1074,"column_start":5,"column_end":71}},{"value":"/ imagine we are iterating over a list of bytes `bytes: [128_u8,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58141,"byte_end":58207,"line_start":1075,"line_end":1075,"column_start":5,"column_end":71}},{"value":"/ 64_u8, 64_u8]`. If we used `bytes.reduce(|| 0_u8, |a: u8, b:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58212,"byte_end":58276,"line_start":1076,"line_end":1076,"column_start":5,"column_end":69}},{"value":"/ u8| a + b)`, we would get an overflow. This is because `0`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58281,"byte_end":58344,"line_start":1077,"line_end":1077,"column_start":5,"column_end":68}},{"value":"/ `a`, and `b` here are all bytes, just like the numbers in the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58349,"byte_end":58414,"line_start":1078,"line_end":1078,"column_start":5,"column_end":70}},{"value":"/ list (I wrote the types explicitly above, but those are the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58419,"byte_end":58482,"line_start":1079,"line_end":1079,"column_start":5,"column_end":68}},{"value":"/ only types you can use). To avoid the overflow, we would need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58487,"byte_end":58552,"line_start":1080,"line_end":1080,"column_start":5,"column_end":70}},{"value":"/ to do something like `bytes.map(|b| b as u32).reduce(|| 0, |a,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58557,"byte_end":58623,"line_start":1081,"line_end":1081,"column_start":5,"column_end":71}},{"value":"/ b| a + b)`, in which case our result would be `256`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58628,"byte_end":58684,"line_start":1082,"line_end":1082,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58689,"byte_end":58692,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ In contrast, with `fold()`, the identity function does not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58697,"byte_end":58759,"line_start":1084,"line_end":1084,"column_start":5,"column_end":67}},{"value":"/ have to have the same type as the things you are iterating","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58764,"byte_end":58826,"line_start":1085,"line_end":1085,"column_start":5,"column_end":67}},{"value":"/ over, and you potentially get back many results. So, if we","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58831,"byte_end":58893,"line_start":1086,"line_end":1086,"column_start":5,"column_end":67}},{"value":"/ continue with the `bytes` example from the previous paragraph,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58898,"byte_end":58964,"line_start":1087,"line_end":1087,"column_start":5,"column_end":71}},{"value":"/ we could do `bytes.fold(|| 0_u32, |a, b| a + (b as u32))` to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":58969,"byte_end":59033,"line_start":1088,"line_end":1088,"column_start":5,"column_end":69}},{"value":"/ convert our bytes into `u32`. And of course we might not get","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59038,"byte_end":59102,"line_start":1089,"line_end":1089,"column_start":5,"column_end":69}},{"value":"/ back a single sum.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59107,"byte_end":59129,"line_start":1090,"line_end":1090,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59134,"byte_end":59137,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ There is a more subtle distinction as well, though it's","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59142,"byte_end":59201,"line_start":1092,"line_end":1092,"column_start":5,"column_end":64}},{"value":"/ actually implied by the above points. When you use `reduce()`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59206,"byte_end":59272,"line_start":1093,"line_end":1093,"column_start":5,"column_end":71}},{"value":"/ your reduction function is sometimes called with values that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59277,"byte_end":59341,"line_start":1094,"line_end":1094,"column_start":5,"column_end":69}},{"value":"/ were never part of your original parallel iterator (for","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59346,"byte_end":59405,"line_start":1095,"line_end":1095,"column_start":5,"column_end":64}},{"value":"/ example, both the left and right might be a partial sum). With","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59410,"byte_end":59476,"line_start":1096,"line_end":1096,"column_start":5,"column_end":71}},{"value":"/ `fold()`, in contrast, the left value in the fold function is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59481,"byte_end":59546,"line_start":1097,"line_end":1097,"column_start":5,"column_end":70}},{"value":"/ always the accumulator, and the right value is always from","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59551,"byte_end":59613,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/ your original sequence.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59618,"byte_end":59645,"line_start":1099,"line_end":1099,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59650,"byte_end":59653,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ ### Fold vs Map/Reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59658,"byte_end":59684,"line_start":1101,"line_end":1101,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59689,"byte_end":59692,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ Fold makes sense if you have some operation where it is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59697,"byte_end":59756,"line_start":1103,"line_end":1103,"column_start":5,"column_end":64}},{"value":"/ cheaper to create groups of elements at a time. For example,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59761,"byte_end":59825,"line_start":1104,"line_end":1104,"column_start":5,"column_end":69}},{"value":"/ imagine collecting characters into a string. If you were going","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59830,"byte_end":59896,"line_start":1105,"line_end":1105,"column_start":5,"column_end":71}},{"value":"/ to use map/reduce, you might try this:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59901,"byte_end":59943,"line_start":1106,"line_end":1106,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59948,"byte_end":59951,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59956,"byte_end":59963,"line_start":1108,"line_end":1108,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59968,"byte_end":59994,"line_start":1109,"line_end":1109,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":59999,"byte_end":60002,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60007,"byte_end":60018,"line_start":1111,"line_end":1111,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60023,"byte_end":60056,"line_start":1112,"line_end":1112,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60061,"byte_end":60080,"line_start":1113,"line_end":1113,"column_start":5,"column_end":24}},{"value":"/     .map(|c: &char| format!(\"{}\", c))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60085,"byte_end":60126,"line_start":1114,"line_end":1114,"column_start":5,"column_end":46}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60131,"byte_end":60164,"line_start":1115,"line_end":1115,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60169,"byte_end":60235,"line_start":1116,"line_end":1116,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60240,"byte_end":60243,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60248,"byte_end":60275,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60280,"byte_end":60287,"line_start":1119,"line_end":1119,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60292,"byte_end":60295,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ Because reduce produces the same type of element as its input,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60300,"byte_end":60366,"line_start":1121,"line_end":1121,"column_start":5,"column_end":71}},{"value":"/ you have to first map each character into a string, and then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60371,"byte_end":60435,"line_start":1122,"line_end":1122,"column_start":5,"column_end":69}},{"value":"/ you can reduce them. This means we create one string per","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60440,"byte_end":60500,"line_start":1123,"line_end":1123,"column_start":5,"column_end":65}},{"value":"/ element in our iterator -- not so great. Using `fold`, we can","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60505,"byte_end":60570,"line_start":1124,"line_end":1124,"column_start":5,"column_end":70}},{"value":"/ do this instead:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60575,"byte_end":60595,"line_start":1125,"line_end":1125,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60600,"byte_end":60603,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60608,"byte_end":60615,"line_start":1127,"line_end":1127,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60620,"byte_end":60646,"line_start":1128,"line_end":1128,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60651,"byte_end":60654,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ let s =","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60659,"byte_end":60670,"line_start":1130,"line_end":1130,"column_start":5,"column_end":16}},{"value":"/     ['a', 'b', 'c', 'd', 'e']","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60675,"byte_end":60708,"line_start":1131,"line_end":1131,"column_start":5,"column_end":38}},{"value":"/     .par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60713,"byte_end":60732,"line_start":1132,"line_end":1132,"column_start":5,"column_end":24}},{"value":"/     .fold(|| String::new(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60737,"byte_end":60768,"line_start":1133,"line_end":1133,"column_start":5,"column_end":36}},{"value":"/             |mut s: String, c: &char| { s.push(*c); s })","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60773,"byte_end":60833,"line_start":1134,"line_end":1134,"column_start":5,"column_end":65}},{"value":"/     .reduce(|| String::new(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60838,"byte_end":60871,"line_start":1135,"line_end":1135,"column_start":5,"column_end":38}},{"value":"/             |mut a: String, b: String| { a.push_str(&b); a });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60876,"byte_end":60942,"line_start":1136,"line_end":1136,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60947,"byte_end":60950,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, \"abcde\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60955,"byte_end":60982,"line_start":1138,"line_end":1138,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60987,"byte_end":60994,"line_start":1139,"line_end":1139,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":60999,"byte_end":61002,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ Now `fold` will process groups of our characters at a time,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61007,"byte_end":61070,"line_start":1141,"line_end":1141,"column_start":5,"column_end":68}},{"value":"/ and we only make one string per group. We should wind up with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61075,"byte_end":61140,"line_start":1142,"line_end":1142,"column_start":5,"column_end":70}},{"value":"/ some small-ish number of strings roughly proportional to the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61145,"byte_end":61209,"line_start":1143,"line_end":1143,"column_start":5,"column_end":69}},{"value":"/ number of CPUs you have (it will ultimately depend on how busy","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61214,"byte_end":61280,"line_start":1144,"line_end":1144,"column_start":5,"column_end":71}},{"value":"/ your processors are). Note that we still need to do a reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61285,"byte_end":61349,"line_start":1145,"line_end":1145,"column_start":5,"column_end":69}},{"value":"/ afterwards to combine those groups of strings into a single","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61354,"byte_end":61417,"line_start":1146,"line_end":1146,"column_start":5,"column_end":68}},{"value":"/ string.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61422,"byte_end":61433,"line_start":1147,"line_end":1147,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61438,"byte_end":61441,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ You could use a similar trick to save partial results (e.g., a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61446,"byte_end":61512,"line_start":1149,"line_end":1149,"column_start":5,"column_end":71}},{"value":"/ cache) or something similar.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61517,"byte_end":61549,"line_start":1150,"line_end":1150,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61554,"byte_end":61557,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ ### Combining fold with other operations","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61562,"byte_end":61606,"line_start":1152,"line_end":1152,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61611,"byte_end":61614,"line_start":1153,"line_end":1153,"column_start":5,"column_end":8}},{"value":"/ You can combine `fold` with `reduce` if you want to produce a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61619,"byte_end":61684,"line_start":1154,"line_end":1154,"column_start":5,"column_end":70}},{"value":"/ single value. This is then roughly equivalent to a map/reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61689,"byte_end":61754,"line_start":1155,"line_end":1155,"column_start":5,"column_end":70}},{"value":"/ combination in effect:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61759,"byte_end":61785,"line_start":1156,"line_end":1156,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61790,"byte_end":61793,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61798,"byte_end":61805,"line_start":1158,"line_end":1158,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61810,"byte_end":61836,"line_start":1159,"line_end":1159,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61841,"byte_end":61844,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61849,"byte_end":61874,"line_start":1161,"line_end":1161,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61879,"byte_end":61914,"line_start":1162,"line_end":1162,"column_start":5,"column_end":40}},{"value":"/                .fold(|| 0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61919,"byte_end":61985,"line_start":1163,"line_end":1163,"column_start":5,"column_end":71}},{"value":"/                .sum::<u32>();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":61990,"byte_end":62023,"line_start":1164,"line_end":1164,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62028,"byte_end":62031,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62036,"byte_end":62096,"line_start":1166,"line_end":1166,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62101,"byte_end":62108,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63045,"byte_end":63054,"line_start":1196,"line_end":1196,"column_start":8,"column_end":17},"name":"fold_with","qualname":"::iter::ParallelIterator::fold_with","value":"pub fn fold_with<F, T>(Self, T, F) -> FoldWith<Self, T, F> where\nF: Fn(T, Self::Item) -> T + Sync + Send, T: Send + Clone","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies `fold_op` to the given `init` value with each item of this\n iterator, finally producing the value for further use.","sig":null,"attributes":[{"value":"/ Applies `fold_op` to the given `init` value with each item of this","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62357,"byte_end":62427,"line_start":1177,"line_end":1177,"column_start":5,"column_end":75}},{"value":"/ iterator, finally producing the value for further use.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62432,"byte_end":62490,"line_start":1178,"line_end":1178,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62495,"byte_end":62498,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ This works essentially like `fold(|| init.clone(), fold_op)`, except","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62503,"byte_end":62575,"line_start":1180,"line_end":1180,"column_start":5,"column_end":77}},{"value":"/ it doesn't require the `init` type to be `Sync`, nor any other form","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62580,"byte_end":62651,"line_start":1181,"line_end":1181,"column_start":5,"column_end":76}},{"value":"/ of added synchronization.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62656,"byte_end":62685,"line_start":1182,"line_end":1182,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62690,"byte_end":62693,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62698,"byte_end":62712,"line_start":1184,"line_end":1184,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62717,"byte_end":62720,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62725,"byte_end":62732,"line_start":1186,"line_end":1186,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62737,"byte_end":62763,"line_start":1187,"line_end":1187,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62768,"byte_end":62771,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62776,"byte_end":62801,"line_start":1189,"line_end":1189,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62806,"byte_end":62841,"line_start":1190,"line_end":1190,"column_start":5,"column_end":40}},{"value":"/                .fold_with(0_u32, |a: u32, b: u8| a + (b as u32))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62846,"byte_end":62914,"line_start":1191,"line_end":1191,"column_start":5,"column_end":73}},{"value":"/                .sum::<u32>();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62919,"byte_end":62952,"line_start":1192,"line_end":1192,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62957,"byte_end":62960,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, (0..22).sum()); // compare to sequential","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":62965,"byte_end":63025,"line_start":1194,"line_end":1194,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63030,"byte_end":63037,"line_start":1195,"line_end":1195,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3813},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64187,"byte_end":64195,"line_start":1229,"line_end":1229,"column_start":8,"column_end":16},"name":"try_fold","qualname":"::iter::ParallelIterator::try_fold","value":"pub fn try_fold<T, R, ID, F>(Self, ID, F) -> TryFold<Self, R, ID, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, ID: Fn() -> T + Sync + Send,\nR: Try<Ok = T> + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63256,"byte_end":63294,"line_start":1204,"line_end":1204,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63299,"byte_end":63302,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ This is a variation of [`fold()`] for operations which can fail with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63307,"byte_end":63379,"line_start":1206,"line_end":1206,"column_start":5,"column_end":77}},{"value":"/ `Option::None` or `Result::Err`.  The first such failure stops","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63384,"byte_end":63450,"line_start":1207,"line_end":1207,"column_start":5,"column_end":71}},{"value":"/ processing the local set of items, without affecting other folds in the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63455,"byte_end":63530,"line_start":1208,"line_end":1208,"column_start":5,"column_end":80}},{"value":"/ iterator's subdivisions.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63535,"byte_end":63563,"line_start":1209,"line_end":1209,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63568,"byte_end":63571,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ Often, `try_fold()` will be followed by [`try_reduce()`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63576,"byte_end":63636,"line_start":1211,"line_end":1211,"column_start":5,"column_end":65}},{"value":"/ for a final reduction and global short-circuiting effect.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63641,"byte_end":63702,"line_start":1212,"line_end":1212,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63707,"byte_end":63710,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ [`fold()`]: #method.fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63715,"byte_end":63743,"line_start":1214,"line_end":1214,"column_start":5,"column_end":33}},{"value":"/ [`try_reduce()`]: #method.try_reduce","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63748,"byte_end":63788,"line_start":1215,"line_end":1215,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63793,"byte_end":63796,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63801,"byte_end":63815,"line_start":1217,"line_end":1217,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63820,"byte_end":63823,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63828,"byte_end":63835,"line_start":1219,"line_end":1219,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63840,"byte_end":63866,"line_start":1220,"line_end":1220,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63871,"byte_end":63874,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63879,"byte_end":63904,"line_start":1222,"line_end":1222,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63909,"byte_end":63944,"line_start":1223,"line_end":1223,"column_start":5,"column_end":40}},{"value":"/                .try_fold(|| 0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":63949,"byte_end":64028,"line_start":1224,"line_end":1224,"column_start":5,"column_end":84}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64033,"byte_end":64088,"line_start":1225,"line_end":1225,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64093,"byte_end":64096,"line_start":1226,"line_end":1226,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64101,"byte_end":64167,"line_start":1227,"line_end":1227,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64172,"byte_end":64179,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3818},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65115,"byte_end":65128,"line_start":1256,"line_end":1256,"column_start":8,"column_end":21},"name":"try_fold_with","qualname":"::iter::ParallelIterator::try_fold_with","value":"pub fn try_fold_with<F, T, R>(Self, T, F) -> TryFoldWith<Self, R, F> where\nF: Fn(T, Self::Item) -> R + Sync + Send, R: Try<Ok = T> + Send, T: Clone +\nSend","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Performs a fallible parallel fold with a cloneable `init` value.","sig":null,"attributes":[{"value":"/ Performs a fallible parallel fold with a cloneable `init` value.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64458,"byte_end":64526,"line_start":1238,"line_end":1238,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64531,"byte_end":64534,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ This combines the `init` semantics of [`fold_with()`] and the failure","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64539,"byte_end":64612,"line_start":1240,"line_end":1240,"column_start":5,"column_end":78}},{"value":"/ semantics of [`try_fold()`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64617,"byte_end":64649,"line_start":1241,"line_end":1241,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64654,"byte_end":64657,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ [`fold_with()`]: #method.fold_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64662,"byte_end":64700,"line_start":1243,"line_end":1243,"column_start":5,"column_end":43}},{"value":"/ [`try_fold()`]: #method.try_fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64705,"byte_end":64741,"line_start":1244,"line_end":1244,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64746,"byte_end":64749,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64754,"byte_end":64761,"line_start":1246,"line_end":1246,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64766,"byte_end":64792,"line_start":1247,"line_end":1247,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64797,"byte_end":64800,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ let bytes = 0..22_u8;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64805,"byte_end":64830,"line_start":1249,"line_end":1249,"column_start":5,"column_end":30}},{"value":"/ let sum = bytes.into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64835,"byte_end":64870,"line_start":1250,"line_end":1250,"column_start":5,"column_end":40}},{"value":"/                .try_fold_with(0_u32, |a: u32, b: u8| a.checked_add(b as u32))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64875,"byte_end":64956,"line_start":1251,"line_end":1251,"column_start":5,"column_end":86}},{"value":"/                .try_reduce(|| 0, u32::checked_add);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":64961,"byte_end":65016,"line_start":1252,"line_end":1252,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65021,"byte_end":65024,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, Some((0..22).sum())); // compare to sequential","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65029,"byte_end":65095,"line_start":1254,"line_end":1254,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65100,"byte_end":65107,"line_start":1255,"line_end":1255,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66153,"byte_end":66156,"line_start":1289,"line_end":1289,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::ParallelIterator::sum","value":"pub fn sum<S>(Self) -> S where S: Send + Sum<Self::Item> + Sum<S>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Sums up the items in the iterator.","sig":null,"attributes":[{"value":"/ Sums up the items in the iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65370,"byte_end":65408,"line_start":1265,"line_end":1265,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65413,"byte_end":65416,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65421,"byte_end":65487,"line_start":1267,"line_end":1267,"column_start":5,"column_end":71}},{"value":"/ so if the `+` operator is not truly [associative] \\(as is the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65492,"byte_end":65557,"line_start":1268,"line_end":1268,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65562,"byte_end":65624,"line_start":1269,"line_end":1269,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65629,"byte_end":65653,"line_start":1270,"line_end":1270,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65658,"byte_end":65661,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65666,"byte_end":65735,"line_start":1272,"line_end":1272,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65740,"byte_end":65743,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 0, |a, b| a + b)`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65748,"byte_end":65810,"line_start":1274,"line_end":1274,"column_start":5,"column_end":67}},{"value":"/ except that the type of `0` and the `+` operation may vary","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65815,"byte_end":65877,"line_start":1275,"line_end":1275,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65882,"byte_end":65932,"line_start":1276,"line_end":1276,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65937,"byte_end":65940,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65945,"byte_end":65959,"line_start":1278,"line_end":1278,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65964,"byte_end":65967,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65972,"byte_end":65979,"line_start":1280,"line_end":1280,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":65984,"byte_end":66010,"line_start":1281,"line_end":1281,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66015,"byte_end":66018,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 5, 7];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66023,"byte_end":66045,"line_start":1283,"line_end":1283,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66050,"byte_end":66053,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ let sum: i32 = a.par_iter().sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66058,"byte_end":66096,"line_start":1285,"line_end":1285,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66101,"byte_end":66104,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 13);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66109,"byte_end":66133,"line_start":1287,"line_end":1287,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66138,"byte_end":66145,"line_start":1288,"line_end":1288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3824},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67155,"byte_end":67162,"line_start":1322,"line_end":1322,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::ParallelIterator::product","value":"pub fn product<P>(Self) -> P where P: Send + Product<Self::Item> + Product<P>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Multiplies all the items in the iterator.","sig":null,"attributes":[{"value":"/ Multiplies all the items in the iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66265,"byte_end":66310,"line_start":1296,"line_end":1296,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66315,"byte_end":66318,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ Note that the order in items will be reduced is not specified,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66323,"byte_end":66389,"line_start":1298,"line_end":1298,"column_start":5,"column_end":71}},{"value":"/ so if the `*` operator is not truly [associative] \\(as is the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66394,"byte_end":66459,"line_start":1299,"line_end":1299,"column_start":5,"column_end":70}},{"value":"/ case for floating point numbers), then the results are not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66464,"byte_end":66526,"line_start":1300,"line_end":1300,"column_start":5,"column_end":67}},{"value":"/ fully deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66531,"byte_end":66555,"line_start":1301,"line_end":1301,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66560,"byte_end":66563,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ [associative]: https://en.wikipedia.org/wiki/Associative_property","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66568,"byte_end":66637,"line_start":1303,"line_end":1303,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66642,"byte_end":66645,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce(|| 1, |a, b| a * b)`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66650,"byte_end":66712,"line_start":1305,"line_end":1305,"column_start":5,"column_end":67}},{"value":"/ except that the type of `1` and the `*` operation may vary","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66717,"byte_end":66779,"line_start":1306,"line_end":1306,"column_start":5,"column_end":67}},{"value":"/ depending on the type of value being produced.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66784,"byte_end":66834,"line_start":1307,"line_end":1307,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66839,"byte_end":66842,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66847,"byte_end":66861,"line_start":1309,"line_end":1309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66866,"byte_end":66869,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66874,"byte_end":66881,"line_start":1311,"line_end":1311,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66886,"byte_end":66912,"line_start":1312,"line_end":1312,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66917,"byte_end":66920,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ fn factorial(n: u32) -> u32 {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66925,"byte_end":66958,"line_start":1314,"line_end":1314,"column_start":5,"column_end":38}},{"value":"/    (1..n+1).into_par_iter().product()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":66963,"byte_end":67004,"line_start":1315,"line_end":1315,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67009,"byte_end":67014,"line_start":1316,"line_end":1316,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67019,"byte_end":67022,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(factorial(0), 1);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67027,"byte_end":67059,"line_start":1318,"line_end":1318,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(1), 1);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67064,"byte_end":67096,"line_start":1319,"line_end":1319,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(factorial(5), 120);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67101,"byte_end":67135,"line_start":1320,"line_end":1320,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67140,"byte_end":67147,"line_start":1321,"line_end":1321,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3826},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68005,"byte_end":68008,"line_start":1352,"line_end":1352,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::ParallelIterator::min","value":"pub fn min(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(min)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator. If the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67287,"byte_end":67352,"line_start":1329,"line_end":1329,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(min)`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67357,"byte_end":67422,"line_start":1330,"line_end":1330,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67427,"byte_end":67443,"line_start":1331,"line_end":1331,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67448,"byte_end":67451,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67456,"byte_end":67521,"line_start":1333,"line_end":1333,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67526,"byte_end":67592,"line_start":1334,"line_end":1334,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67597,"byte_end":67635,"line_start":1335,"line_end":1335,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67640,"byte_end":67643,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::min(a, b))`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67648,"byte_end":67718,"line_start":1337,"line_end":1337,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67723,"byte_end":67726,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67731,"byte_end":67745,"line_start":1339,"line_end":1339,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67750,"byte_end":67753,"line_start":1340,"line_end":1340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67758,"byte_end":67765,"line_start":1341,"line_end":1341,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67770,"byte_end":67796,"line_start":1342,"line_end":1342,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67801,"byte_end":67804,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67809,"byte_end":67834,"line_start":1344,"line_end":1344,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67839,"byte_end":67842,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min(), Some(&32));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67847,"byte_end":67893,"line_start":1346,"line_end":1346,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67898,"byte_end":67901,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67906,"byte_end":67931,"line_start":1348,"line_end":1348,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67936,"byte_end":67939,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().min(), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67944,"byte_end":67985,"line_start":1350,"line_end":1350,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":67990,"byte_end":67997,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3827},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68747,"byte_end":68753,"line_start":1376,"line_end":1376,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::ParallelIterator::min_by","value":"pub fn min_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the minimum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the minimum of all the items in the iterator with respect to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68124,"byte_end":68197,"line_start":1359,"line_end":1359,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68202,"byte_end":68272,"line_start":1360,"line_end":1360,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68277,"byte_end":68326,"line_start":1361,"line_end":1361,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68331,"byte_end":68334,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68339,"byte_end":68404,"line_start":1363,"line_end":1363,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68409,"byte_end":68478,"line_start":1364,"line_end":1364,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68483,"byte_end":68521,"line_start":1365,"line_end":1365,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68526,"byte_end":68529,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68534,"byte_end":68548,"line_start":1367,"line_end":1367,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68553,"byte_end":68556,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68561,"byte_end":68568,"line_start":1369,"line_end":1369,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68573,"byte_end":68599,"line_start":1370,"line_end":1370,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68604,"byte_end":68607,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68612,"byte_end":68650,"line_start":1372,"line_end":1372,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68655,"byte_end":68658,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by(|x, y| x.cmp(y)), Some(&-3));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68663,"byte_end":68727,"line_start":1374,"line_end":1374,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":68732,"byte_end":68739,"line_start":1375,"line_end":1375,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69721,"byte_end":69731,"line_start":1407,"line_end":1407,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::ParallelIterator::min_by_key","value":"pub fn min_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the item that yields the minimum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the minimum value for the given","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69123,"byte_end":69188,"line_start":1390,"line_end":1390,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69193,"byte_end":69252,"line_start":1391,"line_end":1391,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69257,"byte_end":69297,"line_start":1392,"line_end":1392,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69302,"byte_end":69305,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69310,"byte_end":69375,"line_start":1394,"line_end":1394,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69380,"byte_end":69446,"line_start":1395,"line_end":1395,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69451,"byte_end":69489,"line_start":1396,"line_end":1396,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69494,"byte_end":69497,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69502,"byte_end":69516,"line_start":1398,"line_end":1398,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69521,"byte_end":69524,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69529,"byte_end":69536,"line_start":1400,"line_end":1400,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69541,"byte_end":69567,"line_start":1401,"line_end":1401,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69572,"byte_end":69575,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69580,"byte_end":69625,"line_start":1403,"line_end":1403,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69630,"byte_end":69633,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().min_by_key(|x| x.abs()), Some(&2));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69638,"byte_end":69701,"line_start":1405,"line_end":1405,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":69706,"byte_end":69713,"line_start":1406,"line_end":1406,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3846},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70964,"byte_end":70967,"line_start":1450,"line_end":1450,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::ParallelIterator::max","value":"pub fn max(Self) -> Option<Self::Item> where Self::Item: Ord","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator. If the\n iterator is empty, `None` is returned; otherwise, `Some(max)`\n is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator. If the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70246,"byte_end":70311,"line_start":1427,"line_end":1427,"column_start":5,"column_end":70}},{"value":"/ iterator is empty, `None` is returned; otherwise, `Some(max)`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70316,"byte_end":70381,"line_start":1428,"line_end":1428,"column_start":5,"column_end":70}},{"value":"/ is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70386,"byte_end":70402,"line_start":1429,"line_end":1429,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70407,"byte_end":70410,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70415,"byte_end":70480,"line_start":1431,"line_end":1431,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70485,"byte_end":70551,"line_start":1432,"line_end":1432,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70556,"byte_end":70594,"line_start":1433,"line_end":1433,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70599,"byte_end":70602,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ Basically equivalent to `self.reduce_with(|a, b| cmp::max(a, b))`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70607,"byte_end":70677,"line_start":1435,"line_end":1435,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70682,"byte_end":70685,"line_start":1436,"line_end":1436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70690,"byte_end":70704,"line_start":1437,"line_end":1437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70709,"byte_end":70712,"line_start":1438,"line_end":1438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70717,"byte_end":70724,"line_start":1439,"line_end":1439,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70729,"byte_end":70755,"line_start":1440,"line_end":1440,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70760,"byte_end":70763,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ let a = [45, 74, 32];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70768,"byte_end":70793,"line_start":1442,"line_end":1442,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70798,"byte_end":70801,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max(), Some(&74));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70806,"byte_end":70852,"line_start":1444,"line_end":1444,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70857,"byte_end":70860,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ let b: [i32; 0] = [];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70865,"byte_end":70890,"line_start":1446,"line_end":1446,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70895,"byte_end":70898,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b.par_iter().max(), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70903,"byte_end":70944,"line_start":1448,"line_end":1448,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":70949,"byte_end":70956,"line_start":1449,"line_end":1449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3847},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71720,"byte_end":71726,"line_start":1474,"line_end":1474,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::ParallelIterator::max_by","value":"pub fn max_by<F>(Self, F) -> Option<Self::Item> where F: Sync + Send +\nFn(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the maximum of all the items in the iterator with respect to\n the given comparison function. If the iterator is empty, `None` is\n returned; otherwise, `Some(min)` is returned.","sig":null,"attributes":[{"value":"/ Computes the maximum of all the items in the iterator with respect to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71083,"byte_end":71156,"line_start":1457,"line_end":1457,"column_start":5,"column_end":78}},{"value":"/ the given comparison function. If the iterator is empty, `None` is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71161,"byte_end":71231,"line_start":1458,"line_end":1458,"column_start":5,"column_end":75}},{"value":"/ returned; otherwise, `Some(min)` is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71236,"byte_end":71285,"line_start":1459,"line_end":1459,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71290,"byte_end":71293,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71298,"byte_end":71363,"line_start":1461,"line_end":1461,"column_start":5,"column_end":70}},{"value":"/ specified, so if the comparison function is not associative, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71368,"byte_end":71437,"line_start":1462,"line_end":1462,"column_start":5,"column_end":74}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71442,"byte_end":71480,"line_start":1463,"line_end":1463,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71485,"byte_end":71488,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71493,"byte_end":71507,"line_start":1465,"line_end":1465,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71512,"byte_end":71515,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71520,"byte_end":71527,"line_start":1467,"line_end":1467,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71532,"byte_end":71558,"line_start":1468,"line_end":1468,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71563,"byte_end":71566,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 77, 53, 240, -1];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71571,"byte_end":71609,"line_start":1470,"line_end":1470,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71614,"byte_end":71617,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by(|x, y| x.abs().cmp(&y.abs())), Some(&240));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71622,"byte_end":71700,"line_start":1472,"line_end":1472,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":71705,"byte_end":71712,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3854},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72695,"byte_end":72705,"line_start":1505,"line_end":1505,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::ParallelIterator::max_by_key","value":"pub fn max_by_key<K, F>(Self, F) -> Option<Self::Item> where K: Ord + Send,\nF: Sync + Send + Fn(&Self::Item) -> K","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Computes the item that yields the maximum value for the given\n function. If the iterator is empty, `None` is returned;\n otherwise, `Some(item)` is returned.","sig":null,"attributes":[{"value":"/ Computes the item that yields the maximum value for the given","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72096,"byte_end":72161,"line_start":1488,"line_end":1488,"column_start":5,"column_end":70}},{"value":"/ function. If the iterator is empty, `None` is returned;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72166,"byte_end":72225,"line_start":1489,"line_end":1489,"column_start":5,"column_end":64}},{"value":"/ otherwise, `Some(item)` is returned.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72230,"byte_end":72270,"line_start":1490,"line_end":1490,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72275,"byte_end":72278,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ Note that the order in which the items will be reduced is not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72283,"byte_end":72348,"line_start":1492,"line_end":1492,"column_start":5,"column_end":70}},{"value":"/ specified, so if the `Ord` impl is not truly associative, then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72353,"byte_end":72419,"line_start":1493,"line_end":1493,"column_start":5,"column_end":71}},{"value":"/ the results are not deterministic.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72424,"byte_end":72462,"line_start":1494,"line_end":1494,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72467,"byte_end":72470,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72475,"byte_end":72489,"line_start":1496,"line_end":1496,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72494,"byte_end":72497,"line_start":1497,"line_end":1497,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72502,"byte_end":72509,"line_start":1498,"line_end":1498,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72514,"byte_end":72540,"line_start":1499,"line_end":1499,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72545,"byte_end":72548,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 34, 2, 5, -10, -3, -23];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72553,"byte_end":72598,"line_start":1501,"line_end":1501,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72603,"byte_end":72606,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().max_by_key(|x| x.abs()), Some(&34));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72611,"byte_end":72675,"line_start":1503,"line_end":1503,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":72680,"byte_end":72687,"line_start":1504,"line_end":1504,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3866},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73636,"byte_end":73641,"line_start":1541,"line_end":1541,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::ParallelIterator::chain","value":"pub fn chain<C>(Self, C) -> Chain<Self, C::Iter> where\nC: IntoParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Takes two iterators and creates a new iterator over both.","sig":null,"attributes":[{"value":"/ Takes two iterators and creates a new iterator over both.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73220,"byte_end":73281,"line_start":1525,"line_end":1525,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73286,"byte_end":73289,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73294,"byte_end":73308,"line_start":1527,"line_end":1527,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73313,"byte_end":73316,"line_start":1528,"line_end":1528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73321,"byte_end":73328,"line_start":1529,"line_end":1529,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73333,"byte_end":73359,"line_start":1530,"line_end":1530,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73364,"byte_end":73367,"line_start":1531,"line_end":1531,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 1, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73372,"byte_end":73394,"line_start":1532,"line_end":1532,"column_start":5,"column_end":27}},{"value":"/ let b = [9, 8, 7];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73399,"byte_end":73421,"line_start":1533,"line_end":1533,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73426,"byte_end":73429,"line_start":1534,"line_end":1534,"column_start":5,"column_end":8}},{"value":"/ let par_iter = a.par_iter().chain(b.par_iter());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73434,"byte_end":73486,"line_start":1535,"line_end":1535,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73491,"byte_end":73494,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ let chained: Vec<_> = par_iter.cloned().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73499,"byte_end":73553,"line_start":1537,"line_end":1537,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73558,"byte_end":73561,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&chained[..], &[0, 1, 2, 9, 8, 7]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73566,"byte_end":73616,"line_start":1539,"line_end":1539,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73621,"byte_end":73628,"line_start":1540,"line_end":1540,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3868},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74735,"byte_end":74743,"line_start":1571,"line_end":1571,"column_start":8,"column_end":16},"name":"find_any","qualname":"::iter::ParallelIterator::find_any","value":"pub fn find_any<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate and returns it. This operation\n is similar to [`find` on sequential iterators][find] but\n the item returned may not be the **first** one in the parallel\n sequence which matches, since we search the entire sequence in parallel.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73812,"byte_end":73872,"line_start":1548,"line_end":1548,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate and returns it. This operation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73877,"byte_end":73939,"line_start":1549,"line_end":1549,"column_start":5,"column_end":67}},{"value":"/ is similar to [`find` on sequential iterators][find] but","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":73944,"byte_end":74004,"line_start":1550,"line_end":1550,"column_start":5,"column_end":65}},{"value":"/ the item returned may not be the **first** one in the parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74009,"byte_end":74075,"line_start":1551,"line_end":1551,"column_start":5,"column_end":71}},{"value":"/ sequence which matches, since we search the entire sequence in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74080,"byte_end":74156,"line_start":1552,"line_end":1552,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74161,"byte_end":74164,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, we will attempt to stop processing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74169,"byte_end":74230,"line_start":1554,"line_end":1554,"column_start":5,"column_end":66}},{"value":"/ the rest of the items in the iterator as soon as possible","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74235,"byte_end":74296,"line_start":1555,"line_end":1555,"column_start":5,"column_end":66}},{"value":"/ (just as `find` stops iterating once a match is found).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74301,"byte_end":74360,"line_start":1556,"line_end":1556,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74365,"byte_end":74368,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ [find]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74373,"byte_end":74451,"line_start":1558,"line_end":1558,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74456,"byte_end":74459,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74464,"byte_end":74478,"line_start":1560,"line_end":1560,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74483,"byte_end":74486,"line_start":1561,"line_end":1561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74491,"byte_end":74498,"line_start":1562,"line_end":1562,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74503,"byte_end":74529,"line_start":1563,"line_end":1563,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74534,"byte_end":74537,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74542,"byte_end":74567,"line_start":1565,"line_end":1565,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74572,"byte_end":74575,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74580,"byte_end":74642,"line_start":1567,"line_end":1567,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74647,"byte_end":74650,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_any(|&&x| x == 100), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74655,"byte_end":74715,"line_start":1569,"line_end":1569,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74720,"byte_end":74727,"line_start":1570,"line_end":1570,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3870},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75782,"byte_end":75792,"line_start":1601,"line_end":1601,"column_start":8,"column_end":18},"name":"find_first","qualname":"::iter::ParallelIterator::find_first","value":"pub fn find_first<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item)\n-> bool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74902,"byte_end":74975,"line_start":1578,"line_end":1578,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":74980,"byte_end":75032,"line_start":1579,"line_end":1579,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75037,"byte_end":75040,"line_start":1580,"line_end":1580,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the right of the match","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75045,"byte_end":75110,"line_start":1581,"line_end":1581,"column_start":5,"column_end":70}},{"value":"/ will be stopped, while attempts to the left must continue in case","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75115,"byte_end":75184,"line_start":1582,"line_end":1582,"column_start":5,"column_end":74}},{"value":"/ an earlier match is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75189,"byte_end":75219,"line_start":1583,"line_end":1583,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75224,"byte_end":75227,"line_start":1584,"line_end":1584,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75232,"byte_end":75303,"line_start":1585,"line_end":1585,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75308,"byte_end":75379,"line_start":1586,"line_end":1586,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75384,"byte_end":75455,"line_start":1587,"line_end":1587,"column_start":5,"column_end":76}},{"value":"/ `find_any` is a better choice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75460,"byte_end":75494,"line_start":1588,"line_end":1588,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75499,"byte_end":75502,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75507,"byte_end":75521,"line_start":1590,"line_end":1590,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75526,"byte_end":75529,"line_start":1591,"line_end":1591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75534,"byte_end":75541,"line_start":1592,"line_end":1592,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75546,"byte_end":75572,"line_start":1593,"line_end":1593,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75577,"byte_end":75580,"line_start":1594,"line_end":1594,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75585,"byte_end":75610,"line_start":1595,"line_end":1595,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75615,"byte_end":75618,"line_start":1596,"line_end":1596,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75623,"byte_end":75687,"line_start":1597,"line_end":1597,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75692,"byte_end":75695,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_first(|&&x| x == 100), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75700,"byte_end":75762,"line_start":1599,"line_end":1599,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75767,"byte_end":75774,"line_start":1600,"line_end":1600,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3872},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76805,"byte_end":76814,"line_start":1630,"line_end":1630,"column_start":8,"column_end":17},"name":"find_last","qualname":"::iter::ParallelIterator::find_last","value":"pub fn find_last<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate and returns it.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":75968,"byte_end":76040,"line_start":1608,"line_end":1608,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate and returns it.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76045,"byte_end":76097,"line_start":1609,"line_end":1609,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76102,"byte_end":76105,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ Once a match is found, all attempts to the left of the match","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76110,"byte_end":76174,"line_start":1611,"line_end":1611,"column_start":5,"column_end":69}},{"value":"/ will be stopped, while attempts to the right must continue in case","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76179,"byte_end":76249,"line_start":1612,"line_end":1612,"column_start":5,"column_end":75}},{"value":"/ a later match is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76254,"byte_end":76281,"line_start":1613,"line_end":1613,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76286,"byte_end":76289,"line_start":1614,"line_end":1614,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76294,"byte_end":76365,"line_start":1615,"line_end":1615,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76370,"byte_end":76442,"line_start":1616,"line_end":1616,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `find_any` is a better choice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76447,"byte_end":76519,"line_start":1617,"line_end":1617,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76524,"byte_end":76527,"line_start":1618,"line_end":1618,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76532,"byte_end":76546,"line_start":1619,"line_end":1619,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76551,"byte_end":76554,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76559,"byte_end":76566,"line_start":1621,"line_end":1621,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76571,"byte_end":76597,"line_start":1622,"line_end":1622,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76602,"byte_end":76605,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76610,"byte_end":76635,"line_start":1624,"line_end":1624,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76640,"byte_end":76643,"line_start":1625,"line_end":1625,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 3), Some(&3));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76648,"byte_end":76711,"line_start":1626,"line_end":1626,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76716,"byte_end":76719,"line_start":1627,"line_end":1627,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().find_last(|&&x| x == 100), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76724,"byte_end":76785,"line_start":1628,"line_end":1628,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76790,"byte_end":76797,"line_start":1629,"line_end":1629,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77891,"byte_end":77903,"line_start":1660,"line_end":1660,"column_start":8,"column_end":20},"name":"find_map_any","qualname":"::iter::ParallelIterator::find_map_any","value":"pub fn find_map_any<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator\n and returns **any** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":76989,"byte_end":77058,"line_start":1637,"line_end":1637,"column_start":5,"column_end":74}},{"value":"/ and returns **any** non-None result of the map operation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77063,"byte_end":77124,"line_start":1638,"line_end":1638,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77129,"byte_end":77132,"line_start":1639,"line_end":1639,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, we will","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77137,"byte_end":77206,"line_start":1640,"line_end":1640,"column_start":5,"column_end":74}},{"value":"/ attempt to stop processing the rest of the items in the iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77211,"byte_end":77279,"line_start":1641,"line_end":1641,"column_start":5,"column_end":73}},{"value":"/ as soon as possible.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77284,"byte_end":77308,"line_start":1642,"line_end":1642,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77313,"byte_end":77316,"line_start":1643,"line_end":1643,"column_start":5,"column_end":8}},{"value":"/ Note that this method only returns **some** item in the parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77321,"byte_end":77389,"line_start":1644,"line_end":1644,"column_start":5,"column_end":73}},{"value":"/ iterator that is not None from the map predicate. The item returned","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77394,"byte_end":77465,"line_start":1645,"line_end":1645,"column_start":5,"column_end":76}},{"value":"/ may not be the **first** non-None value produced in the parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77470,"byte_end":77538,"line_start":1646,"line_end":1646,"column_start":5,"column_end":73}},{"value":"/ sequence, since the entire sequence is mapped over in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77543,"byte_end":77610,"line_start":1647,"line_end":1647,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77615,"byte_end":77618,"line_start":1648,"line_end":1648,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77623,"byte_end":77637,"line_start":1649,"line_end":1649,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77642,"byte_end":77645,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77650,"byte_end":77657,"line_start":1651,"line_end":1651,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77662,"byte_end":77688,"line_start":1652,"line_end":1652,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77693,"byte_end":77696,"line_start":1653,"line_end":1653,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"5\", \"5\"];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77701,"byte_end":77738,"line_start":1654,"line_end":1654,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77743,"byte_end":77746,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ let found_number = c.par_iter().find_map_any(|s| s.parse().ok());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77751,"byte_end":77820,"line_start":1656,"line_end":1656,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77825,"byte_end":77828,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(found_number, Some(5));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77833,"byte_end":77871,"line_start":1658,"line_end":1658,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":77876,"byte_end":77883,"line_start":1659,"line_end":1659,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79093,"byte_end":79107,"line_start":1694,"line_end":1694,"column_start":8,"column_end":22},"name":"find_map_first","qualname":"::iter::ParallelIterator::find_map_first","value":"pub fn find_map_first<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **first** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78152,"byte_end":78225,"line_start":1671,"line_end":1671,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **first** non-None result of the map operation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78230,"byte_end":78306,"line_start":1672,"line_end":1672,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78311,"byte_end":78314,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78319,"byte_end":78393,"line_start":1674,"line_end":1674,"column_start":5,"column_end":79}},{"value":"/ to the right of the match will be stopped, while attempts to the left","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78398,"byte_end":78471,"line_start":1675,"line_end":1675,"column_start":5,"column_end":78}},{"value":"/ must continue in case an earlier match is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78476,"byte_end":78528,"line_start":1676,"line_end":1676,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78533,"byte_end":78536,"line_start":1677,"line_end":1677,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78541,"byte_end":78612,"line_start":1678,"line_end":1678,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78617,"byte_end":78687,"line_start":1679,"line_end":1679,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78692,"byte_end":78767,"line_start":1680,"line_end":1680,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78772,"byte_end":78810,"line_start":1681,"line_end":1681,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78815,"byte_end":78818,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78823,"byte_end":78837,"line_start":1683,"line_end":1683,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78842,"byte_end":78845,"line_start":1684,"line_end":1684,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78850,"byte_end":78857,"line_start":1685,"line_end":1685,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78862,"byte_end":78888,"line_start":1686,"line_end":1686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78893,"byte_end":78896,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78901,"byte_end":78938,"line_start":1688,"line_end":1688,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78943,"byte_end":78946,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ let first_number = c.par_iter().find_map_first(|s| s.parse().ok());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":78951,"byte_end":79022,"line_start":1690,"line_end":1690,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79027,"byte_end":79030,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(first_number, Some(2));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79035,"byte_end":79073,"line_start":1692,"line_end":1692,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79078,"byte_end":79085,"line_start":1693,"line_end":1693,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3884},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80292,"byte_end":80305,"line_start":1728,"line_end":1728,"column_start":8,"column_end":21},"name":"find_map_last","qualname":"::iter::ParallelIterator::find_map_last","value":"pub fn find_map_last<P, R>(Self, P) -> Option<R> where P: Fn(Self::Item) ->\nOption<R> + Sync + Send, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Applies the given predicate to the items in the parallel iterator and\n returns the sequentially **last** non-None result of the map operation.","sig":null,"attributes":[{"value":"/ Applies the given predicate to the items in the parallel iterator and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79358,"byte_end":79431,"line_start":1705,"line_end":1705,"column_start":5,"column_end":78}},{"value":"/ returns the sequentially **last** non-None result of the map operation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79436,"byte_end":79511,"line_start":1706,"line_end":1706,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79516,"byte_end":79519,"line_start":1707,"line_end":1707,"column_start":5,"column_end":8}},{"value":"/ Once a non-None value is produced from the map operation, all attempts","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79524,"byte_end":79598,"line_start":1708,"line_end":1708,"column_start":5,"column_end":79}},{"value":"/ to the left of the match will be stopped, while attempts to the right","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79603,"byte_end":79676,"line_start":1709,"line_end":1709,"column_start":5,"column_end":78}},{"value":"/ must continue in case a later match is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79681,"byte_end":79730,"line_start":1710,"line_end":1710,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79735,"byte_end":79738,"line_start":1711,"line_end":1711,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79743,"byte_end":79814,"line_start":1712,"line_end":1712,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous. If you","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79819,"byte_end":79889,"line_start":1713,"line_end":1713,"column_start":5,"column_end":75}},{"value":"/ just want the first non-None value discovered anywhere in the iterator,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79894,"byte_end":79969,"line_start":1714,"line_end":1714,"column_start":5,"column_end":80}},{"value":"/ `find_map_any` is a better choice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":79974,"byte_end":80012,"line_start":1715,"line_end":1715,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80017,"byte_end":80020,"line_start":1716,"line_end":1716,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80025,"byte_end":80039,"line_start":1717,"line_end":1717,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80044,"byte_end":80047,"line_start":1718,"line_end":1718,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80052,"byte_end":80059,"line_start":1719,"line_end":1719,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80064,"byte_end":80090,"line_start":1720,"line_end":1720,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80095,"byte_end":80098,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ let c = [\"lol\", \"NaN\", \"2\", \"5\"];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80103,"byte_end":80140,"line_start":1722,"line_end":1722,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80145,"byte_end":80148,"line_start":1723,"line_end":1723,"column_start":5,"column_end":8}},{"value":"/ let last_number = c.par_iter().find_map_last(|s| s.parse().ok());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80153,"byte_end":80222,"line_start":1724,"line_end":1724,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80227,"byte_end":80230,"line_start":1725,"line_end":1725,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(last_number, Some(5));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80235,"byte_end":80272,"line_start":1726,"line_end":1726,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80277,"byte_end":80284,"line_start":1727,"line_end":1727,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3889},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80722,"byte_end":80726,"line_start":1742,"line_end":1742,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::ParallelIterator::find","value":"pub fn find<P>(Self, P) -> Option<Self::Item> where P: Fn(&Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `find` does not search in order -- use `find_any`, \\\\\n                         `find_first`, or `find_last`\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80574,"byte_end":80714,"line_start":1740,"line_end":1741,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3891},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81431,"byte_end":81434,"line_start":1766,"line_end":1766,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::ParallelIterator::any","value":"pub fn any<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and if so returns true.  Once\n a match is found, we'll attempt to stop process the rest\n of the items.  Proving that there's no match, returning false,\n does require visiting every item.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80882,"byte_end":80942,"line_start":1749,"line_end":1749,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and if so returns true.  Once","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":80947,"byte_end":81009,"line_start":1750,"line_end":1750,"column_start":5,"column_end":67}},{"value":"/ a match is found, we'll attempt to stop process the rest","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81014,"byte_end":81074,"line_start":1751,"line_end":1751,"column_start":5,"column_end":65}},{"value":"/ of the items.  Proving that there's no match, returning false,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81079,"byte_end":81145,"line_start":1752,"line_end":1752,"column_start":5,"column_end":71}},{"value":"/ does require visiting every item.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81150,"byte_end":81187,"line_start":1753,"line_end":1753,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81192,"byte_end":81195,"line_start":1754,"line_end":1754,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81200,"byte_end":81214,"line_start":1755,"line_end":1755,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81219,"byte_end":81222,"line_start":1756,"line_end":1756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81227,"byte_end":81234,"line_start":1757,"line_end":1757,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81239,"byte_end":81265,"line_start":1758,"line_end":1758,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81270,"byte_end":81273,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81278,"byte_end":81314,"line_start":1760,"line_end":1760,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81319,"byte_end":81322,"line_start":1761,"line_end":1761,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().any(|&x| x > 10);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81327,"byte_end":81376,"line_start":1762,"line_end":1762,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81381,"byte_end":81384,"line_start":1763,"line_end":1763,"column_start":5,"column_end":8}},{"value":"/ assert!(is_valid);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81389,"byte_end":81411,"line_start":1764,"line_end":1764,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81416,"byte_end":81423,"line_start":1765,"line_end":1765,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3893},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82062,"byte_end":82065,"line_start":1788,"line_end":1788,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::ParallelIterator::all","value":"pub fn all<P>(Self, P) -> bool where P: Fn(Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Tests that every item in the parallel iterator matches the given\n predicate, and if so returns true.  If a counter-example is found,\n we'll attempt to stop processing more items, then return false.","sig":null,"attributes":[{"value":"/ Tests that every item in the parallel iterator matches the given","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81602,"byte_end":81670,"line_start":1773,"line_end":1773,"column_start":5,"column_end":73}},{"value":"/ predicate, and if so returns true.  If a counter-example is found,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81675,"byte_end":81745,"line_start":1774,"line_end":1774,"column_start":5,"column_end":75}},{"value":"/ we'll attempt to stop processing more items, then return false.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81750,"byte_end":81817,"line_start":1775,"line_end":1775,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81822,"byte_end":81825,"line_start":1776,"line_end":1776,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81830,"byte_end":81844,"line_start":1777,"line_end":1777,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81849,"byte_end":81852,"line_start":1778,"line_end":1778,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81857,"byte_end":81864,"line_start":1779,"line_end":1779,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81869,"byte_end":81895,"line_start":1780,"line_end":1780,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81900,"byte_end":81903,"line_start":1781,"line_end":1781,"column_start":5,"column_end":8}},{"value":"/ let a = [0, 12, 3, 4, 0, 23, 0];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81908,"byte_end":81944,"line_start":1782,"line_end":1782,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81949,"byte_end":81952,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ let is_valid = a.par_iter().all(|&x| x > 10);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":81957,"byte_end":82006,"line_start":1784,"line_end":1784,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82011,"byte_end":82014,"line_start":1785,"line_end":1785,"column_start":5,"column_end":8}},{"value":"/ assert!(!is_valid);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82019,"byte_end":82042,"line_start":1786,"line_end":1786,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82047,"byte_end":82054,"line_start":1787,"line_end":1787,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3896},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83047,"byte_end":83057,"line_start":1822,"line_end":1822,"column_start":8,"column_end":18},"name":"while_some","qualname":"::iter::ParallelIterator::while_some","value":"pub fn while_some<T>(Self) -> WhileSome<Self> where\nSelf: ParallelIterator<Item = Option<T>>, T: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates an iterator over the `Some` items of this iterator, halting\n as soon as any `None` is found.","sig":null,"attributes":[{"value":"/ Creates an iterator over the `Some` items of this iterator, halting","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82314,"byte_end":82385,"line_start":1800,"line_end":1800,"column_start":5,"column_end":76}},{"value":"/ as soon as any `None` is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82390,"byte_end":82425,"line_start":1801,"line_end":1801,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82430,"byte_end":82433,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82438,"byte_end":82452,"line_start":1803,"line_end":1803,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82457,"byte_end":82460,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82465,"byte_end":82472,"line_start":1805,"line_end":1805,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82477,"byte_end":82503,"line_start":1806,"line_end":1806,"column_start":5,"column_end":31}},{"value":"/ use std::sync::atomic::{AtomicUsize, Ordering};","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82508,"byte_end":82559,"line_start":1807,"line_end":1807,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82564,"byte_end":82567,"line_start":1808,"line_end":1808,"column_start":5,"column_end":8}},{"value":"/ let counter = AtomicUsize::new(0);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82572,"byte_end":82610,"line_start":1809,"line_end":1809,"column_start":5,"column_end":43}},{"value":"/ let value = (0_i32..2048)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82615,"byte_end":82644,"line_start":1810,"line_end":1810,"column_start":5,"column_end":34}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82649,"byte_end":82673,"line_start":1811,"line_end":1811,"column_start":5,"column_end":29}},{"value":"/     .map(|x| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82678,"byte_end":82696,"line_start":1812,"line_end":1812,"column_start":5,"column_end":23}},{"value":"/              counter.fetch_add(1, Ordering::SeqCst);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82701,"byte_end":82757,"line_start":1813,"line_end":1813,"column_start":5,"column_end":61}},{"value":"/              if x < 1024 { Some(x) } else { None }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82762,"byte_end":82816,"line_start":1814,"line_end":1814,"column_start":5,"column_end":59}},{"value":"/          })","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82821,"byte_end":82836,"line_start":1815,"line_end":1815,"column_start":5,"column_end":20}},{"value":"/     .while_some()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82841,"byte_end":82862,"line_start":1816,"line_end":1816,"column_start":5,"column_end":26}},{"value":"/     .max();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82867,"byte_end":82882,"line_start":1817,"line_end":1817,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82887,"byte_end":82890,"line_start":1818,"line_end":1818,"column_start":5,"column_end":8}},{"value":"/ assert!(value < Some(1024));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82895,"byte_end":82927,"line_start":1819,"line_end":1819,"column_start":5,"column_end":37}},{"value":"/ assert!(counter.load(Ordering::SeqCst) < 2048); // should not have visited every single one","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":82932,"byte_end":83027,"line_start":1820,"line_end":1820,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83032,"byte_end":83039,"line_start":1821,"line_end":1821,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3898},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84368,"byte_end":84378,"line_start":1860,"line_end":1860,"column_start":8,"column_end":18},"name":"panic_fuse","qualname":"::iter::ParallelIterator::panic_fuse","value":"pub fn panic_fuse(Self) -> PanicFuse<Self>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Wraps an iterator with a fuse in case of panics, to halt all threads\n as soon as possible.","sig":null,"attributes":[{"value":"/ Wraps an iterator with a fuse in case of panics, to halt all threads","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83209,"byte_end":83281,"line_start":1830,"line_end":1830,"column_start":5,"column_end":77}},{"value":"/ as soon as possible.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83286,"byte_end":83310,"line_start":1831,"line_end":1831,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83315,"byte_end":83318,"line_start":1832,"line_end":1832,"column_start":5,"column_end":8}},{"value":"/ Panics within parallel iterators are always propagated to the caller,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83323,"byte_end":83396,"line_start":1833,"line_end":1833,"column_start":5,"column_end":78}},{"value":"/ but they don't always halt the rest of the iterator right away, due to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83401,"byte_end":83475,"line_start":1834,"line_end":1834,"column_start":5,"column_end":79}},{"value":"/ the internal semantics of [`join`]. This adaptor makes a greater effort","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83480,"byte_end":83555,"line_start":1835,"line_end":1835,"column_start":5,"column_end":80}},{"value":"/ to stop processing other items sooner, with the cost of additional","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83560,"byte_end":83630,"line_start":1836,"line_end":1836,"column_start":5,"column_end":75}},{"value":"/ synchronization overhead, which may also inhibit some optimizations.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83635,"byte_end":83707,"line_start":1837,"line_end":1837,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83712,"byte_end":83715,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ [`join`]: ../fn.join.html#panics","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83720,"byte_end":83756,"line_start":1839,"line_end":1839,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83761,"byte_end":83764,"line_start":1840,"line_end":1840,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83769,"byte_end":83783,"line_start":1841,"line_end":1841,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83788,"byte_end":83791,"line_start":1842,"line_end":1842,"column_start":5,"column_end":8}},{"value":"/ If this code didn't use `panic_fuse()`, it would continue processing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83796,"byte_end":83868,"line_start":1843,"line_end":1843,"column_start":5,"column_end":77}},{"value":"/ many more items in other threads (with long sleep delays) before the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83873,"byte_end":83945,"line_start":1844,"line_end":1844,"column_start":5,"column_end":77}},{"value":"/ panic is finally propagated.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83950,"byte_end":83982,"line_start":1845,"line_end":1845,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83987,"byte_end":83990,"line_start":1846,"line_end":1846,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":83995,"byte_end":84014,"line_start":1847,"line_end":1847,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84019,"byte_end":84045,"line_start":1848,"line_end":1848,"column_start":5,"column_end":31}},{"value":"/ use std::{thread, time};","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84050,"byte_end":84078,"line_start":1849,"line_end":1849,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84083,"byte_end":84086,"line_start":1850,"line_end":1850,"column_start":5,"column_end":8}},{"value":"/ (0..1_000_000)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84091,"byte_end":84109,"line_start":1851,"line_end":1851,"column_start":5,"column_end":23}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84114,"byte_end":84138,"line_start":1852,"line_end":1852,"column_start":5,"column_end":29}},{"value":"/     .panic_fuse()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84143,"byte_end":84164,"line_start":1853,"line_end":1853,"column_start":5,"column_end":26}},{"value":"/     .for_each(|i| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84169,"byte_end":84192,"line_start":1854,"line_end":1854,"column_start":5,"column_end":28}},{"value":"/         // simulate some work","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84197,"byte_end":84230,"line_start":1855,"line_end":1855,"column_start":5,"column_end":38}},{"value":"/         thread::sleep(time::Duration::from_secs(1));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84235,"byte_end":84291,"line_start":1856,"line_end":1856,"column_start":5,"column_end":61}},{"value":"/         assert!(i > 0); // oops!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84296,"byte_end":84332,"line_start":1857,"line_end":1857,"column_start":5,"column_end":41}},{"value":"/     });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84337,"byte_end":84348,"line_start":1858,"line_end":1858,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84353,"byte_end":84360,"line_start":1859,"line_end":1859,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3899},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85129,"byte_end":85136,"line_start":1883,"line_end":1883,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::ParallelIterator::collect","value":"pub fn collect<C>(Self) -> C where C: FromParallelIterator<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Creates a fresh collection containing all the elements produced\n by this parallel iterator.","sig":null,"attributes":[{"value":"/ Creates a fresh collection containing all the elements produced","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84446,"byte_end":84513,"line_start":1864,"line_end":1864,"column_start":5,"column_end":72}},{"value":"/ by this parallel iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84518,"byte_end":84548,"line_start":1865,"line_end":1865,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84553,"byte_end":84556,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `collect_into_vec()`, which allocates more","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84561,"byte_end":84629,"line_start":1867,"line_end":1867,"column_start":5,"column_end":73}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84634,"byte_end":84697,"line_start":1868,"line_end":1868,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse an existing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84702,"byte_end":84765,"line_start":1869,"line_end":1869,"column_start":5,"column_end":68}},{"value":"/ vector's backing store rather than allocating a fresh vector.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84770,"byte_end":84835,"line_start":1870,"line_end":1870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84840,"byte_end":84843,"line_start":1871,"line_end":1871,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84848,"byte_end":84862,"line_start":1872,"line_end":1872,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84867,"byte_end":84870,"line_start":1873,"line_end":1873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84875,"byte_end":84882,"line_start":1874,"line_end":1874,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84887,"byte_end":84913,"line_start":1875,"line_end":1875,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84918,"byte_end":84921,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ let sync_vec: Vec<_> = (0..100).into_iter().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84926,"byte_end":84984,"line_start":1877,"line_end":1877,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84989,"byte_end":84992,"line_start":1878,"line_end":1878,"column_start":5,"column_end":8}},{"value":"/ let async_vec: Vec<_> = (0..100).into_par_iter().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":84997,"byte_end":85060,"line_start":1879,"line_end":1879,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85065,"byte_end":85068,"line_start":1880,"line_end":1880,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sync_vec, async_vec);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85073,"byte_end":85109,"line_start":1881,"line_end":1881,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85114,"byte_end":85121,"line_start":1882,"line_end":1882,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3901},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86388,"byte_end":86393,"line_start":1924,"line_end":1924,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::ParallelIterator::unzip","value":"pub fn unzip<A, B, FromA, FromB>(Self) -> (FromA, FromB) where\nSelf: ParallelIterator<Item = (A, B)>, FromA: Default + Send +\nParallelExtend<A>, FromB: Default + Send + ParallelExtend<B>, A: Send, B: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Unzips the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.","sig":null,"attributes":[{"value":"/ Unzips the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85254,"byte_end":85322,"line_start":1890,"line_end":1890,"column_start":5,"column_end":73}},{"value":"/ `ParallelExtend` containers.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85327,"byte_end":85359,"line_start":1891,"line_end":1891,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85364,"byte_end":85367,"line_start":1892,"line_end":1892,"column_start":5,"column_end":8}},{"value":"/ You may prefer to use `unzip_into_vecs()`, which allocates more","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85372,"byte_end":85439,"line_start":1893,"line_end":1893,"column_start":5,"column_end":72}},{"value":"/ efficiently with precise knowledge of how many elements the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85444,"byte_end":85507,"line_start":1894,"line_end":1894,"column_start":5,"column_end":68}},{"value":"/ iterator contains, and even allows you to reuse existing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85512,"byte_end":85572,"line_start":1895,"line_end":1895,"column_start":5,"column_end":65}},{"value":"/ vectors' backing stores rather than allocating fresh vectors.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85577,"byte_end":85642,"line_start":1896,"line_end":1896,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85647,"byte_end":85650,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85655,"byte_end":85669,"line_start":1898,"line_end":1898,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85674,"byte_end":85677,"line_start":1899,"line_end":1899,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85682,"byte_end":85689,"line_start":1900,"line_end":1900,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85694,"byte_end":85720,"line_start":1901,"line_end":1901,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85725,"byte_end":85728,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ let a = [(0, 1), (1, 2), (2, 3), (3, 4)];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85733,"byte_end":85778,"line_start":1903,"line_end":1903,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85783,"byte_end":85786,"line_start":1904,"line_end":1904,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = a.par_iter().cloned().unzip();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85791,"byte_end":85863,"line_start":1905,"line_end":1905,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85868,"byte_end":85871,"line_start":1906,"line_end":1906,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85876,"byte_end":85911,"line_start":1907,"line_end":1907,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 2, 3, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85916,"byte_end":85952,"line_start":1908,"line_end":1908,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85957,"byte_end":85964,"line_start":1909,"line_end":1909,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85969,"byte_end":85972,"line_start":1910,"line_end":1910,"column_start":5,"column_end":8}},{"value":"/ Nested pairs can be unzipped too.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":85977,"byte_end":86014,"line_start":1911,"line_end":1911,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86019,"byte_end":86022,"line_start":1912,"line_end":1912,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86027,"byte_end":86034,"line_start":1913,"line_end":1913,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86039,"byte_end":86065,"line_start":1914,"line_end":1914,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86070,"byte_end":86073,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ let (values, (squares, cubes)): (Vec<_>, (Vec<_>, Vec<_>)) = (0..4).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86078,"byte_end":86165,"line_start":1916,"line_end":1916,"column_start":5,"column_end":92}},{"value":"/     .map(|i| (i, (i * i, i * i * i)))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86170,"byte_end":86211,"line_start":1917,"line_end":1917,"column_start":5,"column_end":46}},{"value":"/     .unzip();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86216,"byte_end":86233,"line_start":1918,"line_end":1918,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86238,"byte_end":86241,"line_start":1919,"line_end":1919,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(values, [0, 1, 2, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86246,"byte_end":86283,"line_start":1920,"line_end":1920,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(squares, [0, 1, 4, 9]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86288,"byte_end":86326,"line_start":1921,"line_end":1921,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(cubes, [0, 1, 8, 27]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86331,"byte_end":86368,"line_start":1922,"line_end":1922,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86373,"byte_end":86380,"line_start":1923,"line_end":1923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87499,"byte_end":87508,"line_start":1954,"line_end":1954,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::ParallelIterator::partition","value":"pub fn partition<A, B, P>(Self, P) -> (A, B) where A: Default + Send +\nParallelExtend<Self::Item>, B: Default + Send + ParallelExtend<Self::Item>,\nP: Fn(&Self::Item) -> bool + Sync + Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Partitions the items of a parallel iterator into a pair of arbitrary\n `ParallelExtend` containers.  Items for which the `predicate` returns\n true go into the first container, and the rest go into the second.","sig":null,"attributes":[{"value":"/ Partitions the items of a parallel iterator into a pair of arbitrary","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86675,"byte_end":86747,"line_start":1935,"line_end":1935,"column_start":5,"column_end":77}},{"value":"/ `ParallelExtend` containers.  Items for which the `predicate` returns","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86752,"byte_end":86825,"line_start":1936,"line_end":1936,"column_start":5,"column_end":78}},{"value":"/ true go into the first container, and the rest go into the second.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86830,"byte_end":86900,"line_start":1937,"line_end":1937,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86905,"byte_end":86908,"line_start":1938,"line_end":1938,"column_start":5,"column_end":8}},{"value":"/ Note: unlike the standard `Iterator::partition`, this allows distinct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86913,"byte_end":86986,"line_start":1939,"line_end":1939,"column_start":5,"column_end":78}},{"value":"/ collection types for the left and right items.  This is more flexible,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":86991,"byte_end":87065,"line_start":1940,"line_end":1940,"column_start":5,"column_end":79}},{"value":"/ but may require new type annotations when converting sequential code","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87070,"byte_end":87142,"line_start":1941,"line_end":1941,"column_start":5,"column_end":77}},{"value":"/ that used type inferrence assuming the two were the same.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87147,"byte_end":87208,"line_start":1942,"line_end":1942,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87213,"byte_end":87216,"line_start":1943,"line_end":1943,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87221,"byte_end":87235,"line_start":1944,"line_end":1944,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87240,"byte_end":87243,"line_start":1945,"line_end":1945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87248,"byte_end":87255,"line_start":1946,"line_end":1946,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87260,"byte_end":87286,"line_start":1947,"line_end":1947,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87291,"byte_end":87294,"line_start":1948,"line_end":1948,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter().partition(|x| x % 2 == 0);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87299,"byte_end":87390,"line_start":1949,"line_end":1949,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87395,"byte_end":87398,"line_start":1950,"line_end":1950,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 2, 4, 6]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87403,"byte_end":87438,"line_start":1951,"line_end":1951,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(right, [1, 3, 5, 7]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87443,"byte_end":87479,"line_start":1952,"line_end":1952,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87484,"byte_end":87491,"line_start":1953,"line_end":1953,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89228,"byte_end":89241,"line_start":2006,"line_end":2006,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::iter::ParallelIterator::partition_map","value":"pub fn partition_map<A, B, P, L, R>(Self, P) -> (A, B) where A: Default +\nSend + ParallelExtend<L>, B: Default + Send + ParallelExtend<R>,\nP: Fn(Self::Item) -> Either<L, R> + Sync + Send, L: Send, R: Send","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Partitions and maps the items of a parallel iterator into a pair of\n arbitrary `ParallelExtend` containers.  `Either::Left` items go into\n the first container, and `Either::Right` items go into the second.","sig":null,"attributes":[{"value":"/ Partitions and maps the items of a parallel iterator into a pair of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87779,"byte_end":87850,"line_start":1963,"line_end":1963,"column_start":5,"column_end":76}},{"value":"/ arbitrary `ParallelExtend` containers.  `Either::Left` items go into","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87855,"byte_end":87927,"line_start":1964,"line_end":1964,"column_start":5,"column_end":77}},{"value":"/ the first container, and `Either::Right` items go into the second.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":87932,"byte_end":88002,"line_start":1965,"line_end":1965,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88007,"byte_end":88010,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88015,"byte_end":88029,"line_start":1967,"line_end":1967,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88034,"byte_end":88037,"line_start":1968,"line_end":1968,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88042,"byte_end":88049,"line_start":1969,"line_end":1969,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88054,"byte_end":88080,"line_start":1970,"line_end":1970,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88085,"byte_end":88113,"line_start":1971,"line_end":1971,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88118,"byte_end":88121,"line_start":1972,"line_end":1972,"column_start":5,"column_end":8}},{"value":"/ let (left, right): (Vec<_>, Vec<_>) = (0..8).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88126,"byte_end":88190,"line_start":1973,"line_end":1973,"column_start":5,"column_end":69}},{"value":"/     .partition_map(|x| {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88195,"byte_end":88223,"line_start":1974,"line_end":1974,"column_start":5,"column_end":33}},{"value":"/         if x % 2 == 0 {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88228,"byte_end":88255,"line_start":1975,"line_end":1975,"column_start":5,"column_end":32}},{"value":"/             Either::Left(x * 4)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88260,"byte_end":88295,"line_start":1976,"line_end":1976,"column_start":5,"column_end":40}},{"value":"/         } else {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88300,"byte_end":88320,"line_start":1977,"line_end":1977,"column_start":5,"column_end":25}},{"value":"/             Either::Right(x * 3)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88325,"byte_end":88361,"line_start":1978,"line_end":1978,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88366,"byte_end":88379,"line_start":1979,"line_end":1979,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88384,"byte_end":88395,"line_start":1980,"line_end":1980,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88400,"byte_end":88403,"line_start":1981,"line_end":1981,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 8, 16, 24]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88408,"byte_end":88445,"line_start":1982,"line_end":1982,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(right, [3, 9, 15, 21]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88450,"byte_end":88488,"line_start":1983,"line_end":1983,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88493,"byte_end":88500,"line_start":1984,"line_end":1984,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88505,"byte_end":88508,"line_start":1985,"line_end":1985,"column_start":5,"column_end":8}},{"value":"/ Nested `Either` enums can be split as well.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88513,"byte_end":88560,"line_start":1986,"line_end":1986,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88565,"byte_end":88568,"line_start":1987,"line_end":1987,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88573,"byte_end":88580,"line_start":1988,"line_end":1988,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88585,"byte_end":88611,"line_start":1989,"line_end":1989,"column_start":5,"column_end":31}},{"value":"/ use rayon::iter::Either::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88616,"byte_end":88647,"line_start":1990,"line_end":1990,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88652,"byte_end":88655,"line_start":1991,"line_end":1991,"column_start":5,"column_end":8}},{"value":"/ let ((fizzbuzz, fizz), (buzz, other)): ((Vec<_>, Vec<_>), (Vec<_>, Vec<_>)) = (1..20)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88660,"byte_end":88749,"line_start":1992,"line_end":1992,"column_start":5,"column_end":94}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88754,"byte_end":88778,"line_start":1993,"line_end":1993,"column_start":5,"column_end":29}},{"value":"/     .partition_map(|x| match (x % 3, x % 5) {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88783,"byte_end":88832,"line_start":1994,"line_end":1994,"column_start":5,"column_end":54}},{"value":"/         (0, 0) => Left(Left(x)),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88837,"byte_end":88873,"line_start":1995,"line_end":1995,"column_start":5,"column_end":41}},{"value":"/         (0, _) => Left(Right(x)),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88878,"byte_end":88915,"line_start":1996,"line_end":1996,"column_start":5,"column_end":42}},{"value":"/         (_, 0) => Right(Left(x)),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88920,"byte_end":88957,"line_start":1997,"line_end":1997,"column_start":5,"column_end":42}},{"value":"/         (_, _) => Right(Right(x)),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":88962,"byte_end":89000,"line_start":1998,"line_end":1998,"column_start":5,"column_end":43}},{"value":"/     });","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89005,"byte_end":89016,"line_start":1999,"line_end":1999,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89021,"byte_end":89024,"line_start":2000,"line_end":2000,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(fizzbuzz, [15]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89029,"byte_end":89060,"line_start":2001,"line_end":2001,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(fizz, [3, 6, 9, 12, 18]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89065,"byte_end":89105,"line_start":2002,"line_end":2002,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(buzz, [5, 10]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89110,"byte_end":89140,"line_start":2003,"line_end":2003,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(other, [1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89145,"byte_end":89208,"line_start":2004,"line_end":2004,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89213,"byte_end":89220,"line_start":2005,"line_end":2005,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3916},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89874,"byte_end":89885,"line_start":2029,"line_end":2029,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::iter::ParallelIterator::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where\nSelf::Item: Clone","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Intersperses clones of an element between items of this iterator.","sig":null,"attributes":[{"value":"/ Intersperses clones of an element between items of this iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89545,"byte_end":89614,"line_start":2017,"line_end":2017,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89619,"byte_end":89622,"line_start":2018,"line_end":2018,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89627,"byte_end":89641,"line_start":2019,"line_end":2019,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89646,"byte_end":89649,"line_start":2020,"line_end":2020,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89654,"byte_end":89661,"line_start":2021,"line_end":2021,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89666,"byte_end":89692,"line_start":2022,"line_end":2022,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89697,"byte_end":89700,"line_start":2023,"line_end":2023,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89705,"byte_end":89731,"line_start":2024,"line_end":2024,"column_start":5,"column_end":31}},{"value":"/ let r: Vec<_> = x.into_par_iter().intersperse(-1).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89736,"byte_end":89800,"line_start":2025,"line_end":2025,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89805,"byte_end":89808,"line_start":2026,"line_end":2026,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(r, vec![1, -1, 2, -1, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89813,"byte_end":89854,"line_start":2027,"line_end":2027,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":89859,"byte_end":89866,"line_start":2028,"line_end":2028,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3917},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90547,"byte_end":90562,"line_start":2048,"line_end":2048,"column_start":8,"column_end":23},"name":"drive_unindexed","qualname":"::iter::ParallelIterator::drive_unindexed","value":"pub fn drive_unindexed<C>(Self, C) -> C::Result where\nC: UnindexedConsumer<Self::Item>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90028,"byte_end":90092,"line_start":2036,"line_end":2036,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90097,"byte_end":90153,"line_start":2037,"line_end":2037,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90158,"byte_end":90161,"line_start":2038,"line_end":2038,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90166,"byte_end":90227,"line_start":2039,"line_end":2039,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90232,"byte_end":90297,"line_start":2040,"line_end":2040,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90302,"byte_end":90361,"line_start":2041,"line_end":2041,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90366,"byte_end":90405,"line_start":2042,"line_end":2042,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90410,"byte_end":90413,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90418,"byte_end":90484,"line_start":2044,"line_end":2044,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90489,"byte_end":90503,"line_start":2045,"line_end":2045,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90508,"byte_end":90511,"line_start":2046,"line_end":2046,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90516,"byte_end":90539,"line_start":2047,"line_end":2047,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91449,"byte_end":91456,"line_start":2066,"line_end":2066,"column_start":8,"column_end":15},"name":"opt_len","qualname":"::iter::ParallelIterator::opt_len","value":"pub fn opt_len(&Self) -> Option<usize>","parent":{"krate":0,"index":3721},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90655,"byte_end":90719,"line_start":2052,"line_end":2052,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90724,"byte_end":90780,"line_start":2053,"line_end":2053,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90785,"byte_end":90788,"line_start":2054,"line_end":2054,"column_start":5,"column_end":8}},{"value":"/ Returns the number of items produced by this iterator, if known","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90793,"byte_end":90860,"line_start":2055,"line_end":2055,"column_start":5,"column_end":72}},{"value":"/ statically. This can be used by consumers to trigger special fast","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90865,"byte_end":90934,"line_start":2056,"line_end":2056,"column_start":5,"column_end":74}},{"value":"/ paths. Therefore, if `Some(_)` is returned, this iterator must only","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":90939,"byte_end":91010,"line_start":2057,"line_end":2057,"column_start":5,"column_end":76}},{"value":"/ use the (indexed) `Consumer` methods when driving a consumer, such","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91015,"byte_end":91085,"line_start":2058,"line_end":2058,"column_start":5,"column_end":75}},{"value":"/ as `split_at()`. Calling `UnindexedConsumer::split_off_left()` or","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91090,"byte_end":91159,"line_start":2059,"line_end":2059,"column_start":5,"column_end":74}},{"value":"/ other `UnindexedConsumer` methods -- or returning an inaccurate","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91164,"byte_end":91231,"line_start":2060,"line_end":2060,"column_start":5,"column_end":72}},{"value":"/ value -- may result in panics.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91236,"byte_end":91270,"line_start":2061,"line_end":2061,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91275,"byte_end":91278,"line_start":2062,"line_end":2062,"column_start":5,"column_end":8}},{"value":"/ This method is currently used to optimize `collect` for want","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91283,"byte_end":91347,"line_start":2063,"line_end":2063,"column_start":5,"column_end":69}},{"value":"/ of true Rust specialization; it may be removed when","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91352,"byte_end":91407,"line_start":2064,"line_end":2064,"column_start":5,"column_end":60}},{"value":"/ specialization is stable.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91412,"byte_end":91441,"line_start":2065,"line_end":2065,"column_start":5,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":3925},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91899,"byte_end":91922,"line_start":2085,"line_end":2085,"column_start":11,"column_end":34},"name":"IndexedParallelIterator","qualname":"::iter::IndexedParallelIterator","value":"IndexedParallelIterator: ParallelIterator","parent":null,"children":[{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3930},{"krate":0,"index":3932},{"krate":0,"index":3934},{"krate":0,"index":3936},{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3944},{"krate":0,"index":3950},{"krate":0,"index":3955},{"krate":0,"index":3957},{"krate":0,"index":3959},{"krate":0,"index":3961},{"krate":0,"index":3963},{"krate":0,"index":3965},{"krate":0,"index":3966},{"krate":0,"index":3967},{"krate":0,"index":3968},{"krate":0,"index":3969},{"krate":0,"index":3972},{"krate":0,"index":3975},{"krate":0,"index":3978},{"krate":0,"index":3980},{"krate":0,"index":3981},{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":3984},{"krate":0,"index":3986}],"decl_id":null,"docs":" An iterator that supports \"random access\" to its data, meaning\n that you can split it at arbitrary indices and draw data from\n those points.","sig":null,"attributes":[{"value":"/ An iterator that supports \"random access\" to its data, meaning","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91661,"byte_end":91727,"line_start":2080,"line_end":2080,"column_start":1,"column_end":67}},{"value":"/ that you can split it at arbitrary indices and draw data from","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91728,"byte_end":91793,"line_start":2081,"line_end":2081,"column_start":1,"column_end":66}},{"value":"/ those points.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91794,"byte_end":91811,"line_start":2082,"line_end":2082,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91812,"byte_end":91815,"line_start":2083,"line_end":2083,"column_start":1,"column_end":4}},{"value":"/ **Note:** Not implemented for `u64`, `i64`, `u128`, or `i128` ranges","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91816,"byte_end":91888,"line_start":2084,"line_end":2084,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92531,"byte_end":92547,"line_start":2104,"line_end":2104,"column_start":8,"column_end":24},"name":"collect_into_vec","qualname":"::iter::IndexedParallelIterator::collect_into_vec","value":"pub fn collect_into_vec(Self, &mut Vec<Self::Item>)","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Collects the results of the iterator into the specified\n vector. The vector is always truncated before execution\n begins. If possible, reusing the vector across calls can lead\n to better performance since it reuses the same backing buffer.","sig":null,"attributes":[{"value":"/ Collects the results of the iterator into the specified","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91947,"byte_end":92006,"line_start":2086,"line_end":2086,"column_start":5,"column_end":64}},{"value":"/ vector. The vector is always truncated before execution","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92011,"byte_end":92070,"line_start":2087,"line_end":2087,"column_start":5,"column_end":64}},{"value":"/ begins. If possible, reusing the vector across calls can lead","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92075,"byte_end":92140,"line_start":2088,"line_end":2088,"column_start":5,"column_end":70}},{"value":"/ to better performance since it reuses the same backing buffer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92145,"byte_end":92211,"line_start":2089,"line_end":2089,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92216,"byte_end":92219,"line_start":2090,"line_end":2090,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92224,"byte_end":92238,"line_start":2091,"line_end":2091,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92243,"byte_end":92246,"line_start":2092,"line_end":2092,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92251,"byte_end":92258,"line_start":2093,"line_end":2093,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92263,"byte_end":92289,"line_start":2094,"line_end":2094,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92294,"byte_end":92297,"line_start":2095,"line_end":2095,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92302,"byte_end":92341,"line_start":2096,"line_end":2096,"column_start":5,"column_end":44}},{"value":"/ let mut vec = vec![-1, -2, -3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92346,"byte_end":92381,"line_start":2097,"line_end":2097,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92386,"byte_end":92389,"line_start":2098,"line_end":2098,"column_start":5,"column_end":8}},{"value":"/ (0..5).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92394,"byte_end":92420,"line_start":2099,"line_end":2099,"column_start":5,"column_end":31}},{"value":"/     .collect_into_vec(&mut vec);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92425,"byte_end":92461,"line_start":2100,"line_end":2100,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92466,"byte_end":92469,"line_start":2101,"line_end":2101,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92474,"byte_end":92511,"line_start":2102,"line_end":2102,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92516,"byte_end":92523,"line_start":2103,"line_end":2103,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93357,"byte_end":93372,"line_start":2129,"line_end":2129,"column_start":8,"column_end":23},"name":"unzip_into_vecs","qualname":"::iter::IndexedParallelIterator::unzip_into_vecs","value":"pub fn unzip_into_vecs<A, B>(Self, &mut Vec<A>, &mut Vec<B>) where\nSelf: IndexedParallelIterator<Item = (A, B)>, A: Send, B: Send","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Unzips the results of the iterator into the specified\n vectors. The vectors are always truncated before execution\n begins. If possible, reusing the vectors across calls can lead\n to better performance since they reuse the same backing buffer.","sig":null,"attributes":[{"value":"/ Unzips the results of the iterator into the specified","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92646,"byte_end":92703,"line_start":2108,"line_end":2108,"column_start":5,"column_end":62}},{"value":"/ vectors. The vectors are always truncated before execution","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92708,"byte_end":92770,"line_start":2109,"line_end":2109,"column_start":5,"column_end":67}},{"value":"/ begins. If possible, reusing the vectors across calls can lead","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92775,"byte_end":92841,"line_start":2110,"line_end":2110,"column_start":5,"column_end":71}},{"value":"/ to better performance since they reuse the same backing buffer.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92846,"byte_end":92913,"line_start":2111,"line_end":2111,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92918,"byte_end":92921,"line_start":2112,"line_end":2112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92926,"byte_end":92940,"line_start":2113,"line_end":2113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92945,"byte_end":92948,"line_start":2114,"line_end":2114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92953,"byte_end":92960,"line_start":2115,"line_end":2115,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92965,"byte_end":92991,"line_start":2116,"line_end":2116,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":92996,"byte_end":92999,"line_start":2117,"line_end":2117,"column_start":5,"column_end":8}},{"value":"/ // any prior data will be truncated","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93004,"byte_end":93043,"line_start":2118,"line_end":2118,"column_start":5,"column_end":44}},{"value":"/ let mut left = vec![42; 10];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93048,"byte_end":93080,"line_start":2119,"line_end":2119,"column_start":5,"column_end":37}},{"value":"/ let mut right = vec![-1; 10];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93085,"byte_end":93118,"line_start":2120,"line_end":2120,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93123,"byte_end":93126,"line_start":2121,"line_end":2121,"column_start":5,"column_end":8}},{"value":"/ (10..15).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93131,"byte_end":93159,"line_start":2122,"line_end":2122,"column_start":5,"column_end":33}},{"value":"/     .enumerate()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93164,"byte_end":93184,"line_start":2123,"line_end":2123,"column_start":5,"column_end":25}},{"value":"/     .unzip_into_vecs(&mut left, &mut right);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93189,"byte_end":93237,"line_start":2124,"line_end":2124,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93242,"byte_end":93245,"line_start":2125,"line_end":2125,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(left, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93250,"byte_end":93288,"line_start":2126,"line_end":2126,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(right, [10, 11, 12, 13, 14]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93293,"byte_end":93337,"line_start":2127,"line_end":2127,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93342,"byte_end":93349,"line_start":2128,"line_end":2128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3930},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94184,"byte_end":94187,"line_start":2156,"line_end":2156,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::IndexedParallelIterator::zip","value":"pub fn zip<Z>(Self, Z) -> Zip<Self, Z::Iter> where Z: IntoParallelIterator,\nZ::Iter: IndexedParallelIterator","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Iterates over tuples `(A, B)`, where the items `A` are from\n this iterator and `B` are from the iterator given as argument.\n Like the `zip` method on ordinary iterators, if the two\n iterators are of unequal length, you only get the items they\n have in common.","sig":null,"attributes":[{"value":"/ Iterates over tuples `(A, B)`, where the items `A` are from","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93592,"byte_end":93655,"line_start":2138,"line_end":2138,"column_start":5,"column_end":68}},{"value":"/ this iterator and `B` are from the iterator given as argument.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93660,"byte_end":93726,"line_start":2139,"line_end":2139,"column_start":5,"column_end":71}},{"value":"/ Like the `zip` method on ordinary iterators, if the two","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93731,"byte_end":93790,"line_start":2140,"line_end":2140,"column_start":5,"column_end":64}},{"value":"/ iterators are of unequal length, you only get the items they","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93795,"byte_end":93859,"line_start":2141,"line_end":2141,"column_start":5,"column_end":69}},{"value":"/ have in common.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93864,"byte_end":93883,"line_start":2142,"line_end":2142,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93888,"byte_end":93891,"line_start":2143,"line_end":2143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93896,"byte_end":93910,"line_start":2144,"line_end":2144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93915,"byte_end":93918,"line_start":2145,"line_end":2145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93923,"byte_end":93930,"line_start":2146,"line_end":2146,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93935,"byte_end":93961,"line_start":2147,"line_end":2147,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93966,"byte_end":93969,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (1..4)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":93974,"byte_end":94005,"line_start":2149,"line_end":2149,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94010,"byte_end":94034,"line_start":2150,"line_end":2150,"column_start":5,"column_end":29}},{"value":"/     .zip(vec!['a', 'b', 'c'])","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94039,"byte_end":94072,"line_start":2151,"line_end":2151,"column_start":5,"column_end":38}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94077,"byte_end":94096,"line_start":2152,"line_end":2152,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94101,"byte_end":94104,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(1, 'a'), (2, 'b'), (3, 'c')]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94109,"byte_end":94164,"line_start":2154,"line_end":2154,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94169,"byte_end":94176,"line_start":2155,"line_end":2155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3932},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94961,"byte_end":94967,"line_start":2183,"line_end":2183,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::iter::IndexedParallelIterator::zip_eq","value":"pub fn zip_eq<Z>(Self, Z) -> ZipEq<Self, Z::Iter> where\nZ: IntoParallelIterator, Z::Iter: IndexedParallelIterator","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" The same as `Zip`, but requires that both iterators have the same length.","sig":null,"attributes":[{"value":"/ The same as `Zip`, but requires that both iterators have the same length.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94379,"byte_end":94456,"line_start":2164,"line_end":2164,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94461,"byte_end":94464,"line_start":2165,"line_end":2165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94469,"byte_end":94481,"line_start":2166,"line_end":2166,"column_start":5,"column_end":17}},{"value":"/ Will panic if `self` and `zip_op` are not the same length.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94486,"byte_end":94548,"line_start":2167,"line_end":2167,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94553,"byte_end":94556,"line_start":2168,"line_end":2168,"column_start":5,"column_end":8}},{"value":"/ ```should_panic","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94561,"byte_end":94580,"line_start":2169,"line_end":2169,"column_start":5,"column_end":24}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94585,"byte_end":94611,"line_start":2170,"line_end":2170,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94616,"byte_end":94619,"line_start":2171,"line_end":2171,"column_start":5,"column_end":8}},{"value":"/ let one = [1u8];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94624,"byte_end":94644,"line_start":2172,"line_end":2172,"column_start":5,"column_end":25}},{"value":"/ let two = [2u8, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94649,"byte_end":94672,"line_start":2173,"line_end":2173,"column_start":5,"column_end":28}},{"value":"/ let one_iter = one.par_iter();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94677,"byte_end":94711,"line_start":2174,"line_end":2174,"column_start":5,"column_end":39}},{"value":"/ let two_iter = two.par_iter();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94716,"byte_end":94750,"line_start":2175,"line_end":2175,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94755,"byte_end":94758,"line_start":2176,"line_end":2176,"column_start":5,"column_end":8}},{"value":"/ // this will panic","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94763,"byte_end":94785,"line_start":2177,"line_end":2177,"column_start":5,"column_end":27}},{"value":"/ let zipped: Vec<(&u8, &u8)> = one_iter.zip_eq(two_iter).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94790,"byte_end":94860,"line_start":2178,"line_end":2178,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94865,"byte_end":94868,"line_start":2179,"line_end":2179,"column_start":5,"column_end":8}},{"value":"/ // we should never get here","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94873,"byte_end":94904,"line_start":2180,"line_end":2180,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(1, zipped.len());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94909,"byte_end":94941,"line_start":2181,"line_end":2181,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":94946,"byte_end":94953,"line_start":2182,"line_end":2182,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3934},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95814,"byte_end":95824,"line_start":2207,"line_end":2207,"column_start":8,"column_end":18},"name":"interleave","qualname":"::iter::IndexedParallelIterator::interleave","value":"pub fn interleave<I>(Self, I) -> Interleave<Self, I::Iter> where\nI: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator. Alternately yields elements from this iterator and\n the given iterator, until both are exhausted. If one iterator\n is exhausted before the other, the last elements are provided\n from the other.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95253,"byte_end":95314,"line_start":2193,"line_end":2193,"column_start":5,"column_end":66}},{"value":"/ iterator. Alternately yields elements from this iterator and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95319,"byte_end":95383,"line_start":2194,"line_end":2194,"column_start":5,"column_end":69}},{"value":"/ the given iterator, until both are exhausted. If one iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95388,"byte_end":95453,"line_start":2195,"line_end":2195,"column_start":5,"column_end":70}},{"value":"/ is exhausted before the other, the last elements are provided","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95458,"byte_end":95523,"line_start":2196,"line_end":2196,"column_start":5,"column_end":70}},{"value":"/ from the other.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95528,"byte_end":95547,"line_start":2197,"line_end":2197,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95552,"byte_end":95555,"line_start":2198,"line_end":2198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95560,"byte_end":95574,"line_start":2199,"line_end":2199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95579,"byte_end":95582,"line_start":2200,"line_end":2200,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95587,"byte_end":95594,"line_start":2201,"line_end":2201,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95599,"byte_end":95625,"line_start":2202,"line_end":2202,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2], vec![3, 4, 5, 6]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95630,"byte_end":95678,"line_start":2203,"line_end":2203,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave(y).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95683,"byte_end":95747,"line_start":2204,"line_end":2204,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(r, vec![1, 3, 2, 4, 5, 6]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95752,"byte_end":95794,"line_start":2205,"line_end":2205,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":95799,"byte_end":95806,"line_start":2206,"line_end":2206,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3936},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96442,"byte_end":96461,"line_start":2226,"line_end":2226,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::iter::IndexedParallelIterator::interleave_shortest","value":"pub fn interleave_shortest<I>(Self, I) -> InterleaveShortest<Self, I::Iter>\nwhere I: IntoParallelIterator<Item = Self::Item>,\nI::Iter: IndexedParallelIterator<Item = Self::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Interleaves elements of this iterator and the other given\n iterator, until one is exhausted.","sig":null,"attributes":[{"value":"/ Interleaves elements of this iterator and the other given","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96066,"byte_end":96127,"line_start":2215,"line_end":2215,"column_start":5,"column_end":66}},{"value":"/ iterator, until one is exhausted.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96132,"byte_end":96169,"line_start":2216,"line_end":2216,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96174,"byte_end":96177,"line_start":2217,"line_end":2217,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96182,"byte_end":96196,"line_start":2218,"line_end":2218,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96201,"byte_end":96204,"line_start":2219,"line_end":2219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96209,"byte_end":96216,"line_start":2220,"line_end":2220,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96221,"byte_end":96247,"line_start":2221,"line_end":2221,"column_start":5,"column_end":31}},{"value":"/ let (x, y) = (vec![1, 2, 3, 4], vec![5, 6]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96252,"byte_end":96300,"line_start":2222,"line_end":2222,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<i32> = x.into_par_iter().interleave_shortest(y).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96305,"byte_end":96378,"line_start":2223,"line_end":2223,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(r, vec![1, 5, 2, 6, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96383,"byte_end":96422,"line_start":2224,"line_end":2224,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96427,"byte_end":96434,"line_start":2225,"line_end":2225,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3938},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97642,"byte_end":97648,"line_start":2254,"line_end":2254,"column_start":8,"column_end":14},"name":"chunks","qualname":"::iter::IndexedParallelIterator::chunks","value":"pub fn chunks(Self, usize) -> Chunks<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Splits an iterator up into fixed-size chunks.","sig":null,"attributes":[{"value":"/ Splits an iterator up into fixed-size chunks.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96719,"byte_end":96768,"line_start":2234,"line_end":2234,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96773,"byte_end":96776,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ Returns an iterator that returns `Vec`s of the given number of elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96781,"byte_end":96857,"line_start":2236,"line_end":2236,"column_start":5,"column_end":81}},{"value":"/ If the number of elements in the iterator is not divisible by `chunk_size`,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96862,"byte_end":96941,"line_start":2237,"line_end":2237,"column_start":5,"column_end":84}},{"value":"/ the last chunk may be shorter than `chunk_size`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":96946,"byte_end":96998,"line_start":2238,"line_end":2238,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97003,"byte_end":97006,"line_start":2239,"line_end":2239,"column_start":5,"column_end":8}},{"value":"/ See also [`par_chunks()`] and [`par_chunks_mut()`] for similar behavior on","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97011,"byte_end":97089,"line_start":2240,"line_end":2240,"column_start":5,"column_end":83}},{"value":"/ slices, without having to allocate intermediate `Vec`s for the chunks.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97094,"byte_end":97168,"line_start":2241,"line_end":2241,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97173,"byte_end":97176,"line_start":2242,"line_end":2242,"column_start":5,"column_end":8}},{"value":"/ [`par_chunks()`]: ../slice/trait.ParallelSlice.html#method.par_chunks","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97181,"byte_end":97254,"line_start":2243,"line_end":2243,"column_start":5,"column_end":78}},{"value":"/ [`par_chunks_mut()`]: ../slice/trait.ParallelSliceMut.html#method.par_chunks_mut","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97259,"byte_end":97343,"line_start":2244,"line_end":2244,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97348,"byte_end":97351,"line_start":2245,"line_end":2245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97356,"byte_end":97370,"line_start":2246,"line_end":2246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97375,"byte_end":97378,"line_start":2247,"line_end":2247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97383,"byte_end":97390,"line_start":2248,"line_end":2248,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97395,"byte_end":97421,"line_start":2249,"line_end":2249,"column_start":5,"column_end":31}},{"value":"/ let a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97426,"byte_end":97474,"line_start":2250,"line_end":2250,"column_start":5,"column_end":53}},{"value":"/ let r: Vec<Vec<i32>> = a.into_par_iter().chunks(3).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97479,"byte_end":97544,"line_start":2251,"line_end":2251,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(r, vec![vec![1,2,3], vec![4,5,6], vec![7,8,9], vec![10]]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97549,"byte_end":97622,"line_start":2252,"line_end":2252,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97627,"byte_end":97634,"line_start":2253,"line_end":2253,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3939},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98260,"byte_end":98263,"line_start":2273,"line_end":2273,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::IndexedParallelIterator::cmp","value":"pub fn cmp<I>(Self, I) -> Ordering where I: IntoParallelIterator<Item =\nSelf::Item>, I::Iter: IndexedParallelIterator, Self::Item: Ord","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97806,"byte_end":97890,"line_start":2259,"line_end":2259,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97895,"byte_end":97907,"line_start":2260,"line_end":2260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97912,"byte_end":97915,"line_start":2261,"line_end":2261,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97920,"byte_end":97934,"line_start":2262,"line_end":2262,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97939,"byte_end":97942,"line_start":2263,"line_end":2263,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97947,"byte_end":97954,"line_start":2264,"line_end":2264,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97959,"byte_end":97985,"line_start":2265,"line_end":2265,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":97990,"byte_end":98020,"line_start":2266,"line_end":2266,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98025,"byte_end":98028,"line_start":2267,"line_end":2267,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1, 2, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98033,"byte_end":98059,"line_start":2268,"line_end":2268,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 3, 0]), Less);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98064,"byte_end":98119,"line_start":2269,"line_end":2269,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2, 3]), Equal);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98124,"byte_end":98180,"line_start":2270,"line_end":2270,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.par_iter().cmp(&vec![1, 2]), Greater);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98185,"byte_end":98240,"line_start":2271,"line_end":2271,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98245,"byte_end":98252,"line_start":2272,"line_end":2272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3944},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99492,"byte_end":99503,"line_start":2313,"line_end":2313,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::IndexedParallelIterator::partial_cmp","value":"pub fn partial_cmp<I>(Self, I) -> Option<Ordering> where\nI: IntoParallelIterator, I::Iter: IndexedParallelIterator,\nSelf::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Lexicographically compares the elements of this `ParallelIterator` with those of\n another.","sig":null,"attributes":[{"value":"/ Lexicographically compares the elements of this `ParallelIterator` with those of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98878,"byte_end":98962,"line_start":2297,"line_end":2297,"column_start":5,"column_end":89}},{"value":"/ another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98967,"byte_end":98979,"line_start":2298,"line_end":2298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98984,"byte_end":98987,"line_start":2299,"line_end":2299,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":98992,"byte_end":99006,"line_start":2300,"line_end":2300,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99011,"byte_end":99014,"line_start":2301,"line_end":2301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99019,"byte_end":99026,"line_start":2302,"line_end":2302,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99031,"byte_end":99057,"line_start":2303,"line_end":2303,"column_start":5,"column_end":31}},{"value":"/ use std::cmp::Ordering::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99062,"byte_end":99092,"line_start":2304,"line_end":2304,"column_start":5,"column_end":35}},{"value":"/ use std::f64::NAN;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99097,"byte_end":99119,"line_start":2305,"line_end":2305,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99124,"byte_end":99127,"line_start":2306,"line_end":2306,"column_start":5,"column_end":8}},{"value":"/ let x = vec![1.0, 2.0, 3.0];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99132,"byte_end":99164,"line_start":2307,"line_end":2307,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 3.0, 0.0]), Some(Less));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99169,"byte_end":99244,"line_start":2308,"line_end":2308,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0, 3.0]), Some(Equal));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99249,"byte_end":99325,"line_start":2309,"line_end":2309,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, 2.0]), Some(Greater));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99330,"byte_end":99403,"line_start":2310,"line_end":2310,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x.par_iter().partial_cmp(&vec![1.0, NAN]), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99408,"byte_end":99472,"line_start":2311,"line_end":2311,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":99477,"byte_end":99484,"line_start":2312,"line_end":2312,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100282,"byte_end":100284,"line_start":2339,"line_end":2339,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::IndexedParallelIterator::eq","value":"pub fn eq<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are equal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100179,"byte_end":100236,"line_start":2337,"line_end":2337,"column_start":5,"column_end":62}},{"value":"/ are equal to those of another","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100241,"byte_end":100274,"line_start":2338,"line_end":2338,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3955},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100786,"byte_end":100788,"line_start":2356,"line_end":2356,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::IndexedParallelIterator::ne","value":"pub fn ne<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialEq<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are unequal to those of another\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100681,"byte_end":100738,"line_start":2354,"line_end":2354,"column_start":5,"column_end":62}},{"value":"/ are unequal to those of another","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100743,"byte_end":100778,"line_start":2355,"line_end":2355,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3957},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101105,"byte_end":101107,"line_start":2367,"line_end":2367,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::IndexedParallelIterator::lt","value":"pub fn lt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically less than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":100982,"byte_end":101039,"line_start":2365,"line_end":2365,"column_start":5,"column_end":62}},{"value":"/ are lexicographically less than those of another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101044,"byte_end":101097,"line_start":2366,"line_end":2366,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3959},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101446,"byte_end":101448,"line_start":2378,"line_end":2378,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::IndexedParallelIterator::le","value":"pub fn le<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101334,"byte_end":101391,"line_start":2376,"line_end":2376,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101396,"byte_end":101438,"line_start":2377,"line_end":2377,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3961},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101856,"byte_end":101858,"line_start":2390,"line_end":2390,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::IndexedParallelIterator::gt","value":"pub fn gt<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are lexicographically greater than those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101730,"byte_end":101787,"line_start":2388,"line_end":2388,"column_start":5,"column_end":62}},{"value":"/ are lexicographically greater than those of another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":101792,"byte_end":101848,"line_start":2389,"line_end":2389,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3963},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102200,"byte_end":102202,"line_start":2401,"line_end":2401,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::IndexedParallelIterator::ge","value":"pub fn ge<I>(Self, I) -> bool where I: IntoParallelIterator,\nI::Iter: IndexedParallelIterator, Self::Item: PartialOrd<I::Item>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Determines if the elements of this `ParallelIterator`\n are less or equal to those of another.\n","sig":null,"attributes":[{"value":"/ Determines if the elements of this `ParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102088,"byte_end":102145,"line_start":2399,"line_end":2399,"column_start":5,"column_end":62}},{"value":"/ are less or equal to those of another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102150,"byte_end":102192,"line_start":2400,"line_end":2400,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3965},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102856,"byte_end":102865,"line_start":2426,"line_end":2426,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::IndexedParallelIterator::enumerate","value":"pub fn enumerate(Self) -> Enumerate<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Yields an index along with each item.","sig":null,"attributes":[{"value":"/ Yields an index along with each item.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102487,"byte_end":102528,"line_start":2411,"line_end":2411,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102533,"byte_end":102536,"line_start":2412,"line_end":2412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102541,"byte_end":102555,"line_start":2413,"line_end":2413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102560,"byte_end":102563,"line_start":2414,"line_end":2414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102568,"byte_end":102575,"line_start":2415,"line_end":2415,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102580,"byte_end":102606,"line_start":2416,"line_end":2416,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102611,"byte_end":102614,"line_start":2417,"line_end":2417,"column_start":5,"column_end":8}},{"value":"/ let chars = vec!['a', 'b', 'c'];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102619,"byte_end":102655,"line_start":2418,"line_end":2418,"column_start":5,"column_end":41}},{"value":"/ let result: Vec<_> = chars","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102660,"byte_end":102690,"line_start":2419,"line_end":2419,"column_start":5,"column_end":35}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102695,"byte_end":102719,"line_start":2420,"line_end":2420,"column_start":5,"column_end":29}},{"value":"/     .enumerate()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102724,"byte_end":102744,"line_start":2421,"line_end":2421,"column_start":5,"column_end":25}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102749,"byte_end":102768,"line_start":2422,"line_end":2422,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102773,"byte_end":102776,"line_start":2423,"line_end":2423,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [(0, 'a'), (1, 'b'), (2, 'c')]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102781,"byte_end":102836,"line_start":2424,"line_end":2424,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102841,"byte_end":102848,"line_start":2425,"line_end":2425,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3966},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103401,"byte_end":103408,"line_start":2450,"line_end":2450,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::IndexedParallelIterator::step_by","value":"pub fn step_by(Self, usize) -> StepBy<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Creates an iterator that steps by the given amount","sig":null,"attributes":[{"value":"/ Creates an iterator that steps by the given amount","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102933,"byte_end":102987,"line_start":2430,"line_end":2430,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":102992,"byte_end":102995,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103000,"byte_end":103014,"line_start":2432,"line_end":2432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103019,"byte_end":103022,"line_start":2433,"line_end":2433,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103027,"byte_end":103034,"line_start":2434,"line_end":2434,"column_start":5,"column_end":12}},{"value":"/use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103039,"byte_end":103064,"line_start":2435,"line_end":2435,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103069,"byte_end":103072,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ let range = (3..10);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103077,"byte_end":103101,"line_start":2437,"line_end":2437,"column_start":5,"column_end":29}},{"value":"/ let result: Vec<i32> = range","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103106,"byte_end":103138,"line_start":2438,"line_end":2438,"column_start":5,"column_end":37}},{"value":"/    .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103143,"byte_end":103166,"line_start":2439,"line_end":2439,"column_start":5,"column_end":28}},{"value":"/    .step_by(3)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103171,"byte_end":103189,"line_start":2440,"line_end":2440,"column_start":5,"column_end":23}},{"value":"/    .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103194,"byte_end":103212,"line_start":2441,"line_end":2441,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103217,"byte_end":103220,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [3, 6, 9])","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103225,"byte_end":103258,"line_start":2443,"line_end":2443,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103263,"byte_end":103270,"line_start":2444,"line_end":2444,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103275,"byte_end":103278,"line_start":2445,"line_end":2445,"column_start":5,"column_end":8}},{"value":"/ # Compatibility","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103283,"byte_end":103302,"line_start":2446,"line_end":2446,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103307,"byte_end":103310,"line_start":2447,"line_end":2447,"column_start":5,"column_end":8}},{"value":"/ This method is only available on Rust 1.38 or greater.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103315,"byte_end":103373,"line_start":2448,"line_end":2448,"column_start":5,"column_end":63}},{"value":"cfg(step_by)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103378,"byte_end":103393,"line_start":2449,"line_end":2449,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3967},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103824,"byte_end":103828,"line_start":2468,"line_end":2468,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::IndexedParallelIterator::skip","value":"pub fn skip(Self, usize) -> Skip<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Creates an iterator that skips the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that skips the first `n` elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103489,"byte_end":103547,"line_start":2454,"line_end":2454,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103552,"byte_end":103555,"line_start":2455,"line_end":2455,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103560,"byte_end":103574,"line_start":2456,"line_end":2456,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103579,"byte_end":103582,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103587,"byte_end":103594,"line_start":2458,"line_end":2458,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103599,"byte_end":103625,"line_start":2459,"line_end":2459,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103630,"byte_end":103633,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103638,"byte_end":103671,"line_start":2461,"line_end":2461,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103676,"byte_end":103700,"line_start":2462,"line_end":2462,"column_start":5,"column_end":29}},{"value":"/     .skip(95)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103705,"byte_end":103722,"line_start":2463,"line_end":2463,"column_start":5,"column_end":22}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103727,"byte_end":103746,"line_start":2464,"line_end":2464,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103751,"byte_end":103754,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [95, 96, 97, 98, 99]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103759,"byte_end":103804,"line_start":2466,"line_end":2466,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103809,"byte_end":103816,"line_start":2467,"line_end":2467,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3968},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104229,"byte_end":104233,"line_start":2486,"line_end":2486,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::IndexedParallelIterator::take","value":"pub fn take(Self, usize) -> Take<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Creates an iterator that yields the first `n` elements.","sig":null,"attributes":[{"value":"/ Creates an iterator that yields the first `n` elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103899,"byte_end":103958,"line_start":2472,"line_end":2472,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103963,"byte_end":103966,"line_start":2473,"line_end":2473,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103971,"byte_end":103985,"line_start":2474,"line_end":2474,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103990,"byte_end":103993,"line_start":2475,"line_end":2475,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":103998,"byte_end":104005,"line_start":2476,"line_end":2476,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104010,"byte_end":104036,"line_start":2477,"line_end":2477,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104041,"byte_end":104044,"line_start":2478,"line_end":2478,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..100)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104049,"byte_end":104082,"line_start":2479,"line_end":2479,"column_start":5,"column_end":38}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104087,"byte_end":104111,"line_start":2480,"line_end":2480,"column_start":5,"column_end":29}},{"value":"/     .take(5)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104116,"byte_end":104132,"line_start":2481,"line_end":2481,"column_start":5,"column_end":21}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104137,"byte_end":104156,"line_start":2482,"line_end":2482,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104161,"byte_end":104164,"line_start":2483,"line_end":2483,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [0, 1, 2, 3, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104169,"byte_end":104209,"line_start":2484,"line_end":2484,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104214,"byte_end":104221,"line_start":2485,"line_end":2485,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3969},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104947,"byte_end":104959,"line_start":2508,"line_end":2508,"column_start":8,"column_end":20},"name":"position_any","qualname":"::iter::IndexedParallelIterator::position_any","value":"pub fn position_any<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Searches for **some** item in the parallel iterator that\n matches the given predicate, and returns its index.  Like\n `ParallelIterator::find_any`, the parallel search will not\n necessarily find the **first** match, and once a match is\n found we'll attempt to stop processing any more.","sig":null,"attributes":[{"value":"/ Searches for **some** item in the parallel iterator that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104304,"byte_end":104364,"line_start":2490,"line_end":2490,"column_start":5,"column_end":65}},{"value":"/ matches the given predicate, and returns its index.  Like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104369,"byte_end":104430,"line_start":2491,"line_end":2491,"column_start":5,"column_end":66}},{"value":"/ `ParallelIterator::find_any`, the parallel search will not","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104435,"byte_end":104497,"line_start":2492,"line_end":2492,"column_start":5,"column_end":67}},{"value":"/ necessarily find the **first** match, and once a match is","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104502,"byte_end":104563,"line_start":2493,"line_end":2493,"column_start":5,"column_end":66}},{"value":"/ found we'll attempt to stop processing any more.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104568,"byte_end":104620,"line_start":2494,"line_end":2494,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104625,"byte_end":104628,"line_start":2495,"line_end":2495,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104633,"byte_end":104647,"line_start":2496,"line_end":2496,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104652,"byte_end":104655,"line_start":2497,"line_end":2497,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104660,"byte_end":104667,"line_start":2498,"line_end":2498,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104672,"byte_end":104698,"line_start":2499,"line_end":2499,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104703,"byte_end":104706,"line_start":2500,"line_end":2500,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104711,"byte_end":104736,"line_start":2501,"line_end":2501,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104741,"byte_end":104744,"line_start":2502,"line_end":2502,"column_start":5,"column_end":8}},{"value":"/ let i = a.par_iter().position_any(|&x| x == 3).expect(\"found\");","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104749,"byte_end":104816,"line_start":2503,"line_end":2503,"column_start":5,"column_end":72}},{"value":"/ assert!(i == 2 || i == 3);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104821,"byte_end":104851,"line_start":2504,"line_end":2504,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104856,"byte_end":104859,"line_start":2505,"line_end":2505,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_any(|&x| x == 100), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104864,"byte_end":104927,"line_start":2506,"line_end":2506,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":104932,"byte_end":104939,"line_start":2507,"line_end":2507,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3972},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106200,"byte_end":106214,"line_start":2545,"line_end":2545,"column_start":8,"column_end":22},"name":"position_first","qualname":"::iter::IndexedParallelIterator::position_first","value":"pub fn position_first<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Searches for the sequentially **first** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **first** item in the parallel iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105258,"byte_end":105331,"line_start":2521,"line_end":2521,"column_start":5,"column_end":78}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105336,"byte_end":105396,"line_start":2522,"line_end":2522,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105401,"byte_end":105404,"line_start":2523,"line_end":2523,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_first`, once a match is found,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105409,"byte_end":105472,"line_start":2524,"line_end":2524,"column_start":5,"column_end":68}},{"value":"/ all attempts to the right of the match will be stopped, while","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105477,"byte_end":105542,"line_start":2525,"line_end":2525,"column_start":5,"column_end":70}},{"value":"/ attempts to the left must continue in case an earlier match","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105547,"byte_end":105610,"line_start":2526,"line_end":2526,"column_start":5,"column_end":68}},{"value":"/ is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105615,"byte_end":105628,"line_start":2527,"line_end":2527,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105633,"byte_end":105636,"line_start":2528,"line_end":2528,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105641,"byte_end":105712,"line_start":2529,"line_end":2529,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"first\" may be nebulous.  If you","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105717,"byte_end":105788,"line_start":2530,"line_end":2530,"column_start":5,"column_end":76}},{"value":"/ just want the first match that discovered anywhere in the iterator,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105793,"byte_end":105864,"line_start":2531,"line_end":2531,"column_start":5,"column_end":76}},{"value":"/ `position_any` is a better choice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105869,"byte_end":105907,"line_start":2532,"line_end":2532,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105912,"byte_end":105915,"line_start":2533,"line_end":2533,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105920,"byte_end":105934,"line_start":2534,"line_end":2534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105939,"byte_end":105942,"line_start":2535,"line_end":2535,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105947,"byte_end":105954,"line_start":2536,"line_end":2536,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105959,"byte_end":105985,"line_start":2537,"line_end":2537,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105990,"byte_end":105993,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":105998,"byte_end":106023,"line_start":2539,"line_end":2539,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106028,"byte_end":106031,"line_start":2540,"line_end":2540,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 3), Some(2));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106036,"byte_end":106102,"line_start":2541,"line_end":2541,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106107,"byte_end":106110,"line_start":2542,"line_end":2542,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_first(|&x| x == 100), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106115,"byte_end":106180,"line_start":2543,"line_end":2543,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106185,"byte_end":106192,"line_start":2544,"line_end":2544,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3975},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107421,"byte_end":107434,"line_start":2582,"line_end":2582,"column_start":8,"column_end":21},"name":"position_last","qualname":"::iter::IndexedParallelIterator::position_last","value":"pub fn position_last<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) ->\nbool + Sync + Send","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Searches for the sequentially **last** item in the parallel iterator\n that matches the given predicate, and returns its index.","sig":null,"attributes":[{"value":"/ Searches for the sequentially **last** item in the parallel iterator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106515,"byte_end":106587,"line_start":2558,"line_end":2558,"column_start":5,"column_end":77}},{"value":"/ that matches the given predicate, and returns its index.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106592,"byte_end":106652,"line_start":2559,"line_end":2559,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106657,"byte_end":106660,"line_start":2560,"line_end":2560,"column_start":5,"column_end":8}},{"value":"/ Like `ParallelIterator::find_last`, once a match is found,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106665,"byte_end":106727,"line_start":2561,"line_end":2561,"column_start":5,"column_end":67}},{"value":"/ all attempts to the left of the match will be stopped, while","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106732,"byte_end":106796,"line_start":2562,"line_end":2562,"column_start":5,"column_end":69}},{"value":"/ attempts to the right must continue in case a later match","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106801,"byte_end":106862,"line_start":2563,"line_end":2563,"column_start":5,"column_end":66}},{"value":"/ is found.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106867,"byte_end":106880,"line_start":2564,"line_end":2564,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106885,"byte_end":106888,"line_start":2565,"line_end":2565,"column_start":5,"column_end":8}},{"value":"/ Note that not all parallel iterators have a useful order, much like","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106893,"byte_end":106964,"line_start":2566,"line_end":2566,"column_start":5,"column_end":76}},{"value":"/ sequential `HashMap` iteration, so \"last\" may be nebulous.  When the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":106969,"byte_end":107041,"line_start":2567,"line_end":2567,"column_start":5,"column_end":77}},{"value":"/ order doesn't actually matter to you, `position_any` is a better","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107046,"byte_end":107114,"line_start":2568,"line_end":2568,"column_start":5,"column_end":73}},{"value":"/ choice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107119,"byte_end":107130,"line_start":2569,"line_end":2569,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107135,"byte_end":107138,"line_start":2570,"line_end":2570,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107143,"byte_end":107157,"line_start":2571,"line_end":2571,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107162,"byte_end":107165,"line_start":2572,"line_end":2572,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107170,"byte_end":107177,"line_start":2573,"line_end":2573,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107182,"byte_end":107208,"line_start":2574,"line_end":2574,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107213,"byte_end":107216,"line_start":2575,"line_end":2575,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 3];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107221,"byte_end":107246,"line_start":2576,"line_end":2576,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107251,"byte_end":107254,"line_start":2577,"line_end":2577,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 3), Some(3));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107259,"byte_end":107324,"line_start":2578,"line_end":2578,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107329,"byte_end":107332,"line_start":2579,"line_end":2579,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.par_iter().position_last(|&x| x == 100), None);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107337,"byte_end":107401,"line_start":2580,"line_end":2580,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107406,"byte_end":107413,"line_start":2581,"line_end":2581,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3978},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107922,"byte_end":107930,"line_start":2600,"line_end":2600,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::IndexedParallelIterator::position","value":"pub fn position<P>(Self, P) -> Option<usize> where P: Fn(Self::Item) -> bool +\nSync + Send","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note =\n             \"parallel `position` does not search in order -- use `position_any`, \\\\\n                `position_first`, or `position_last`\")","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":107753,"byte_end":107914,"line_start":2596,"line_end":2599,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":3980},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108439,"byte_end":108442,"line_start":2622,"line_end":2622,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::IndexedParallelIterator::rev","value":"pub fn rev(Self) -> Rev<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Produces a new iterator with the elements of this iterator in\n reverse order.","sig":null,"attributes":[{"value":"/ Produces a new iterator with the elements of this iterator in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108084,"byte_end":108149,"line_start":2607,"line_end":2607,"column_start":5,"column_end":70}},{"value":"/ reverse order.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108154,"byte_end":108172,"line_start":2608,"line_end":2608,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108177,"byte_end":108180,"line_start":2609,"line_end":2609,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108185,"byte_end":108199,"line_start":2610,"line_end":2610,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108204,"byte_end":108207,"line_start":2611,"line_end":2611,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108212,"byte_end":108219,"line_start":2612,"line_end":2612,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108224,"byte_end":108250,"line_start":2613,"line_end":2613,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108255,"byte_end":108258,"line_start":2614,"line_end":2614,"column_start":5,"column_end":8}},{"value":"/ let result: Vec<_> = (0..5)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108263,"byte_end":108294,"line_start":2615,"line_end":2615,"column_start":5,"column_end":36}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108299,"byte_end":108323,"line_start":2616,"line_end":2616,"column_start":5,"column_end":29}},{"value":"/     .rev()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108328,"byte_end":108342,"line_start":2617,"line_end":2617,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108347,"byte_end":108366,"line_start":2618,"line_end":2618,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108371,"byte_end":108374,"line_start":2619,"line_end":2619,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(result, [4, 3, 2, 1, 0]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108379,"byte_end":108419,"line_start":2620,"line_end":2620,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108424,"byte_end":108431,"line_start":2621,"line_end":2621,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3981},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109259,"byte_end":109271,"line_start":2648,"line_end":2648,"column_start":8,"column_end":20},"name":"with_min_len","qualname":"::iter::IndexedParallelIterator::with_min_len","value":"pub fn with_min_len(Self, usize) -> MinLen<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Sets the minimum length of iterators desired to process in each\n thread.  Rayon will not split any smaller than this length, but\n of course an iterator could already be smaller to begin with.","sig":null,"attributes":[{"value":"/ Sets the minimum length of iterators desired to process in each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108498,"byte_end":108565,"line_start":2626,"line_end":2626,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will not split any smaller than this length, but","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108570,"byte_end":108637,"line_start":2627,"line_end":2627,"column_start":5,"column_end":72}},{"value":"/ of course an iterator could already be smaller to begin with.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108642,"byte_end":108707,"line_start":2628,"line_end":2628,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108712,"byte_end":108715,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use greater of the two","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108720,"byte_end":108789,"line_start":2630,"line_end":2630,"column_start":5,"column_end":74}},{"value":"/ minimums.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108794,"byte_end":108807,"line_start":2631,"line_end":2631,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108812,"byte_end":108878,"line_start":2632,"line_end":2632,"column_start":5,"column_end":71}},{"value":"/ their own minimum length.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108883,"byte_end":108912,"line_start":2633,"line_end":2633,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108917,"byte_end":108920,"line_start":2634,"line_end":2634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108925,"byte_end":108939,"line_start":2635,"line_end":2635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108944,"byte_end":108947,"line_start":2636,"line_end":2636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108952,"byte_end":108959,"line_start":2637,"line_end":2637,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108964,"byte_end":108990,"line_start":2638,"line_end":2638,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":108995,"byte_end":108998,"line_start":2639,"line_end":2639,"column_start":5,"column_end":8}},{"value":"/ let min = (0..1_000_000)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109003,"byte_end":109031,"line_start":2640,"line_end":2640,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109036,"byte_end":109060,"line_start":2641,"line_end":2641,"column_start":5,"column_end":29}},{"value":"/     .with_min_len(1234)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109065,"byte_end":109092,"line_start":2642,"line_end":2642,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109097,"byte_end":109172,"line_start":2643,"line_end":2643,"column_start":5,"column_end":80}},{"value":"/     .min().unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109177,"byte_end":109201,"line_start":2644,"line_end":2644,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109206,"byte_end":109209,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ assert!(min >= 1234);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109214,"byte_end":109239,"line_start":2646,"line_end":2646,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109244,"byte_end":109251,"line_start":2647,"line_end":2647,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110210,"byte_end":110222,"line_start":2676,"line_end":2676,"column_start":8,"column_end":20},"name":"with_max_len","qualname":"::iter::IndexedParallelIterator::with_max_len","value":"pub fn with_max_len(Self, usize) -> MaxLen<Self>","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Sets the maximum length of iterators desired to process in each\n thread.  Rayon will try to split at least below this length,\n unless that would put it below the length from `with_min_len()`.\n For example, given min=10 and max=15, a length of 16 will not be\n split any further.","sig":null,"attributes":[{"value":"/ Sets the maximum length of iterators desired to process in each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109350,"byte_end":109417,"line_start":2652,"line_end":2652,"column_start":5,"column_end":72}},{"value":"/ thread.  Rayon will try to split at least below this length,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109422,"byte_end":109486,"line_start":2653,"line_end":2653,"column_start":5,"column_end":69}},{"value":"/ unless that would put it below the length from `with_min_len()`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109491,"byte_end":109559,"line_start":2654,"line_end":2654,"column_start":5,"column_end":73}},{"value":"/ For example, given min=10 and max=15, a length of 16 will not be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109564,"byte_end":109632,"line_start":2655,"line_end":2655,"column_start":5,"column_end":73}},{"value":"/ split any further.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109637,"byte_end":109659,"line_start":2656,"line_end":2656,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109664,"byte_end":109667,"line_start":2657,"line_end":2657,"column_start":5,"column_end":8}},{"value":"/ Producers like `zip` and `interleave` will use lesser of the two","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109672,"byte_end":109740,"line_start":2658,"line_end":2658,"column_start":5,"column_end":73}},{"value":"/ maximums.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109745,"byte_end":109758,"line_start":2659,"line_end":2659,"column_start":5,"column_end":18}},{"value":"/ Chained iterators and iterators inside `flat_map` may each use","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109763,"byte_end":109829,"line_start":2660,"line_end":2660,"column_start":5,"column_end":71}},{"value":"/ their own maximum length.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109834,"byte_end":109863,"line_start":2661,"line_end":2661,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109868,"byte_end":109871,"line_start":2662,"line_end":2662,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109876,"byte_end":109890,"line_start":2663,"line_end":2663,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109895,"byte_end":109898,"line_start":2664,"line_end":2664,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109903,"byte_end":109910,"line_start":2665,"line_end":2665,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109915,"byte_end":109941,"line_start":2666,"line_end":2666,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109946,"byte_end":109949,"line_start":2667,"line_end":2667,"column_start":5,"column_end":8}},{"value":"/ let max = (0..1_000_000)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109954,"byte_end":109982,"line_start":2668,"line_end":2668,"column_start":5,"column_end":33}},{"value":"/     .into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":109987,"byte_end":110011,"line_start":2669,"line_end":2669,"column_start":5,"column_end":29}},{"value":"/     .with_max_len(1234)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110016,"byte_end":110043,"line_start":2670,"line_end":2670,"column_start":5,"column_end":32}},{"value":"/     .fold(|| 0, |acc, _| acc + 1) // count how many are in this segment","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110048,"byte_end":110123,"line_start":2671,"line_end":2671,"column_start":5,"column_end":80}},{"value":"/     .max().unwrap();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110128,"byte_end":110152,"line_start":2672,"line_end":2672,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110157,"byte_end":110160,"line_start":2673,"line_end":2673,"column_start":5,"column_end":8}},{"value":"/ assert!(max <= 1234);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110165,"byte_end":110190,"line_start":2674,"line_end":2674,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110195,"byte_end":110202,"line_start":2675,"line_end":2675,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3983},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110710,"byte_end":110713,"line_start":2694,"line_end":2694,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::IndexedParallelIterator::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Produces an exact count of how many items this iterator will\n produce, presuming no panic occurs.","sig":null,"attributes":[{"value":"/ Produces an exact count of how many items this iterator will","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110301,"byte_end":110365,"line_start":2680,"line_end":2680,"column_start":5,"column_end":69}},{"value":"/ produce, presuming no panic occurs.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110370,"byte_end":110409,"line_start":2681,"line_end":2681,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110414,"byte_end":110417,"line_start":2682,"line_end":2682,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110422,"byte_end":110436,"line_start":2683,"line_end":2683,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110441,"byte_end":110444,"line_start":2684,"line_end":2684,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110449,"byte_end":110456,"line_start":2685,"line_end":2685,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110461,"byte_end":110487,"line_start":2686,"line_end":2686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110492,"byte_end":110495,"line_start":2687,"line_end":2687,"column_start":5,"column_end":8}},{"value":"/ let par_iter = (0..100).into_par_iter().zip(vec![0; 10]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110500,"byte_end":110561,"line_start":2688,"line_end":2688,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(par_iter.len(), 10);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110566,"byte_end":110601,"line_start":2689,"line_end":2689,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110606,"byte_end":110609,"line_start":2690,"line_end":2690,"column_start":5,"column_end":8}},{"value":"/ let vec: Vec<_> = par_iter.collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110614,"byte_end":110655,"line_start":2691,"line_end":2691,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vec.len(), 10);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110660,"byte_end":110690,"line_start":2692,"line_end":2692,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110695,"byte_end":110702,"line_start":2693,"line_end":2693,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3984},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111413,"byte_end":111418,"line_start":2710,"line_end":2710,"column_start":8,"column_end":13},"name":"drive","qualname":"::iter::IndexedParallelIterator::drive","value":"pub fn drive<C: Consumer<Self::Item>>(Self, C) -> C::Result","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110736,"byte_end":110800,"line_start":2696,"line_end":2696,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110805,"byte_end":110861,"line_start":2697,"line_end":2697,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110866,"byte_end":110869,"line_start":2698,"line_end":2698,"column_start":5,"column_end":8}},{"value":"/ This method causes the iterator `self` to start producing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110874,"byte_end":110935,"line_start":2699,"line_end":2699,"column_start":5,"column_end":66}},{"value":"/ items and to feed them to the consumer `consumer` one by one.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":110940,"byte_end":111005,"line_start":2700,"line_end":2700,"column_start":5,"column_end":70}},{"value":"/ It may split the consumer before doing so to create the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111010,"byte_end":111069,"line_start":2701,"line_end":2701,"column_start":5,"column_end":64}},{"value":"/ opportunity to produce in parallel. If a split does happen, it","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111074,"byte_end":111140,"line_start":2702,"line_end":2702,"column_start":5,"column_end":71}},{"value":"/ will inform the consumer of the index where the split should","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111145,"byte_end":111209,"line_start":2703,"line_end":2703,"column_start":5,"column_end":69}},{"value":"/ occur (unlike `ParallelIterator::drive_unindexed()`).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111214,"byte_end":111271,"line_start":2704,"line_end":2704,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111276,"byte_end":111279,"line_start":2705,"line_end":2705,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111284,"byte_end":111350,"line_start":2706,"line_end":2706,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111355,"byte_end":111369,"line_start":2707,"line_end":2707,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111374,"byte_end":111377,"line_start":2708,"line_end":2708,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111382,"byte_end":111405,"line_start":2709,"line_end":2709,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3986},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112194,"byte_end":112207,"line_start":2727,"line_end":2727,"column_start":8,"column_end":21},"name":"with_producer","qualname":"::iter::IndexedParallelIterator::with_producer","value":"pub fn with_producer<CB: ProducerCallback<Self::Item>>(Self, CB) -> CB::Output","parent":{"krate":0,"index":3925},"children":[],"decl_id":null,"docs":" Internal method used to define the behavior of this parallel\n iterator. You should not need to call this directly.","sig":null,"attributes":[{"value":"/ Internal method used to define the behavior of this parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111482,"byte_end":111546,"line_start":2712,"line_end":2712,"column_start":5,"column_end":69}},{"value":"/ iterator. You should not need to call this directly.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111551,"byte_end":111607,"line_start":2713,"line_end":2713,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111612,"byte_end":111615,"line_start":2714,"line_end":2714,"column_start":5,"column_end":8}},{"value":"/ This method converts the iterator into a producer P and then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111620,"byte_end":111684,"line_start":2715,"line_end":2715,"column_start":5,"column_end":69}},{"value":"/ invokes `callback.callback()` with P. Note that the type of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111689,"byte_end":111752,"line_start":2716,"line_end":2716,"column_start":5,"column_end":68}},{"value":"/ this producer is not defined as part of the API, since","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111757,"byte_end":111815,"line_start":2717,"line_end":2717,"column_start":5,"column_end":63}},{"value":"/ `callback` must be defined generically for all producers. This","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111820,"byte_end":111886,"line_start":2718,"line_end":2718,"column_start":5,"column_end":71}},{"value":"/ allows the producer type to contain references; it also means","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111891,"byte_end":111956,"line_start":2719,"line_end":2719,"column_start":5,"column_end":70}},{"value":"/ that parallel iterators can adjust that type without causing a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":111961,"byte_end":112027,"line_start":2720,"line_end":2720,"column_start":5,"column_end":71}},{"value":"/ breaking change.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112032,"byte_end":112052,"line_start":2721,"line_end":2721,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112057,"byte_end":112060,"line_start":2722,"line_end":2722,"column_start":5,"column_end":8}},{"value":"/ See the [README] for more details on the internals of parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112065,"byte_end":112131,"line_start":2723,"line_end":2723,"column_start":5,"column_end":71}},{"value":"/ iterators.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112136,"byte_end":112150,"line_start":2724,"line_end":2724,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112155,"byte_end":112158,"line_start":2725,"line_end":2725,"column_start":5,"column_end":8}},{"value":"/ [README]: README.md","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112163,"byte_end":112186,"line_start":2726,"line_end":2726,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":3988},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113357,"byte_end":113377,"line_start":2766,"line_end":2766,"column_start":11,"column_end":31},"name":"FromParallelIterator","qualname":"::iter::FromParallelIterator","value":"FromParallelIterator<T>","parent":null,"children":[{"krate":0,"index":3990}],"decl_id":null,"docs":" `FromParallelIterator` implements the creation of a collection\n from a [`ParallelIterator`]. By implementing\n `FromParallelIterator` for a given type, you define how it will be\n created from an iterator.","sig":null,"attributes":[{"value":"/ `FromParallelIterator` implements the creation of a collection","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112280,"byte_end":112346,"line_start":2730,"line_end":2730,"column_start":1,"column_end":67}},{"value":"/ from a [`ParallelIterator`]. By implementing","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112347,"byte_end":112395,"line_start":2731,"line_end":2731,"column_start":1,"column_end":49}},{"value":"/ `FromParallelIterator` for a given type, you define how it will be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112396,"byte_end":112466,"line_start":2732,"line_end":2732,"column_start":1,"column_end":71}},{"value":"/ created from an iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112467,"byte_end":112496,"line_start":2733,"line_end":2733,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112497,"byte_end":112500,"line_start":2734,"line_end":2734,"column_start":1,"column_end":4}},{"value":"/ `FromParallelIterator` is used through [`ParallelIterator`]'s [`collect()`] method.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112501,"byte_end":112588,"line_start":2735,"line_end":2735,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112589,"byte_end":112592,"line_start":2736,"line_end":2736,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112593,"byte_end":112646,"line_start":2737,"line_end":2737,"column_start":1,"column_end":54}},{"value":"/ [`collect()`]: trait.ParallelIterator.html#method.collect","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112647,"byte_end":112708,"line_start":2738,"line_end":2738,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112709,"byte_end":112712,"line_start":2739,"line_end":2739,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112713,"byte_end":112727,"line_start":2740,"line_end":2740,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112728,"byte_end":112731,"line_start":2741,"line_end":2741,"column_start":1,"column_end":4}},{"value":"/ Implementing `FromParallelIterator` for your type:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112732,"byte_end":112786,"line_start":2742,"line_end":2742,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112787,"byte_end":112790,"line_start":2743,"line_end":2743,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112791,"byte_end":112798,"line_start":2744,"line_end":2744,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112799,"byte_end":112825,"line_start":2745,"line_end":2745,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112826,"byte_end":112843,"line_start":2746,"line_end":2746,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112844,"byte_end":112847,"line_start":2747,"line_end":2747,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112848,"byte_end":112870,"line_start":2748,"line_end":2748,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112871,"byte_end":112891,"line_start":2749,"line_end":2749,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112892,"byte_end":112897,"line_start":2750,"line_end":2750,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112898,"byte_end":112901,"line_start":2751,"line_end":2751,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> FromParallelIterator<T> for BlackHole {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112902,"byte_end":112959,"line_start":2752,"line_end":2752,"column_start":1,"column_end":58}},{"value":"/     fn from_par_iter<I>(par_iter: I) -> Self","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":112960,"byte_end":113008,"line_start":2753,"line_end":2753,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113009,"byte_end":113060,"line_start":2754,"line_end":2754,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113061,"byte_end":113070,"line_start":2755,"line_end":2755,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113071,"byte_end":113123,"line_start":2756,"line_end":2756,"column_start":1,"column_end":53}},{"value":"/         BlackHole {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113124,"byte_end":113147,"line_start":2757,"line_end":2757,"column_start":1,"column_end":24}},{"value":"/             mass: par_iter.count() * mem::size_of::<T>(),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113148,"byte_end":113209,"line_start":2758,"line_end":2758,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113210,"byte_end":113223,"line_start":2759,"line_end":2759,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113224,"byte_end":113233,"line_start":2760,"line_end":2760,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113234,"byte_end":113239,"line_start":2761,"line_end":2761,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113240,"byte_end":113243,"line_start":2762,"line_end":2762,"column_start":1,"column_end":4}},{"value":"/ let bh: BlackHole = (0i32..1000).into_par_iter().collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113244,"byte_end":113307,"line_start":2763,"line_end":2763,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113308,"byte_end":113338,"line_start":2764,"line_end":2764,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113339,"byte_end":113346,"line_start":2765,"line_end":2765,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3990},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114355,"byte_end":114368,"line_start":2785,"line_end":2785,"column_start":8,"column_end":21},"name":"from_par_iter","qualname":"::iter::FromParallelIterator::from_par_iter","value":"pub fn from_par_iter<I>(I) -> Self where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":3988},"children":[],"decl_id":null,"docs":" Creates an instance of the collection from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Creates an instance of the collection from the parallel iterator `par_iter`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113406,"byte_end":113486,"line_start":2770,"line_end":2770,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113491,"byte_end":113494,"line_start":2771,"line_end":2771,"column_start":5,"column_end":8}},{"value":"/ If your collection is not naturally parallel, the easiest (and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113499,"byte_end":113565,"line_start":2772,"line_end":2772,"column_start":5,"column_end":71}},{"value":"/ fastest) way to do this is often to collect `par_iter` into a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113570,"byte_end":113635,"line_start":2773,"line_end":2773,"column_start":5,"column_end":70}},{"value":"/ [`LinkedList`] or other intermediate data structure and then","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113640,"byte_end":113704,"line_start":2774,"line_end":2774,"column_start":5,"column_end":69}},{"value":"/ sequentially extend your collection. However, a more 'native'","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113709,"byte_end":113774,"line_start":2775,"line_end":2775,"column_start":5,"column_end":70}},{"value":"/ technique is to use the [`par_iter.fold`] or","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113779,"byte_end":113827,"line_start":2776,"line_end":2776,"column_start":5,"column_end":53}},{"value":"/ [`par_iter.fold_with`] methods to create the collection.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113832,"byte_end":113892,"line_start":2777,"line_end":2777,"column_start":5,"column_end":65}},{"value":"/ Alternatively, if your collection is 'natively' parallel, you","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113897,"byte_end":113962,"line_start":2778,"line_end":2778,"column_start":5,"column_end":70}},{"value":"/ can use `par_iter.for_each` to process each element in turn.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":113967,"byte_end":114031,"line_start":2779,"line_end":2779,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114036,"byte_end":114039,"line_start":2780,"line_end":2780,"column_start":5,"column_end":8}},{"value":"/ [`LinkedList`]: https://doc.rust-lang.org/std/collections/struct.LinkedList.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114044,"byte_end":114128,"line_start":2781,"line_end":2781,"column_start":5,"column_end":89}},{"value":"/ [`par_iter.fold`]: trait.ParallelIterator.html#method.fold","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114133,"byte_end":114195,"line_start":2782,"line_end":2782,"column_start":5,"column_end":67}},{"value":"/ [`par_iter.fold_with`]: trait.ParallelIterator.html#method.fold_with","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114200,"byte_end":114272,"line_start":2783,"line_end":2783,"column_start":5,"column_end":77}},{"value":"/ [`par_iter.for_each`]: trait.ParallelIterator.html#method.for_each","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114277,"byte_end":114347,"line_start":2784,"line_end":2784,"column_start":5,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":3992},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115267,"byte_end":115281,"line_start":2821,"line_end":2821,"column_start":11,"column_end":25},"name":"ParallelExtend","qualname":"::iter::ParallelExtend","value":"ParallelExtend<T>","parent":null,"children":[{"krate":0,"index":3994}],"decl_id":null,"docs":" `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","sig":null,"attributes":[{"value":"/ `ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114449,"byte_end":114540,"line_start":2790,"line_end":2790,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114541,"byte_end":114544,"line_start":2791,"line_end":2791,"column_start":1,"column_end":4}},{"value":"/ [`ParallelIterator`]: trait.ParallelIterator.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114545,"byte_end":114598,"line_start":2792,"line_end":2792,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114599,"byte_end":114602,"line_start":2793,"line_end":2793,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114603,"byte_end":114617,"line_start":2794,"line_end":2794,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114618,"byte_end":114621,"line_start":2795,"line_end":2795,"column_start":1,"column_end":4}},{"value":"/ Implementing `ParallelExtend` for your type:","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114622,"byte_end":114670,"line_start":2796,"line_end":2796,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114671,"byte_end":114674,"line_start":2797,"line_end":2797,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114675,"byte_end":114682,"line_start":2798,"line_end":2798,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114683,"byte_end":114709,"line_start":2799,"line_end":2799,"column_start":1,"column_end":27}},{"value":"/ use std::mem;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114710,"byte_end":114727,"line_start":2800,"line_end":2800,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114728,"byte_end":114731,"line_start":2801,"line_end":2801,"column_start":1,"column_end":4}},{"value":"/ struct BlackHole {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114732,"byte_end":114754,"line_start":2802,"line_end":2802,"column_start":1,"column_end":23}},{"value":"/     mass: usize,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114755,"byte_end":114775,"line_start":2803,"line_end":2803,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114776,"byte_end":114781,"line_start":2804,"line_end":2804,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114782,"byte_end":114785,"line_start":2805,"line_end":2805,"column_start":1,"column_end":4}},{"value":"/ impl<T: Send> ParallelExtend<T> for BlackHole {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114786,"byte_end":114837,"line_start":2806,"line_end":2806,"column_start":1,"column_end":52}},{"value":"/     fn par_extend<I>(&mut self, par_iter: I)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114838,"byte_end":114886,"line_start":2807,"line_end":2807,"column_start":1,"column_end":49}},{"value":"/         where I: IntoParallelIterator<Item = T>","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114887,"byte_end":114938,"line_start":2808,"line_end":2808,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114939,"byte_end":114948,"line_start":2809,"line_end":2809,"column_start":1,"column_end":10}},{"value":"/         let par_iter = par_iter.into_par_iter();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":114949,"byte_end":115001,"line_start":2810,"line_end":2810,"column_start":1,"column_end":53}},{"value":"/         self.mass += par_iter.count() * mem::size_of::<T>();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115002,"byte_end":115066,"line_start":2811,"line_end":2811,"column_start":1,"column_end":65}},{"value":"/     }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115067,"byte_end":115076,"line_start":2812,"line_end":2812,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115077,"byte_end":115082,"line_start":2813,"line_end":2813,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115083,"byte_end":115086,"line_start":2814,"line_end":2814,"column_start":1,"column_end":4}},{"value":"/ let mut bh = BlackHole { mass: 0 };","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115087,"byte_end":115126,"line_start":2815,"line_end":2815,"column_start":1,"column_end":40}},{"value":"/ bh.par_extend(0i32..1000);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115127,"byte_end":115157,"line_start":2816,"line_end":2816,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(bh.mass, 4000);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115158,"byte_end":115188,"line_start":2817,"line_end":2817,"column_start":1,"column_end":31}},{"value":"/ bh.par_extend(0i64..10);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115189,"byte_end":115217,"line_start":2818,"line_end":2818,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(bh.mass, 4080);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115218,"byte_end":115248,"line_start":2819,"line_end":2819,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115249,"byte_end":115256,"line_start":2820,"line_end":2820,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3994},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115709,"byte_end":115719,"line_start":2838,"line_end":2838,"column_start":8,"column_end":18},"name":"par_extend","qualname":"::iter::ParallelExtend::par_extend","value":"pub fn par_extend<I>(&mut Self, I) where I: IntoParallelIterator<Item = T>","parent":{"krate":0,"index":3992},"children":[],"decl_id":null,"docs":" Extends an instance of the collection with the elements drawn\n from the parallel iterator `par_iter`.","sig":null,"attributes":[{"value":"/ Extends an instance of the collection with the elements drawn","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115310,"byte_end":115375,"line_start":2825,"line_end":2825,"column_start":5,"column_end":70}},{"value":"/ from the parallel iterator `par_iter`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115380,"byte_end":115422,"line_start":2826,"line_end":2826,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115427,"byte_end":115430,"line_start":2827,"line_end":2827,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115435,"byte_end":115449,"line_start":2828,"line_end":2828,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115454,"byte_end":115457,"line_start":2829,"line_end":2829,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115462,"byte_end":115469,"line_start":2830,"line_end":2830,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115474,"byte_end":115500,"line_start":2831,"line_end":2831,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115505,"byte_end":115508,"line_start":2832,"line_end":2832,"column_start":5,"column_end":8}},{"value":"/ let mut vec = vec![];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115513,"byte_end":115538,"line_start":2833,"line_end":2833,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend(0..5);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115543,"byte_end":115568,"line_start":2834,"line_end":2834,"column_start":5,"column_end":30}},{"value":"/ vec.par_extend((0..5).into_par_iter().map(|i| i * i));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115573,"byte_end":115631,"line_start":2835,"line_end":2835,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(vec, [0, 1, 2, 3, 4, 0, 1, 4, 9, 16]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115636,"byte_end":115689,"line_start":2836,"line_end":2836,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115694,"byte_end":115701,"line_start":2837,"line_end":2837,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":3997},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116091,"byte_end":116094,"line_start":2849,"line_end":2849,"column_start":15,"column_end":18},"name":"Try","qualname":"::iter::private::Try","value":"Try","parent":null,"children":[{"krate":0,"index":6740},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002}],"decl_id":null,"docs":" Clone of `std::ops::Try`.","sig":null,"attributes":[{"value":"/ Clone of `std::ops::Try`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":115970,"byte_end":115999,"line_start":2846,"line_end":2846,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116004,"byte_end":116007,"line_start":2847,"line_end":2847,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116012,"byte_end":116076,"line_start":2848,"line_end":2848,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":3998},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116136,"byte_end":116138,"line_start":2852,"line_end":2852,"column_start":14,"column_end":16},"name":"Ok","qualname":"::iter::private::Try::Ok","value":"type Ok;","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3999},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116153,"byte_end":116158,"line_start":2853,"line_end":2853,"column_start":14,"column_end":19},"name":"Error","qualname":"::iter::private::Try::Error","value":"type Error;","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4000},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116171,"byte_end":116182,"line_start":2854,"line_end":2854,"column_start":12,"column_end":23},"name":"into_result","qualname":"::iter::private::Try::into_result","value":"pub fn into_result(Self) -> Result<Self::Ok, Self::Error>","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116234,"byte_end":116241,"line_start":2855,"line_end":2855,"column_start":12,"column_end":19},"name":"from_ok","qualname":"::iter::private::Try::from_ok","value":"pub fn from_ok(Self::Ok) -> Self","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116275,"byte_end":116285,"line_start":2856,"line_end":2856,"column_start":12,"column_end":22},"name":"from_error","qualname":"::iter::private::Try::from_error","value":"pub fn from_error(Self::Error) -> Self","parent":{"krate":0,"index":3997},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4018},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","parent":null,"children":[{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":4022},{"krate":0,"index":4023},{"krate":0,"index":6743},{"krate":0,"index":6749},{"krate":0,"index":6746},{"krate":0,"index":4024},{"krate":0,"index":4029},{"krate":0,"index":4035},{"krate":0,"index":6752},{"krate":0,"index":6756},{"krate":0,"index":4042},{"krate":0,"index":4046},{"krate":0,"index":6768},{"krate":0,"index":6760},{"krate":0,"index":6775},{"krate":0,"index":6779},{"krate":0,"index":4052},{"krate":0,"index":6791},{"krate":0,"index":6783},{"krate":0,"index":4058},{"krate":0,"index":4061},{"krate":0,"index":4067}],"decl_id":null,"docs":" Parallel iterator types for [options][std::option]","sig":null,"attributes":[{"value":"! Parallel iterator types for [options][std::option]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387158,"byte_end":387212,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387213,"byte_end":387216,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387217,"byte_end":387295,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387296,"byte_end":387334,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387335,"byte_end":387338,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::option]: https://doc.rust-lang.org/stable/std/option/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387339,"byte_end":387402,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6743},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388010,"byte_end":388018,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":6745}],"decl_id":null,"docs":" A parallel iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over the value in [`Some`] variant of an [`Option`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387502,"byte_end":387578,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387579,"byte_end":387582,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387583,"byte_end":387665,"line_start":14,"line_end":14,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387666,"byte_end":387669,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_par_iter`] function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387670,"byte_end":387733,"line_start":16,"line_end":16,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387734,"byte_end":387737,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387738,"byte_end":387807,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387808,"byte_end":387888,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ [`into_par_iter`]: ../iter/trait.IntoParallelIterator.html#tymethod.into_par_iter","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":387889,"byte_end":387974,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6752},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389660,"byte_end":389664,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6755}],"decl_id":null,"docs":" A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389165,"byte_end":389247,"line_start":77,"line_end":77,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389248,"byte_end":389251,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389252,"byte_end":389334,"line_start":79,"line_end":79,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389335,"byte_end":389338,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter`] function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389339,"byte_end":389397,"line_start":81,"line_end":81,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389398,"byte_end":389401,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389402,"byte_end":389471,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389472,"byte_end":389552,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ [`par_iter`]: ../iter/trait.IntoParallelRefIterator.html#tymethod.par_iter","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389553,"byte_end":389631,"line_start":85,"line_end":85,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":6775},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390698,"byte_end":390705,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":6778}],"decl_id":null,"docs":" A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"/ A parallel iterator over a mutable reference to the [`Some`] variant of an [`Option`].","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390180,"byte_end":390270,"line_start":115,"line_end":115,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390271,"byte_end":390274,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390275,"byte_end":390357,"line_start":117,"line_end":117,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390358,"byte_end":390361,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`par_iter_mut`] function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390362,"byte_end":390424,"line_start":119,"line_end":119,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390425,"byte_end":390428,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ [`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390429,"byte_end":390498,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ [`Some`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390499,"byte_end":390579,"line_start":122,"line_end":122,"column_start":1,"column_end":81}},{"value":"/ [`par_iter_mut`]: ../iter/trait.IntoParallelRefMutIterator.html#tymethod.par_iter_mut","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":390580,"byte_end":390669,"line_start":123,"line_end":123,"column_start":1,"column_end":90}}]},{"kind":"Mod","id":{"krate":0,"index":4076},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","parent":null,"children":[{"krate":0,"index":4077},{"krate":0,"index":4078},{"krate":0,"index":4079},{"krate":0,"index":4080},{"krate":0,"index":4081},{"krate":0,"index":4082},{"krate":0,"index":4083},{"krate":0,"index":4084},{"krate":0,"index":4085},{"krate":0,"index":4086},{"krate":0,"index":4087}],"decl_id":null,"docs":" The rayon prelude imports the various `ParallelIterator` traits.\n The intention is that one can include `use rayon::prelude::*` and\n have easy access to the various traits and methods you will need.\n","sig":null,"attributes":[{"value":"! The rayon prelude imports the various `ParallelIterator` traits.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392597,"byte_end":392665,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"! The intention is that one can include `use rayon::prelude::*` and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392666,"byte_end":392735,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"! have easy access to the various traits and methods you will need.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/prelude.rs","byte_start":392736,"byte_end":392805,"line_start":3,"line_end":3,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":4088},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::range","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","parent":null,"children":[{"krate":0,"index":4089},{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":4092},{"krate":0,"index":6798},{"krate":0,"index":6804},{"krate":0,"index":6801},{"krate":0,"index":4093},{"krate":0,"index":4098},{"krate":0,"index":4101},{"krate":0,"index":4107},{"krate":0,"index":6807},{"krate":0,"index":6812},{"krate":0,"index":6818},{"krate":0,"index":6823},{"krate":0,"index":6828},{"krate":0,"index":6834},{"krate":0,"index":6839},{"krate":0,"index":6844},{"krate":0,"index":6850},{"krate":0,"index":6855},{"krate":0,"index":6860},{"krate":0,"index":6866},{"krate":0,"index":6871},{"krate":0,"index":6876},{"krate":0,"index":6882},{"krate":0,"index":6887},{"krate":0,"index":6892},{"krate":0,"index":6898},{"krate":0,"index":6903},{"krate":0,"index":6908},{"krate":0,"index":6914},{"krate":0,"index":6919},{"krate":0,"index":6924},{"krate":0,"index":6930},{"krate":0,"index":6935},{"krate":0,"index":6937},{"krate":0,"index":6945},{"krate":0,"index":6950},{"krate":0,"index":6952},{"krate":0,"index":6960},{"krate":0,"index":6965},{"krate":0,"index":6967},{"krate":0,"index":6975},{"krate":0,"index":6980},{"krate":0,"index":6982},{"krate":0,"index":6990}],"decl_id":null,"docs":" Parallel iterator types for [ranges][std::range],\n the type for values created by `a..b` expressions","sig":null,"attributes":[{"value":"! Parallel iterator types for [ranges][std::range],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393261,"byte_end":393314,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"! the type for values created by `a..b` expressions","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393315,"byte_end":393368,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393369,"byte_end":393372,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393373,"byte_end":393451,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393452,"byte_end":393495,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393496,"byte_end":393499,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393500,"byte_end":393507,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393508,"byte_end":393534,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393535,"byte_end":393538,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! let r = (0..100u64).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393539,"byte_end":393578,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"!                    .sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393579,"byte_end":393609,"line_start":11,"line_end":11,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393610,"byte_end":393613,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! // compare result with sequential calculation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393614,"byte_end":393663,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! assert_eq!((0..100).sum::<u64>(), r);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393664,"byte_end":393705,"line_start":14,"line_end":14,"column_start":1,"column_end":42}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393706,"byte_end":393713,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393714,"byte_end":393717,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! [std::range]: https://doc.rust-lang.org/core/ops/struct.Range.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393718,"byte_end":393788,"line_start":17,"line_end":17,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6798},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394607,"byte_end":394611,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6800}],"decl_id":null,"docs":" Parallel iterator over a range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over a range, implemented for all integer types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393878,"byte_end":393948,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393949,"byte_end":393952,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":393953,"byte_end":394021,"line_start":26,"line_end":26,"column_start":1,"column_end":69}},{"value":"/ which is not implemented for `u64`, `i64`, `u128`, or `i128`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394022,"byte_end":394087,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394088,"byte_end":394091,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394092,"byte_end":394099,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394100,"byte_end":394126,"line_start":30,"line_end":30,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394127,"byte_end":394130,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let p = (0..25usize).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394131,"byte_end":394171,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/                   .zip(0..25usize)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394172,"byte_end":394210,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394211,"byte_end":394276,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394277,"byte_end":394319,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/                   .sum::<usize>();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394320,"byte_end":394358,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394359,"byte_end":394362,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let s = (0..25usize).zip(0..25)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394363,"byte_end":394398,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394399,"byte_end":394464,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394465,"byte_end":394507,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394508,"byte_end":394537,"line_start":41,"line_end":41,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394538,"byte_end":394541,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394542,"byte_end":394563,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394564,"byte_end":394571,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":4111},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range_inclusive","qualname":"::range_inclusive","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","parent":null,"children":[{"krate":0,"index":4112},{"krate":0,"index":4113},{"krate":0,"index":4114},{"krate":0,"index":6995},{"krate":0,"index":7001},{"krate":0,"index":6998},{"krate":0,"index":4115},{"krate":0,"index":4118},{"krate":0,"index":7010},{"krate":0,"index":7004},{"krate":0,"index":7021},{"krate":0,"index":7015},{"krate":0,"index":7032},{"krate":0,"index":7026},{"krate":0,"index":7043},{"krate":0,"index":7037},{"krate":0,"index":7048},{"krate":0,"index":7053},{"krate":0,"index":7058},{"krate":0,"index":7063},{"krate":0,"index":7068},{"krate":0,"index":7073},{"krate":0,"index":7078},{"krate":0,"index":7083}],"decl_id":null,"docs":" Parallel iterator types for [inclusive ranges][std::range],\n the type for values created by `a..=b` expressions","sig":null,"attributes":[{"value":"! Parallel iterator types for [inclusive ranges][std::range],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402018,"byte_end":402081,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"! the type for values created by `a..=b` expressions","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402082,"byte_end":402136,"line_start":2,"line_end":2,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402137,"byte_end":402140,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you have","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402141,"byte_end":402219,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! need to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402220,"byte_end":402263,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402264,"byte_end":402267,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402268,"byte_end":402275,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"! use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402276,"byte_end":402302,"line_start":8,"line_end":8,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402303,"byte_end":402306,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! let r = (0..=100u64).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402307,"byte_end":402347,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"!                     .sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402348,"byte_end":402379,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402380,"byte_end":402383,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! // compare result with sequential calculation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402384,"byte_end":402433,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! assert_eq!((0..=100).sum::<u64>(), r);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402434,"byte_end":402476,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"! ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402477,"byte_end":402484,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402485,"byte_end":402488,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! [std::range]: https://doc.rust-lang.org/core/ops/struct.RangeInclusive.html","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402489,"byte_end":402568,"line_start":17,"line_end":17,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":6995},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403388,"byte_end":403392,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"Iter","qualname":"::range_inclusive::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":6997}],"decl_id":null,"docs":" Parallel iterator over an inclusive range, implemented for all integer types.","sig":null,"attributes":[{"value":"/ Parallel iterator over an inclusive range, implemented for all integer types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402651,"byte_end":402732,"line_start":23,"line_end":23,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402733,"byte_end":402736,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ **Note:** The `zip` operation requires `IndexedParallelIterator`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402737,"byte_end":402805,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ which is only implemented for `u8`, `i8`, `u16`, and `i16`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402806,"byte_end":402869,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402870,"byte_end":402873,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402874,"byte_end":402881,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402882,"byte_end":402908,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402909,"byte_end":402912,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let p = (0..=25u16).into_par_iter()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402913,"byte_end":402952,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/                   .zip(0..=25u16)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402953,"byte_end":402990,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":402991,"byte_end":403056,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403057,"byte_end":403099,"line_start":34,"line_end":34,"column_start":1,"column_end":43}},{"value":"/                   .sum::<u16>();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403100,"byte_end":403136,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403137,"byte_end":403140,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let s = (0..=25u16).zip(0..=25u16)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403141,"byte_end":403179,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/                   .filter(|&(x, y)| x % 5 == 0 || y % 5 == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403180,"byte_end":403245,"line_start":38,"line_end":38,"column_start":1,"column_end":66}},{"value":"/                   .map(|(x, y)| x * y)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403246,"byte_end":403288,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/                   .sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403289,"byte_end":403318,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403319,"byte_end":403322,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(p, s);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403323,"byte_end":403344,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403345,"byte_end":403352,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":4126},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","parent":null,"children":[{"krate":0,"index":4127},{"krate":0,"index":4128},{"krate":0,"index":4129},{"krate":0,"index":4130},{"krate":0,"index":7088},{"krate":0,"index":7094},{"krate":0,"index":7091},{"krate":0,"index":4131},{"krate":0,"index":7104},{"krate":0,"index":7097},{"krate":0,"index":7110},{"krate":0,"index":7114},{"krate":0,"index":4137},{"krate":0,"index":4141},{"krate":0,"index":7126},{"krate":0,"index":7118},{"krate":0,"index":7133},{"krate":0,"index":7137},{"krate":0,"index":4148},{"krate":0,"index":7149},{"krate":0,"index":7141},{"krate":0,"index":4155}],"decl_id":null,"docs":" Parallel iterator types for [results][std::result]","sig":null,"attributes":[{"value":"! Parallel iterator types for [results][std::result]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":407969,"byte_end":408023,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408024,"byte_end":408027,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408028,"byte_end":408106,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408107,"byte_end":408145,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408146,"byte_end":408149,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::result]: https://doc.rust-lang.org/stable/std/result/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408150,"byte_end":408213,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7088},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408379,"byte_end":408387,"line_start":16,"line_end":16,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":7090}],"decl_id":null,"docs":" Parallel iterator over a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a result","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408308,"byte_end":408343,"line_start":14,"line_end":14,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":7110},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408829,"byte_end":408833,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7113}],"decl_id":null,"docs":" Parallel iterator over an immutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over an immutable reference to a result","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408739,"byte_end":408800,"line_start":36,"line_end":36,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":7133},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":409455,"byte_end":409462,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7136}],"decl_id":null,"docs":" Parallel iterator over a mutable reference to a result\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a mutable reference to a result","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":409368,"byte_end":409426,"line_start":66,"line_end":66,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":4166},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","parent":null,"children":[{"krate":0,"index":4167},{"krate":0,"index":4248},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4333},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4336},{"krate":0,"index":4337},{"krate":0,"index":4338},{"krate":0,"index":7910},{"krate":0,"index":4339},{"krate":0,"index":4340},{"krate":0,"index":4348},{"krate":0,"index":4351},{"krate":0,"index":4374},{"krate":0,"index":4377},{"krate":0,"index":4383},{"krate":0,"index":4389},{"krate":0,"index":4395},{"krate":0,"index":7178},{"krate":0,"index":7182},{"krate":0,"index":4401},{"krate":0,"index":4405},{"krate":0,"index":4412},{"krate":0,"index":4420},{"krate":0,"index":4424},{"krate":0,"index":7186},{"krate":0,"index":7191},{"krate":0,"index":4431},{"krate":0,"index":4435},{"krate":0,"index":4442},{"krate":0,"index":4450},{"krate":0,"index":4455},{"krate":0,"index":7195},{"krate":0,"index":7201},{"krate":0,"index":4462},{"krate":0,"index":4466},{"krate":0,"index":4470},{"krate":0,"index":4477},{"krate":0,"index":4485},{"krate":0,"index":4490},{"krate":0,"index":7205},{"krate":0,"index":7210},{"krate":0,"index":4497},{"krate":0,"index":4501},{"krate":0,"index":4508},{"krate":0,"index":4516},{"krate":0,"index":4521},{"krate":0,"index":7214},{"krate":0,"index":7218},{"krate":0,"index":4528},{"krate":0,"index":4535},{"krate":0,"index":4543},{"krate":0,"index":4547},{"krate":0,"index":7222},{"krate":0,"index":7227},{"krate":0,"index":4554},{"krate":0,"index":4561},{"krate":0,"index":4569},{"krate":0,"index":4574},{"krate":0,"index":7231},{"krate":0,"index":7237},{"krate":0,"index":4581},{"krate":0,"index":4587},{"krate":0,"index":4594},{"krate":0,"index":4602},{"krate":0,"index":4607},{"krate":0,"index":4614},{"krate":0,"index":4620},{"krate":0,"index":4625},{"krate":0,"index":4630},{"krate":0,"index":4637},{"krate":0,"index":4648},{"krate":0,"index":4654},{"krate":0,"index":4659},{"krate":0,"index":4666}],"decl_id":null,"docs":" Parallel iterator types for [slices][std::slice]","sig":null,"attributes":[{"value":"! Parallel iterator types for [slices][std::slice]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411379,"byte_end":411431,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411432,"byte_end":411435,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411436,"byte_end":411514,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411515,"byte_end":411553,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411554,"byte_end":411557,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::slice]: https://doc.rust-lang.org/stable/std/slice/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411558,"byte_end":411619,"line_start":6,"line_end":6,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":4340},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411961,"byte_end":411974,"line_start":25,"line_end":25,"column_start":11,"column_end":24},"name":"ParallelSlice","qualname":"::slice::ParallelSlice","value":"ParallelSlice<T: Sync>","parent":null,"children":[{"krate":0,"index":4342},{"krate":0,"index":4343},{"krate":0,"index":4345},{"krate":0,"index":4346},{"krate":0,"index":4347}],"decl_id":null,"docs":" Parallel extensions for slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for slices.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411915,"byte_end":411950,"line_start":24,"line_end":24,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4342},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412093,"byte_end":412110,"line_start":28,"line_end":28,"column_start":8,"column_end":25},"name":"as_parallel_slice","qualname":"::slice::ParallelSlice::as_parallel_slice","value":"pub fn as_parallel_slice(&Self) -> &[T]","parent":{"krate":0,"index":4340},"children":[],"decl_id":null,"docs":" Returns a plain slice, which is used to implement the rest of the\n parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain slice, which is used to implement the rest of the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":411990,"byte_end":412059,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ parallel methods.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412064,"byte_end":412085,"line_start":27,"line_end":27,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":4343},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412543,"byte_end":412552,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"par_split","qualname":"::slice::ParallelSlice::par_split","value":"pub fn par_split<P>(&Self, P) -> Split<, T, P> where P: Fn(&T) -> bool +\nSync + Send","parent":{"krate":0,"index":4340},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over subslices separated by elements that\n match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over subslices separated by elements that","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412132,"byte_end":412205,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ match the separator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412210,"byte_end":412234,"line_start":31,"line_end":31,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412239,"byte_end":412242,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412247,"byte_end":412261,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412266,"byte_end":412269,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412274,"byte_end":412281,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412286,"byte_end":412312,"line_start":36,"line_end":36,"column_start":5,"column_end":31}},{"value":"/ let smallest = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412317,"byte_end":412369,"line_start":37,"line_end":37,"column_start":5,"column_end":57}},{"value":"/     .par_split(|i| *i == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412374,"byte_end":412405,"line_start":38,"line_end":38,"column_start":5,"column_end":36}},{"value":"/     .map(|numbers| numbers.iter().min().unwrap())","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412410,"byte_end":412463,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/     .min();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412468,"byte_end":412483,"line_start":40,"line_end":40,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(Some(&1), smallest);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412488,"byte_end":412523,"line_start":41,"line_end":41,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412528,"byte_end":412535,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4345},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413086,"byte_end":413097,"line_start":63,"line_end":63,"column_start":8,"column_end":19},"name":"par_windows","qualname":"::slice::ParallelSlice::par_windows","value":"pub fn par_windows(&Self, usize) -> Windows<, T>","parent":{"krate":0,"index":4340},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over all contiguous windows of length\n `window_size`. The windows overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over all contiguous windows of length","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412758,"byte_end":412827,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ `window_size`. The windows overlap.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412832,"byte_end":412871,"line_start":54,"line_end":54,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412876,"byte_end":412879,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412884,"byte_end":412898,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412903,"byte_end":412906,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412911,"byte_end":412918,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412923,"byte_end":412949,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/ let windows: Vec<_> = [1, 2, 3].par_windows(2).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":412954,"byte_end":413015,"line_start":60,"line_end":60,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(vec![[1, 2], [2, 3]], windows);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413020,"byte_end":413066,"line_start":61,"line_end":61,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413071,"byte_end":413078,"line_start":62,"line_end":62,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4346},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413810,"byte_end":413820,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"par_chunks","qualname":"::slice::ParallelSlice::par_chunks","value":"pub fn par_chunks(&Self, usize) -> Chunks<, T>","parent":{"krate":0,"index":4340},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413254,"byte_end":413323,"line_start":70,"line_end":70,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413328,"byte_end":413376,"line_start":71,"line_end":71,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413381,"byte_end":413384,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413389,"byte_end":413454,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413459,"byte_end":413530,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413535,"byte_end":413580,"line_start":75,"line_end":75,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413585,"byte_end":413588,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413593,"byte_end":413607,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413612,"byte_end":413615,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413620,"byte_end":413627,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413632,"byte_end":413658,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks(2).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413663,"byte_end":413728,"line_start":81,"line_end":81,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4], &[5]]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413733,"byte_end":413790,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":413795,"byte_end":413802,"line_start":83,"line_end":83,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4347},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414597,"byte_end":414613,"line_start":106,"line_end":106,"column_start":8,"column_end":24},"name":"par_chunks_exact","qualname":"::slice::ParallelSlice::par_chunks_exact","value":"pub fn par_chunks_exact(&Self, usize) -> ChunksExact<, T>","parent":{"krate":0,"index":4340},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414038,"byte_end":414099,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks do not overlap.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414104,"byte_end":414152,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414157,"byte_end":414160,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414165,"byte_end":414234,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414239,"byte_end":414304,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414309,"byte_end":414367,"line_start":97,"line_end":97,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414372,"byte_end":414375,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414380,"byte_end":414394,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414399,"byte_end":414402,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414407,"byte_end":414414,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414419,"byte_end":414445,"line_start":102,"line_end":102,"column_start":5,"column_end":31}},{"value":"/ let chunks: Vec<_> = [1, 2, 3, 4, 5].par_chunks_exact(2).collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414450,"byte_end":414521,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chunks, vec![&[1, 2][..], &[3, 4]]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414526,"byte_end":414577,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":414582,"byte_end":414589,"line_start":105,"line_end":105,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4351},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415198,"byte_end":415214,"line_start":128,"line_end":128,"column_start":11,"column_end":27},"name":"ParallelSliceMut","qualname":"::slice::ParallelSliceMut","value":"ParallelSliceMut<T: Send>","parent":null,"children":[{"krate":0,"index":4353},{"krate":0,"index":4354},{"krate":0,"index":4356},{"krate":0,"index":4357},{"krate":0,"index":4358},{"krate":0,"index":4359},{"krate":0,"index":4362},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4370}],"decl_id":null,"docs":" Parallel extensions for mutable slices.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for mutable slices.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415144,"byte_end":415187,"line_start":127,"line_end":127,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4353},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415341,"byte_end":415362,"line_start":131,"line_end":131,"column_start":8,"column_end":29},"name":"as_parallel_slice_mut","qualname":"::slice::ParallelSliceMut::as_parallel_slice_mut","value":"pub fn as_parallel_slice_mut(&mut Self) -> &mut [T]","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Returns a plain mutable slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain mutable slice, which is used to implement the rest of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415230,"byte_end":415303,"line_start":129,"line_end":129,"column_start":5,"column_end":78}},{"value":"/ the parallel methods.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415308,"byte_end":415333,"line_start":130,"line_end":130,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4354},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415811,"byte_end":415824,"line_start":145,"line_end":145,"column_start":8,"column_end":21},"name":"par_split_mut","qualname":"::slice::ParallelSliceMut::par_split_mut","value":"pub fn par_split_mut<P>(&mut Self, P) -> SplitMut<, T, P> where P: Fn(&T) ->\nbool + Sync + Send","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over mutable subslices separated by\n elements that match the separator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over mutable subslices separated by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415392,"byte_end":415459,"line_start":133,"line_end":133,"column_start":5,"column_end":72}},{"value":"/ elements that match the separator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415464,"byte_end":415502,"line_start":134,"line_end":134,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415507,"byte_end":415510,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415515,"byte_end":415529,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415534,"byte_end":415537,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415542,"byte_end":415549,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415554,"byte_end":415580,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 0, 2, 4, 8, 0, 3, 6, 9];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415585,"byte_end":415639,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ array.par_split_mut(|i| *i == 0)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415644,"byte_end":415680,"line_start":141,"line_end":141,"column_start":5,"column_end":41}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415685,"byte_end":415729,"line_start":142,"line_end":142,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 0, 8, 4, 2, 0, 9, 6, 3]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415734,"byte_end":415791,"line_start":143,"line_end":143,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":415796,"byte_end":415803,"line_start":144,"line_end":144,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4356},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416650,"byte_end":416664,"line_start":171,"line_end":171,"column_start":8,"column_end":22},"name":"par_chunks_mut","qualname":"::slice::ParallelSliceMut::par_chunks_mut","value":"pub fn par_chunks_mut(&mut Self, usize) -> ChunksMut<, T>","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over at most `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over at most `chunk_size` elements of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416044,"byte_end":416113,"line_start":155,"line_end":155,"column_start":5,"column_end":74}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416118,"byte_end":416182,"line_start":156,"line_end":156,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416187,"byte_end":416190,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ If the number of elements in the iterator is not divisible by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416195,"byte_end":416260,"line_start":158,"line_end":158,"column_start":5,"column_end":70}},{"value":"/ `chunk_size`, the last chunk may be shorter than `chunk_size`.  All","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416265,"byte_end":416336,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ other chunks will have that exact length.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416341,"byte_end":416386,"line_start":160,"line_end":160,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416391,"byte_end":416394,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416399,"byte_end":416413,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416418,"byte_end":416421,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416426,"byte_end":416433,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416438,"byte_end":416464,"line_start":165,"line_end":165,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416469,"byte_end":416505,"line_start":166,"line_end":166,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_mut(2)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416510,"byte_end":416537,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416542,"byte_end":416586,"line_start":168,"line_end":168,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [2, 1, 4, 3, 5]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416591,"byte_end":416630,"line_start":169,"line_end":169,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416635,"byte_end":416642,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4357},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417511,"byte_end":417531,"line_start":195,"line_end":195,"column_start":8,"column_end":28},"name":"par_chunks_exact_mut","qualname":"::slice::ParallelSliceMut::par_chunks_exact_mut","value":"pub fn par_chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, T>","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over `chunk_size` elements of\n `self` at a time. The chunks are mutable and do not overlap.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over `chunk_size` elements of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416896,"byte_end":416957,"line_start":179,"line_end":179,"column_start":5,"column_end":66}},{"value":"/ `self` at a time. The chunks are mutable and do not overlap.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":416962,"byte_end":417026,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417031,"byte_end":417034,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ If `chunk_size` does not divide the length of the slice, then the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417039,"byte_end":417108,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ last up to `chunk_size-1` elements will be omitted and can be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417113,"byte_end":417178,"line_start":183,"line_end":183,"column_start":5,"column_end":70}},{"value":"/ retrieved from the remainder function of the iterator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417183,"byte_end":417241,"line_start":184,"line_end":184,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417246,"byte_end":417249,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417254,"byte_end":417268,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417273,"byte_end":417276,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417281,"byte_end":417288,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417293,"byte_end":417319,"line_start":189,"line_end":189,"column_start":5,"column_end":31}},{"value":"/ let mut array = [1, 2, 3, 4, 5];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417324,"byte_end":417360,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/ array.par_chunks_exact_mut(3)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417365,"byte_end":417398,"line_start":191,"line_end":191,"column_start":5,"column_end":38}},{"value":"/      .for_each(|slice| slice.reverse());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417403,"byte_end":417447,"line_start":192,"line_end":192,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(array, [3, 2, 1, 4, 5]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417452,"byte_end":417491,"line_start":193,"line_end":193,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417496,"byte_end":417503,"line_start":194,"line_end":194,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4358},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419420,"byte_end":419428,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"par_sort","qualname":"::slice::ParallelSliceMut::par_sort","value":"pub fn par_sort(&mut Self) where T: Ord","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":417963,"byte_end":417995,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418000,"byte_end":418003,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418008,"byte_end":418099,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418104,"byte_end":418107,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418112,"byte_end":418205,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418210,"byte_end":418263,"line_start":213,"line_end":213,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable`](#method.par_sort_unstable).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418268,"byte_end":418325,"line_start":214,"line_end":214,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418330,"byte_end":418333,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418338,"byte_end":418366,"line_start":216,"line_end":216,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418371,"byte_end":418374,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418379,"byte_end":418442,"line_start":218,"line_end":218,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418447,"byte_end":418500,"line_start":219,"line_end":219,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418505,"byte_end":418597,"line_start":220,"line_end":220,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418602,"byte_end":418666,"line_start":221,"line_end":221,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418671,"byte_end":418674,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418679,"byte_end":418772,"line_start":223,"line_end":223,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418777,"byte_end":418827,"line_start":224,"line_end":224,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418832,"byte_end":418835,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418840,"byte_end":418934,"line_start":226,"line_end":226,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":418939,"byte_end":419033,"line_start":227,"line_end":227,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419038,"byte_end":419134,"line_start":228,"line_end":228,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419139,"byte_end":419203,"line_start":229,"line_end":229,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419208,"byte_end":419211,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419216,"byte_end":419230,"line_start":231,"line_end":231,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419235,"byte_end":419238,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419243,"byte_end":419250,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419255,"byte_end":419281,"line_start":234,"line_end":234,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419286,"byte_end":419289,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419294,"byte_end":419328,"line_start":236,"line_end":236,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419333,"byte_end":419336,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ v.par_sort();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419341,"byte_end":419358,"line_start":238,"line_end":238,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419363,"byte_end":419400,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419405,"byte_end":419412,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4359},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421154,"byte_end":421165,"line_start":284,"line_end":284,"column_start":8,"column_end":19},"name":"par_sort_by","qualname":"::slice::ParallelSliceMut::par_sort_by","value":"pub fn par_sort_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering + Sync","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419543,"byte_end":419602,"line_start":248,"line_end":248,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419607,"byte_end":419610,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419615,"byte_end":419706,"line_start":250,"line_end":250,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419711,"byte_end":419714,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419719,"byte_end":419812,"line_start":252,"line_end":252,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419817,"byte_end":419870,"line_start":253,"line_end":253,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by`](#method.par_sort_unstable_by).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419875,"byte_end":419938,"line_start":254,"line_end":254,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419943,"byte_end":419946,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419951,"byte_end":419979,"line_start":256,"line_end":256,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419984,"byte_end":419987,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":419992,"byte_end":420055,"line_start":258,"line_end":258,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420060,"byte_end":420113,"line_start":259,"line_end":259,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420118,"byte_end":420210,"line_start":260,"line_end":260,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420215,"byte_end":420279,"line_start":261,"line_end":261,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420284,"byte_end":420287,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420292,"byte_end":420385,"line_start":263,"line_end":263,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420390,"byte_end":420440,"line_start":264,"line_end":264,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420445,"byte_end":420448,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420453,"byte_end":420547,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420552,"byte_end":420646,"line_start":267,"line_end":267,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420651,"byte_end":420747,"line_start":268,"line_end":268,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420752,"byte_end":420816,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420821,"byte_end":420824,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420829,"byte_end":420843,"line_start":271,"line_end":271,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420848,"byte_end":420851,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420856,"byte_end":420863,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420868,"byte_end":420894,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420899,"byte_end":420902,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420907,"byte_end":420939,"line_start":276,"line_end":276,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_by(|a, b| a.cmp(b));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420944,"byte_end":420979,"line_start":277,"line_end":277,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":420984,"byte_end":421019,"line_start":278,"line_end":278,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421024,"byte_end":421027,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421032,"byte_end":421054,"line_start":280,"line_end":280,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_by(|a, b| b.cmp(a));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421059,"byte_end":421094,"line_start":281,"line_end":281,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421099,"byte_end":421134,"line_start":282,"line_end":282,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421139,"byte_end":421146,"line_start":283,"line_end":283,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4362},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422901,"byte_end":422916,"line_start":326,"line_end":326,"column_start":8,"column_end":23},"name":"par_sort_by_key","qualname":"::slice::ParallelSliceMut::par_sort_by_key","value":"pub fn par_sort_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) -> B + Sync","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421378,"byte_end":421441,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421446,"byte_end":421449,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421454,"byte_end":421545,"line_start":295,"line_end":295,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421550,"byte_end":421553,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ When applicable, unstable sorting is preferred because it is generally faster than stable","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421558,"byte_end":421651,"line_start":297,"line_end":297,"column_start":5,"column_end":98}},{"value":"/ sorting and it doesn't allocate auxiliary memory.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421656,"byte_end":421709,"line_start":298,"line_end":298,"column_start":5,"column_end":58}},{"value":"/ See [`par_sort_unstable_by_key`](#method.par_sort_unstable_by_key).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421714,"byte_end":421785,"line_start":299,"line_end":299,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421790,"byte_end":421793,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421798,"byte_end":421826,"line_start":301,"line_end":301,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421831,"byte_end":421834,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is an adaptive merge sort inspired by","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421839,"byte_end":421902,"line_start":303,"line_end":303,"column_start":5,"column_end":68}},{"value":"/ [timsort](https://en.wikipedia.org/wiki/Timsort).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421907,"byte_end":421960,"line_start":304,"line_end":304,"column_start":5,"column_end":58}},{"value":"/ It is designed to be very fast in cases where the slice is nearly sorted, or consists of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":421965,"byte_end":422057,"line_start":305,"line_end":305,"column_start":5,"column_end":97}},{"value":"/ two or more sorted sequences concatenated one after another.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422062,"byte_end":422126,"line_start":306,"line_end":306,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422131,"byte_end":422134,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ Also, it allocates temporary storage the same size as `self`, but for very short slices a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422139,"byte_end":422232,"line_start":308,"line_end":308,"column_start":5,"column_end":98}},{"value":"/ non-allocating insertion sort is used instead.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422237,"byte_end":422287,"line_start":309,"line_end":309,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422292,"byte_end":422295,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ In order to sort the slice in parallel, the slice is first divided into smaller chunks and","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422300,"byte_end":422394,"line_start":311,"line_end":311,"column_start":5,"column_end":99}},{"value":"/ all chunks are sorted in parallel. Then, adjacent chunks that together form non-descending","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422399,"byte_end":422493,"line_start":312,"line_end":312,"column_start":5,"column_end":99}},{"value":"/ or descending runs are concatenated. Finally, the remaining chunks are merged together using","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422498,"byte_end":422594,"line_start":313,"line_end":313,"column_start":5,"column_end":101}},{"value":"/ parallel subdivision of chunks and parallel merge operation.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422599,"byte_end":422663,"line_start":314,"line_end":314,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422668,"byte_end":422671,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422676,"byte_end":422690,"line_start":316,"line_end":316,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422695,"byte_end":422698,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422703,"byte_end":422710,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422715,"byte_end":422741,"line_start":319,"line_end":319,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422746,"byte_end":422749,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422754,"byte_end":422791,"line_start":321,"line_end":321,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422796,"byte_end":422799,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_by_key(|k| k.abs());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422804,"byte_end":422839,"line_start":323,"line_end":323,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422844,"byte_end":422881,"line_start":324,"line_end":324,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":422886,"byte_end":422893,"line_start":325,"line_end":325,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4366},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424361,"byte_end":424378,"line_start":365,"line_end":365,"column_start":8,"column_end":25},"name":"par_sort_unstable","qualname":"::slice::ParallelSliceMut::par_sort_unstable","value":"pub fn par_sort_unstable(&mut Self) where T: Ord","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel, but may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel, but may not preserve the order of equal elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423090,"byte_end":423172,"line_start":334,"line_end":334,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423177,"byte_end":423180,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423185,"byte_end":423280,"line_start":336,"line_end":336,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423285,"byte_end":423317,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423322,"byte_end":423325,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423330,"byte_end":423358,"line_start":339,"line_end":339,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423363,"byte_end":423366,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423371,"byte_end":423462,"line_start":341,"line_end":341,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423467,"byte_end":423554,"line_start":342,"line_end":342,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423559,"byte_end":423649,"line_start":343,"line_end":343,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423654,"byte_end":423688,"line_start":344,"line_end":344,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423693,"byte_end":423696,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423701,"byte_end":423793,"line_start":346,"line_end":346,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423798,"byte_end":423858,"line_start":347,"line_end":347,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423863,"byte_end":423866,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423871,"byte_end":423960,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":423965,"byte_end":424058,"line_start":350,"line_end":350,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424063,"byte_end":424076,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424081,"byte_end":424084,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424089,"byte_end":424135,"line_start":353,"line_end":353,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424140,"byte_end":424143,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424148,"byte_end":424162,"line_start":355,"line_end":355,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424167,"byte_end":424170,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424175,"byte_end":424182,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424187,"byte_end":424213,"line_start":358,"line_end":358,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424218,"byte_end":424221,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5, 4, 1, -3, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424226,"byte_end":424260,"line_start":360,"line_end":360,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424265,"byte_end":424268,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424273,"byte_end":424299,"line_start":362,"line_end":362,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(v, [-5, -3, 1, 2, 4]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424304,"byte_end":424341,"line_start":363,"line_end":363,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424346,"byte_end":424353,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4367},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425929,"byte_end":425949,"line_start":407,"line_end":407,"column_start":8,"column_end":28},"name":"par_sort_unstable_by","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by","value":"pub fn par_sort_unstable_by<F>(&mut Self, F) where F: Fn(&T, &T) -> Ordering +\nSync","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a comparator function, but may not preserve the order of\n equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a comparator function, but may not preserve the order of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424493,"byte_end":424586,"line_start":372,"line_end":372,"column_start":5,"column_end":98}},{"value":"/ equal elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424591,"byte_end":424610,"line_start":373,"line_end":373,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424615,"byte_end":424618,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424623,"byte_end":424718,"line_start":375,"line_end":375,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424723,"byte_end":424755,"line_start":376,"line_end":376,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424760,"byte_end":424763,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424768,"byte_end":424796,"line_start":378,"line_end":378,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424801,"byte_end":424804,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424809,"byte_end":424900,"line_start":380,"line_end":380,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424905,"byte_end":424992,"line_start":381,"line_end":381,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":424997,"byte_end":425087,"line_start":382,"line_end":382,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425092,"byte_end":425126,"line_start":383,"line_end":383,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425131,"byte_end":425134,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425139,"byte_end":425231,"line_start":385,"line_end":385,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425236,"byte_end":425296,"line_start":386,"line_end":386,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425301,"byte_end":425304,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425309,"byte_end":425398,"line_start":388,"line_end":388,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425403,"byte_end":425496,"line_start":389,"line_end":389,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425501,"byte_end":425514,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425519,"byte_end":425522,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425527,"byte_end":425573,"line_start":392,"line_end":392,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425578,"byte_end":425581,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425586,"byte_end":425600,"line_start":394,"line_end":394,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425605,"byte_end":425608,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425613,"byte_end":425620,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425625,"byte_end":425651,"line_start":397,"line_end":397,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425656,"byte_end":425659,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let mut v = [5, 4, 1, 3, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425664,"byte_end":425696,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/ v.par_sort_unstable_by(|a, b| a.cmp(b));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425701,"byte_end":425745,"line_start":400,"line_end":400,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, 3, 4, 5]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425750,"byte_end":425785,"line_start":401,"line_end":401,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425790,"byte_end":425793,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ // reverse sorting","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425798,"byte_end":425820,"line_start":403,"line_end":403,"column_start":5,"column_end":27}},{"value":"/ v.par_sort_unstable_by(|a, b| b.cmp(a));","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425825,"byte_end":425869,"line_start":404,"line_end":404,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [5, 4, 3, 2, 1]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425874,"byte_end":425909,"line_start":405,"line_end":405,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":425914,"byte_end":425921,"line_start":406,"line_end":406,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4370},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427493,"byte_end":427517,"line_start":448,"line_end":448,"column_start":8,"column_end":32},"name":"par_sort_unstable_by_key","qualname":"::slice::ParallelSliceMut::par_sort_unstable_by_key","value":"pub fn par_sort_unstable_by_key<B, F>(&mut Self, F) where B: Ord, F: Fn(&T) ->\nB + Sync","parent":{"krate":0,"index":4351},"children":[],"decl_id":null,"docs":" Sorts the slice in parallel with a key extraction function, but may not preserve the order\n of equal elements.","sig":null,"attributes":[{"value":"/ Sorts the slice in parallel with a key extraction function, but may not preserve the order","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426162,"byte_end":426256,"line_start":416,"line_end":416,"column_start":5,"column_end":99}},{"value":"/ of equal elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426261,"byte_end":426283,"line_start":417,"line_end":417,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426288,"byte_end":426291,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426296,"byte_end":426391,"line_start":419,"line_end":419,"column_start":5,"column_end":100}},{"value":"/ and `O(n log n)` worst-case.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426396,"byte_end":426428,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426433,"byte_end":426436,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Current implementation","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426441,"byte_end":426469,"line_start":422,"line_end":422,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426474,"byte_end":426477,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426482,"byte_end":426573,"line_start":424,"line_end":424,"column_start":5,"column_end":96}},{"value":"/ which is a quicksort variant designed to be very fast on certain kinds of patterns,","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426578,"byte_end":426665,"line_start":425,"line_end":425,"column_start":5,"column_end":92}},{"value":"/ sometimes achieving linear time. It is randomized but deterministic, and falls back to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426670,"byte_end":426760,"line_start":426,"line_end":426,"column_start":5,"column_end":95}},{"value":"/ heapsort on degenerate inputs.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426765,"byte_end":426799,"line_start":427,"line_end":427,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426804,"byte_end":426807,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ It is generally faster than stable sorting, except in a few special cases, e.g. when the","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426812,"byte_end":426904,"line_start":429,"line_end":429,"column_start":5,"column_end":97}},{"value":"/ slice consists of several concatenated sorted sequences.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426909,"byte_end":426969,"line_start":430,"line_end":430,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426974,"byte_end":426977,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ All quicksorts work in two stages: partitioning into two halves followed by recursive","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":426982,"byte_end":427071,"line_start":432,"line_end":432,"column_start":5,"column_end":94}},{"value":"/ calls. The partitioning phase is sequential, but the two recursive calls are performed in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427076,"byte_end":427169,"line_start":433,"line_end":433,"column_start":5,"column_end":98}},{"value":"/ parallel.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427174,"byte_end":427187,"line_start":434,"line_end":434,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427192,"byte_end":427195,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ [pdqsort]: https://github.com/orlp/pdqsort","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427200,"byte_end":427246,"line_start":436,"line_end":436,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427251,"byte_end":427254,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427259,"byte_end":427273,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427278,"byte_end":427281,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427286,"byte_end":427293,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427298,"byte_end":427324,"line_start":441,"line_end":441,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427329,"byte_end":427332,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let mut v = [-5i32, 4, 1, -3, 2];","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427337,"byte_end":427374,"line_start":443,"line_end":443,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427379,"byte_end":427382,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ v.par_sort_unstable_by_key(|k| k.abs());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427387,"byte_end":427431,"line_start":445,"line_end":445,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v, [1, 2, -3, 4, -5]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427436,"byte_end":427473,"line_start":446,"line_end":446,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":427478,"byte_end":427485,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7178},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":428767,"byte_end":428771,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":7181}],"decl_id":null,"docs":" Parallel iterator over immutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable items in a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":428685,"byte_end":428738,"line_start":500,"line_end":500,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7186},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430281,"byte_end":430287,"line_start":567,"line_end":567,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":7189},{"krate":0,"index":7190}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430182,"byte_end":430252,"line_start":565,"line_end":565,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":7195},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432243,"byte_end":432254,"line_start":647,"line_end":647,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":7198},{"krate":0,"index":7199},{"krate":0,"index":7200}],"decl_id":null,"docs":" Parallel iterator over immutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable non-overlapping chunks of a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432144,"byte_end":432214,"line_start":645,"line_end":645,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":4465},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432572,"byte_end":432581,"line_start":657,"line_end":657,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'data [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432392,"byte_end":432462,"line_start":654,"line_end":654,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432467,"byte_end":432542,"line_start":655,"line_end":655,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432547,"byte_end":432560,"line_start":656,"line_end":656,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":7205},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":434531,"byte_end":434538,"line_start":737,"line_end":737,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":7208},{"krate":0,"index":7209}],"decl_id":null,"docs":" Parallel iterator over immutable overlapping windows of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over immutable overlapping windows of a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":434435,"byte_end":434502,"line_start":735,"line_end":735,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":7214},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":436575,"byte_end":436582,"line_start":819,"line_end":819,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":7217}],"decl_id":null,"docs":" Parallel iterator over mutable items in a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable items in a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":436495,"byte_end":436546,"line_start":817,"line_end":817,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":7222},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":438061,"byte_end":438070,"line_start":881,"line_end":881,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":7225},{"krate":0,"index":7226}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":437964,"byte_end":438032,"line_start":879,"line_end":879,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":7231},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":439956,"byte_end":439970,"line_start":955,"line_end":955,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":7234},{"krate":0,"index":7235},{"krate":0,"index":7236}],"decl_id":null,"docs":" Parallel iterator over mutable non-overlapping chunks of a slice\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable non-overlapping chunks of a slice","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":439859,"byte_end":439927,"line_start":953,"line_end":953,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":4584},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440666,"byte_end":440680,"line_start":971,"line_end":971,"column_start":12,"column_end":26},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440119,"byte_end":440189,"line_start":962,"line_end":962,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440194,"byte_end":440269,"line_start":963,"line_end":963,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440274,"byte_end":440287,"line_start":964,"line_end":964,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440292,"byte_end":440295,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ Note that this has to consume `self` to return the original lifetime of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440300,"byte_end":440375,"line_start":966,"line_end":966,"column_start":5,"column_end":80}},{"value":"/ the data, which prevents this from actually being used as a parallel","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440380,"byte_end":440452,"line_start":967,"line_end":967,"column_start":5,"column_end":77}},{"value":"/ iterator since that also consumes. This method is provided for parity","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440457,"byte_end":440530,"line_start":968,"line_end":968,"column_start":5,"column_end":78}},{"value":"/ with `std::iter::ChunksExactMut`, but consider calling `remainder()` or","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440535,"byte_end":440610,"line_start":969,"line_end":969,"column_start":5,"column_end":80}},{"value":"/ `take_remainder()` as alternatives.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440615,"byte_end":440654,"line_start":970,"line_end":970,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4585},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441074,"byte_end":441083,"line_start":981,"line_end":981,"column_start":12,"column_end":21},"name":"remainder","qualname":"<ChunksExactMut>::remainder","value":"pub fn remainder(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements.","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440735,"byte_end":440805,"line_start":975,"line_end":975,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440810,"byte_end":440885,"line_start":976,"line_end":976,"column_start":5,"column_end":80}},{"value":"/ elements.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440890,"byte_end":440903,"line_start":977,"line_end":977,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440908,"byte_end":440911,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ Consider `take_remainder()` if you need access to the data with its","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440916,"byte_end":440987,"line_start":979,"line_end":979,"column_start":5,"column_end":76}},{"value":"/ original lifetime, rather than borrowing through `&mut self` here.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440992,"byte_end":441062,"line_start":980,"line_end":980,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":4586},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441362,"byte_end":441376,"line_start":988,"line_end":988,"column_start":12,"column_end":26},"name":"take_remainder","qualname":"<ChunksExactMut>::take_remainder","value":"pub fn take_remainder(&mut Self) -> &'data mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Return the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n elements. Subsequent calls will return an empty slice.\n","sig":null,"attributes":[{"value":"/ Return the remainder of the original slice that is not going to be","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441137,"byte_end":441207,"line_start":985,"line_end":985,"column_start":5,"column_end":75}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441212,"byte_end":441287,"line_start":986,"line_end":986,"column_start":5,"column_end":80}},{"value":"/ elements. Subsequent calls will return an empty slice.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441292,"byte_end":441350,"line_start":987,"line_end":987,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":4614},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443259,"byte_end":443264,"line_start":1061,"line_end":1061,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4618},{"krate":0,"index":4619}],"decl_id":null,"docs":" Parallel iterator over slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over slices separated by a predicate","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443189,"byte_end":443247,"line_start":1060,"line_end":1060,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4648},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":445133,"byte_end":445141,"line_start":1137,"line_end":1137,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":4652},{"krate":0,"index":4653}],"decl_id":null,"docs":" Parallel iterator over mutable slices separated by a predicate\n","sig":null,"attributes":[{"value":"/ Parallel iterator over mutable slices separated by a predicate","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":445055,"byte_end":445121,"line_start":1136,"line_end":1136,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":4677},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","parent":null,"children":[{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4681},{"krate":0,"index":4682},{"krate":0,"index":4683},{"krate":0,"index":4684},{"krate":0,"index":4700},{"krate":0,"index":4702},{"krate":0,"index":4717},{"krate":0,"index":4718},{"krate":0,"index":4722},{"krate":0,"index":4735},{"krate":0,"index":7244},{"krate":0,"index":7250},{"krate":0,"index":7247},{"krate":0,"index":4749},{"krate":0,"index":4752},{"krate":0,"index":4757},{"krate":0,"index":7253},{"krate":0,"index":7259},{"krate":0,"index":7256},{"krate":0,"index":4763},{"krate":0,"index":4767},{"krate":0,"index":4772},{"krate":0,"index":7262},{"krate":0,"index":7268},{"krate":0,"index":7265},{"krate":0,"index":4778},{"krate":0,"index":4781},{"krate":0,"index":4786},{"krate":0,"index":7271},{"krate":0,"index":7277},{"krate":0,"index":7274},{"krate":0,"index":4792},{"krate":0,"index":4795},{"krate":0,"index":4800},{"krate":0,"index":7280},{"krate":0,"index":7289},{"krate":0,"index":7285},{"krate":0,"index":4806},{"krate":0,"index":4810},{"krate":0,"index":4816},{"krate":0,"index":7293},{"krate":0,"index":7302},{"krate":0,"index":7298},{"krate":0,"index":4826},{"krate":0,"index":4832},{"krate":0,"index":4836},{"krate":0,"index":4841},{"krate":0,"index":4847},{"krate":0,"index":7306},{"krate":0,"index":7313},{"krate":0,"index":7310},{"krate":0,"index":4856},{"krate":0,"index":4857},{"krate":0,"index":7316},{"krate":0,"index":7323},{"krate":0,"index":7320},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":7326},{"krate":0,"index":7335},{"krate":0,"index":7331},{"krate":0,"index":4868},{"krate":0,"index":4874},{"krate":0,"index":4880},{"krate":0,"index":7339},{"krate":0,"index":7348},{"krate":0,"index":7344},{"krate":0,"index":4888},{"krate":0,"index":4895},{"krate":0,"index":4901}],"decl_id":null,"docs":" Parallel iterator types for [strings][std::str]","sig":null,"attributes":[{"value":"! Parallel iterator types for [strings][std::str]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507185,"byte_end":507236,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507237,"byte_end":507240,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507241,"byte_end":507319,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507320,"byte_end":507358,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507359,"byte_end":507362,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! Note: [`ParallelString::par_split()`] and [`par_split_terminator()`]","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507363,"byte_end":507435,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"! reference a `Pattern` trait which is not visible outside this crate.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507436,"byte_end":507508,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! This trait is intentionally kept private, for use only by Rayon itself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507509,"byte_end":507584,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"! It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507585,"byte_end":507662,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507663,"byte_end":507666,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! [`ParallelString::par_split()`]: trait.ParallelString.html#method.par_split","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507667,"byte_end":507746,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"! [`par_split_terminator()`]: trait.ParallelString.html#method.par_split_terminator","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507747,"byte_end":507832,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507833,"byte_end":507836,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [std::str]: https://doc.rust-lang.org/stable/std/str/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":507837,"byte_end":507894,"line_start":14,"line_end":14,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":4684},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509143,"byte_end":509157,"line_start":59,"line_end":59,"column_start":11,"column_end":25},"name":"ParallelString","qualname":"::str::ParallelString","value":"ParallelString","parent":null,"children":[{"krate":0,"index":4685},{"krate":0,"index":4686},{"krate":0,"index":4687},{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4692},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4696},{"krate":0,"index":4698}],"decl_id":null,"docs":" Parallel extensions for strings.\n","sig":null,"attributes":[{"value":"/ Parallel extensions for strings.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509096,"byte_end":509132,"line_start":58,"line_end":58,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4685},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509274,"byte_end":509292,"line_start":62,"line_end":62,"column_start":8,"column_end":26},"name":"as_parallel_string","qualname":"::str::ParallelString::as_parallel_string","value":"pub fn as_parallel_string(&Self) -> &str","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a plain string slice, which is used to implement the rest of\n the parallel methods.\n","sig":null,"attributes":[{"value":"/ Returns a plain string slice, which is used to implement the rest of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509164,"byte_end":509236,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ the parallel methods.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509241,"byte_end":509266,"line_start":61,"line_end":61,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4686},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509577,"byte_end":509586,"line_start":73,"line_end":73,"column_start":8,"column_end":17},"name":"par_chars","qualname":"::str::ParallelString::par_chars","value":"pub fn par_chars(&Self) -> Chars","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509314,"byte_end":509378,"line_start":64,"line_end":64,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509383,"byte_end":509386,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509391,"byte_end":509405,"line_start":66,"line_end":66,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509410,"byte_end":509413,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509418,"byte_end":509425,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509430,"byte_end":509456,"line_start":69,"line_end":69,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_chars().max_by_key(|c| *c as i32);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509461,"byte_end":509521,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(Some('o'), max);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509526,"byte_end":509557,"line_start":71,"line_end":71,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509562,"byte_end":509569,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4687},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509995,"byte_end":510011,"line_start":88,"line_end":88,"column_start":8,"column_end":24},"name":"par_char_indices","qualname":"::str::ParallelString::par_char_indices","value":"pub fn par_char_indices(&Self) -> CharIndices","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the characters of a string, with their positions.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the characters of a string, with their positions.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509692,"byte_end":509778,"line_start":79,"line_end":79,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509783,"byte_end":509786,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509791,"byte_end":509805,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509810,"byte_end":509813,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509818,"byte_end":509825,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509830,"byte_end":509856,"line_start":84,"line_end":84,"column_start":5,"column_end":31}},{"value":"/ let min = \"hello\".par_char_indices().min_by_key(|&(_i, c)| c as i32);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509861,"byte_end":509934,"line_start":85,"line_end":85,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(Some((1, 'e')), min);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509939,"byte_end":509975,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":509980,"byte_end":509987,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4688},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510671,"byte_end":510680,"line_start":108,"line_end":108,"column_start":8,"column_end":17},"name":"par_bytes","qualname":"::str::ParallelString::par_bytes","value":"pub fn par_bytes(&Self) -> Bytes","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the bytes of a string.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the bytes of a string.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510129,"byte_end":510188,"line_start":94,"line_end":94,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510193,"byte_end":510196,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Note that multi-byte sequences (for code points greater than `U+007F`)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510201,"byte_end":510275,"line_start":96,"line_end":96,"column_start":5,"column_end":79}},{"value":"/ are produced as separate items, but will not be split across threads.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510280,"byte_end":510353,"line_start":97,"line_end":97,"column_start":5,"column_end":78}},{"value":"/ If you would prefer an indexed iterator without that guarantee, consider","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510358,"byte_end":510434,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ `string.as_bytes().par_iter().cloned()` instead.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510439,"byte_end":510491,"line_start":99,"line_end":99,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510496,"byte_end":510499,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510504,"byte_end":510518,"line_start":101,"line_end":101,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510523,"byte_end":510526,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510531,"byte_end":510538,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510543,"byte_end":510569,"line_start":104,"line_end":104,"column_start":5,"column_end":31}},{"value":"/ let max = \"hello\".par_bytes().max();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510574,"byte_end":510614,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(b'o'), max);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510619,"byte_end":510651,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510656,"byte_end":510663,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4689},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511401,"byte_end":511417,"line_start":132,"line_end":132,"column_start":8,"column_end":24},"name":"par_encode_utf16","qualname":"::str::ParallelString::par_encode_utf16","value":"pub fn par_encode_utf16(&Self) -> EncodeUtf16","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over a string encoded as UTF-16.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over a string encoded as UTF-16.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510786,"byte_end":510850,"line_start":114,"line_end":114,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510855,"byte_end":510858,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Note that surrogate pairs (for code points greater than `U+FFFF`) are","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510863,"byte_end":510936,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ produced as separate items, but will not be split across threads.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":510941,"byte_end":511010,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511015,"byte_end":511018,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511023,"byte_end":511037,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511042,"byte_end":511045,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511050,"byte_end":511057,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511062,"byte_end":511088,"line_start":122,"line_end":122,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511093,"byte_end":511096,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let max = \"hello\".par_encode_utf16().max();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511101,"byte_end":511148,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Some(b'o' as u16), max);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511153,"byte_end":511192,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511197,"byte_end":511200,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let text = \"Zażółć gęślą jaźń\";","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511205,"byte_end":511249,"line_start":127,"line_end":127,"column_start":5,"column_end":40}},{"value":"/ let utf8_len = text.len();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511254,"byte_end":511284,"line_start":128,"line_end":128,"column_start":5,"column_end":35}},{"value":"/ let utf16_len = text.par_encode_utf16().count();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511289,"byte_end":511341,"line_start":129,"line_end":129,"column_start":5,"column_end":57}},{"value":"/ assert!(utf16_len <= utf8_len);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511346,"byte_end":511381,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511386,"byte_end":511393,"line_start":131,"line_end":131,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4690},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512105,"byte_end":512114,"line_start":154,"line_end":154,"column_start":8,"column_end":17},"name":"par_split","qualname":"::str::ParallelString::par_split","value":"pub fn par_split<P: Pattern>(&Self, P) -> Split<, P>","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings separated by a\n given character or predicate, similar to `str::split`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings separated by a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511535,"byte_end":511597,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/ given character or predicate, similar to `str::split`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511602,"byte_end":511660,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511665,"byte_end":511668,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511673,"byte_end":511744,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511749,"byte_end":511826,"line_start":142,"line_end":142,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511831,"byte_end":511834,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511839,"byte_end":511853,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511858,"byte_end":511861,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511866,"byte_end":511873,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511878,"byte_end":511904,"line_start":147,"line_end":147,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511909,"byte_end":511951,"line_start":148,"line_end":148,"column_start":5,"column_end":47}},{"value":"/    .par_split(',')","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511956,"byte_end":511978,"line_start":149,"line_end":149,"column_start":5,"column_end":27}},{"value":"/    .filter_map(|s| s.trim().parse::<i32>().ok())","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":511983,"byte_end":512035,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"/    .sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512040,"byte_end":512054,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512059,"byte_end":512085,"line_start":152,"line_end":152,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512090,"byte_end":512097,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4692},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512943,"byte_end":512963,"line_start":175,"line_end":175,"column_start":8,"column_end":28},"name":"par_split_terminator","qualname":"::str::ParallelString::par_split_terminator","value":"pub fn par_split_terminator<P: Pattern>(&Self, P) -> SplitTerminator<, P>","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings terminated by a\n given character or predicate, similar to `str::split_terminator`.\n It's equivalent to `par_split`, except it doesn't produce an empty\n substring after a trailing terminator.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings terminated by a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512234,"byte_end":512297,"line_start":158,"line_end":158,"column_start":5,"column_end":68}},{"value":"/ given character or predicate, similar to `str::split_terminator`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512302,"byte_end":512371,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/ It's equivalent to `par_split`, except it doesn't produce an empty","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512376,"byte_end":512446,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ substring after a trailing terminator.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512451,"byte_end":512493,"line_start":161,"line_end":161,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512498,"byte_end":512501,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512506,"byte_end":512577,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512582,"byte_end":512659,"line_start":164,"line_end":164,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512664,"byte_end":512667,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512672,"byte_end":512686,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512691,"byte_end":512694,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512699,"byte_end":512706,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512711,"byte_end":512737,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ let parts: Vec<_> = \"((1 + 3) * 2)\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512742,"byte_end":512781,"line_start":170,"line_end":170,"column_start":5,"column_end":44}},{"value":"/     .par_split_terminator(|c| c == '(' || c == ')')","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512786,"byte_end":512841,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512846,"byte_end":512865,"line_start":172,"line_end":172,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![\"\", \"\", \"1 + 3\", \" * 2\"], parts);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512870,"byte_end":512923,"line_start":173,"line_end":173,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":512928,"byte_end":512935,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4694},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513634,"byte_end":513643,"line_start":194,"line_end":194,"column_start":8,"column_end":17},"name":"par_lines","qualname":"::str::ParallelString::par_lines","value":"pub fn par_lines(&Self) -> Lines","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the lines of a string, ending with an\n optional carriage return and with a newline (`\\r\\n` or just `\\n`).\n The final line ending is optional, and line endings are not included in\n the output strings.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the lines of a string, ending with an","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513105,"byte_end":513179,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ optional carriage return and with a newline (`\\r\\n` or just `\\n`).","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513184,"byte_end":513254,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ The final line ending is optional, and line endings are not included in","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513259,"byte_end":513334,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ the output strings.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513339,"byte_end":513362,"line_start":182,"line_end":182,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513367,"byte_end":513370,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513375,"byte_end":513389,"line_start":184,"line_end":184,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513394,"byte_end":513397,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513402,"byte_end":513409,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513414,"byte_end":513440,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/ let lengths: Vec<_> = \"hello world\\nfizbuzz\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513445,"byte_end":513493,"line_start":188,"line_end":188,"column_start":5,"column_end":53}},{"value":"/     .par_lines()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513498,"byte_end":513518,"line_start":189,"line_end":189,"column_start":5,"column_end":25}},{"value":"/     .map(|l| l.len())","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513523,"byte_end":513548,"line_start":190,"line_end":190,"column_start":5,"column_end":30}},{"value":"/     .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513553,"byte_end":513572,"line_start":191,"line_end":191,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(vec![11, 7], lengths);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513577,"byte_end":513614,"line_start":192,"line_end":192,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513619,"byte_end":513626,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4695},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514268,"byte_end":514288,"line_start":213,"line_end":213,"column_start":8,"column_end":28},"name":"par_split_whitespace","qualname":"::str::ParallelString::par_split_whitespace","value":"pub fn par_split_whitespace(&Self) -> SplitWhitespace","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over the sub-slices of a string that are\n separated by any amount of whitespace.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over the sub-slices of a string that are","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513718,"byte_end":513790,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ separated by any amount of whitespace.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513795,"byte_end":513837,"line_start":199,"line_end":199,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513842,"byte_end":513845,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ As with `str::split_whitespace`, 'whitespace' is defined according to","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513850,"byte_end":513923,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ the terms of the Unicode Derived Core Property `White_Space`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513928,"byte_end":513993,"line_start":202,"line_end":202,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":513998,"byte_end":514001,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514006,"byte_end":514020,"line_start":204,"line_end":204,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514025,"byte_end":514028,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514033,"byte_end":514040,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514045,"byte_end":514071,"line_start":207,"line_end":207,"column_start":5,"column_end":31}},{"value":"/ let longest = \"which is the longest word?\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514076,"byte_end":514122,"line_start":208,"line_end":208,"column_start":5,"column_end":51}},{"value":"/     .par_split_whitespace()","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514127,"byte_end":514158,"line_start":209,"line_end":209,"column_start":5,"column_end":36}},{"value":"/     .max_by_key(|word| word.len());","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514163,"byte_end":514202,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(\"longest\"), longest);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514207,"byte_end":514248,"line_start":211,"line_end":211,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514253,"byte_end":514260,"line_start":212,"line_end":212,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4696},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514965,"byte_end":514976,"line_start":233,"line_end":233,"column_start":8,"column_end":19},"name":"par_matches","qualname":"::str::ParallelString::par_matches","value":"pub fn par_matches<P: Pattern>(&Self, P) -> Matches<, P>","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a\n given character or predicate, similar to `str::matches`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514383,"byte_end":514443,"line_start":217,"line_end":217,"column_start":5,"column_end":65}},{"value":"/ given character or predicate, similar to `str::matches`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514448,"byte_end":514508,"line_start":218,"line_end":218,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514513,"byte_end":514516,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514521,"byte_end":514592,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514597,"byte_end":514674,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514679,"byte_end":514682,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514687,"byte_end":514701,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514706,"byte_end":514709,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514714,"byte_end":514721,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514726,"byte_end":514752,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/ let total = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514757,"byte_end":514799,"line_start":227,"line_end":227,"column_start":5,"column_end":47}},{"value":"/    .par_matches(char::is_numeric)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514804,"byte_end":514841,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/    .map(|s| s.parse::<i32>().expect(\"digit\"))","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514846,"byte_end":514895,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/    .sum();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514900,"byte_end":514914,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(10, total);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514919,"byte_end":514945,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":514950,"byte_end":514957,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4698},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515754,"byte_end":515771,"line_start":255,"line_end":255,"column_start":8,"column_end":25},"name":"par_match_indices","qualname":"::str::ParallelString::par_match_indices","value":"pub fn par_match_indices<P: Pattern>(&Self, P) -> MatchIndices<, P>","parent":{"krate":0,"index":4684},"children":[],"decl_id":null,"docs":" Returns a parallel iterator over substrings that match a given character\n or predicate, with their positions, similar to `str::match_indices`.","sig":null,"attributes":[{"value":"/ Returns a parallel iterator over substrings that match a given character","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515134,"byte_end":515210,"line_start":240,"line_end":240,"column_start":5,"column_end":81}},{"value":"/ or predicate, with their positions, similar to `str::match_indices`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515215,"byte_end":515287,"line_start":241,"line_end":241,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515292,"byte_end":515295,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Note: the `Pattern` trait is private, for use only by Rayon itself.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515300,"byte_end":515371,"line_start":243,"line_end":243,"column_start":5,"column_end":76}},{"value":"/ It is implemented for `char` and any `F: Fn(char) -> bool + Sync + Send`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515376,"byte_end":515453,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515458,"byte_end":515461,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515466,"byte_end":515480,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515485,"byte_end":515488,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515493,"byte_end":515500,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use rayon::prelude::*;","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515505,"byte_end":515531,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/ let digits: Vec<_> = \"1, 2, buckle, 3, 4, door\"","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515536,"byte_end":515587,"line_start":250,"line_end":250,"column_start":5,"column_end":56}},{"value":"/    .par_match_indices(char::is_numeric)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515592,"byte_end":515635,"line_start":251,"line_end":251,"column_start":5,"column_end":48}},{"value":"/    .collect();","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515640,"byte_end":515658,"line_start":252,"line_end":252,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(digits, vec![(0, \"1\"), (3, \"2\"), (14, \"3\"), (17, \"4\")]);","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515663,"byte_end":515734,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":515739,"byte_end":515746,"line_start":254,"line_end":254,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":4704},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516668,"byte_end":516675,"line_start":283,"line_end":283,"column_start":15,"column_end":22},"name":"Pattern","qualname":"::str::private::Pattern","value":"Pattern: Sized + Sync + Send","parent":null,"children":[{"krate":0,"index":7241},{"krate":0,"index":4705},{"krate":0,"index":4706},{"krate":0,"index":4707},{"krate":0,"index":4708},{"krate":0,"index":4711},{"krate":0,"index":4714}],"decl_id":null,"docs":" Pattern-matching trait for `ParallelString`, somewhat like a mix of\n `std::str::pattern::{Pattern, Searcher}`.","sig":null,"attributes":[{"value":"/ Pattern-matching trait for `ParallelString`, somewhat like a mix of","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516455,"byte_end":516526,"line_start":279,"line_end":279,"column_start":5,"column_end":76}},{"value":"/ `std::str::pattern::{Pattern, Searcher}`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516531,"byte_end":516576,"line_start":280,"line_end":280,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516581,"byte_end":516584,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Implementing this trait is not permitted outside of `rayon`.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516589,"byte_end":516653,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":4705},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516735,"byte_end":516742,"line_start":285,"line_end":285,"column_start":12,"column_end":19},"name":"find_in","qualname":"::str::private::Pattern::find_in","value":"pub fn find_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4706},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516795,"byte_end":516803,"line_start":286,"line_end":286,"column_start":12,"column_end":20},"name":"rfind_in","qualname":"::str::private::Pattern::rfind_in","value":"pub fn rfind_in(&Self, &str) -> Option<usize>","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4707},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516856,"byte_end":516868,"line_start":287,"line_end":287,"column_start":12,"column_end":24},"name":"is_suffix_of","qualname":"::str::private::Pattern::is_suffix_of","value":"pub fn is_suffix_of(&Self, &str) -> bool","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4708},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516912,"byte_end":516923,"line_start":288,"line_end":288,"column_start":12,"column_end":23},"name":"fold_splits","qualname":"::str::private::Pattern::fold_splits","value":"pub fn fold_splits<'ch, F>(&Self, &'ch str, F, bool) -> F where\nF: Folder<&'ch str>","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4711},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":517050,"byte_end":517062,"line_start":291,"line_end":291,"column_start":12,"column_end":24},"name":"fold_matches","qualname":"::str::private::Pattern::fold_matches","value":"pub fn fold_matches<'ch, F>(&Self, &'ch str, F) -> F where F: Folder<&'ch str>","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4714},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":517172,"byte_end":517190,"line_start":294,"line_end":294,"column_start":12,"column_end":30},"name":"fold_match_indices","qualname":"::str::private::Pattern::fold_match_indices","value":"pub fn fold_match_indices<'ch, F>(&Self, &'ch str, F, usize) -> F where\nF: Folder<(usize, &'ch str)>","parent":{"krate":0,"index":4704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7244},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":519661,"byte_end":519666,"line_start":395,"line_end":395,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":7246}],"decl_id":null,"docs":" Parallel iterator over the characters of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":519572,"byte_end":519625,"line_start":393,"line_end":393,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7253},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":520708,"byte_end":520719,"line_start":439,"line_end":439,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":7255}],"decl_id":null,"docs":" Parallel iterator over the characters of a string, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the characters of a string, with their positions","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":520597,"byte_end":520672,"line_start":437,"line_end":437,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":7262},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":522091,"byte_end":522096,"line_start":495,"line_end":495,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":7264}],"decl_id":null,"docs":" Parallel iterator over the bytes of a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over the bytes of a string","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":522007,"byte_end":522055,"line_start":493,"line_end":493,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":7271},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":523112,"byte_end":523123,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"EncodeUtf16","qualname":"::str::EncodeUtf16","value":"EncodeUtf16 {  }","parent":null,"children":[{"krate":0,"index":7273}],"decl_id":null,"docs":" Parallel iterator over a string encoded as UTF-16\n","sig":null,"attributes":[{"value":"/ Parallel iterator over a string encoded as UTF-16","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":523023,"byte_end":523076,"line_start":537,"line_end":537,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7280},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":524191,"byte_end":524196,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"name":"Split","qualname":"::str::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":7283},{"krate":0,"index":7284}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a pattern","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":524095,"byte_end":524155,"line_start":581,"line_end":581,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":7293},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":525865,"byte_end":525880,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"SplitTerminator","qualname":"::str::SplitTerminator","value":"SplitTerminator {  }","parent":null,"children":[{"krate":0,"index":7296},{"krate":0,"index":7297}],"decl_id":null,"docs":" Parallel iterator over substrings separated by a terminator pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by a terminator pattern","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":525758,"byte_end":525829,"line_start":642,"line_end":642,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":7306},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":527738,"byte_end":527743,"line_start":710,"line_end":710,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over lines in a string\n","sig":null,"attributes":[{"value":"/ Parallel iterator over lines in a string","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":527658,"byte_end":527702,"line_start":708,"line_end":708,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":7316},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":528414,"byte_end":528429,"line_start":739,"line_end":739,"column_start":12,"column_end":27},"name":"SplitWhitespace","qualname":"::str::SplitWhitespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Parallel iterator over substrings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings separated by whitespace","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":528317,"byte_end":528378,"line_start":737,"line_end":737,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":7326},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":529018,"byte_end":529025,"line_start":764,"line_end":764,"column_start":12,"column_end":19},"name":"Matches","qualname":"::str::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":7329},{"krate":0,"index":7330}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":528924,"byte_end":528982,"line_start":762,"line_end":762,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":7339},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":530426,"byte_end":530438,"line_start":820,"line_end":820,"column_start":12,"column_end":24},"name":"MatchIndices","qualname":"::str::MatchIndices","value":"MatchIndices {  }","parent":null,"children":[{"krate":0,"index":7342},{"krate":0,"index":7343}],"decl_id":null,"docs":" Parallel iterator over substrings that match a pattern, with their positions\n","sig":null,"attributes":[{"value":"/ Parallel iterator over substrings that match a pattern, with their positions","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":530310,"byte_end":530390,"line_start":818,"line_end":818,"column_start":1,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":4909},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","parent":null,"children":[{"krate":0,"index":4910},{"krate":0,"index":4911},{"krate":0,"index":7352},{"krate":0,"index":7358},{"krate":0,"index":7355},{"krate":0,"index":4912},{"krate":0,"index":4917},{"krate":0,"index":4923},{"krate":0,"index":4930},{"krate":0,"index":4934},{"krate":0,"index":4941},{"krate":0,"index":4945},{"krate":0,"index":4949},{"krate":0,"index":4955},{"krate":0,"index":4959},{"krate":0,"index":4963}],"decl_id":null,"docs":" Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","sig":null,"attributes":[{"value":"! Parallel iterator types for [vectors][std::vec] (`Vec<T>`)","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":531816,"byte_end":531878,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":531879,"byte_end":531882,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! You will rarely need to interact with this module directly unless you need","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":531883,"byte_end":531961,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! to name one of the iterator types.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":531962,"byte_end":532000,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532001,"byte_end":532004,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! [std::vec]: https://doc.rust-lang.org/stable/std/vec/","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532005,"byte_end":532062,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":7352},"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532200,"byte_end":532208,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":7354}],"decl_id":null,"docs":" Parallel iterator that moves out of a vector.\n","sig":null,"attributes":[{"value":"/ Parallel iterator that moves out of a vector.","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532115,"byte_end":532164,"line_start":11,"line_end":11,"column_start":1,"column_end":50}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/split_producer.rs","byte_start":8476,"byte_end":8489,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/split_producer.rs","byte_start":9957,"byte_end":9970,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13104,"byte_end":13114,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13571,"byte_end":13575,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14775,"byte_end":14779,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":16290,"byte_end":16294,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":17558,"byte_end":17562,"line_start":35,"line_end":35,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":19208,"byte_end":19212,"line_start":35,"line_end":35,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":20318,"byte_end":20322,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21731,"byte_end":21735,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":128179,"byte_end":128187,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":129316,"byte_end":129330,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131689,"byte_end":131697,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136410,"byte_end":136415,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136644,"byte_end":136649,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":137752,"byte_end":137757,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":138692,"byte_end":138701,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":139379,"byte_end":139388,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":140057,"byte_end":140070,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":140253,"byte_end":140266,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":141878,"byte_end":141886,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":142100,"byte_end":142108,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":142404,"byte_end":142412,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":142533,"byte_end":142541,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143311,"byte_end":143317,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143517,"byte_end":143523,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143856,"byte_end":143862,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":144560,"byte_end":144568,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":145141,"byte_end":145154,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":146273,"byte_end":146281,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":146959,"byte_end":146967,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":147128,"byte_end":147136,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148267,"byte_end":148273,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148461,"byte_end":148467,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148915,"byte_end":148921,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":149566,"byte_end":149574,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":150131,"byte_end":150145,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":151041,"byte_end":151055,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":151167,"byte_end":151181,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":151829,"byte_end":151843,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":152163,"byte_end":152175,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":159662,"byte_end":159677,"line_start":20,"line_end":20,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":160318,"byte_end":160331,"line_start":39,"line_end":39,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":160369,"byte_end":160382,"line_start":41,"line_end":41,"column_start":13,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":160728,"byte_end":160741,"line_start":55,"line_end":55,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":161048,"byte_end":161063,"line_start":65,"line_end":65,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":162142,"byte_end":162155,"line_start":101,"line_end":101,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":163065,"byte_end":163080,"line_start":132,"line_end":132,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":163469,"byte_end":163483,"line_start":145,"line_end":145,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/mod.rs","byte_start":155130,"byte_end":155137,"line_start":74,"line_end":74,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/mod.rs","byte_start":158118,"byte_end":158121,"line_start":144,"line_end":144,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178445,"byte_end":178451,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178639,"byte_end":178645,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":179092,"byte_end":179098,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":179742,"byte_end":179750,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":180306,"byte_end":180320,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":181289,"byte_end":181303,"line_start":143,"line_end":143,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":181415,"byte_end":181429,"line_start":149,"line_end":149,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":182076,"byte_end":182090,"line_start":178,"line_end":178,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":182409,"byte_end":182421,"line_start":196,"line_end":196,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183777,"byte_end":183782,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183872,"byte_end":183877,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":184013,"byte_end":184018,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":184304,"byte_end":184309,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":184789,"byte_end":184802,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185782,"byte_end":185791,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185985,"byte_end":185994,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":186338,"byte_end":186347,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":186853,"byte_end":186861,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":187445,"byte_end":187462,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":190451,"byte_end":190461,"line_start":64,"line_end":64,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":190759,"byte_end":190769,"line_start":77,"line_end":77,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":191082,"byte_end":191090,"line_start":90,"line_end":90,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":191426,"byte_end":191434,"line_start":104,"line_end":104,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":191771,"byte_end":191779,"line_start":118,"line_end":118,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":192074,"byte_end":192082,"line_start":131,"line_end":131,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":192553,"byte_end":192560,"line_start":152,"line_end":152,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":193016,"byte_end":193023,"line_start":168,"line_end":168,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":193551,"byte_end":193558,"line_start":191,"line_end":191,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":193891,"byte_end":193898,"line_start":205,"line_end":205,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":194351,"byte_end":194361,"line_start":224,"line_end":224,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":194802,"byte_end":194812,"line_start":241,"line_end":241,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":195217,"byte_end":195223,"line_start":259,"line_end":259,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":195879,"byte_end":195885,"line_start":278,"line_end":278,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":196353,"byte_end":196359,"line_start":293,"line_end":293,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":196621,"byte_end":196627,"line_start":303,"line_end":303,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":196904,"byte_end":196910,"line_start":313,"line_end":313,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":197282,"byte_end":197290,"line_start":327,"line_end":327,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":197577,"byte_end":197585,"line_start":340,"line_end":340,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":197998,"byte_end":198001,"line_start":356,"line_end":356,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199056,"byte_end":199062,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199222,"byte_end":199228,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199440,"byte_end":199446,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199990,"byte_end":200004,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":200155,"byte_end":200169,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":200913,"byte_end":200927,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":201310,"byte_end":201322,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202598,"byte_end":202607,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202814,"byte_end":202823,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":203013,"byte_end":203022,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":203585,"byte_end":203602,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":203755,"byte_end":203772,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":204558,"byte_end":204575,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":204976,"byte_end":204991,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":206161,"byte_end":206173,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":206327,"byte_end":206339,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":206924,"byte_end":206936,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":207296,"byte_end":207306,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1079},{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":208333,"byte_end":208344,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":210866,"byte_end":210878,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":211428,"byte_end":211440,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":212506,"byte_end":212518,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":214076,"byte_end":214086,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":215794,"byte_end":215805,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216617,"byte_end":216624,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216803,"byte_end":216810,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216991,"byte_end":216998,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":217609,"byte_end":217624,"line_start":59,"line_end":59,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":217769,"byte_end":217784,"line_start":65,"line_end":65,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":218576,"byte_end":218591,"line_start":97,"line_end":97,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":219031,"byte_end":219044,"line_start":118,"line_end":118,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220616,"byte_end":220623,"line_start":16,"line_end":16,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220858,"byte_end":220865,"line_start":27,"line_end":27,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221301,"byte_end":221305,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":222102,"byte_end":222106,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":222296,"byte_end":222300,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":222909,"byte_end":222921,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":223777,"byte_end":223789,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":224258,"byte_end":224268,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1315},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225428,"byte_end":225436,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":226225,"byte_end":226233,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":226487,"byte_end":226495,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":227063,"byte_end":227079,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":227997,"byte_end":228013,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/for_each.rs","byte_start":228742,"byte_end":228757,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/for_each.rs","byte_start":229153,"byte_end":229168,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/for_each.rs","byte_start":229592,"byte_end":229607,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":230493,"byte_end":230496,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":230766,"byte_end":230774,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":231131,"byte_end":231141,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":231451,"byte_end":231461,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":231925,"byte_end":231932,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":232467,"byte_end":232475,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":232775,"byte_end":232782,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233105,"byte_end":233113,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233392,"byte_end":233398,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233660,"byte_end":233666,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233934,"byte_end":233940,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":234204,"byte_end":234210,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":234481,"byte_end":234487,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1475}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":234931,"byte_end":234934,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236468,"byte_end":236475,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236636,"byte_end":236643,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236859,"byte_end":236866,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":237326,"byte_end":237333,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1511},{"krate":0,"index":1513},{"krate":0,"index":1514}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":238075,"byte_end":238083,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":238754,"byte_end":238769,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":239979,"byte_end":239994,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":240144,"byte_end":240159,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":240902,"byte_end":240917,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":241296,"byte_end":241309,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242633,"byte_end":242643,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242895,"byte_end":242905,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":243282,"byte_end":243292,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":244188,"byte_end":244197,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":245007,"byte_end":245016,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":245797,"byte_end":245815,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":246135,"byte_end":246153,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":249018,"byte_end":249031,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":250164,"byte_end":250177,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":250738,"byte_end":250751,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251678,"byte_end":251696,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":252338,"byte_end":252356,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":252733,"byte_end":252751,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253853,"byte_end":253864,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":254095,"byte_end":254106,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":254636,"byte_end":254647,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":255554,"byte_end":255562,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1740},{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":256129,"byte_end":256148,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":256389,"byte_end":256408,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":258583,"byte_end":258598,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":259370,"byte_end":259385,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":260033,"byte_end":260048,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":260396,"byte_end":260415,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":260640,"byte_end":260659,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":261737,"byte_end":261756,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":262296,"byte_end":262313,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":264036,"byte_end":264042,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":264247,"byte_end":264253,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":264588,"byte_end":264594,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":265172,"byte_end":265180,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":265815,"byte_end":265829,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267121,"byte_end":267127,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267332,"byte_end":267338,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267673,"byte_end":267679,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1877}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":268257,"byte_end":268265,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1886},{"krate":0,"index":1887}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":268900,"byte_end":268914,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1901}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270281,"byte_end":270284,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270441,"byte_end":270444,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270647,"byte_end":270650,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1925}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":271124,"byte_end":271127,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":271869,"byte_end":271877,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1945},{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":272556,"byte_end":272567,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":273739,"byte_end":273750,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":273891,"byte_end":273902,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":274641,"byte_end":274652,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":275043,"byte_end":275052,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276289,"byte_end":276296,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276528,"byte_end":276535,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276767,"byte_end":276774,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":277290,"byte_end":277297,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2049}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":278142,"byte_end":278150,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2064},{"krate":0,"index":2065}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":278933,"byte_end":278948,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":280281,"byte_end":280292,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2105}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":280673,"byte_end":280684,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":280975,"byte_end":280986,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":281300,"byte_end":281315,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":281481,"byte_end":281496,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":282340,"byte_end":282355,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2153},{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":282815,"byte_end":282828,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2182},{"krate":0,"index":2183}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284359,"byte_end":284366,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284539,"byte_end":284546,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2193}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284790,"byte_end":284797,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2203}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":285337,"byte_end":285344,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2213}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":286219,"byte_end":286227,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":287037,"byte_end":287052,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2252},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":288502,"byte_end":288517,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2268}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":288699,"byte_end":288714,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":289570,"byte_end":289585,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":2291},{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":298963,"byte_end":298975,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":2311}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":299319,"byte_end":299331,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":299687,"byte_end":299699,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2323}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":299893,"byte_end":299904,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300872,"byte_end":300876,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":301162,"byte_end":301166,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2343},{"krate":0,"index":2344}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302353,"byte_end":302357,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2355}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302515,"byte_end":302519,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302629,"byte_end":302638,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302833,"byte_end":302842,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":303352,"byte_end":303361,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":304061,"byte_end":304069,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2381},{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":304778,"byte_end":304795,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":305893,"byte_end":305906,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":306253,"byte_end":306266,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2414}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":306517,"byte_end":306530,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2418}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":306841,"byte_end":306858,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":307816,"byte_end":307833,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":308312,"byte_end":308327,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2458},{"krate":0,"index":2459}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":309176,"byte_end":309192,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2469}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311101,"byte_end":311102,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2494}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311612,"byte_end":311622,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2497},{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":312620,"byte_end":312640,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":312932,"byte_end":312952,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":316760,"byte_end":316775,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":316797,"byte_end":316812,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2537}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":316961,"byte_end":316976,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2546}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":317526,"byte_end":317541,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2550},{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":317773,"byte_end":317788,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2554}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":317973,"byte_end":317986,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319001,"byte_end":319015,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319057,"byte_end":319071,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2589}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319173,"byte_end":319187,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2600}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319714,"byte_end":319728,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2606},{"krate":0,"index":2607}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319977,"byte_end":319991,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":320232,"byte_end":320244,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2629}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321646,"byte_end":321652,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2639},{"krate":0,"index":2640}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322504,"byte_end":322510,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2644},{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322960,"byte_end":322974,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":324025,"byte_end":324032,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2663}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":324350,"byte_end":324357,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":324969,"byte_end":324984,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":325781,"byte_end":325785,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2689}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":326163,"byte_end":326167,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2692}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":326296,"byte_end":326300,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2695}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326879,"byte_end":326882,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2702}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":327064,"byte_end":327067,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":327402,"byte_end":327405,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2714}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":327975,"byte_end":327983,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2723},{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":328498,"byte_end":328509,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329714,"byte_end":329718,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2745}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329951,"byte_end":329955,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2751}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":330290,"byte_end":330294,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2757}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":330875,"byte_end":330883,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2766},{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335716,"byte_end":335721,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2781}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335901,"byte_end":335906,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2785},{"krate":0,"index":2786}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":336394,"byte_end":336407,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2801}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337327,"byte_end":337338,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337360,"byte_end":337371,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337512,"byte_end":337523,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337990,"byte_end":338001,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2835},{"krate":0,"index":2836}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":338217,"byte_end":338228,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2839}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":338401,"byte_end":338410,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339395,"byte_end":339399,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2858}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339632,"byte_end":339636,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339971,"byte_end":339975,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":340538,"byte_end":340546,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341060,"byte_end":341067,"line_start":8,"line_end":8,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2895}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341969,"byte_end":341976,"line_start":39,"line_end":39,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2901}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":342172,"byte_end":342179,"line_start":45,"line_end":45,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2907},{"krate":0,"index":2908}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":342875,"byte_end":342890,"line_start":75,"line_end":75,"column_start":42,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2932}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":343781,"byte_end":343796,"line_start":111,"line_end":111,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2940},{"krate":0,"index":2941}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":344314,"byte_end":344327,"line_start":136,"line_end":136,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345055,"byte_end":345066,"line_start":167,"line_end":167,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2964}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345907,"byte_end":345918,"line_start":196,"line_end":196,"column_start":56,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":346199,"byte_end":346210,"line_start":208,"line_end":208,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2974},{"krate":0,"index":2975}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":346820,"byte_end":346839,"line_start":236,"line_end":236,"column_start":38,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2996}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":347802,"byte_end":347821,"line_start":276,"line_end":276,"column_start":47,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":348897,"byte_end":348914,"line_start":29,"line_end":29,"column_start":26,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":348956,"byte_end":348973,"line_start":31,"line_end":31,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3032}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":349075,"byte_end":349092,"line_start":37,"line_end":37,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":349706,"byte_end":349723,"line_start":64,"line_end":64,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":349990,"byte_end":350007,"line_start":79,"line_end":79,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3056}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":350483,"byte_end":350498,"line_start":98,"line_end":98,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":3070},{"krate":0,"index":3071}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":351838,"byte_end":351859,"line_start":26,"line_end":26,"column_start":22,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":351893,"byte_end":351914,"line_start":28,"line_end":28,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3094}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":352008,"byte_end":352029,"line_start":34,"line_end":34,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3104}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":352608,"byte_end":352629,"line_start":60,"line_end":60,"column_start":41,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3109},{"krate":0,"index":3110}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":352866,"byte_end":352887,"line_start":74,"line_end":74,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3115}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":353542,"byte_end":353561,"line_start":97,"line_end":97,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":357457,"byte_end":357462,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3171},{"krate":0,"index":3174}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":358343,"byte_end":358352,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3188}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":359389,"byte_end":359401,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3206},{"krate":0,"index":3207},{"krate":0,"index":3208}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":360032,"byte_end":360038,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3227}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":361439,"byte_end":361445,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3245}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":362382,"byte_end":362395,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":363658,"byte_end":363671,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3272},{"krate":0,"index":3273}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":364335,"byte_end":364346,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3288},{"krate":0,"index":3289},{"krate":0,"index":3290},{"krate":0,"index":3291}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":365087,"byte_end":365099,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3302}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":366183,"byte_end":366191,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367172,"byte_end":367178,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3336}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367338,"byte_end":367344,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3340}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367556,"byte_end":367562,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3344},{"krate":0,"index":3345},{"krate":0,"index":3347}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":368024,"byte_end":368030,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3351},{"krate":0,"index":3353},{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":368771,"byte_end":368779,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3365},{"krate":0,"index":3366}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":369456,"byte_end":369470,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":370730,"byte_end":370744,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3396}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":370891,"byte_end":370905,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3407}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":371651,"byte_end":371665,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3413},{"krate":0,"index":3414}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":372186,"byte_end":372198,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3435},{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":373144,"byte_end":373153,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3446}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":373903,"byte_end":373912,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":374016,"byte_end":374025,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3454}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374838,"byte_end":374847,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3463}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":375037,"byte_end":375046,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3467},{"krate":0,"index":3468}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":375676,"byte_end":375693,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3484}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":376493,"byte_end":376510,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":376913,"byte_end":376928,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3500},{"krate":0,"index":3501},{"krate":0,"index":3502},{"krate":0,"index":3508},{"krate":0,"index":3509}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378582,"byte_end":378585,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3518}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378808,"byte_end":378811,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3522},{"krate":0,"index":3523},{"krate":0,"index":3525}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":379195,"byte_end":379198,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3529},{"krate":0,"index":3531},{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":379858,"byte_end":379867,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3543},{"krate":0,"index":3544}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":380488,"byte_end":380497,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3555},{"krate":0,"index":3556}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":381154,"byte_end":381165,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569},{"krate":0,"index":3570},{"krate":0,"index":3571}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382574,"byte_end":382579,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3578}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382849,"byte_end":382854,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3585}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":383246,"byte_end":383251,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3589},{"krate":0,"index":3591},{"krate":0,"index":3592}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384348,"byte_end":384354,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3656}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384561,"byte_end":384567,"line_start":32,"line_end":32,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3662}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384902,"byte_end":384908,"line_start":50,"line_end":50,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3665},{"krate":0,"index":3667},{"krate":0,"index":3668}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":385590,"byte_end":385598,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3678},{"krate":0,"index":3679}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":386279,"byte_end":386293,"line_start":108,"line_end":108,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3693}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31411,"byte_end":31412,"line_start":269,"line_end":269,"column_start":67,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32920,"byte_end":32921,"line_start":316,"line_end":316,"column_start":70,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91556,"byte_end":91557,"line_start":2071,"line_end":2071,"column_start":52,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116338,"byte_end":116344,"line_start":2859,"line_end":2859,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":6741},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116669,"byte_end":116675,"line_start":2876,"line_end":2876,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":6742},{"krate":0,"index":4013},{"krate":0,"index":4014},{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388092,"byte_end":388098,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388271,"byte_end":388279,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4031},{"krate":0,"index":4032},{"krate":0,"index":4034}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388574,"byte_end":388582,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4037},{"krate":0,"index":4039},{"krate":0,"index":4040}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389739,"byte_end":389743,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4045}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":391219,"byte_end":391233,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4063},{"krate":0,"index":4064},{"krate":0,"index":4065},{"krate":0,"index":4066}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":391845,"byte_end":391851,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394674,"byte_end":394679,"line_start":50,"line_end":50,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4095},{"krate":0,"index":4096},{"krate":0,"index":4097}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394956,"byte_end":394968,"line_start":66,"line_end":66,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4103},{"krate":0,"index":4104},{"krate":0,"index":4105}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403439,"byte_end":403443,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4117}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":404017,"byte_end":404031,"line_start":63,"line_end":63,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4120},{"krate":0,"index":4121},{"krate":0,"index":4122}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408476,"byte_end":408482,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408916,"byte_end":408920,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4140}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":410173,"byte_end":410179,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4159}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":447579,"byte_end":447589,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4185}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":450539,"byte_end":450545,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4194}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":450794,"byte_end":450807,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4201}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":454533,"byte_end":454542,"line_start":217,"line_end":217,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4212}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":465984,"byte_end":465989,"line_start":521,"line_end":521,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4236}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/quicksort.rs","byte_start":475160,"byte_end":475171,"line_start":21,"line_end":21,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4258}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/quicksort.rs","byte_start":475401,"byte_end":475407,"line_start":34,"line_end":34,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4264}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/quicksort.rs","byte_start":475614,"byte_end":475624,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4271}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":428847,"byte_end":428851,"line_start":506,"line_end":506,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4404}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":428978,"byte_end":428982,"line_start":512,"line_end":512,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4408},{"krate":0,"index":4409},{"krate":0,"index":4411}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":429308,"byte_end":429312,"line_start":527,"line_end":527,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4415},{"krate":0,"index":4417},{"krate":0,"index":4418}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":429815,"byte_end":429827,"line_start":551,"line_end":551,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4427},{"krate":0,"index":4428},{"krate":0,"index":4429},{"krate":0,"index":4430}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430386,"byte_end":430392,"line_start":572,"line_end":572,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4434}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430521,"byte_end":430527,"line_start":578,"line_end":578,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4438},{"krate":0,"index":4439},{"krate":0,"index":4441}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430855,"byte_end":430861,"line_start":593,"line_end":593,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4445},{"krate":0,"index":4447},{"krate":0,"index":4448}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":431484,"byte_end":431498,"line_start":621,"line_end":621,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432364,"byte_end":432375,"line_start":653,"line_end":653,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4465}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432662,"byte_end":432673,"line_start":662,"line_end":662,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4469}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432807,"byte_end":432818,"line_start":668,"line_end":668,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4473},{"krate":0,"index":4474},{"krate":0,"index":4476}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":433146,"byte_end":433157,"line_start":683,"line_end":683,"column_start":58,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4480},{"krate":0,"index":4482},{"krate":0,"index":4483}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":433777,"byte_end":433796,"line_start":711,"line_end":711,"column_start":43,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":434638,"byte_end":434645,"line_start":742,"line_end":742,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4500}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":434775,"byte_end":434782,"line_start":748,"line_end":748,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4504},{"krate":0,"index":4505},{"krate":0,"index":4507}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":435110,"byte_end":435117,"line_start":763,"line_end":763,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4511},{"krate":0,"index":4513},{"krate":0,"index":4514}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":435791,"byte_end":435806,"line_start":792,"line_end":792,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4524},{"krate":0,"index":4525},{"krate":0,"index":4526},{"krate":0,"index":4527}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":436681,"byte_end":436688,"line_start":823,"line_end":823,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4531},{"krate":0,"index":4532},{"krate":0,"index":4534}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":437018,"byte_end":437025,"line_start":838,"line_end":838,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4538},{"krate":0,"index":4540},{"krate":0,"index":4541}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":437538,"byte_end":437553,"line_start":862,"line_end":862,"column_start":43,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":4550},{"krate":0,"index":4551},{"krate":0,"index":4552},{"krate":0,"index":4553}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":438192,"byte_end":438201,"line_start":886,"line_end":886,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4560}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":438533,"byte_end":438542,"line_start":901,"line_end":901,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":4564},{"krate":0,"index":4566},{"krate":0,"index":4567}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":439175,"byte_end":439192,"line_start":929,"line_end":929,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579},{"krate":0,"index":4580}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440088,"byte_end":440102,"line_start":961,"line_end":961,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4584},{"krate":0,"index":4585},{"krate":0,"index":4586}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441517,"byte_end":441531,"line_start":993,"line_end":993,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4590},{"krate":0,"index":4591},{"krate":0,"index":4593}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441863,"byte_end":441877,"line_start":1008,"line_end":1008,"column_start":58,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":4597},{"krate":0,"index":4599},{"krate":0,"index":4600}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":442507,"byte_end":442529,"line_start":1036,"line_end":1036,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":4610},{"krate":0,"index":4611},{"krate":0,"index":4612},{"krate":0,"index":4613}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443359,"byte_end":443364,"line_start":1066,"line_end":1066,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4624}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443547,"byte_end":443552,"line_start":1075,"line_end":1075,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4629}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443748,"byte_end":443753,"line_start":1081,"line_end":1081,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4634},{"krate":0,"index":4635}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":445240,"byte_end":445248,"line_start":1142,"line_end":1142,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4658}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":445473,"byte_end":445481,"line_start":1150,"line_end":1150,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4663},{"krate":0,"index":4664}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":518536,"byte_end":518538,"line_start":350,"line_end":350,"column_start":54,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":7243},{"krate":0,"index":4737},{"krate":0,"index":4738},{"krate":0,"index":4739},{"krate":0,"index":4740},{"krate":0,"index":4743},{"krate":0,"index":4746}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":519781,"byte_end":519786,"line_start":403,"line_end":403,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4754},{"krate":0,"index":4755}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":520046,"byte_end":520059,"line_start":414,"line_end":414,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4759},{"krate":0,"index":4760},{"krate":0,"index":4761}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":520858,"byte_end":520869,"line_start":448,"line_end":448,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4769},{"krate":0,"index":4770}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":521220,"byte_end":521239,"line_start":463,"line_end":463,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4776}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":522211,"byte_end":522216,"line_start":503,"line_end":503,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4783},{"krate":0,"index":4784}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":522474,"byte_end":522487,"line_start":514,"line_end":514,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4788},{"krate":0,"index":4789},{"krate":0,"index":4790}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":523244,"byte_end":523255,"line_start":547,"line_end":547,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4797},{"krate":0,"index":4798}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":523520,"byte_end":523539,"line_start":558,"line_end":558,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4802},{"krate":0,"index":4803},{"krate":0,"index":4804}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":524280,"byte_end":524285,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4809}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":524435,"byte_end":524440,"line_start":594,"line_end":594,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4813},{"krate":0,"index":4814}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526093,"byte_end":526108,"line_start":654,"line_end":654,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Inherent","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526262,"byte_end":526285,"line_start":660,"line_end":660,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4840}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526593,"byte_end":526608,"line_start":669,"line_end":669,"column_start":44,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":4844},{"krate":0,"index":4845}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526956,"byte_end":526979,"line_start":681,"line_end":681,"column_start":58,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":4851},{"krate":0,"index":4852},{"krate":0,"index":4854}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":527943,"byte_end":527948,"line_start":721,"line_end":721,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4859},{"krate":0,"index":4860}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":528542,"byte_end":528557,"line_start":746,"line_end":746,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4865},{"krate":0,"index":4866}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":529222,"byte_end":529229,"line_start":774,"line_end":774,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4877},{"krate":0,"index":4878}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":529606,"byte_end":529621,"line_start":789,"line_end":789,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":4884},{"krate":0,"index":4885},{"krate":0,"index":4886}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":530658,"byte_end":530670,"line_start":831,"line_end":831,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4898},{"krate":0,"index":4899}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":531083,"byte_end":531103,"line_start":847,"line_end":847,"column_start":51,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":4905},{"krate":0,"index":4906},{"krate":0,"index":4907}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532279,"byte_end":532282,"line_start":17,"line_end":17,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4914},{"krate":0,"index":4915},{"krate":0,"index":4916}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532455,"byte_end":532463,"line_start":26,"line_end":26,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4919},{"krate":0,"index":4920},{"krate":0,"index":4922}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532760,"byte_end":532768,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4925},{"krate":0,"index":4927},{"krate":0,"index":4928}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":533883,"byte_end":533894,"line_start":79,"line_end":79,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":4937},{"krate":0,"index":4938},{"krate":0,"index":4939},{"krate":0,"index":4940}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":534558,"byte_end":534569,"line_start":99,"line_end":99,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":4944}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":534931,"byte_end":534941,"line_start":114,"line_end":114,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4952},{"krate":0,"index":4953},{"krate":0,"index":4954}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":535263,"byte_end":535273,"line_start":128,"line_end":128,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":4958}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":535478,"byte_end":535488,"line_start":135,"line_end":135,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4962}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":535594,"byte_end":535604,"line_start":141,"line_end":141,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4966}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/par_either.rs","byte_start":536673,"byte_end":536679,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4978},{"krate":0,"index":4979},{"krate":0,"index":4981}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/par_either.rs","byte_start":537199,"byte_end":537205,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4985},{"krate":0,"index":4987},{"krate":0,"index":4988}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/par_either.rs","byte_start":537999,"byte_end":538005,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4994}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3957,"byte_end":3968,"line_start":93,"line_end":93,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":46}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12497,"byte_end":12508,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":48}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12518,"byte_end":12527,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":62}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12537,"byte_end":12546,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":72}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12556,"byte_end":12564,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":81}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12574,"byte_end":12582,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12592,"byte_end":12603,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":106}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/mod.rs","byte_start":12613,"byte_end":12622,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":115}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3978,"byte_end":3982,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":137}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":26498,"byte_end":26506,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":148}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":3992,"byte_end":3998,"line_start":95,"line_end":95,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4018}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4008,"byte_end":4015,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4076}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4025,"byte_end":4030,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4088}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4040,"byte_end":4055,"line_start":98,"line_end":98,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":4111}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4065,"byte_end":4071,"line_start":99,"line_end":99,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4126}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4081,"byte_end":4086,"line_start":100,"line_end":100,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":4166}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4096,"byte_end":4099,"line_start":101,"line_end":101,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4677}},{"kind":"Mod","span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/lib.rs","byte_start":4109,"byte_end":4112,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4909}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/split_producer.rs","byte_start":8045,"byte_end":8050,"line_start":17,"line_end":17,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/split_producer.rs","byte_start":8476,"byte_end":8489,"line_start":29,"line_end":29,"column_start":16,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/split_producer.rs","byte_start":9957,"byte_end":9970,"line_start":77,"line_end":77,"column_start":38,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":15},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13104,"byte_end":13114,"line_start":18,"line_end":18,"column_start":46,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":428},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/binary_heap.rs","byte_start":13571,"byte_end":13575,"line_start":40,"line_end":40,"column_start":35,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":5049},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_map.rs","byte_start":14775,"byte_end":14779,"line_start":34,"line_end":34,"column_start":44,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":5101},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/btree_set.rs","byte_start":16290,"byte_end":16294,"line_start":34,"line_end":34,"column_start":40,"column_end":44},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":5171},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_map.rs","byte_start":17558,"byte_end":17562,"line_start":35,"line_end":35,"column_start":50,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":5216},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/hash_set.rs","byte_start":19208,"byte_end":19212,"line_start":35,"line_end":35,"column_start":41,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":5289},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/linked_list.rs","byte_start":20318,"byte_end":20322,"line_start":34,"line_end":34,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":5333},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/collections/vec_deque.rs","byte_start":21731,"byte_end":21735,"line_start":35,"line_end":35,"column_start":29,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5405},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119712,"byte_end":119716,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1926},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":119719,"byte_end":119724,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122726,"byte_end":122730,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1926},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":122733,"byte_end":122738,"line_start":128,"line_end":128,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":124046,"byte_end":124051,"line_start":159,"line_end":159,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":126066,"byte_end":126074,"line_start":213,"line_end":213,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127179,"byte_end":127183,"line_start":236,"line_end":236,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1926},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":127186,"byte_end":127191,"line_start":236,"line_end":236,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":128179,"byte_end":128187,"line_start":263,"line_end":263,"column_start":6,"column_end":14},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":129316,"byte_end":129330,"line_start":302,"line_end":302,"column_start":6,"column_end":20},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":5456},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/plumbing/mod.rs","byte_start":131689,"byte_end":131697,"line_start":364,"line_end":364,"column_start":40,"column_end":48},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":204},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136410,"byte_end":136415,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":5462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":136644,"byte_end":136649,"line_start":34,"line_end":34,"column_start":33,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5462},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":137752,"byte_end":137757,"line_start":67,"line_end":67,"column_start":40,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5462},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":138692,"byte_end":138701,"line_start":103,"line_end":103,"column_start":51,"column_end":60},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":259},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":139379,"byte_end":139388,"line_start":128,"line_end":128,"column_start":51,"column_end":60},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":271},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":140057,"byte_end":140070,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":140253,"byte_end":140266,"line_start":168,"line_end":168,"column_start":25,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":283},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":141878,"byte_end":141886,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":142100,"byte_end":142108,"line_start":237,"line_end":237,"column_start":25,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":142404,"byte_end":142412,"line_start":253,"line_end":253,"column_start":34,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chain.rs","byte_start":142533,"byte_end":142541,"line_start":260,"line_end":260,"column_start":36,"column_end":44},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":304},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143311,"byte_end":143317,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143517,"byte_end":143523,"line_start":33,"line_end":33,"column_start":30,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5475},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":143856,"byte_end":143862,"line_start":51,"line_end":51,"column_start":37,"column_end":43},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5475},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":144560,"byte_end":144568,"line_start":83,"line_end":83,"column_start":45,"column_end":53},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":346},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":145141,"byte_end":145154,"line_start":112,"line_end":112,"column_start":22,"column_end":35},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":357},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":146273,"byte_end":146281,"line_start":159,"line_end":159,"column_start":22,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":146959,"byte_end":146967,"line_start":185,"line_end":185,"column_start":31,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/chunks.rs","byte_start":147128,"byte_end":147136,"line_start":195,"line_end":195,"column_start":33,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":370},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148267,"byte_end":148273,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148461,"byte_end":148467,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5485},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":148915,"byte_end":148921,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5485},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":149566,"byte_end":149574,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":410},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":150131,"byte_end":150145,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":420},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":151041,"byte_end":151055,"line_start":142,"line_end":142,"column_start":9,"column_end":23},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":151167,"byte_end":151181,"line_start":148,"line_end":148,"column_start":36,"column_end":50},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":435},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":151829,"byte_end":151843,"line_start":177,"line_end":177,"column_start":45,"column_end":59},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":435},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/cloned.rs","byte_start":152163,"byte_end":152175,"line_start":195,"line_end":195,"column_start":34,"column_end":46},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":457},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":159662,"byte_end":159677,"line_start":20,"line_end":20,"column_start":24,"column_end":39},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":160318,"byte_end":160331,"line_start":39,"line_end":39,"column_start":29,"column_end":42},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":1926}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":160369,"byte_end":160382,"line_start":41,"line_end":41,"column_start":13,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":160728,"byte_end":160741,"line_start":55,"line_end":55,"column_start":22,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":161048,"byte_end":161063,"line_start":65,"line_end":65,"column_start":40,"column_end":55},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":482},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":162142,"byte_end":162155,"line_start":101,"line_end":101,"column_start":38,"column_end":51},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":486},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":163065,"byte_end":163080,"line_start":132,"line_end":132,"column_start":49,"column_end":64},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":482},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/consumer.rs","byte_start":163469,"byte_end":163483,"line_start":145,"line_end":145,"column_start":47,"column_end":61},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":534},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/mod.rs","byte_start":155130,"byte_end":155137,"line_start":74,"line_end":74,"column_start":24,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/collect/mod.rs","byte_start":158118,"byte_end":158121,"line_start":144,"line_end":144,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":5,"index":4232},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178445,"byte_end":178451,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":178639,"byte_end":178645,"line_start":28,"line_end":28,"column_start":37,"column_end":43},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5494},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":179092,"byte_end":179098,"line_start":48,"line_end":48,"column_start":44,"column_end":50},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5494},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":179742,"byte_end":179750,"line_start":75,"line_end":75,"column_start":53,"column_end":61},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":597},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":180306,"byte_end":180320,"line_start":99,"line_end":99,"column_start":29,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":607},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":181289,"byte_end":181303,"line_start":143,"line_end":143,"column_start":9,"column_end":23},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":181415,"byte_end":181429,"line_start":149,"line_end":149,"column_start":36,"column_end":50},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":622},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":182076,"byte_end":182090,"line_start":178,"line_end":178,"column_start":45,"column_end":59},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":622},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/copied.rs","byte_start":182409,"byte_end":182421,"line_start":196,"line_end":196,"column_start":34,"column_end":46},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":644},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183777,"byte_end":183782,"line_start":35,"line_end":35,"column_start":25,"column_end":30},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":664},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":183872,"byte_end":183877,"line_start":41,"line_end":41,"column_start":30,"column_end":35},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":664},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":184013,"byte_end":184018,"line_start":47,"line_end":47,"column_start":36,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":664},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":184304,"byte_end":184309,"line_start":62,"line_end":62,"column_start":43,"column_end":48},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":664},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/empty.rs","byte_start":184789,"byte_end":184802,"line_start":85,"line_end":85,"column_start":28,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":686},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185782,"byte_end":185791,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":185985,"byte_end":185994,"line_start":28,"line_end":28,"column_start":30,"column_end":39},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":5503},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":186338,"byte_end":186347,"line_start":46,"line_end":46,"column_start":37,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":5503},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":186853,"byte_end":186861,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":720},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/enumerate.rs","byte_start":187445,"byte_end":187462,"line_start":92,"line_end":92,"column_start":22,"column_end":39},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":729},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":190451,"byte_end":190461,"line_start":64,"line_end":64,"column_start":31,"column_end":41},"kind":{"Impl":{"id":99}},"from":{"krate":5,"index":428},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":190759,"byte_end":190769,"line_start":77,"line_end":77,"column_start":39,"column_end":49},"kind":{"Impl":{"id":100}},"from":{"krate":5,"index":428},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":191082,"byte_end":191090,"line_start":90,"line_end":90,"column_start":39,"column_end":47},"kind":{"Impl":{"id":101}},"from":{"krate":5,"index":692},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":191426,"byte_end":191434,"line_start":104,"line_end":104,"column_start":59,"column_end":67},"kind":{"Impl":{"id":102}},"from":{"krate":5,"index":692},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":191771,"byte_end":191779,"line_start":118,"line_end":118,"column_start":31,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":5,"index":4759},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":192074,"byte_end":192082,"line_start":131,"line_end":131,"column_start":39,"column_end":47},"kind":{"Impl":{"id":104}},"from":{"krate":5,"index":4759},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":192553,"byte_end":192560,"line_start":152,"line_end":152,"column_start":42,"column_end":49},"kind":{"Impl":{"id":105}},"from":{"krate":1,"index":6314},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":193016,"byte_end":193023,"line_start":168,"line_end":168,"column_start":62,"column_end":69},"kind":{"Impl":{"id":106}},"from":{"krate":1,"index":6314},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":193551,"byte_end":193558,"line_start":191,"line_end":191,"column_start":34,"column_end":41},"kind":{"Impl":{"id":107}},"from":{"krate":1,"index":6340},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":193891,"byte_end":193898,"line_start":205,"line_end":205,"column_start":42,"column_end":49},"kind":{"Impl":{"id":108}},"from":{"krate":1,"index":6340},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":194351,"byte_end":194361,"line_start":224,"line_end":224,"column_start":31,"column_end":41},"kind":{"Impl":{"id":109}},"from":{"krate":5,"index":2108},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":194802,"byte_end":194812,"line_start":241,"line_end":241,"column_start":39,"column_end":49},"kind":{"Impl":{"id":110}},"from":{"krate":5,"index":2108},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":195217,"byte_end":195223,"line_start":259,"line_end":259,"column_start":31,"column_end":37},"kind":{"Impl":{"id":111}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":195879,"byte_end":195885,"line_start":278,"line_end":278,"column_start":39,"column_end":45},"kind":{"Impl":{"id":112}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":196353,"byte_end":196359,"line_start":293,"line_end":293,"column_start":38,"column_end":44},"kind":{"Impl":{"id":113}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":196621,"byte_end":196627,"line_start":303,"line_end":303,"column_start":33,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":196904,"byte_end":196910,"line_start":313,"line_end":313,"column_start":43,"column_end":49},"kind":{"Impl":{"id":115}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":197282,"byte_end":197290,"line_start":327,"line_end":327,"column_start":31,"column_end":39},"kind":{"Impl":{"id":116}},"from":{"krate":5,"index":2538},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":197577,"byte_end":197585,"line_start":340,"line_end":340,"column_start":39,"column_end":47},"kind":{"Impl":{"id":117}},"from":{"krate":5,"index":2538},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/extend.rs","byte_start":197998,"byte_end":198001,"line_start":356,"line_end":356,"column_start":39,"column_end":42},"kind":{"Impl":{"id":118}},"from":{"krate":5,"index":4232},"to":{"krate":0,"index":3992}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199056,"byte_end":199062,"line_start":18,"line_end":18,"column_start":48,"column_end":54},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":5512},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199222,"byte_end":199228,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":5512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199440,"byte_end":199446,"line_start":34,"line_end":34,"column_start":33,"column_end":39},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":5512},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":199990,"byte_end":200004,"line_start":58,"line_end":58,"column_start":16,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":200155,"byte_end":200169,"line_start":64,"line_end":64,"column_start":39,"column_end":53},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":914},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":200913,"byte_end":200927,"line_start":94,"line_end":94,"column_start":48,"column_end":62},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":914},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter.rs","byte_start":201310,"byte_end":201322,"line_start":113,"line_end":113,"column_start":33,"column_end":45},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":943},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202598,"byte_end":202607,"line_start":18,"line_end":18,"column_start":48,"column_end":57},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":5521},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":202814,"byte_end":202823,"line_start":26,"line_end":26,"column_start":30,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":5521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":203013,"byte_end":203022,"line_start":33,"line_end":33,"column_start":36,"column_end":45},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5521},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":203585,"byte_end":203602,"line_start":58,"line_end":58,"column_start":20,"column_end":37},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":203755,"byte_end":203772,"line_start":64,"line_end":64,"column_start":38,"column_end":55},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":979},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":204558,"byte_end":204575,"line_start":95,"line_end":95,"column_start":47,"column_end":64},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":979},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/filter_map.rs","byte_start":204976,"byte_end":204991,"line_start":114,"line_end":114,"column_start":36,"column_end":51},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1010},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":206161,"byte_end":206173,"line_start":20,"line_end":20,"column_start":13,"column_end":25},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":206327,"byte_end":206339,"line_start":26,"line_end":26,"column_start":36,"column_end":48},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":206924,"byte_end":206936,"line_start":52,"line_end":52,"column_start":45,"column_end":57},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1035},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":207296,"byte_end":207306,"line_start":72,"line_end":72,"column_start":30,"column_end":40},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1060},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find.rs","byte_start":208333,"byte_end":208344,"line_start":116,"line_end":116,"column_start":32,"column_end":43},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1081},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":210866,"byte_end":210878,"line_start":69,"line_end":69,"column_start":13,"column_end":25},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":211428,"byte_end":211440,"line_start":88,"line_end":88,"column_start":32,"column_end":44},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1100},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":212506,"byte_end":212518,"line_start":129,"line_end":129,"column_start":41,"column_end":53},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1100},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":214076,"byte_end":214086,"line_start":174,"line_end":174,"column_start":51,"column_end":61},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1129},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/find_first_last/mod.rs","byte_start":215794,"byte_end":215805,"line_start":231,"line_end":231,"column_start":32,"column_end":43},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1146},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216617,"byte_end":216624,"line_start":18,"line_end":18,"column_start":48,"column_end":55},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":5538},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216803,"byte_end":216810,"line_start":24,"line_end":24,"column_start":30,"column_end":37},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":216991,"byte_end":216998,"line_start":31,"line_end":31,"column_start":37,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":5538},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":217609,"byte_end":217624,"line_start":59,"line_end":59,"column_start":16,"column_end":31},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":217769,"byte_end":217784,"line_start":65,"line_end":65,"column_start":38,"column_end":53},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1172},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":218576,"byte_end":218591,"line_start":97,"line_end":97,"column_start":47,"column_end":62},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1172},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flat_map.rs","byte_start":219031,"byte_end":219044,"line_start":118,"line_end":118,"column_start":36,"column_end":49},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1203},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220616,"byte_end":220623,"line_start":16,"line_end":16,"column_start":13,"column_end":20},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/flatten.rs","byte_start":220858,"byte_end":220865,"line_start":27,"line_end":27,"column_start":34,"column_end":41},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5547},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":221301,"byte_end":221305,"line_start":6,"line_end":6,"column_start":19,"column_end":23},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":222102,"byte_end":222106,"line_start":35,"line_end":35,"column_start":52,"column_end":56},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5556},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":222296,"byte_end":222300,"line_start":41,"line_end":41,"column_start":40,"column_end":44},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5556},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":222909,"byte_end":222921,"line_start":69,"line_end":69,"column_start":42,"column_end":54},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1261},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":223777,"byte_end":223789,"line_start":105,"line_end":105,"column_start":51,"column_end":63},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1261},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":224258,"byte_end":224268,"line_start":130,"line_end":130,"column_start":37,"column_end":47},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1291},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":225428,"byte_end":225436,"line_start":182,"line_end":182,"column_start":15,"column_end":23},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":5568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":226225,"byte_end":226233,"line_start":210,"line_end":210,"column_start":58,"column_end":66},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":5568},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":226487,"byte_end":226495,"line_start":219,"line_end":219,"column_start":36,"column_end":44},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":5568},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":227063,"byte_end":227079,"line_start":246,"line_end":246,"column_start":38,"column_end":54},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1334},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/fold.rs","byte_start":227997,"byte_end":228013,"line_start":285,"line_end":285,"column_start":47,"column_end":63},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1334},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/for_each.rs","byte_start":228742,"byte_end":228757,"line_start":19,"line_end":19,"column_start":32,"column_end":47},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/for_each.rs","byte_start":229153,"byte_end":229168,"line_start":40,"line_end":40,"column_start":30,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/for_each.rs","byte_start":229592,"byte_end":229607,"line_start":66,"line_end":66,"column_start":41,"column_end":56},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1370},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":230493,"byte_end":230496,"line_start":22,"line_end":22,"column_start":37,"column_end":40},"kind":{"Impl":{"id":166}},"from":{"krate":5,"index":4232},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":230766,"byte_end":230774,"line_start":35,"line_end":35,"column_start":37,"column_end":45},"kind":{"Impl":{"id":167}},"from":{"krate":5,"index":2538},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":231131,"byte_end":231141,"line_start":49,"line_end":49,"column_start":37,"column_end":47},"kind":{"Impl":{"id":168}},"from":{"krate":5,"index":428},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":231451,"byte_end":231461,"line_start":63,"line_end":63,"column_start":37,"column_end":47},"kind":{"Impl":{"id":169}},"from":{"krate":5,"index":2108},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":231925,"byte_end":231932,"line_start":79,"line_end":79,"column_start":48,"column_end":55},"kind":{"Impl":{"id":170}},"from":{"krate":1,"index":6314},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":232467,"byte_end":232475,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":171}},"from":{"krate":5,"index":692},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":232775,"byte_end":232782,"line_start":111,"line_end":111,"column_start":40,"column_end":47},"kind":{"Impl":{"id":172}},"from":{"krate":1,"index":6340},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233105,"byte_end":233113,"line_start":125,"line_end":125,"column_start":37,"column_end":45},"kind":{"Impl":{"id":173}},"from":{"krate":5,"index":4759},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233392,"byte_end":233398,"line_start":138,"line_end":138,"column_start":37,"column_end":43},"kind":{"Impl":{"id":174}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233660,"byte_end":233666,"line_start":148,"line_end":148,"column_start":45,"column_end":51},"kind":{"Impl":{"id":175}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":233934,"byte_end":233940,"line_start":158,"line_end":158,"column_start":44,"column_end":50},"kind":{"Impl":{"id":176}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":234204,"byte_end":234210,"line_start":168,"line_end":168,"column_start":39,"column_end":45},"kind":{"Impl":{"id":177}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":234481,"byte_end":234487,"line_start":178,"line_end":178,"column_start":49,"column_end":55},"kind":{"Impl":{"id":178}},"from":{"krate":5,"index":4932},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/from_par_iter.rs","byte_start":234931,"byte_end":234934,"line_start":192,"line_end":192,"column_start":52,"column_end":55},"kind":{"Impl":{"id":179}},"from":{"krate":5,"index":339},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236468,"byte_end":236475,"line_start":21,"line_end":21,"column_start":48,"column_end":55},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5580},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236636,"byte_end":236643,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":5580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":236859,"byte_end":236866,"line_start":37,"line_end":37,"column_start":33,"column_end":40},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5580},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":237326,"byte_end":237333,"line_start":57,"line_end":57,"column_start":40,"column_end":47},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5580},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":238075,"byte_end":238083,"line_start":88,"line_end":88,"column_start":48,"column_end":56},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1516},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":238754,"byte_end":238769,"line_start":116,"line_end":116,"column_start":29,"column_end":44},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1528},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":239979,"byte_end":239994,"line_start":170,"line_end":170,"column_start":16,"column_end":31},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":240144,"byte_end":240159,"line_start":176,"line_end":176,"column_start":35,"column_end":50},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1546},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":240902,"byte_end":240917,"line_start":206,"line_end":206,"column_start":44,"column_end":59},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1546},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/inspect.rs","byte_start":241296,"byte_end":241309,"line_start":225,"line_end":225,"column_start":33,"column_end":46},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1575},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242633,"byte_end":242643,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":5589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":242895,"byte_end":242905,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5589},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":243282,"byte_end":243292,"line_start":53,"line_end":53,"column_start":40,"column_end":50},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5589},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":244188,"byte_end":244197,"line_start":90,"line_end":90,"column_start":51,"column_end":60},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1616},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":245007,"byte_end":245016,"line_start":119,"line_end":119,"column_start":51,"column_end":60},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1630},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":245797,"byte_end":245815,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":246135,"byte_end":246153,"line_start":171,"line_end":171,"column_start":25,"column_end":43},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1644},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":249018,"byte_end":249031,"line_start":267,"line_end":267,"column_start":25,"column_end":38},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1666},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":250164,"byte_end":250177,"line_start":306,"line_end":306,"column_start":36,"column_end":49},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1666},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave.rs","byte_start":250738,"byte_end":250751,"line_start":327,"line_end":327,"column_start":34,"column_end":47},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1666},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":251678,"byte_end":251696,"line_start":23,"line_end":23,"column_start":12,"column_end":30},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":5602},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":252338,"byte_end":252356,"line_start":44,"line_end":44,"column_start":33,"column_end":51},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":5602},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/interleave_shortest.rs","byte_start":252733,"byte_end":252751,"line_start":63,"line_end":63,"column_start":40,"column_end":58},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":5602},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":253853,"byte_end":253864,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":5614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":254095,"byte_end":254106,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":5614},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":254636,"byte_end":254647,"line_start":57,"line_end":57,"column_start":37,"column_end":48},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":5614},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":255554,"byte_end":255562,"line_start":96,"line_end":96,"column_start":45,"column_end":53},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1731},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":256129,"byte_end":256148,"line_start":124,"line_end":124,"column_start":9,"column_end":28},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":256389,"byte_end":256408,"line_start":138,"line_end":138,"column_start":22,"column_end":41},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1743},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":258583,"byte_end":258598,"line_start":217,"line_end":217,"column_start":22,"column_end":37},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":259370,"byte_end":259385,"line_start":246,"line_end":246,"column_start":33,"column_end":48},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":260033,"byte_end":260048,"line_start":268,"line_end":268,"column_start":31,"column_end":46},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":260396,"byte_end":260415,"line_start":285,"line_end":285,"column_start":12,"column_end":31},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":260640,"byte_end":260659,"line_start":298,"line_end":298,"column_start":28,"column_end":47},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1779},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":261737,"byte_end":261756,"line_start":335,"line_end":335,"column_start":37,"column_end":56},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1779},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/intersperse.rs","byte_start":262296,"byte_end":262313,"line_start":361,"line_end":361,"column_start":26,"column_end":43},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1803},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":264036,"byte_end":264042,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":264247,"byte_end":264253,"line_start":27,"line_end":27,"column_start":30,"column_end":36},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":5624},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":264588,"byte_end":264594,"line_start":45,"line_end":45,"column_start":37,"column_end":43},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":5624},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":265172,"byte_end":265180,"line_start":71,"line_end":71,"column_start":45,"column_end":53},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1839},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":265815,"byte_end":265829,"line_start":98,"line_end":98,"column_start":22,"column_end":36},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1849},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267121,"byte_end":267127,"line_start":151,"line_end":151,"column_start":9,"column_end":15},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267332,"byte_end":267338,"line_start":161,"line_end":161,"column_start":30,"column_end":36},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":5634},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":267673,"byte_end":267679,"line_start":179,"line_end":179,"column_start":37,"column_end":43},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":5634},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":268257,"byte_end":268265,"line_start":205,"line_end":205,"column_start":45,"column_end":53},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1879},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/len.rs","byte_start":268900,"byte_end":268914,"line_start":232,"line_end":232,"column_start":22,"column_end":36},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1889},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270281,"byte_end":270284,"line_start":20,"line_end":20,"column_start":48,"column_end":51},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":5644},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270441,"byte_end":270444,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":5644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":270647,"byte_end":270650,"line_start":36,"line_end":36,"column_start":36,"column_end":39},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":5644},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":271124,"byte_end":271127,"line_start":57,"line_end":57,"column_start":43,"column_end":46},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":5644},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":271869,"byte_end":271877,"line_start":89,"line_end":89,"column_start":51,"column_end":59},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1935},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":272556,"byte_end":272567,"line_start":118,"line_end":118,"column_start":32,"column_end":43},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1948},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":273739,"byte_end":273750,"line_start":172,"line_end":172,"column_start":16,"column_end":27},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":273891,"byte_end":273902,"line_start":178,"line_end":178,"column_start":38,"column_end":49},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1967},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":274641,"byte_end":274652,"line_start":209,"line_end":209,"column_start":47,"column_end":58},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1967},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map.rs","byte_start":275043,"byte_end":275052,"line_start":229,"line_end":229,"column_start":36,"column_end":45},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1998},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276289,"byte_end":276296,"line_start":20,"line_end":20,"column_start":58,"column_end":65},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":5653},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276528,"byte_end":276535,"line_start":29,"line_end":29,"column_start":15,"column_end":22},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":5653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":276767,"byte_end":276774,"line_start":39,"line_end":39,"column_start":39,"column_end":46},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":5653},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":277290,"byte_end":277297,"line_start":61,"line_end":61,"column_start":46,"column_end":53},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":5653},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":278142,"byte_end":278150,"line_start":96,"line_end":96,"column_start":54,"column_end":62},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2051},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":278933,"byte_end":278948,"line_start":128,"line_end":128,"column_start":35,"column_end":50},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":280281,"byte_end":280292,"line_start":188,"line_end":188,"column_start":35,"column_end":46},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2089},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":280673,"byte_end":280684,"line_start":206,"line_end":206,"column_start":46,"column_end":57},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2089},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":280975,"byte_end":280986,"line_start":218,"line_end":218,"column_start":44,"column_end":55},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2089},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":281300,"byte_end":281315,"line_start":235,"line_end":235,"column_start":19,"column_end":34},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":281481,"byte_end":281496,"line_start":241,"line_end":241,"column_start":41,"column_end":56},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2119},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":282340,"byte_end":282355,"line_start":274,"line_end":274,"column_start":50,"column_end":65},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2119},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":282815,"byte_end":282828,"line_start":296,"line_end":296,"column_start":39,"column_end":52},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2155},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284359,"byte_end":284366,"line_start":352,"line_end":352,"column_start":54,"column_end":61},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":5665},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284539,"byte_end":284546,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":5665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":284790,"byte_end":284797,"line_start":368,"line_end":368,"column_start":45,"column_end":52},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":5665},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":285337,"byte_end":285344,"line_start":390,"line_end":390,"column_start":52,"column_end":59},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":5665},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":286219,"byte_end":286227,"line_start":425,"line_end":425,"column_start":60,"column_end":68},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2215},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":287037,"byte_end":287052,"line_start":457,"line_end":457,"column_start":41,"column_end":56},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2232},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":288502,"byte_end":288517,"line_start":520,"line_end":520,"column_start":22,"column_end":37},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":2255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":288699,"byte_end":288714,"line_start":526,"line_end":526,"column_start":47,"column_end":62},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2255},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/map_with.rs","byte_start":289570,"byte_end":289585,"line_start":559,"line_end":559,"column_start":56,"column_end":71},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":2255},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":298963,"byte_end":298975,"line_start":5,"line_end":5,"column_start":25,"column_end":37},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2302},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":299319,"byte_end":299331,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2302},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":299687,"byte_end":299699,"line_start":45,"line_end":45,"column_start":34,"column_end":46},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2302},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/noop.rs","byte_start":299893,"byte_end":299904,"line_start":57,"line_end":57,"column_start":22,"column_end":33},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2324},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":300872,"byte_end":300876,"line_start":34,"line_end":34,"column_start":36,"column_end":40},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":6556},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/once.rs","byte_start":301162,"byte_end":301166,"line_start":49,"line_end":49,"column_start":43,"column_end":47},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":6556},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302353,"byte_end":302357,"line_start":23,"line_end":23,"column_start":19,"column_end":23},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":6574},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302515,"byte_end":302519,"line_start":32,"line_end":32,"column_start":10,"column_end":14},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":6574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302629,"byte_end":302638,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":6565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":302833,"byte_end":302842,"line_start":49,"line_end":49,"column_start":30,"column_end":39},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":6565},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":303352,"byte_end":303361,"line_start":72,"line_end":72,"column_start":37,"column_end":46},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":6565},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":304061,"byte_end":304069,"line_start":102,"line_end":102,"column_start":45,"column_end":53},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":2375},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":304778,"byte_end":304795,"line_start":131,"line_end":131,"column_start":26,"column_end":43},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":2384},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":305893,"byte_end":305906,"line_start":183,"line_end":183,"column_start":26,"column_end":39},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":306253,"byte_end":306266,"line_start":202,"line_end":202,"column_start":37,"column_end":50},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":306517,"byte_end":306530,"line_start":215,"line_end":215,"column_start":35,"column_end":48},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":306841,"byte_end":306858,"line_start":232,"line_end":232,"column_start":32,"column_end":49},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":307816,"byte_end":307833,"line_start":270,"line_end":270,"column_start":41,"column_end":58},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":308312,"byte_end":308327,"line_start":294,"line_end":294,"column_start":30,"column_end":45},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2440},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/panic_fuse.rs","byte_start":309176,"byte_end":309192,"line_start":335,"line_end":335,"column_start":31,"column_end":47},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2460},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":310936,"byte_end":310941,"line_start":46,"line_end":46,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":2490}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311101,"byte_end":311102,"line_start":51,"line_end":51,"column_start":45,"column_end":46},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2493},"to":{"krate":0,"index":2490}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":311612,"byte_end":311622,"line_start":71,"line_end":71,"column_start":50,"column_end":60},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":6581},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":312620,"byte_end":312640,"line_start":107,"line_end":107,"column_start":41,"column_end":61},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2500},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/par_bridge.rs","byte_start":312932,"byte_end":312952,"line_start":118,"line_end":118,"column_start":60,"column_end":80},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2500},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":316760,"byte_end":316775,"line_start":23,"line_end":23,"column_start":31,"column_end":46},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2530},"to":{"krate":2,"index":1926}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":316797,"byte_end":316812,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":316961,"byte_end":316976,"line_start":33,"line_end":33,"column_start":28,"column_end":43},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2530},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":317526,"byte_end":317541,"line_start":60,"line_end":60,"column_start":37,"column_end":52},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":2530},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":317773,"byte_end":317788,"line_start":73,"line_end":73,"column_start":24,"column_end":39},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":2530},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/product.rs","byte_start":317973,"byte_end":317986,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":2555},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319001,"byte_end":319015,"line_start":23,"line_end":23,"column_start":26,"column_end":40},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":2575},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319057,"byte_end":319071,"line_start":25,"line_end":25,"column_start":27,"column_end":41},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":2575},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319173,"byte_end":319187,"line_start":31,"line_end":31,"column_start":36,"column_end":50},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2575},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319714,"byte_end":319728,"line_start":57,"line_end":57,"column_start":45,"column_end":59},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2575},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":319977,"byte_end":319991,"line_start":72,"line_end":72,"column_start":35,"column_end":49},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2575},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/reduce.rs","byte_start":320232,"byte_end":320244,"line_start":86,"line_end":86,"column_start":30,"column_end":42},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2614},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":321646,"byte_end":321652,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":6590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322504,"byte_end":322510,"line_start":57,"line_end":57,"column_start":30,"column_end":36},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":6590},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":322960,"byte_end":322974,"line_start":79,"line_end":79,"column_start":45,"column_end":59},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2647},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":324025,"byte_end":324032,"line_start":126,"line_end":126,"column_start":30,"column_end":37},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":6599},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":324350,"byte_end":324357,"line_start":144,"line_end":144,"column_start":37,"column_end":44},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":6599},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":324969,"byte_end":324984,"line_start":176,"line_end":176,"column_start":36,"column_end":51},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2671},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":325781,"byte_end":325785,"line_start":210,"line_end":210,"column_start":29,"column_end":33},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":326163,"byte_end":326167,"line_start":229,"line_end":229,"column_start":40,"column_end":44},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/repeat.rs","byte_start":326296,"byte_end":326300,"line_start":236,"line_end":236,"column_start":38,"column_end":42},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":2681},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":326879,"byte_end":326882,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":6609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":327064,"byte_end":327067,"line_start":26,"line_end":26,"column_start":30,"column_end":33},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":6609},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":327402,"byte_end":327405,"line_start":44,"line_end":44,"column_start":37,"column_end":40},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":6609},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":327975,"byte_end":327983,"line_start":68,"line_end":68,"column_start":45,"column_end":53},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":2716},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/rev.rs","byte_start":328498,"byte_end":328509,"line_start":92,"line_end":92,"column_start":22,"column_end":33},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":2726},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329714,"byte_end":329718,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":6618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":329951,"byte_end":329955,"line_start":29,"line_end":29,"column_start":30,"column_end":34},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":6618},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":330290,"byte_end":330294,"line_start":47,"line_end":47,"column_start":37,"column_end":41},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":6618},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/skip.rs","byte_start":330875,"byte_end":330883,"line_start":73,"line_end":73,"column_start":45,"column_end":53},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":2759},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335716,"byte_end":335721,"line_start":124,"line_end":124,"column_start":29,"column_end":34},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":6628},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":335901,"byte_end":335906,"line_start":130,"line_end":130,"column_start":33,"column_end":38},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":6628},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/splitter.rs","byte_start":336394,"byte_end":336407,"line_start":154,"line_end":154,"column_start":38,"column_end":51},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":2788},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337327,"byte_end":337338,"line_start":23,"line_end":23,"column_start":31,"column_end":42},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2815},"to":{"krate":2,"index":1926}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337360,"byte_end":337371,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337512,"byte_end":337523,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2815},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":337990,"byte_end":338001,"line_start":56,"line_end":56,"column_start":37,"column_end":48},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2815},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":338217,"byte_end":338228,"line_start":69,"line_end":69,"column_start":24,"column_end":35},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2815},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/sum.rs","byte_start":338401,"byte_end":338410,"line_start":82,"line_end":82,"column_start":26,"column_end":35},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2840},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339395,"byte_end":339399,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":6637},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339632,"byte_end":339636,"line_start":28,"line_end":28,"column_start":30,"column_end":34},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":6637},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":339971,"byte_end":339975,"line_start":46,"line_end":46,"column_start":37,"column_end":41},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":6637},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/take.rs","byte_start":340538,"byte_end":340546,"line_start":72,"line_end":72,"column_start":45,"column_end":53},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2872},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341060,"byte_end":341067,"line_start":8,"line_end":8,"column_start":19,"column_end":26},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":6647},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":341969,"byte_end":341976,"line_start":39,"line_end":39,"column_start":55,"column_end":62},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":6647},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":342172,"byte_end":342179,"line_start":45,"line_end":45,"column_start":40,"column_end":47},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":6647},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":342875,"byte_end":342890,"line_start":75,"line_end":75,"column_start":42,"column_end":57},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2910},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":343781,"byte_end":343796,"line_start":111,"line_end":111,"column_start":51,"column_end":66},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2910},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":344314,"byte_end":344327,"line_start":136,"line_end":136,"column_start":36,"column_end":49},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2942},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345055,"byte_end":345066,"line_start":167,"line_end":167,"column_start":15,"column_end":26},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":6662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":345907,"byte_end":345918,"line_start":196,"line_end":196,"column_start":56,"column_end":67},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":6662},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":346199,"byte_end":346210,"line_start":208,"line_end":208,"column_start":36,"column_end":47},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":6662},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":346820,"byte_end":346839,"line_start":236,"line_end":236,"column_start":38,"column_end":57},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2977},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_fold.rs","byte_start":347802,"byte_end":347821,"line_start":276,"line_end":276,"column_start":47,"column_end":66},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2977},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":348897,"byte_end":348914,"line_start":29,"line_end":29,"column_start":26,"column_end":43},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":3017},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":348956,"byte_end":348973,"line_start":31,"line_end":31,"column_start":27,"column_end":44},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":3017},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":349075,"byte_end":349092,"line_start":37,"line_end":37,"column_start":36,"column_end":53},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":349706,"byte_end":349723,"line_start":64,"line_end":64,"column_start":45,"column_end":62},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":349990,"byte_end":350007,"line_start":79,"line_end":79,"column_start":35,"column_end":52},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3017},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce.rs","byte_start":350483,"byte_end":350498,"line_start":98,"line_end":98,"column_start":30,"column_end":45},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3057},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":351838,"byte_end":351859,"line_start":26,"line_end":26,"column_start":22,"column_end":43},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":3083},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":351893,"byte_end":351914,"line_start":28,"line_end":28,"column_start":23,"column_end":44},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":3083},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":352008,"byte_end":352029,"line_start":34,"line_end":34,"column_start":32,"column_end":53},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":352608,"byte_end":352629,"line_start":60,"line_end":60,"column_start":41,"column_end":62},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":352866,"byte_end":352887,"line_start":74,"line_end":74,"column_start":39,"column_end":60},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":3083},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/try_reduce_with.rs","byte_start":353542,"byte_end":353561,"line_start":97,"line_end":97,"column_start":30,"column_end":49},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":3116},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":354769,"byte_end":354773,"line_start":7,"line_end":7,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":1938},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":354776,"byte_end":354780,"line_start":7,"line_end":7,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1926},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":357457,"byte_end":357462,"line_start":94,"line_end":94,"column_start":44,"column_end":49},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":358343,"byte_end":358352,"line_start":130,"line_end":130,"column_start":27,"column_end":36},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":3180},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":359389,"byte_end":359401,"line_start":172,"line_end":172,"column_start":33,"column_end":45},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":3198},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":360032,"byte_end":360038,"line_start":200,"line_end":200,"column_start":45,"column_end":51},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":3211},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":361439,"byte_end":361445,"line_start":252,"line_end":252,"column_start":42,"column_end":48},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":3228},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":362382,"byte_end":362395,"line_start":292,"line_end":292,"column_start":41,"column_end":54},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":3246},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":363658,"byte_end":363671,"line_start":338,"line_end":338,"column_start":50,"column_end":63},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":3246},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":364335,"byte_end":364346,"line_start":367,"line_end":367,"column_start":39,"column_end":50},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":3274},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":365087,"byte_end":365099,"line_start":400,"line_end":400,"column_start":40,"column_end":52},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":3292},"to":{"krate":0,"index":183}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/unzip.rs","byte_start":366183,"byte_end":366191,"line_start":446,"line_end":446,"column_start":38,"column_end":46},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":3317},"to":{"krate":0,"index":3134}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367172,"byte_end":367178,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":6674},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367338,"byte_end":367344,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":6674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":367556,"byte_end":367562,"line_start":36,"line_end":36,"column_start":33,"column_end":39},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":6674},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":368024,"byte_end":368030,"line_start":56,"line_end":56,"column_start":40,"column_end":46},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":6674},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":368771,"byte_end":368779,"line_start":87,"line_end":87,"column_start":48,"column_end":56},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":3356},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":369456,"byte_end":369470,"line_start":115,"line_end":115,"column_start":29,"column_end":43},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":3368},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":370730,"byte_end":370744,"line_start":171,"line_end":171,"column_start":16,"column_end":30},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":3386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":370891,"byte_end":370905,"line_start":177,"line_end":177,"column_start":35,"column_end":49},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":3386},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":371651,"byte_end":371665,"line_start":207,"line_end":207,"column_start":44,"column_end":58},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":3386},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":372186,"byte_end":372198,"line_start":233,"line_end":233,"column_start":33,"column_end":45},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":3415},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":373144,"byte_end":373153,"line_start":277,"line_end":277,"column_start":25,"column_end":34},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":6683},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":373903,"byte_end":373912,"line_start":310,"line_end":310,"column_start":34,"column_end":43},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":6683},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/update.rs","byte_start":374016,"byte_end":374025,"line_start":317,"line_end":317,"column_start":36,"column_end":45},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":6683},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":374838,"byte_end":374847,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":6696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":375037,"byte_end":375046,"line_start":28,"line_end":28,"column_start":33,"column_end":42},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":6696},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":375676,"byte_end":375693,"line_start":56,"line_end":56,"column_start":40,"column_end":57},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":3470},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":376493,"byte_end":376510,"line_start":89,"line_end":89,"column_start":49,"column_end":66},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":3470},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/while_some.rs","byte_start":376913,"byte_end":376928,"line_start":111,"line_end":111,"column_start":38,"column_end":53},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":3491},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378582,"byte_end":378585,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":6705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":378808,"byte_end":378811,"line_start":30,"line_end":30,"column_start":33,"column_end":36},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":6705},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":379195,"byte_end":379198,"line_start":49,"line_end":49,"column_start":40,"column_end":43},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":6705},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":379858,"byte_end":379867,"line_start":79,"line_end":79,"column_start":54,"column_end":63},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":3534},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":380488,"byte_end":380497,"line_start":102,"line_end":102,"column_start":54,"column_end":63},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip.rs","byte_start":381154,"byte_end":381165,"line_start":129,"line_end":129,"column_start":45,"column_end":56},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":3558},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382574,"byte_end":382579,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":6718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":382849,"byte_end":382854,"line_start":31,"line_end":31,"column_start":33,"column_end":38},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":6718},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/zip_eq.rs","byte_start":383246,"byte_end":383251,"line_start":50,"line_end":50,"column_start":40,"column_end":45},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":6718},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384348,"byte_end":384354,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":6730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384561,"byte_end":384567,"line_start":32,"line_end":32,"column_start":30,"column_end":36},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":6730},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":384902,"byte_end":384908,"line_start":50,"line_end":50,"column_start":37,"column_end":43},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":6730},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":385590,"byte_end":385598,"line_start":79,"line_end":79,"column_start":45,"column_end":53},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":3670},"to":{"krate":0,"index":153}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/step_by.rs","byte_start":386279,"byte_end":386293,"line_start":108,"line_end":108,"column_start":22,"column_end":36},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":3681},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":31411,"byte_end":31412,"line_start":269,"line_end":269,"column_start":67,"column_end":68},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":3706},"to":{"krate":0,"index":3699}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":32920,"byte_end":32921,"line_start":316,"line_end":316,"column_start":70,"column_end":71},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":3717},"to":{"krate":0,"index":3710}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33810,"byte_end":33815,"line_start":342,"line_end":342,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":33818,"byte_end":33822,"line_start":342,"line_end":342,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1926},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91556,"byte_end":91557,"line_start":2071,"line_end":2071,"column_start":52,"column_end":53},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":3921},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":91924,"byte_end":91940,"line_start":2085,"line_end":2085,"column_start":36,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":3721},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116338,"byte_end":116344,"line_start":2859,"line_end":2859,"column_start":21,"column_end":27},"kind":{"Impl":{"id":393}},"from":{"krate":2,"index":29999},"to":{"krate":0,"index":3997}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/iter/mod.rs","byte_start":116669,"byte_end":116675,"line_start":2876,"line_end":2876,"column_start":24,"column_end":30},"kind":{"Impl":{"id":394}},"from":{"krate":2,"index":30120},"to":{"krate":0,"index":3997}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388092,"byte_end":388098,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"kind":{"Impl":{"id":395}},"from":{"krate":2,"index":29999},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388271,"byte_end":388279,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":6743},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":388574,"byte_end":388582,"line_start":50,"line_end":50,"column_start":43,"column_end":51},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":6743},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":389739,"byte_end":389743,"line_start":91,"line_end":91,"column_start":29,"column_end":33},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":6752},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":391219,"byte_end":391233,"line_start":150,"line_end":150,"column_start":28,"column_end":42},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":4058},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/option.rs","byte_start":391845,"byte_end":391851,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"kind":{"Impl":{"id":404}},"from":{"krate":2,"index":29999},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394674,"byte_end":394679,"line_start":50,"line_end":50,"column_start":34,"column_end":39},"kind":{"Impl":{"id":405}},"from":{"krate":2,"index":28608},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range.rs","byte_start":394956,"byte_end":394968,"line_start":66,"line_end":66,"column_start":26,"column_end":38},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":4098},"to":{"krate":2,"index":4898}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":403439,"byte_end":403443,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":6995},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/range_inclusive.rs","byte_start":404017,"byte_end":404031,"line_start":63,"line_end":63,"column_start":34,"column_end":48},"kind":{"Impl":{"id":408}},"from":{"krate":2,"index":28674},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408476,"byte_end":408482,"line_start":20,"line_end":20,"column_start":43,"column_end":49},"kind":{"Impl":{"id":409}},"from":{"krate":2,"index":30120},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":408916,"byte_end":408920,"line_start":42,"line_end":42,"column_start":29,"column_end":33},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":7110},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/result.rs","byte_start":410173,"byte_end":410179,"line_start":93,"line_end":93,"column_start":54,"column_end":60},"kind":{"Impl":{"id":417}},"from":{"krate":2,"index":30120},"to":{"krate":0,"index":3988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":447579,"byte_end":447589,"line_start":32,"line_end":32,"column_start":18,"column_end":28},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":4178},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":450539,"byte_end":450545,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":4189},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":450794,"byte_end":450807,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":4195},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":454533,"byte_end":454542,"line_start":217,"line_end":217,"column_start":22,"column_end":31},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":4205},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mergesort.rs","byte_start":465984,"byte_end":465989,"line_start":521,"line_end":521,"column_start":22,"column_end":27},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":4227},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/quicksort.rs","byte_start":475160,"byte_end":475171,"line_start":21,"line_end":21,"column_start":18,"column_end":29},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":4252},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/quicksort.rs","byte_start":475401,"byte_end":475407,"line_start":34,"line_end":34,"column_start":18,"column_end":24},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":4259},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/quicksort.rs","byte_start":475614,"byte_end":475624,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":4265},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":428847,"byte_end":428851,"line_start":506,"line_end":506,"column_start":32,"column_end":36},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":7178},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":428978,"byte_end":428982,"line_start":512,"line_end":512,"column_start":51,"column_end":55},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":7178},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":429308,"byte_end":429312,"line_start":527,"line_end":527,"column_start":58,"column_end":62},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":7178},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":429815,"byte_end":429827,"line_start":551,"line_end":551,"column_start":43,"column_end":55},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":4420},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430386,"byte_end":430392,"line_start":572,"line_end":572,"column_start":32,"column_end":38},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":7186},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430521,"byte_end":430527,"line_start":578,"line_end":578,"column_start":51,"column_end":57},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":7186},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":430855,"byte_end":430861,"line_start":593,"line_end":593,"column_start":58,"column_end":64},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":7186},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":431484,"byte_end":431498,"line_start":621,"line_end":621,"column_start":43,"column_end":57},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":4450},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432364,"byte_end":432375,"line_start":653,"line_end":653,"column_start":22,"column_end":33},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":7195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432662,"byte_end":432673,"line_start":662,"line_end":662,"column_start":32,"column_end":43},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":7195},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":432807,"byte_end":432818,"line_start":668,"line_end":668,"column_start":51,"column_end":62},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":7195},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":433146,"byte_end":433157,"line_start":683,"line_end":683,"column_start":58,"column_end":69},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":7195},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":433777,"byte_end":433796,"line_start":711,"line_end":711,"column_start":43,"column_end":62},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":4485},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":434638,"byte_end":434645,"line_start":742,"line_end":742,"column_start":32,"column_end":39},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":7205},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":434775,"byte_end":434782,"line_start":748,"line_end":748,"column_start":51,"column_end":58},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":7205},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":435110,"byte_end":435117,"line_start":763,"line_end":763,"column_start":58,"column_end":65},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":7205},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":435791,"byte_end":435806,"line_start":792,"line_end":792,"column_start":43,"column_end":58},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":4516},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":436681,"byte_end":436688,"line_start":823,"line_end":823,"column_start":51,"column_end":58},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":7214},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":437018,"byte_end":437025,"line_start":838,"line_end":838,"column_start":58,"column_end":65},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":7214},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":437538,"byte_end":437553,"line_start":862,"line_end":862,"column_start":43,"column_end":58},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":4543},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":438192,"byte_end":438201,"line_start":886,"line_end":886,"column_start":51,"column_end":60},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":7222},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":438533,"byte_end":438542,"line_start":901,"line_end":901,"column_start":58,"column_end":67},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":7222},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":439175,"byte_end":439192,"line_start":929,"line_end":929,"column_start":43,"column_end":60},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":4569},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":440088,"byte_end":440102,"line_start":961,"line_end":961,"column_start":22,"column_end":36},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":7231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441517,"byte_end":441531,"line_start":993,"line_end":993,"column_start":51,"column_end":65},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":7231},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":441863,"byte_end":441877,"line_start":1008,"line_end":1008,"column_start":58,"column_end":72},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":7231},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":442507,"byte_end":442529,"line_start":1036,"line_end":1036,"column_start":43,"column_end":65},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":4602},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443359,"byte_end":443364,"line_start":1066,"line_end":1066,"column_start":36,"column_end":41},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":4614},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443547,"byte_end":443552,"line_start":1075,"line_end":1075,"column_start":36,"column_end":41},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":4614},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":443748,"byte_end":443753,"line_start":1081,"line_end":1081,"column_start":40,"column_end":45},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":4614},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":445240,"byte_end":445248,"line_start":1142,"line_end":1142,"column_start":36,"column_end":44},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":4648},"to":{"krate":2,"index":6202}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/slice/mod.rs","byte_start":445473,"byte_end":445481,"line_start":1150,"line_end":1150,"column_start":40,"column_end":48},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":4648},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516677,"byte_end":516682,"line_start":283,"line_end":283,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1931},"to":{"krate":0,"index":4704}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516685,"byte_end":516689,"line_start":283,"line_end":283,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1938},"to":{"krate":0,"index":4704}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":516692,"byte_end":516696,"line_start":283,"line_end":283,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1926},"to":{"krate":0,"index":4704}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":518536,"byte_end":518538,"line_start":350,"line_end":350,"column_start":54,"column_end":56},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":4736},"to":{"krate":0,"index":4704}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":519781,"byte_end":519786,"line_start":403,"line_end":403,"column_start":32,"column_end":37},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":7244},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":520046,"byte_end":520059,"line_start":414,"line_end":414,"column_start":33,"column_end":46},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":4749},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":520858,"byte_end":520869,"line_start":448,"line_end":448,"column_start":32,"column_end":43},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":7253},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":521220,"byte_end":521239,"line_start":463,"line_end":463,"column_start":33,"column_end":52},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":4763},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":522211,"byte_end":522216,"line_start":503,"line_end":503,"column_start":32,"column_end":37},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":7262},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":522474,"byte_end":522487,"line_start":514,"line_end":514,"column_start":33,"column_end":46},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":4778},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":523244,"byte_end":523255,"line_start":547,"line_end":547,"column_start":32,"column_end":43},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":7271},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":523520,"byte_end":523539,"line_start":558,"line_end":558,"column_start":33,"column_end":52},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":4792},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":524280,"byte_end":524285,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":7280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":524435,"byte_end":524440,"line_start":594,"line_end":594,"column_start":44,"column_end":49},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":7280},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526093,"byte_end":526108,"line_start":654,"line_end":654,"column_start":23,"column_end":38},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":7293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526262,"byte_end":526285,"line_start":660,"line_end":660,"column_start":36,"column_end":59},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":4826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526593,"byte_end":526608,"line_start":669,"line_end":669,"column_start":44,"column_end":59},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":7293},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":526956,"byte_end":526979,"line_start":681,"line_end":681,"column_start":58,"column_end":81},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":4826},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":527943,"byte_end":527948,"line_start":721,"line_end":721,"column_start":32,"column_end":37},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":7306},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":528542,"byte_end":528557,"line_start":746,"line_end":746,"column_start":32,"column_end":47},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":7316},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":529222,"byte_end":529229,"line_start":774,"line_end":774,"column_start":44,"column_end":51},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":7326},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":529606,"byte_end":529621,"line_start":789,"line_end":789,"column_start":51,"column_end":66},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":4868},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":530658,"byte_end":530670,"line_start":831,"line_end":831,"column_start":44,"column_end":56},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":7339},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/str.rs","byte_start":531083,"byte_end":531103,"line_start":847,"line_end":847,"column_start":51,"column_end":71},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":4888},"to":{"krate":0,"index":190}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532279,"byte_end":532282,"line_start":17,"line_end":17,"column_start":40,"column_end":43},"kind":{"Impl":{"id":481}},"from":{"krate":5,"index":4232},"to":{"krate":0,"index":3695}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532455,"byte_end":532463,"line_start":26,"line_end":26,"column_start":36,"column_end":44},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":7352},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":532760,"byte_end":532768,"line_start":41,"line_end":41,"column_start":43,"column_end":51},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":7352},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":533883,"byte_end":533894,"line_start":79,"line_end":79,"column_start":43,"column_end":54},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":4930},"to":{"krate":0,"index":158}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":534558,"byte_end":534569,"line_start":99,"line_end":99,"column_start":39,"column_end":50},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":4930},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":534931,"byte_end":534941,"line_start":114,"line_end":114,"column_start":36,"column_end":46},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":4945},"to":{"krate":2,"index":4988}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":535263,"byte_end":535273,"line_start":128,"line_end":128,"column_start":47,"column_end":57},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":4945},"to":{"krate":2,"index":4920}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":535478,"byte_end":535488,"line_start":135,"line_end":135,"column_start":45,"column_end":55},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":4945},"to":{"krate":2,"index":4943}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/vec.rs","byte_start":535594,"byte_end":535604,"line_start":141,"line_end":141,"column_start":32,"column_end":42},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":4945},"to":{"krate":2,"index":2121}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/par_either.rs","byte_start":536673,"byte_end":536679,"line_start":6,"line_end":6,"column_start":33,"column_end":39},"kind":{"Impl":{"id":490}},"from":{"krate":15,"index":161},"to":{"krate":0,"index":3721}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/par_either.rs","byte_start":537199,"byte_end":537205,"line_start":28,"line_end":28,"column_start":40,"column_end":46},"kind":{"Impl":{"id":491}},"from":{"krate":15,"index":161},"to":{"krate":0,"index":3925}},{"span":{"file_name":"/home/hskang9/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.3.1/src/par_either.rs","byte_start":537999,"byte_end":538005,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"kind":{"Impl":{"id":492}},"from":{"krate":15,"index":161},"to":{"krate":0,"index":3992}}]}